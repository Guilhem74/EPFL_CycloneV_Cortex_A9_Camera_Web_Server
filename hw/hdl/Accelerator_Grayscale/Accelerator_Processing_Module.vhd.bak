-- Accelerator_Processing_Module.vhd
--
-- Author: Guilhem Azzano and Pierre Fourcade

--------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- ENTITY ----------------------------------------------------------------------------

entity Accelerator_Processing_Module is
PORT (	Clk    : in std_logic;
			nReset : in std_logic;
			-- Processing Module - Slave interface
			Enable_Processing : in std_logic;
			-- Processing Module - FIFO Master Read
			Empty_FIFO     : in  std_logic;
			Read_Data_FIFO : in  std_logic_vector(15 downto 0);
			Read_FIFO      : out std_logic;
			-- Processing Module - FIFO Master Write
			Full_FIFO       : in  std_logic;
			Write_Data_FiFO : out std_logic_vector(15 downto 0);
			Write_FIFO      : out std_logic;
);
end entity Accelerator_Processing_Module;

--------------------------------------------------------------------------------------

-- ARCHITECTURE ----------------------------------------------------------------------

architecture Behavioral of Accelerator_Processing_Module is
	
	-- State
	--------
	-- The different states and the FSM of this architecture are described in the report.
	type state is (Init, Load_Pixel_Data, Greyscale_Processing, Write_Pixel_Data, Done)
	signal state_reg, state_next : state;
	
	-- Register
	-----------
	signal R : natural range 0 to 32;
	signal G : natural range 0 to 64;
	signal B : natural range 0 to 32;
	
	-- Constant
	-----------
	constant R_factor : 
	
	BEGIN

		-------------------------------------------------------------------
		
		Next_State_Logic : process(state_reg)
		
			begin
				
				state_next <= state_reg;
				case state_reg is
					-- Init --------------------
					when Init =>
						if Enable_Processing = '1' then
							state_next <= Load_Pixel_Data;
						end if;
					-- Load_Pixel_Data ---------
					when Load_Pixel_Data =>
						state_next <= Greyscale_Processing;
					-- Greyscale_Processing ----
					when Greyscale_Processing =>
						state_next <= Write_Pixel_Data;
					-- Write_Pixel_Data --------
					when Write_Pixel_Data =>
						if Enable_Processing = '0' then
							state_next <= Done;
						else
							state_next <= Load_Pixel_Data;
						end if;
					-- Done --------------------
					when Done =>
						state_next <= Init;
					-- Others ------------------
					when others =>
						null;
				end case;
														
		end process Next_State_Logic;
					
		-------------------------------------------------------------------			
		
		Register_Logic : process(nReset, Clk)
		
			begin
			
				if nReset = '0' then

		end process Register_Logic;

		-------------------------------------------------------------------
		
		Combinational_Logic : process()
		
			begin
				
				-- Usual output values --------
				Read_FIFO  <= '0';
				Write_FIFO <= '0';
				case state_reg is
					-- Init --------------------
					when Init =>
						R <= 0;
						G <= 0;
						B <= 0;
						if (Enable_Processing = '1') and (Empty_FIFO = '0') then
							Read_FIFO <= '1';
						end if;
					-- Load_Pixel_Data ---------
					when Load_Pixel_Data =>
						R <= to_integer(unsigned(Read_Data_FIFO(15 downto 11));
						G <= to_integer(unsigned(Read_Data_FIFO(10 downto 5));
						B <= to_integer(unsigned(Read_Data_FIFO(4  downto 0));
					-- Greyscale_Processing ----
					when Greyscale_Processing =>
						
					-- Write_Pixel_Data --------
					when Write_Pixel_Data =>
						
					-- Done --------------------
					when Done =>
							
					-- Others ------------------
					when others =>
						null;

				
		end process Combinational_Logic;											
		
		-------------------------------------------------------------------
				
end architecture Behavioral;