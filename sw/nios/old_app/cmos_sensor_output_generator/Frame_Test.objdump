
Frame_Test.elf:     file format elf32-littlenios2
Frame_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00017a9c memsz 0x00017a9c flags r-x
    LOAD off    0x00018abc vaddr 0x10117abc paddr 0x10119618 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x0001b174 vaddr 0x1011b174 paddr 0x1011b174 align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001717c  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006fc  101173c0  101173c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10117abc  10119618  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  1011b174  1011b174  0001b174  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  1011b2f8  1011b2f8  0001a618  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001a618  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013d8  00000000  00000000  0001a640  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000344bd  00000000  00000000  0001ba18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cd03  00000000  00000000  0004fed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010858  00000000  00000000  0005cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003408  00000000  00000000  0006d430  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004803  00000000  00000000  00070838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001de3b  00000000  00000000  0007503b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00092e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d18  00000000  00000000  00092ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00099026  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00099029  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00099035  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00099036  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00099037  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00099042  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009904d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00099058  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  00099062  2**0
                  CONTENTS, READONLY
 26 .jdi          0000512a  00000000  00000000  0009908b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00288a9a  00000000  00000000  0009e1b5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
101173c0 l    d  .rodata	00000000 .rodata
10117abc l    d  .rwdata	00000000 .rwdata
1011b174 l    d  .bss	00000000 .bss
1011b2f8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Guilhem/Lab4.0_Camera/sw/nios/application/Frame_Test_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008ac l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000cc write_frame_line_blank_reg
101005f8 l     F .text	000000cc write_line_line_blank_reg
101006c4 l     F .text	000000cc write_line_frame_blank_reg
10100790 l     F .text	0000002c read_frame_width_reg
101007bc l     F .text	00000030 read_frame_height_reg
101007ec l     F .text	00000030 read_frame_frame_blank_reg
1010081c l     F .text	00000030 read_frame_line_blank_reg
1010084c l     F .text	00000030 read_line_line_blank_reg
1010087c l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 Camera_function.c
00000000 l    df *ABS*	00000000 LCD_function.c
00000000 l    df *ABS*	00000000 Memory_Access.c
10117654 l     O .rodata	00000010 __func__.3796
10117664 l     O .rodata	00000016 __func__.3808
00000000 l    df *ABS*	00000000 function_i2c.c
10101e18 l     F .text	00000154 TRDB_D5M_log2
10101f6c l     F .text	0000004c TRDB_D5M_shift_amount
10101fb8 l     F .text	00000060 TRDB_D5M_READ
10102018 l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 main.c
1010251c l     F .text	00000154 TRDB_D5M_log2
10102670 l     F .text	0000004c TRDB_D5M_shift_amount
101026bc l     F .text	00000060 TRDB_D5M_READ
1010271c l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 i2c.c
101027fc l     F .text	00000034 i2c_usleep
10102830 l     F .text	00000044 wait_end_of_transfer
10102874 l     F .text	00000070 set_data_control
101028e4 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
101035e4 l     F .text	00000008 __fp_unlock
101035f8 l     F .text	0000019c __sinit.part.1
10103794 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10117abc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
101053dc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
101177ba l     O .rodata	00000010 zeroes.4389
101177ca l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
101177da l     O .rodata	00000010 zeroes.4404
10109d0c l     F .text	000000bc __sbprintf
101177ea l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
10109fe8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10118308 l     O .rwdata	00000020 lc_ctype_charset
101182e8 l     O .rwdata	00000020 lc_message_charset
10118328 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10117818 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1011794c l     O .rodata	00000010 blanks.4332
1011793c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
1010f16c l     F .text	000000fc __sprint_r.part.0
1011796c l     O .rodata	00000010 blanks.4348
1011795c l     O .rodata	00000010 zeroes.4349
101106f8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10113f38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10114044 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
101140a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
101143a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
10114484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
101145f0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
101146dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
101148b0 l     F .text	0000003c alt_get_errno
101148ec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
10114d6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
101195c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1011518c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101152c0 l     F .text	00000034 alt_dev_reg
10118508 l     O .rwdata	00001060 jtag_uart_0
10119568 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
101155a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
101157b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
101195cc l     O .rwdata	00000009 hcinfo.2538
101195d8 l     O .rwdata	0000000a hcinfo.2551
101195e4 l     O .rwdata	00000009 hcinfo.2560
101195f0 l     O .rwdata	0000000a hcinfo.2573
101195fc l     O .rwdata	0000000a hcinfo.2586
10119608 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10116538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10116c68 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
1011b1bc g     O .bss	00000004 alt_instruction_exception_handler
10100ba8 g     F .text	00000074 Camera_Acquisition_Module_SETUP_Length_Frame
1010d1d0 g     F .text	00000074 _mprec_log10
1010d2bc g     F .text	0000008c __any_on
1010be34 g     F .text	00000054 _isatty_r
10117824 g     O .rodata	00000028 __mprec_tinytens
101147ec g     F .text	0000007c alt_main
1010528c g     F .text	000000c0 _puts_r
1011b1f8 g     O .bss	00000100 alt_irq
1010bf64 g     F .text	00000060 _lseek_r
10119618 g       *ABS*	00000000 __flash_rwdata_start
1010b870 g     F .text	000000ac __sflags
10112a64 g     F .text	00000088 .hidden __eqdf2
1010bdd8 g     F .text	0000005c _gettimeofday_r
1011b2f8 g       *ABS*	00000000 __alt_heap_start
1010dc24 g     F .text	0000005c _kill_r
10105250 g     F .text	0000003c printf
10110bd8 g     F .text	0000009c _wcrtomb_r
1010d9ec g     F .text	00000084 _signal_r
101057bc g     F .text	0000005c __sseek
10103934 g     F .text	00000010 __sinit
10110a80 g     F .text	00000140 __swbuf_r
1010be88 g     F .text	0000007c _setlocale_r
1010379c g     F .text	00000068 __sfmoreglue
1011488c g     F .text	00000024 __malloc_unlock
10101648 g     F .text	00000070 LCD_Write_Command
10115de8 g     F .text	0000011c alt_hostfs_open
1010c1f0 g     F .text	0000015c memmove
10100de8 g     F .text	000001cc Capture_Image_Computer
101016b8 g     F .text	00000070 LCD_Write_Data
1010391c g     F .text	00000018 _cleanup
1010c34c g     F .text	000000a8 _Balloc
10112aec g     F .text	000000dc .hidden __gtdf2
10116da8 g     F .text	00000024 altera_nios2_gen2_irq_init
10102a58 g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10101d04 g     F .text	00000114 Quick_Test_Memory_Map
101043ec g     F .text	0000005c _fstat_r
1011b178 g     O .bss	00000004 errno
10105738 g     F .text	00000008 __seofread
10102220 g     F .text	00000048 init_I2C
1010df30 g     F .text	0000123c ___svfiprintf_internal_r
1010106c g     F .text	00000118 Extract_Colors
1011b1a8 g     O .bss	00000004 alt_argv
10121590 g       *ABS*	00000000 _gp
1011515c g     F .text	00000030 usleep
10114190 g     F .text	00000020 getpid
1011b1e8 g     O .bss	00000010 cmos_sensor_output_generator
10118388 g     O .rwdata	00000180 alt_fd_list
10116020 g     F .text	00000068 alt_hostfs_seek
101166d8 g     F .text	00000090 alt_find_dev
1010c0a8 g     F .text	00000148 memcpy
101035ec g     F .text	0000000c _cleanup_r
10113d50 g     F .text	000000dc .hidden __floatsidf
10102ccc g     F .text	00000194 i2c_write_array
10116870 g     F .text	00000080 alt_fs_reg
10116d2c g     F .text	0000007c alt_io_redirect
10112bc8 g     F .text	000000f4 .hidden __ltdf2
101173c0 g       *ABS*	00000000 __DTOR_END__
1010534c g     F .text	00000014 puts
10116e5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010d90c g     F .text	00000074 __fpclassifyd
1010d12c g     F .text	000000a4 __ratio
101106dc g     F .text	0000001c __vfiprintf_internal
101159a8 g     F .text	0000021c altera_avalon_jtag_uart_read
10105220 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009d4 g     F .text	00000108 cmos_sensor_output_generator_configure
10103100 g     F .text	00000064 .hidden __udivsi3
101143e0 g     F .text	000000a4 isatty
1010da70 g     F .text	000000bc _raise_r
101031bc g     F .text	00000068 __assert_func
10117874 g     O .rodata	000000c8 __mprec_tens
10100ccc g     F .text	000000d0 Camera_Acquisition_Module_Display_Registers
1010bf04 g     F .text	0000000c __locale_charset
1011b194 g     O .bss	00000008 alt_timezone
10101794 g     F .text	00000494 LCD_Configuration
10116dcc g     F .text	00000090 alt_icache_flush
1011b184 g     O .bss	00000004 __malloc_top_pad
1010121c g     F .text	000001bc Fill_Memory_RGBG
1010dc80 g     F .text	00000004 _getpid_r
101195a0 g     O .rwdata	00000004 __mb_cur_max
10102328 g     F .text	000001f4 Camera_Configuration
1010bf34 g     F .text	0000000c _localeconv_r
1010c758 g     F .text	0000003c __i2b
1010b91c g     F .text	000004bc __sfvwrite_r
1010db2c g     F .text	000000a8 __sigtramp_r
101055cc g     F .text	00000054 _sbrk_r
10115f48 g     F .text	0000006c alt_hostfs_read
1010d348 g     F .text	00000060 _read_r
101195b8 g     O .rwdata	00000004 alt_max_fd
10103238 g     F .text	000000f0 _fclose_r
101035b4 g     F .text	00000030 fflush
1011b180 g     O .bss	00000004 __malloc_max_sbrked_mem
101013d8 g     F .text	000000d4 Fill_Memory_0_1
101118d0 g     F .text	000008ac .hidden __adddf3
1010ced4 g     F .text	0000010c __b2d
10111398 g     F .text	00000538 .hidden __umoddi3
10114718 g     F .text	000000d4 lseek
10119590 g     O .rwdata	00000004 _global_impure_ptr
1010d3a8 g     F .text	00000564 _realloc_r
1011b2f8 g       *ABS*	00000000 __bss_end
10116b78 g     F .text	000000f0 alt_iic_isr_register
10115054 g     F .text	00000108 alt_tick
10110e20 g     F .text	00000578 .hidden __udivdi3
101109dc g     F .text	00000024 _fputwc_r
1011784c g     O .rodata	00000028 __mprec_bigtens
1010c53c g     F .text	00000104 __s2b
10109fd0 g     F .text	00000018 abort
10113e2c g     F .text	000000a8 .hidden __floatunsidf
1010cc14 g     F .text	00000060 __mcmp
10103954 g     F .text	00000018 __fp_lock_all
10116b2c g     F .text	0000004c alt_ic_irq_enabled
10114fb8 g     F .text	0000009c alt_alarm_stop
10100b14 g     F .text	00000038 cmos_sensor_output_generator_stop
1011b1b8 g     O .bss	00000004 alt_irq_active
10103f8c g     F .text	00000444 _fseeko_r
10115f04 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10118360 g     O .rwdata	00000028 alt_dev_null
10100b4c g     F .text	0000005c Camera_Acquisition_Module_SETUP_Address_Memory
10101728 g     F .text	0000006c LCD_Display
101164f0 g     F .text	00000048 alt_dcache_flush_all
1010c640 g     F .text	00000068 __hi0bits
10113cd0 g     F .text	00000080 .hidden __fixdfsi
10100adc g     F .text	00000038 cmos_sensor_output_generator_start
10119618 g       *ABS*	00000000 __ram_rwdata_end
101195b0 g     O .rwdata	00000008 alt_dev_list
101151c8 g     F .text	000000f8 write
10116fc0 g     F .text	000000a0 _putc_r
10117abc g       *ABS*	00000000 __ram_rodata_end
101140e0 g     F .text	000000b0 fstat
10103b14 g     F .text	00000024 fprintf
101144c0 g     F .text	00000130 kill
10102948 g     F .text	0000002c i2c_inst
10112bc8 g     F .text	000000f4 .hidden __ledf2
1010c98c g     F .text	00000140 __pow5mult
1011b190 g     O .bss	00000004 __nlocale_changed
1010f280 g     F .text	0000145c ___vfiprintf_internal_r
10103164 g     F .text	00000058 .hidden __umodsi3
101014ac g     F .text	000000e8 Fill_Test_0
1011b2f8 g       *ABS*	00000000 end
101043d0 g     F .text	0000001c fseeko
10103f70 g     F .text	0000001c fseek
101154e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
101173c0 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
10113ed4 g     F .text	00000064 .hidden __clzsi2
10115bc4 g     F .text	00000224 altera_avalon_jtag_uart_write
10103944 g     F .text	00000004 __sfp_lock_acquire
1010bfc4 g     F .text	000000e4 memchr
10107af8 g     F .text	000021f8 ___vfprintf_internal_r
10105620 g     F .text	00000058 _sprintf_r
10103c5c g     F .text	00000310 _free_r
10114b04 g     F .text	0000022c alt_printf
101008e0 g     F .text	00000078 cmos_sensor_output_generator_inst
1010bf10 g     F .text	00000010 __locale_mb_cur_max
10117240 g     F .text	00000180 __call_exitprocs
1011b18c g     O .bss	00000004 __mlocale_changed
10101184 g     F .text	00000098 Fill_Memory
10119598 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
1011b1b0 g     O .bss	00000004 _alt_tick_rate
10105378 g     F .text	00000064 rand
10100ff8 g     F .text	00000074 Convert_Pixels
1010cacc g     F .text	00000148 __lshift
1011b1b4 g     O .bss	00000004 _alt_nticks
1010dbe8 g     F .text	00000018 signal
10114da8 g     F .text	000000fc read
1011532c g     F .text	00000054 alt_sys_init
1010dd60 g     F .text	000001d0 __ssprint_r
101051c0 g     F .text	00000060 _open_r
101029d8 g     F .text	00000080 i2c_configure
10117128 g     F .text	00000118 __register_exitproc
1010c794 g     F .text	000001f8 __multiply
10115850 g     F .text	00000068 altera_avalon_jtag_uart_close
10117abc g       *ABS*	00000000 __ram_rwdata_start
101173c0 g       *ABS*	00000000 __ram_rodata_start
1011b1c0 g     O .bss	00000028 __malloc_current_mallinfo
1010cfe0 g     F .text	0000014c __d2b
10102268 g     F .text	000000c0 Write_and_Read_I2C
10115380 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101168f0 g     F .text	000000a4 alt_get_fd
10116398 g     F .text	00000158 alt_busy_sleep
1011b174 g     O .bss	00000004 i2c
10109f7c g     F .text	00000054 _close_r
10100c74 g     F .text	00000058 Camera_Acquisition_Module_Stop
10116f44 g     F .text	0000007c memcmp
10115440 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1011b2f8 g       *ABS*	00000000 __alt_stack_base
10115490 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
101045d0 g     F .text	000000cc _fwrite_r
10109e28 g     F .text	00000154 __swsetup_r
1011217c g     F .text	000008e8 .hidden __divdf3
10103804 g     F .text	00000118 __sfp
1010d244 g     F .text	00000078 __copybits
10117ee0 g     O .rwdata	00000408 __malloc_av_
10103950 g     F .text	00000004 __sinit_lock_release
10112cbc g     F .text	00000718 .hidden __muldf3
101056e4 g     F .text	00000054 __sread
10116768 g     F .text	00000108 alt_find_file
10116574 g     F .text	000000a4 alt_dev_llist_insert
10102094 g     F .text	00000088 trdb_d5m_write
10114868 g     F .text	00000024 __malloc_lock
10103aec g     F .text	00000028 _fprintf_r
10114f08 g     F .text	000000b0 sbrk
101058b8 g     F .text	000021d8 ___svfprintf_internal_r
10103558 g     F .text	0000005c _fflush_r
101107b4 g     F .text	000000c4 _calloc_r
101141b0 g     F .text	000001f4 gettimeofday
10100d9c g     F .text	0000004c Test_Camera_Memory
10103ad4 g     F .text	00000018 fopen
1011b174 g       *ABS*	00000000 __bss_start
10105098 g     F .text	00000128 memset
10102798 g     F .text	00000064 main
1011b1ac g     O .bss	00000004 alt_envp
1011b17c g     O .bss	00000004 __malloc_max_total_mem
101153e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10102b84 g     F .text	00000148 i2c_read
10110bc0 g     F .text	00000018 __swbuf
10105360 g     F .text	00000018 srand
10105818 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10103328 g     F .text	00000014 fclose
1010a1e8 g     F .text	00001688 _dtoa_r
1010488c g     F .text	0000080c _malloc_r
10110d34 g     F .text	00000030 __ascii_wctomb
10107a90 g     F .text	00000050 time
101195bc g     O .rwdata	00000004 alt_errno
10103984 g     F .text	00000020 _fiprintf_r
1010dc00 g     F .text	00000010 _init_signal
10104448 g     F .text	000000c4 _fwalk
10117060 g     F .text	000000c8 putc
10103008 g     F .text	00000084 .hidden __divsi3
10103b38 g     F .text	00000124 _malloc_trim_r
101173c0 g       *ABS*	00000000 __CTOR_END__
1010dc84 g     F .text	000000dc strcmp
101173c0 g       *ABS*	00000000 __flash_rodata_start
101173c0 g       *ABS*	00000000 __DTOR_LIST__
10100fb4 g     F .text	00000044 delay
10112a64 g     F .text	00000088 .hidden __nedf2
10101c28 g     F .text	000000dc Test_Memory_Map
101152f4 g     F .text	00000038 alt_irq_init
10114ea4 g     F .text	00000064 alt_release_fd
10105678 g     F .text	0000006c sprintf
1011797c g     O .rodata	00000100 .hidden __clz_tab
1011b188 g     O .bss	00000004 _PathLocale
10101594 g     F .text	000000b4 Fill_Test_1
10116ef8 g     F .text	00000014 atexit
10109dc8 g     F .text	00000060 _write_r
1010bf40 g     F .text	00000018 setlocale
10119594 g     O .rwdata	00000004 _impure_ptr
1011b1a4 g     O .bss	00000004 alt_argc
1010333c g     F .text	0000021c __sflush_r
10116678 g     F .text	00000060 _do_dtors
1010bf2c g     F .text	00000008 __locale_cjk_lang
10103f6c g     F .text	00000004 _fseek_r
10102974 g     F .text	00000064 i2c_init
101053f8 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
1010ce70 g     F .text	00000064 __ulp
1010396c g     F .text	00000018 __fp_unlock_all
101195a8 g     O .rwdata	00000008 alt_fs_list
10115fb4 g     F .text	0000006c alt_hostfs_write
1011b19c g     O .bss	00000008 alt_resettime
10100020 g       *ABS*	00000000 __ram_exceptions_start
1010bf58 g     F .text	0000000c localeconv
101169c8 g     F .text	00000050 alt_ic_isr_register
1010469c g     F .text	00000034 fwrite
10119618 g       *ABS*	00000000 _edata
1011b2f8 g       *ABS*	00000000 _end
10110878 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100958 g     F .text	0000007c cmos_sensor_output_generator_init
101158b8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1010211c g     F .text	000000a0 trdb_d5m_read
10116aa0 g     F .text	0000008c alt_ic_irq_disable
10105740 g     F .text	0000007c __swrite
1011959c g     O .rwdata	00000004 __malloc_trim_threshold
1010bf20 g     F .text	0000000c __locale_msgcharset
10116f0c g     F .text	00000038 exit
101039a4 g     F .text	0000003c fiprintf
10107ae0 g     F .text	00000018 _vfiprintf_r
1010450c g     F .text	000000c4 _fwalk_reent
1010cc74 g     F .text	000001fc __mdiff
1010308c g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10103948 g     F .text	00000004 __sfp_lock_release
101039e0 g     F .text	000000f4 _fopen_r
10114070 g     F .text	00000034 _exit
1011626c g     F .text	0000012c alt_alarm_start
10110dc0 g     F .text	00000060 .hidden __muldi3
101046d0 g     F .text	000001bc __smakebuf_r
10102e60 g     F .text	000001a8 i2c_read_array
10105820 g     F .text	00000098 strlen
1010d980 g     F .text	0000006c _init_signal_r
101149b0 g     F .text	00000154 open
10112aec g     F .text	000000dc .hidden __gedf2
10114d30 g     F .text	0000003c alt_putchar
10103224 g     F .text	00000014 __assert
101195a4 g     O .rwdata	00000004 __wctomb
1010f268 g     F .text	00000018 __sprint_r
10116994 g     F .text	00000034 alt_icache_flush_all
101021bc g     F .text	00000064 Test_i2c
10119614 g     O .rwdata	00000004 alt_priority_mask
10116a18 g     F .text	00000088 alt_ic_irq_enable
10109cf0 g     F .text	0000001c __vfprintf_internal
10110d64 g     F .text	0000005c _wctomb_r
101133d4 g     F .text	000008fc .hidden __subdf3
1010c6a8 g     F .text	000000b0 __lo0bits
101195c4 g     O .rwdata	00000008 alt_alarm_list
10116618 g     F .text	00000060 _do_ctors
1010dc10 g     F .text	00000014 __sigtramp
10110c74 g     F .text	000000c0 wcrtomb
10100c1c g     F .text	00000058 Camera_Acquisition_Module_Start
10113f74 g     F .text	000000d0 close
10114658 g     F .text	00000084 alt_load
10110a00 g     F .text	00000080 fputwc
1010dbd4 g     F .text	00000014 raise
1010394c g     F .text	00000004 __sinit_lock_acquire
1010c41c g     F .text	00000120 __multadd
1010c3f4 g     F .text	00000028 _Bfree
10116088 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <_gp+0xfffdea74>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	008404b4 	movhi	r2,4114
10100140:	10ac7e04 	addi	r2,r2,-19976
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	008404b4 	movhi	r2,4114
10100158:	10ac7e04 	addi	r2,r2,-19976
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <_gp+0xfffdeb9c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <_gp+0xfffdeb90>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70b17 	ldw	r2,-25556(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70b17 	ldw	r2,-25556(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <_gp+0xfffdecb8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	068404b4 	movhi	gp,4114
    ori gp, gp, %lo(_gp)
10100260:	d6856414 	ori	gp,gp,5520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10ac5d14 	ori	r2,r2,45428

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18ecbe14 	ori	r3,r3,45816

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <_gp+0xfffdece8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	01146580 	call	10114658 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	01147ec0 	call	101147ec <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <_gp+0xfffdecfc>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	108000e8 	cmpgeui	r2,r2,3
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008ac0 	call	101008ac <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	108000e8 	cmpgeui	r2,r2,3
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008ac0 	call	101008ac <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	108000e8 	cmpgeui	r2,r2,3
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008ac0 	call	101008ac <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	e0bfff17 	ldw	r2,-4(fp)
10100568:	108000e8 	cmpgeui	r2,r2,3
1010056c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
10100570:	e0bfff17 	ldw	r2,-4(fp)
10100574:	e0fffc17 	ldw	r3,-16(fp)
10100578:	1885403a 	cmpgeu	r2,r3,r2
1010057c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100580:	e0bffd03 	ldbu	r2,-12(fp)
10100584:	10000826 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
10100588:	e0bffd43 	ldbu	r2,-11(fp)
1010058c:	10000626 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
10100590:	e13ffe17 	ldw	r4,-8(fp)
10100594:	01008ac0 	call	101008ac <is_idle>
10100598:	10803fcc 	andi	r2,r2,255
1010059c:	10000226 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
101005a0:	00800044 	movi	r2,1
101005a4:	00000106 	br	101005ac <write_frame_line_blank_reg+0x80>
101005a8:	0005883a 	mov	r2,zero
101005ac:	e0bffd85 	stb	r2,-10(fp)
101005b0:	e0bffd83 	ldbu	r2,-10(fp)
101005b4:	1080004c 	andi	r2,r2,1
101005b8:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005bc:	e0bffd83 	ldbu	r2,-10(fp)
101005c0:	10000726 	beq	r2,zero,101005e0 <write_frame_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c4:	e0bffe17 	ldw	r2,-8(fp)
101005c8:	10800017 	ldw	r2,0(r2)
101005cc:	10800304 	addi	r2,r2,12
101005d0:	e0ffff17 	ldw	r3,-4(fp)
101005d4:	10c00035 	stwio	r3,0(r2)
        return true;
101005d8:	00800044 	movi	r2,1
101005dc:	00000106 	br	101005e4 <write_frame_line_blank_reg+0xb8>
    } else {
        return false;
101005e0:	0005883a 	mov	r2,zero
    }
}
101005e4:	e037883a 	mov	sp,fp
101005e8:	dfc00117 	ldw	ra,4(sp)
101005ec:	df000017 	ldw	fp,0(sp)
101005f0:	dec00204 	addi	sp,sp,8
101005f4:	f800283a 	ret

101005f8 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f8:	defffa04 	addi	sp,sp,-24
101005fc:	dfc00515 	stw	ra,20(sp)
10100600:	df000415 	stw	fp,16(sp)
10100604:	df000404 	addi	fp,sp,16
10100608:	e13ffe15 	stw	r4,-8(fp)
1010060c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100610:	e0bffe17 	ldw	r2,-8(fp)
10100614:	10c00217 	ldw	r3,8(r2)
10100618:	e0bffe17 	ldw	r2,-8(fp)
1010061c:	10800317 	ldw	r2,12(r2)
10100620:	100b883a 	mov	r5,r2
10100624:	1809883a 	mov	r4,r3
10100628:	01002900 	call	10100290 <max>
1010062c:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
10100630:	e0bfff17 	ldw	r2,-4(fp)
10100634:	108000e8 	cmpgeui	r2,r2,3
10100638:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
1010063c:	e0bfff17 	ldw	r2,-4(fp)
10100640:	e0fffc17 	ldw	r3,-16(fp)
10100644:	1885403a 	cmpgeu	r2,r3,r2
10100648:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010064c:	e0bffd03 	ldbu	r2,-12(fp)
10100650:	10000826 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
10100654:	e0bffd43 	ldbu	r2,-11(fp)
10100658:	10000626 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
1010065c:	e13ffe17 	ldw	r4,-8(fp)
10100660:	01008ac0 	call	101008ac <is_idle>
10100664:	10803fcc 	andi	r2,r2,255
10100668:	10000226 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
1010066c:	00800044 	movi	r2,1
10100670:	00000106 	br	10100678 <write_line_line_blank_reg+0x80>
10100674:	0005883a 	mov	r2,zero
10100678:	e0bffd85 	stb	r2,-10(fp)
1010067c:	e0bffd83 	ldbu	r2,-10(fp)
10100680:	1080004c 	andi	r2,r2,1
10100684:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100688:	e0bffd83 	ldbu	r2,-10(fp)
1010068c:	10000726 	beq	r2,zero,101006ac <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
10100690:	e0bffe17 	ldw	r2,-8(fp)
10100694:	10800017 	ldw	r2,0(r2)
10100698:	10800404 	addi	r2,r2,16
1010069c:	e0ffff17 	ldw	r3,-4(fp)
101006a0:	10c00035 	stwio	r3,0(r2)
        return true;
101006a4:	00800044 	movi	r2,1
101006a8:	00000106 	br	101006b0 <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006ac:	0005883a 	mov	r2,zero
    }
}
101006b0:	e037883a 	mov	sp,fp
101006b4:	dfc00117 	ldw	ra,4(sp)
101006b8:	df000017 	ldw	fp,0(sp)
101006bc:	dec00204 	addi	sp,sp,8
101006c0:	f800283a 	ret

101006c4 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c4:	defffa04 	addi	sp,sp,-24
101006c8:	dfc00515 	stw	ra,20(sp)
101006cc:	df000415 	stw	fp,16(sp)
101006d0:	df000404 	addi	fp,sp,16
101006d4:	e13ffe15 	stw	r4,-8(fp)
101006d8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006dc:	e0bffe17 	ldw	r2,-8(fp)
101006e0:	10c00217 	ldw	r3,8(r2)
101006e4:	e0bffe17 	ldw	r2,-8(fp)
101006e8:	10800317 	ldw	r2,12(r2)
101006ec:	100b883a 	mov	r5,r2
101006f0:	1809883a 	mov	r4,r3
101006f4:	01002900 	call	10100290 <max>
101006f8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006fc:	e0bfff17 	ldw	r2,-4(fp)
10100700:	108000e8 	cmpgeui	r2,r2,3
10100704:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100708:	e0bfff17 	ldw	r2,-4(fp)
1010070c:	e0fffc17 	ldw	r3,-16(fp)
10100710:	1885403a 	cmpgeu	r2,r3,r2
10100714:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100718:	e0bffd03 	ldbu	r2,-12(fp)
1010071c:	10000826 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100720:	e0bffd43 	ldbu	r2,-11(fp)
10100724:	10000626 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100728:	e13ffe17 	ldw	r4,-8(fp)
1010072c:	01008ac0 	call	101008ac <is_idle>
10100730:	10803fcc 	andi	r2,r2,255
10100734:	10000226 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100738:	00800044 	movi	r2,1
1010073c:	00000106 	br	10100744 <write_line_frame_blank_reg+0x80>
10100740:	0005883a 	mov	r2,zero
10100744:	e0bffd85 	stb	r2,-10(fp)
10100748:	e0bffd83 	ldbu	r2,-10(fp)
1010074c:	1080004c 	andi	r2,r2,1
10100750:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100754:	e0bffd83 	ldbu	r2,-10(fp)
10100758:	10000726 	beq	r2,zero,10100778 <write_line_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
1010075c:	e0bffe17 	ldw	r2,-8(fp)
10100760:	10800017 	ldw	r2,0(r2)
10100764:	10800504 	addi	r2,r2,20
10100768:	e0ffff17 	ldw	r3,-4(fp)
1010076c:	10c00035 	stwio	r3,0(r2)
        return true;
10100770:	00800044 	movi	r2,1
10100774:	00000106 	br	1010077c <write_line_frame_blank_reg+0xb8>
    } else {
        return false;
10100778:	0005883a 	mov	r2,zero
    }
}
1010077c:	e037883a 	mov	sp,fp
10100780:	dfc00117 	ldw	ra,4(sp)
10100784:	df000017 	ldw	fp,0(sp)
10100788:	dec00204 	addi	sp,sp,8
1010078c:	f800283a 	ret

10100790 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100790:	defffe04 	addi	sp,sp,-8
10100794:	df000115 	stw	fp,4(sp)
10100798:	df000104 	addi	fp,sp,4
1010079c:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
101007a0:	e0bfff17 	ldw	r2,-4(fp)
101007a4:	10800017 	ldw	r2,0(r2)
101007a8:	10800037 	ldwio	r2,0(r2)
}
101007ac:	e037883a 	mov	sp,fp
101007b0:	df000017 	ldw	fp,0(sp)
101007b4:	dec00104 	addi	sp,sp,4
101007b8:	f800283a 	ret

101007bc <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007bc:	defffe04 	addi	sp,sp,-8
101007c0:	df000115 	stw	fp,4(sp)
101007c4:	df000104 	addi	fp,sp,4
101007c8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007cc:	e0bfff17 	ldw	r2,-4(fp)
101007d0:	10800017 	ldw	r2,0(r2)
101007d4:	10800104 	addi	r2,r2,4
101007d8:	10800037 	ldwio	r2,0(r2)
}
101007dc:	e037883a 	mov	sp,fp
101007e0:	df000017 	ldw	fp,0(sp)
101007e4:	dec00104 	addi	sp,sp,4
101007e8:	f800283a 	ret

101007ec <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007ec:	defffe04 	addi	sp,sp,-8
101007f0:	df000115 	stw	fp,4(sp)
101007f4:	df000104 	addi	fp,sp,4
101007f8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007fc:	e0bfff17 	ldw	r2,-4(fp)
10100800:	10800017 	ldw	r2,0(r2)
10100804:	10800204 	addi	r2,r2,8
10100808:	10800037 	ldwio	r2,0(r2)
}
1010080c:	e037883a 	mov	sp,fp
10100810:	df000017 	ldw	fp,0(sp)
10100814:	dec00104 	addi	sp,sp,4
10100818:	f800283a 	ret

1010081c <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010081c:	defffe04 	addi	sp,sp,-8
10100820:	df000115 	stw	fp,4(sp)
10100824:	df000104 	addi	fp,sp,4
10100828:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
1010082c:	e0bfff17 	ldw	r2,-4(fp)
10100830:	10800017 	ldw	r2,0(r2)
10100834:	10800304 	addi	r2,r2,12
10100838:	10800037 	ldwio	r2,0(r2)
}
1010083c:	e037883a 	mov	sp,fp
10100840:	df000017 	ldw	fp,0(sp)
10100844:	dec00104 	addi	sp,sp,4
10100848:	f800283a 	ret

1010084c <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010084c:	defffe04 	addi	sp,sp,-8
10100850:	df000115 	stw	fp,4(sp)
10100854:	df000104 	addi	fp,sp,4
10100858:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
1010085c:	e0bfff17 	ldw	r2,-4(fp)
10100860:	10800017 	ldw	r2,0(r2)
10100864:	10800404 	addi	r2,r2,16
10100868:	10800037 	ldwio	r2,0(r2)
}
1010086c:	e037883a 	mov	sp,fp
10100870:	df000017 	ldw	fp,0(sp)
10100874:	dec00104 	addi	sp,sp,4
10100878:	f800283a 	ret

1010087c <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010087c:	defffe04 	addi	sp,sp,-8
10100880:	df000115 	stw	fp,4(sp)
10100884:	df000104 	addi	fp,sp,4
10100888:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
1010088c:	e0bfff17 	ldw	r2,-4(fp)
10100890:	10800017 	ldw	r2,0(r2)
10100894:	10800504 	addi	r2,r2,20
10100898:	10800037 	ldwio	r2,0(r2)
}
1010089c:	e037883a 	mov	sp,fp
101008a0:	df000017 	ldw	fp,0(sp)
101008a4:	dec00104 	addi	sp,sp,4
101008a8:	f800283a 	ret

101008ac <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008ac:	defffe04 	addi	sp,sp,-8
101008b0:	df000115 	stw	fp,4(sp)
101008b4:	df000104 	addi	fp,sp,4
101008b8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008bc:	e0bfff17 	ldw	r2,-4(fp)
101008c0:	10800017 	ldw	r2,0(r2)
101008c4:	10800704 	addi	r2,r2,28
101008c8:	10800037 	ldwio	r2,0(r2)
101008cc:	10800060 	cmpeqi	r2,r2,1
}
101008d0:	e037883a 	mov	sp,fp
101008d4:	df000017 	ldw	fp,0(sp)
101008d8:	dec00104 	addi	sp,sp,4
101008dc:	f800283a 	ret

101008e0 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008e0:	defff704 	addi	sp,sp,-36
101008e4:	df000815 	stw	fp,32(sp)
101008e8:	df000804 	addi	fp,sp,32
101008ec:	e13ffc15 	stw	r4,-16(fp)
101008f0:	e17ffd15 	stw	r5,-12(fp)
101008f4:	3005883a 	mov	r2,r6
101008f8:	e1ffff15 	stw	r7,-4(fp)
101008fc:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
10100900:	e0bffd17 	ldw	r2,-12(fp)
10100904:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100908:	e0bffe03 	ldbu	r2,-8(fp)
1010090c:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100910:	e0bfff17 	ldw	r2,-4(fp)
10100914:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100918:	e0800117 	ldw	r2,4(fp)
1010091c:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100920:	e0bffc17 	ldw	r2,-16(fp)
10100924:	e0fff817 	ldw	r3,-32(fp)
10100928:	10c00015 	stw	r3,0(r2)
1010092c:	e0fff917 	ldw	r3,-28(fp)
10100930:	10c00115 	stw	r3,4(r2)
10100934:	e0fffa17 	ldw	r3,-24(fp)
10100938:	10c00215 	stw	r3,8(r2)
1010093c:	e0fffb17 	ldw	r3,-20(fp)
10100940:	10c00315 	stw	r3,12(r2)
}
10100944:	e0bffc17 	ldw	r2,-16(fp)
10100948:	e037883a 	mov	sp,fp
1010094c:	df000017 	ldw	fp,0(sp)
10100950:	dec00104 	addi	sp,sp,4
10100954:	f800283a 	ret

10100958 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100958:	defffd04 	addi	sp,sp,-12
1010095c:	dfc00215 	stw	ra,8(sp)
10100960:	df000115 	stw	fp,4(sp)
10100964:	df000104 	addi	fp,sp,4
10100968:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
1010096c:	e13fff17 	ldw	r4,-4(fp)
10100970:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
10100974:	014000c4 	movi	r5,3
10100978:	e13fff17 	ldw	r4,-4(fp)
1010097c:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100980:	014000c4 	movi	r5,3
10100984:	e13fff17 	ldw	r4,-4(fp)
10100988:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
1010098c:	014000c4 	movi	r5,3
10100990:	e13fff17 	ldw	r4,-4(fp)
10100994:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100998:	014000c4 	movi	r5,3
1010099c:	e13fff17 	ldw	r4,-4(fp)
101009a0:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
101009a4:	014000c4 	movi	r5,3
101009a8:	e13fff17 	ldw	r4,-4(fp)
101009ac:	01005f80 	call	101005f8 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009b0:	014000c4 	movi	r5,3
101009b4:	e13fff17 	ldw	r4,-4(fp)
101009b8:	01006c40 	call	101006c4 <write_line_frame_blank_reg>
}
101009bc:	0001883a 	nop
101009c0:	e037883a 	mov	sp,fp
101009c4:	dfc00117 	ldw	ra,4(sp)
101009c8:	df000017 	ldw	fp,0(sp)
101009cc:	dec00204 	addi	sp,sp,8
101009d0:	f800283a 	ret

101009d4 <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009d4:	defff904 	addi	sp,sp,-28
101009d8:	dfc00615 	stw	ra,24(sp)
101009dc:	df000515 	stw	fp,20(sp)
101009e0:	df000504 	addi	fp,sp,20
101009e4:	e13ffc15 	stw	r4,-16(fp)
101009e8:	e17ffd15 	stw	r5,-12(fp)
101009ec:	e1bffe15 	stw	r6,-8(fp)
101009f0:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009f4:	00800044 	movi	r2,1
101009f8:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009fc:	e13ffc17 	ldw	r4,-16(fp)
10100a00:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
10100a04:	e17ffd17 	ldw	r5,-12(fp)
10100a08:	e13ffc17 	ldw	r4,-16(fp)
10100a0c:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a10:	e0fffb03 	ldbu	r3,-20(fp)
10100a14:	10803fcc 	andi	r2,r2,255
10100a18:	1884703a 	and	r2,r3,r2
10100a1c:	1004c03a 	cmpne	r2,r2,zero
10100a20:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a24:	e17ffe17 	ldw	r5,-8(fp)
10100a28:	e13ffc17 	ldw	r4,-16(fp)
10100a2c:	01003940 	call	10100394 <write_frame_height_reg>
10100a30:	e0fffb03 	ldbu	r3,-20(fp)
10100a34:	10803fcc 	andi	r2,r2,255
10100a38:	1884703a 	and	r2,r3,r2
10100a3c:	1004c03a 	cmpne	r2,r2,zero
10100a40:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a44:	e17fff17 	ldw	r5,-4(fp)
10100a48:	e13ffc17 	ldw	r4,-16(fp)
10100a4c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a50:	e0fffb03 	ldbu	r3,-20(fp)
10100a54:	10803fcc 	andi	r2,r2,255
10100a58:	1884703a 	and	r2,r3,r2
10100a5c:	1004c03a 	cmpne	r2,r2,zero
10100a60:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a64:	e1400217 	ldw	r5,8(fp)
10100a68:	e13ffc17 	ldw	r4,-16(fp)
10100a6c:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a70:	e0fffb03 	ldbu	r3,-20(fp)
10100a74:	10803fcc 	andi	r2,r2,255
10100a78:	1884703a 	and	r2,r3,r2
10100a7c:	1004c03a 	cmpne	r2,r2,zero
10100a80:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a84:	e1400317 	ldw	r5,12(fp)
10100a88:	e13ffc17 	ldw	r4,-16(fp)
10100a8c:	01005f80 	call	101005f8 <write_line_line_blank_reg>
10100a90:	e0fffb03 	ldbu	r3,-20(fp)
10100a94:	10803fcc 	andi	r2,r2,255
10100a98:	1884703a 	and	r2,r3,r2
10100a9c:	1004c03a 	cmpne	r2,r2,zero
10100aa0:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100aa4:	e1400417 	ldw	r5,16(fp)
10100aa8:	e13ffc17 	ldw	r4,-16(fp)
10100aac:	01006c40 	call	101006c4 <write_line_frame_blank_reg>
10100ab0:	e0fffb03 	ldbu	r3,-20(fp)
10100ab4:	10803fcc 	andi	r2,r2,255
10100ab8:	1884703a 	and	r2,r3,r2
10100abc:	1004c03a 	cmpne	r2,r2,zero
10100ac0:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100ac4:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac8:	e037883a 	mov	sp,fp
10100acc:	dfc00117 	ldw	ra,4(sp)
10100ad0:	df000017 	ldw	fp,0(sp)
10100ad4:	dec00204 	addi	sp,sp,8
10100ad8:	f800283a 	ret

10100adc <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100adc:	defffe04 	addi	sp,sp,-8
10100ae0:	df000115 	stw	fp,4(sp)
10100ae4:	df000104 	addi	fp,sp,4
10100ae8:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100aec:	e0bfff17 	ldw	r2,-4(fp)
10100af0:	10800017 	ldw	r2,0(r2)
10100af4:	10800604 	addi	r2,r2,24
10100af8:	00c00044 	movi	r3,1
10100afc:	10c00035 	stwio	r3,0(r2)
}
10100b00:	0001883a 	nop
10100b04:	e037883a 	mov	sp,fp
10100b08:	df000017 	ldw	fp,0(sp)
10100b0c:	dec00104 	addi	sp,sp,4
10100b10:	f800283a 	ret

10100b14 <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b14:	defffe04 	addi	sp,sp,-8
10100b18:	df000115 	stw	fp,4(sp)
10100b1c:	df000104 	addi	fp,sp,4
10100b20:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b24:	e0bfff17 	ldw	r2,-4(fp)
10100b28:	10800017 	ldw	r2,0(r2)
10100b2c:	10800604 	addi	r2,r2,24
10100b30:	0007883a 	mov	r3,zero
10100b34:	10c00035 	stwio	r3,0(r2)
}
10100b38:	0001883a 	nop
10100b3c:	e037883a 	mov	sp,fp
10100b40:	df000017 	ldw	fp,0(sp)
10100b44:	dec00104 	addi	sp,sp,4
10100b48:	f800283a 	ret

10100b4c <Camera_Acquisition_Module_SETUP_Address_Memory>:
#define CAMERA_MODULE_REGISTER_STOP            (3 * 4) /* RW */
#define CAMERA_MODULE_REGISTER_SNAPSHOT             (4 * 4) /* RW */
#define CAMERA_MODULE_REGISTER_FLAG            (5 * 4) /* RW */

int Camera_Acquisition_Module_SETUP_Address_Memory(int Address)
{
10100b4c:	defffd04 	addi	sp,sp,-12
10100b50:	df000215 	stw	fp,8(sp)
10100b54:	df000204 	addi	fp,sp,8
10100b58:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_ADDRESS, Address);
10100b5c:	00840034 	movhi	r2,4096
10100b60:	10821804 	addi	r2,r2,2144
10100b64:	e0ffff17 	ldw	r3,-4(fp)
10100b68:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100b6c:	e03ffe15 	stw	zero,-8(fp)
10100b70:	00000306 	br	10100b80 <Camera_Acquisition_Module_SETUP_Address_Memory+0x34>
10100b74:	e0bffe17 	ldw	r2,-8(fp)
10100b78:	10800044 	addi	r2,r2,1
10100b7c:	e0bffe15 	stw	r2,-8(fp)
10100b80:	e0bffe17 	ldw	r2,-8(fp)
10100b84:	10800290 	cmplti	r2,r2,10
10100b88:	103ffa1e 	bne	r2,zero,10100b74 <_gp+0xfffdf5e4>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_ADDRESS);
10100b8c:	00840034 	movhi	r2,4096
10100b90:	10821804 	addi	r2,r2,2144
10100b94:	10800037 	ldwio	r2,0(r2)
}
10100b98:	e037883a 	mov	sp,fp
10100b9c:	df000017 	ldw	fp,0(sp)
10100ba0:	dec00104 	addi	sp,sp,4
10100ba4:	f800283a 	ret

10100ba8 <Camera_Acquisition_Module_SETUP_Length_Frame>:
// Length : Number of pixel to store. reminder : 1 Memory slot =2 pixels and 1 memory slot = 4 bytes
int Camera_Acquisition_Module_SETUP_Length_Frame(int Pixel_Number)
{
10100ba8:	defffd04 	addi	sp,sp,-12
10100bac:	df000215 	stw	fp,8(sp)
10100bb0:	df000204 	addi	fp,sp,8
10100bb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_LENGTH, Pixel_Number/2*4);//*4 because 32bits;
10100bb8:	e0bfff17 	ldw	r2,-4(fp)
10100bbc:	1006d7fa 	srli	r3,r2,31
10100bc0:	1885883a 	add	r2,r3,r2
10100bc4:	1005d07a 	srai	r2,r2,1
10100bc8:	1085883a 	add	r2,r2,r2
10100bcc:	1085883a 	add	r2,r2,r2
10100bd0:	1007883a 	mov	r3,r2
10100bd4:	00840034 	movhi	r2,4096
10100bd8:	10821904 	addi	r2,r2,2148
10100bdc:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100be0:	e03ffe15 	stw	zero,-8(fp)
10100be4:	00000306 	br	10100bf4 <Camera_Acquisition_Module_SETUP_Length_Frame+0x4c>
10100be8:	e0bffe17 	ldw	r2,-8(fp)
10100bec:	10800044 	addi	r2,r2,1
10100bf0:	e0bffe15 	stw	r2,-8(fp)
10100bf4:	e0bffe17 	ldw	r2,-8(fp)
10100bf8:	10800290 	cmplti	r2,r2,10
10100bfc:	103ffa1e 	bne	r2,zero,10100be8 <_gp+0xfffdf658>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_LENGTH);
10100c00:	00840034 	movhi	r2,4096
10100c04:	10821904 	addi	r2,r2,2148
10100c08:	10800037 	ldwio	r2,0(r2)
}
10100c0c:	e037883a 	mov	sp,fp
10100c10:	df000017 	ldw	fp,0(sp)
10100c14:	dec00104 	addi	sp,sp,4
10100c18:	f800283a 	ret

10100c1c <Camera_Acquisition_Module_Start>:
int Camera_Acquisition_Module_Start()
{
10100c1c:	defffe04 	addi	sp,sp,-8
10100c20:	df000115 	stw	fp,4(sp)
10100c24:	df000104 	addi	fp,sp,4
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_START, 1);//*4 because 32bits;
10100c28:	00c00044 	movi	r3,1
10100c2c:	00840034 	movhi	r2,4096
10100c30:	10821a04 	addi	r2,r2,2152
10100c34:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100c38:	e03fff15 	stw	zero,-4(fp)
10100c3c:	00000306 	br	10100c4c <Camera_Acquisition_Module_Start+0x30>
10100c40:	e0bfff17 	ldw	r2,-4(fp)
10100c44:	10800044 	addi	r2,r2,1
10100c48:	e0bfff15 	stw	r2,-4(fp)
10100c4c:	e0bfff17 	ldw	r2,-4(fp)
10100c50:	10800290 	cmplti	r2,r2,10
10100c54:	103ffa1e 	bne	r2,zero,10100c40 <_gp+0xfffdf6b0>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_START);
10100c58:	00840034 	movhi	r2,4096
10100c5c:	10821a04 	addi	r2,r2,2152
10100c60:	10800037 	ldwio	r2,0(r2)
}
10100c64:	e037883a 	mov	sp,fp
10100c68:	df000017 	ldw	fp,0(sp)
10100c6c:	dec00104 	addi	sp,sp,4
10100c70:	f800283a 	ret

10100c74 <Camera_Acquisition_Module_Stop>:
int Camera_Acquisition_Module_Stop()
{
10100c74:	defffe04 	addi	sp,sp,-8
10100c78:	df000115 	stw	fp,4(sp)
10100c7c:	df000104 	addi	fp,sp,4
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_STOP, 1);//*4 because 32bits;
10100c80:	00c00044 	movi	r3,1
10100c84:	00840034 	movhi	r2,4096
10100c88:	10821b04 	addi	r2,r2,2156
10100c8c:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100c90:	e03fff15 	stw	zero,-4(fp)
10100c94:	00000306 	br	10100ca4 <Camera_Acquisition_Module_Stop+0x30>
10100c98:	e0bfff17 	ldw	r2,-4(fp)
10100c9c:	10800044 	addi	r2,r2,1
10100ca0:	e0bfff15 	stw	r2,-4(fp)
10100ca4:	e0bfff17 	ldw	r2,-4(fp)
10100ca8:	10800290 	cmplti	r2,r2,10
10100cac:	103ffa1e 	bne	r2,zero,10100c98 <_gp+0xfffdf708>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_STOP);
10100cb0:	00840034 	movhi	r2,4096
10100cb4:	10821b04 	addi	r2,r2,2156
10100cb8:	10800037 	ldwio	r2,0(r2)
}
10100cbc:	e037883a 	mov	sp,fp
10100cc0:	df000017 	ldw	fp,0(sp)
10100cc4:	dec00104 	addi	sp,sp,4
10100cc8:	f800283a 	ret

10100ccc <Camera_Acquisition_Module_Display_Registers>:
void Camera_Acquisition_Module_Display_Registers()
{
10100ccc:	defffe04 	addi	sp,sp,-8
10100cd0:	dfc00115 	stw	ra,4(sp)
10100cd4:	df000015 	stw	fp,0(sp)
10100cd8:	d839883a 	mov	fp,sp
	printf("CAMERA_MODULE_REGISTER_ADDRESS=0x%x\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_ADDRESS));
10100cdc:	00840034 	movhi	r2,4096
10100ce0:	10821804 	addi	r2,r2,2144
10100ce4:	10800037 	ldwio	r2,0(r2)
10100ce8:	100b883a 	mov	r5,r2
10100cec:	01040474 	movhi	r4,4113
10100cf0:	211cf004 	addi	r4,r4,29632
10100cf4:	01052500 	call	10105250 <printf>
	printf("CAMERA_MODULE_REGISTER_LENGTH=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_LENGTH));
10100cf8:	00840034 	movhi	r2,4096
10100cfc:	10821904 	addi	r2,r2,2148
10100d00:	10800037 	ldwio	r2,0(r2)
10100d04:	100b883a 	mov	r5,r2
10100d08:	01040474 	movhi	r4,4113
10100d0c:	211cfa04 	addi	r4,r4,29672
10100d10:	01052500 	call	10105250 <printf>
	printf("CAMERA_MODULE_REGISTER_START=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_START));
10100d14:	00840034 	movhi	r2,4096
10100d18:	10821a04 	addi	r2,r2,2152
10100d1c:	10800037 	ldwio	r2,0(r2)
10100d20:	100b883a 	mov	r5,r2
10100d24:	01040474 	movhi	r4,4113
10100d28:	211d0304 	addi	r4,r4,29708
10100d2c:	01052500 	call	10105250 <printf>
	printf("CAMERA_MODULE_REGISTER_STOP=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_STOP));
10100d30:	00840034 	movhi	r2,4096
10100d34:	10821b04 	addi	r2,r2,2156
10100d38:	10800037 	ldwio	r2,0(r2)
10100d3c:	100b883a 	mov	r5,r2
10100d40:	01040474 	movhi	r4,4113
10100d44:	211d0c04 	addi	r4,r4,29744
10100d48:	01052500 	call	10105250 <printf>
	printf("CAMERA_MODULE_REGISTER_SNAPSHOT=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_SNAPSHOT));
10100d4c:	00840034 	movhi	r2,4096
10100d50:	10821c04 	addi	r2,r2,2160
10100d54:	10800037 	ldwio	r2,0(r2)
10100d58:	100b883a 	mov	r5,r2
10100d5c:	01040474 	movhi	r4,4113
10100d60:	211d1504 	addi	r4,r4,29780
10100d64:	01052500 	call	10105250 <printf>
	printf("CAMERA_MODULE_REGISTER_FLAG=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_FLAG));
10100d68:	00840034 	movhi	r2,4096
10100d6c:	10821d04 	addi	r2,r2,2164
10100d70:	10800037 	ldwio	r2,0(r2)
10100d74:	100b883a 	mov	r5,r2
10100d78:	01040474 	movhi	r4,4113
10100d7c:	211d1f04 	addi	r4,r4,29820
10100d80:	01052500 	call	10105250 <printf>
}
10100d84:	0001883a 	nop
10100d88:	e037883a 	mov	sp,fp
10100d8c:	dfc00117 	ldw	ra,4(sp)
10100d90:	df000017 	ldw	fp,0(sp)
10100d94:	dec00204 	addi	sp,sp,8
10100d98:	f800283a 	ret

10100d9c <Test_Camera_Memory>:
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_STATUS=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_OFST));
 }

#endif
 void Test_Camera_Memory()
 {
10100d9c:	defffe04 	addi	sp,sp,-8
10100da0:	dfc00115 	stw	ra,4(sp)
10100da4:	df000015 	stw	fp,0(sp)
10100da8:	d839883a 	mov	fp,sp
 	Camera_Acquisition_Module_Stop();
10100dac:	0100c740 	call	10100c74 <Camera_Acquisition_Module_Stop>
 	delay(5000);
10100db0:	0104e204 	movi	r4,5000
10100db4:	0100fb40 	call	10100fb4 <delay>
 	Camera_Acquisition_Module_SETUP_Address_Memory(HPS_0_BRIDGES_BASE);//Address of the HPC, 256 MB Available from it
10100db8:	0009883a 	mov	r4,zero
10100dbc:	0100b4c0 	call	10100b4c <Camera_Acquisition_Module_SETUP_Address_Memory>
 	Camera_Acquisition_Module_SETUP_Length_Frame(76800);//320*240
10100dc0:	01000074 	movhi	r4,1
10100dc4:	210b0004 	addi	r4,r4,11264
10100dc8:	0100ba80 	call	10100ba8 <Camera_Acquisition_Module_SETUP_Length_Frame>
 	Camera_Acquisition_Module_Start();//Set a one in the start register
10100dcc:	0100c1c0 	call	10100c1c <Camera_Acquisition_Module_Start>
 			Capture_Image_Computer(HPS_0_BRIDGES_BASE,1);
 			Capture_Image_Computer(HPS_0_BRIDGES_BASE,0);
 		#endif


 }
10100dd0:	0001883a 	nop
10100dd4:	e037883a 	mov	sp,fp
10100dd8:	dfc00117 	ldw	ra,4(sp)
10100ddc:	df000017 	ldw	fp,0(sp)
10100de0:	dec00204 	addi	sp,sp,8
10100de4:	f800283a 	ret

10100de8 <Capture_Image_Computer>:
 void Capture_Image_Computer(int Address, int Frame)
 {
10100de8:	deffda04 	addi	sp,sp,-152
10100dec:	dfc02515 	stw	ra,148(sp)
10100df0:	df002415 	stw	fp,144(sp)
10100df4:	df002404 	addi	fp,sp,144
10100df8:	e13ffe15 	stw	r4,-8(fp)
10100dfc:	e17fff15 	stw	r5,-4(fp)
 	char filename[80];
 	sprintf(filename, "/mnt/host/image%d.ppm",Frame);
10100e00:	e0bfe404 	addi	r2,fp,-112
10100e04:	e1bfff17 	ldw	r6,-4(fp)
10100e08:	01440474 	movhi	r5,4113
10100e0c:	295d2804 	addi	r5,r5,29856
10100e10:	1009883a 	mov	r4,r2
10100e14:	01056780 	call	10105678 <sprintf>
 		FILE *foutput = fopen(filename, "w");
10100e18:	e0bfe404 	addi	r2,fp,-112
10100e1c:	01440474 	movhi	r5,4113
10100e20:	295d2e04 	addi	r5,r5,29880
10100e24:	1009883a 	mov	r4,r2
10100e28:	0103ad40 	call	10103ad4 <fopen>
10100e2c:	e0bfe215 	stw	r2,-120(fp)
 		if (foutput) {
10100e30:	e0bfe217 	ldw	r2,-120(fp)
10100e34:	10005426 	beq	r2,zero,10100f88 <Capture_Image_Computer+0x1a0>
 			/* Use fprintf function to write to file through file pointer */
 			fprintf(foutput, "P3\n320 240\n32\n");
10100e38:	e1ffe217 	ldw	r7,-120(fp)
10100e3c:	01800384 	movi	r6,14
10100e40:	01400044 	movi	r5,1
10100e44:	01040474 	movhi	r4,4113
10100e48:	211d2f04 	addi	r4,r4,29884
10100e4c:	010469c0 	call	1010469c <fwrite>
 			printf("Good: open \"%s\" for writing\n", filename);
10100e50:	e0bfe404 	addi	r2,fp,-112
10100e54:	100b883a 	mov	r5,r2
10100e58:	01040474 	movhi	r4,4113
10100e5c:	211d3304 	addi	r4,r4,29900
10100e60:	01052500 	call	10105250 <printf>
 			//
 			delay(5000000);
10100e64:	01001334 	movhi	r4,76
10100e68:	2112d004 	addi	r4,r4,19264
10100e6c:	0100fb40 	call	10100fb4 <delay>
 			int Pixels[6];

 			for (int i=0;i<240;i++)
10100e70:	e03fe015 	stw	zero,-128(fp)
10100e74:	00003e06 	br	10100f70 <Capture_Image_Computer+0x188>
 			{
 				for(int j=0;j<160;j++)
10100e78:	e03fe115 	stw	zero,-124(fp)
10100e7c:	00002406 	br	10100f10 <Capture_Image_Computer+0x128>
 				{
 					int32_t Data_Memory_Case=IORD_32DIRECT(Address, i*160*4+j*4+160*240*4*Frame);
10100e80:	e0bfe017 	ldw	r2,-128(fp)
10100e84:	10c02824 	muli	r3,r2,160
10100e88:	e0bfe117 	ldw	r2,-124(fp)
10100e8c:	1887883a 	add	r3,r3,r2
10100e90:	e13fff17 	ldw	r4,-4(fp)
10100e94:	00a58014 	movui	r2,38400
10100e98:	2085383a 	mul	r2,r4,r2
10100e9c:	1885883a 	add	r2,r3,r2
10100ea0:	1085883a 	add	r2,r2,r2
10100ea4:	1085883a 	add	r2,r2,r2
10100ea8:	1007883a 	mov	r3,r2
10100eac:	e0bffe17 	ldw	r2,-8(fp)
10100eb0:	1885883a 	add	r2,r3,r2
10100eb4:	10800037 	ldwio	r2,0(r2)
10100eb8:	e0bfe315 	stw	r2,-116(fp)
 					Convert_Pixels(Data_Memory_Case,Pixels);
10100ebc:	e0bff804 	addi	r2,fp,-32
10100ec0:	100b883a 	mov	r5,r2
10100ec4:	e13fe317 	ldw	r4,-116(fp)
10100ec8:	0100ff80 	call	10100ff8 <Convert_Pixels>
 					//printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0,Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 					fprintf(foutput, "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);
10100ecc:	e1bff817 	ldw	r6,-32(fp)
10100ed0:	e1fff917 	ldw	r7,-28(fp)
10100ed4:	e0bffa17 	ldw	r2,-24(fp)
10100ed8:	e0fffb17 	ldw	r3,-20(fp)
10100edc:	e13ffc17 	ldw	r4,-16(fp)
10100ee0:	e17ffd17 	ldw	r5,-12(fp)
10100ee4:	d9400315 	stw	r5,12(sp)
10100ee8:	d9000215 	stw	r4,8(sp)
10100eec:	d8c00115 	stw	r3,4(sp)
10100ef0:	d8800015 	stw	r2,0(sp)
10100ef4:	01440474 	movhi	r5,4113
10100ef8:	295d3b04 	addi	r5,r5,29932
10100efc:	e13fe217 	ldw	r4,-120(fp)
10100f00:	0103b140 	call	10103b14 <fprintf>
 			delay(5000000);
 			int Pixels[6];

 			for (int i=0;i<240;i++)
 			{
 				for(int j=0;j<160;j++)
10100f04:	e0bfe117 	ldw	r2,-124(fp)
10100f08:	10800044 	addi	r2,r2,1
10100f0c:	e0bfe115 	stw	r2,-124(fp)
10100f10:	e0bfe117 	ldw	r2,-124(fp)
10100f14:	10802810 	cmplti	r2,r2,160
10100f18:	103fd91e 	bne	r2,zero,10100e80 <_gp+0xfffdf8f0>

 					fprintf(foutput, "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 				}
 				//printf( "\n");
 				printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);
10100f1c:	e17ff817 	ldw	r5,-32(fp)
10100f20:	e1bff917 	ldw	r6,-28(fp)
10100f24:	e1fffa17 	ldw	r7,-24(fp)
10100f28:	e0bffb17 	ldw	r2,-20(fp)
10100f2c:	e0fffc17 	ldw	r3,-16(fp)
10100f30:	e13ffd17 	ldw	r4,-12(fp)
10100f34:	d9000215 	stw	r4,8(sp)
10100f38:	d8c00115 	stw	r3,4(sp)
10100f3c:	d8800015 	stw	r2,0(sp)
10100f40:	01040474 	movhi	r4,4113
10100f44:	211d3b04 	addi	r4,r4,29932
10100f48:	01052500 	call	10105250 <printf>

 				fprintf(foutput, "\r\n");
10100f4c:	e1ffe217 	ldw	r7,-120(fp)
10100f50:	01800084 	movi	r6,2
10100f54:	01400044 	movi	r5,1
10100f58:	01040474 	movhi	r4,4113
10100f5c:	211d4204 	addi	r4,r4,29960
10100f60:	010469c0 	call	1010469c <fwrite>
 			printf("Good: open \"%s\" for writing\n", filename);
 			//
 			delay(5000000);
 			int Pixels[6];

 			for (int i=0;i<240;i++)
10100f64:	e0bfe017 	ldw	r2,-128(fp)
10100f68:	10800044 	addi	r2,r2,1
10100f6c:	e0bfe015 	stw	r2,-128(fp)
10100f70:	e0bfe017 	ldw	r2,-128(fp)
10100f74:	10803c10 	cmplti	r2,r2,240
10100f78:	103fbf1e 	bne	r2,zero,10100e78 <_gp+0xfffdf8e8>
 				printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 				fprintf(foutput, "\r\n");

 			}
 			fclose(foutput);
10100f7c:	e13fe217 	ldw	r4,-120(fp)
10100f80:	01033280 	call	10103328 <fclose>
 		else
 		{
 			printf("Error: could not open \"%s\" for writing\n", filename);

 		}
 }
10100f84:	00000506 	br	10100f9c <Capture_Image_Computer+0x1b4>
 			}
 			fclose(foutput);
 		}
 		else
 		{
 			printf("Error: could not open \"%s\" for writing\n", filename);
10100f88:	e0bfe404 	addi	r2,fp,-112
10100f8c:	100b883a 	mov	r5,r2
10100f90:	01040474 	movhi	r4,4113
10100f94:	211d4304 	addi	r4,r4,29964
10100f98:	01052500 	call	10105250 <printf>

 		}
 }
10100f9c:	0001883a 	nop
10100fa0:	e037883a 	mov	sp,fp
10100fa4:	dfc00117 	ldw	ra,4(sp)
10100fa8:	df000017 	ldw	fp,0(sp)
10100fac:	dec00204 	addi	sp,sp,8
10100fb0:	f800283a 	ret

10100fb4 <delay>:

 void delay(int duration )
 {
10100fb4:	defffd04 	addi	sp,sp,-12
10100fb8:	df000215 	stw	fp,8(sp)
10100fbc:	df000204 	addi	fp,sp,8
10100fc0:	e13fff15 	stw	r4,-4(fp)
 	int i;
 	for (i=0;i<duration;i++);
10100fc4:	e03ffe15 	stw	zero,-8(fp)
10100fc8:	00000306 	br	10100fd8 <delay+0x24>
10100fcc:	e0bffe17 	ldw	r2,-8(fp)
10100fd0:	10800044 	addi	r2,r2,1
10100fd4:	e0bffe15 	stw	r2,-8(fp)
10100fd8:	e0fffe17 	ldw	r3,-8(fp)
10100fdc:	e0bfff17 	ldw	r2,-4(fp)
10100fe0:	18bffa16 	blt	r3,r2,10100fcc <_gp+0xfffdfa3c>
 }
10100fe4:	0001883a 	nop
10100fe8:	e037883a 	mov	sp,fp
10100fec:	df000017 	ldw	fp,0(sp)
10100ff0:	dec00104 	addi	sp,sp,4
10100ff4:	f800283a 	ret

10100ff8 <Convert_Pixels>:
 void Convert_Pixels(int32_t Data,int* Storage)
 {
10100ff8:	defffc04 	addi	sp,sp,-16
10100ffc:	dfc00315 	stw	ra,12(sp)
10101000:	df000215 	stw	fp,8(sp)
10101004:	df000204 	addi	fp,sp,8
10101008:	e13ffe15 	stw	r4,-8(fp)
1010100c:	e17fff15 	stw	r5,-4(fp)
 	Extract_Colors(Data&0xFFFF,Storage);
10101010:	e0bffe17 	ldw	r2,-8(fp)
10101014:	10bfffcc 	andi	r2,r2,65535
10101018:	10a0001c 	xori	r2,r2,32768
1010101c:	10a00004 	addi	r2,r2,-32768
10101020:	e17fff17 	ldw	r5,-4(fp)
10101024:	1009883a 	mov	r4,r2
10101028:	010106c0 	call	1010106c <Extract_Colors>
 	Extract_Colors((Data&0xFFFF0000)>>16,Storage+3);
1010102c:	e0bffe17 	ldw	r2,-8(fp)
10101030:	1004d43a 	srli	r2,r2,16
10101034:	10ffffcc 	andi	r3,r2,65535
10101038:	18e0001c 	xori	r3,r3,32768
1010103c:	18e00004 	addi	r3,r3,-32768
10101040:	e0bfff17 	ldw	r2,-4(fp)
10101044:	10800304 	addi	r2,r2,12
10101048:	100b883a 	mov	r5,r2
1010104c:	1809883a 	mov	r4,r3
10101050:	010106c0 	call	1010106c <Extract_Colors>

 }
10101054:	0001883a 	nop
10101058:	e037883a 	mov	sp,fp
1010105c:	dfc00117 	ldw	ra,4(sp)
10101060:	df000017 	ldw	fp,0(sp)
10101064:	dec00204 	addi	sp,sp,8
10101068:	f800283a 	ret

1010106c <Extract_Colors>:
 void Extract_Colors(int16_t Data,int* Storage)
 {
1010106c:	defff904 	addi	sp,sp,-28
10101070:	df000615 	stw	fp,24(sp)
10101074:	df000604 	addi	fp,sp,24
10101078:	2005883a 	mov	r2,r4
1010107c:	e17fff15 	stw	r5,-4(fp)
10101080:	e0bffe0d 	sth	r2,-8(fp)
 	int Red=0, Blue=0, Green=0;
10101084:	e03ffa15 	stw	zero,-24(fp)
10101088:	e03ffb15 	stw	zero,-20(fp)
1010108c:	e03ffc15 	stw	zero,-16(fp)
 	Red=(Data & 0xF800)>>11;
10101090:	e0bffe0f 	ldh	r2,-8(fp)
10101094:	10be000c 	andi	r2,r2,63488
10101098:	1005d2fa 	srai	r2,r2,11
1010109c:	e0bffa15 	stw	r2,-24(fp)
 	Blue=(Data & 0x001F);
101010a0:	e0bffe0b 	ldhu	r2,-8(fp)
101010a4:	10bfffcc 	andi	r2,r2,65535
101010a8:	108007cc 	andi	r2,r2,31
101010ac:	e0bffb15 	stw	r2,-20(fp)
 	Green=(Data & 0x07E0)>>5;
101010b0:	e0bffe0b 	ldhu	r2,-8(fp)
101010b4:	10bfffcc 	andi	r2,r2,65535
101010b8:	1081f80c 	andi	r2,r2,2016
101010bc:	1005d17a 	srai	r2,r2,5
101010c0:	e0bffc15 	stw	r2,-16(fp)
 	int Color=Red;
101010c4:	e0bffa17 	ldw	r2,-24(fp)
101010c8:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>32)
101010cc:	e0bffd17 	ldw	r2,-12(fp)
101010d0:	10800850 	cmplti	r2,r2,33
101010d4:	1000041e 	bne	r2,zero,101010e8 <Extract_Colors+0x7c>
 		Storage[0]=32;
101010d8:	e0bfff17 	ldw	r2,-4(fp)
101010dc:	00c00804 	movi	r3,32
101010e0:	10c00015 	stw	r3,0(r2)
101010e4:	00000306 	br	101010f4 <Extract_Colors+0x88>
 	else
 		Storage[0]=Color;
101010e8:	e0bfff17 	ldw	r2,-4(fp)
101010ec:	e0fffd17 	ldw	r3,-12(fp)
101010f0:	10c00015 	stw	r3,0(r2)
 	Color=Green/2;
101010f4:	e0bffc17 	ldw	r2,-16(fp)
101010f8:	1006d7fa 	srli	r3,r2,31
101010fc:	1885883a 	add	r2,r3,r2
10101100:	1005d07a 	srai	r2,r2,1
10101104:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>32)
10101108:	e0bffd17 	ldw	r2,-12(fp)
1010110c:	10800850 	cmplti	r2,r2,33
10101110:	1000051e 	bne	r2,zero,10101128 <Extract_Colors+0xbc>
 		Storage[1]=32;
10101114:	e0bfff17 	ldw	r2,-4(fp)
10101118:	10800104 	addi	r2,r2,4
1010111c:	00c00804 	movi	r3,32
10101120:	10c00015 	stw	r3,0(r2)
10101124:	00000406 	br	10101138 <Extract_Colors+0xcc>
 	else
 		Storage[1]=Color;
10101128:	e0bfff17 	ldw	r2,-4(fp)
1010112c:	10800104 	addi	r2,r2,4
10101130:	e0fffd17 	ldw	r3,-12(fp)
10101134:	10c00015 	stw	r3,0(r2)
 	Color=Blue;
10101138:	e0bffb17 	ldw	r2,-20(fp)
1010113c:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>32)
10101140:	e0bffd17 	ldw	r2,-12(fp)
10101144:	10800850 	cmplti	r2,r2,33
10101148:	1000051e 	bne	r2,zero,10101160 <Extract_Colors+0xf4>
 		Storage[2]=32;
1010114c:	e0bfff17 	ldw	r2,-4(fp)
10101150:	10800204 	addi	r2,r2,8
10101154:	00c00804 	movi	r3,32
10101158:	10c00015 	stw	r3,0(r2)
 	else
 		Storage[2]=Color;
 	return ;
1010115c:	00000506 	br	10101174 <Extract_Colors+0x108>
 		Storage[1]=Color;
 	Color=Blue;
 	if(Color>32)
 		Storage[2]=32;
 	else
 		Storage[2]=Color;
10101160:	e0bfff17 	ldw	r2,-4(fp)
10101164:	10800204 	addi	r2,r2,8
10101168:	e0fffd17 	ldw	r3,-12(fp)
1010116c:	10c00015 	stw	r3,0(r2)
 	return ;
10101170:	0001883a 	nop
 }
10101174:	e037883a 	mov	sp,fp
10101178:	df000017 	ldw	fp,0(sp)
1010117c:	dec00104 	addi	sp,sp,4
10101180:	f800283a 	ret

10101184 <Fill_Memory>:
#include "LCD_function.h"
#define LCD_0_BASE LCD_0_0_BASE
void Fill_Memory(int Start, int End, int Color) // Function to display in the desired area the desired color.
{
10101184:	defff904 	addi	sp,sp,-28
10101188:	dfc00615 	stw	ra,24(sp)
1010118c:	df000515 	stw	fp,20(sp)
10101190:	df000504 	addi	fp,sp,20
10101194:	e13ffd15 	stw	r4,-12(fp)
10101198:	e17ffe15 	stw	r5,-8(fp)
1010119c:	e1bfff15 	stw	r6,-4(fp)
	volatile int i;

	for (i = Start; i < End; i += 4)
101011a0:	e0bffd17 	ldw	r2,-12(fp)
101011a4:	e0bffb15 	stw	r2,-20(fp)
101011a8:	00001006 	br	101011ec <Fill_Memory+0x68>
	{
		volatile int Verif;

		IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,Color);
101011ac:	e0bffb17 	ldw	r2,-20(fp)
101011b0:	1007883a 	mov	r3,r2
101011b4:	e0bfff17 	ldw	r2,-4(fp)
101011b8:	18800035 	stwio	r2,0(r3)
		Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101011bc:	e0bffb17 	ldw	r2,-20(fp)
101011c0:	10800037 	ldwio	r2,0(r2)
101011c4:	e0bffc15 	stw	r2,-16(fp)
		if (Verif != Color)
101011c8:	e0fffc17 	ldw	r3,-16(fp)
101011cc:	e0bfff17 	ldw	r2,-4(fp)
101011d0:	18800326 	beq	r3,r2,101011e0 <Fill_Memory+0x5c>
		{
			printf("Error !\n");
101011d4:	01040474 	movhi	r4,4113
101011d8:	211d4d04 	addi	r4,r4,30004
101011dc:	010534c0 	call	1010534c <puts>
#define LCD_0_BASE LCD_0_0_BASE
void Fill_Memory(int Start, int End, int Color) // Function to display in the desired area the desired color.
{
	volatile int i;

	for (i = Start; i < End; i += 4)
101011e0:	e0bffb17 	ldw	r2,-20(fp)
101011e4:	10800104 	addi	r2,r2,4
101011e8:	e0bffb15 	stw	r2,-20(fp)
101011ec:	e0fffb17 	ldw	r3,-20(fp)
101011f0:	e0bffe17 	ldw	r2,-8(fp)
101011f4:	18bfed16 	blt	r3,r2,101011ac <_gp+0xfffdfc1c>
		{
			printf("Error !\n");
		}
	}

	printf("Memory filled !\n");
101011f8:	01040474 	movhi	r4,4113
101011fc:	211d4f04 	addi	r4,r4,30012
10101200:	010534c0 	call	1010534c <puts>
}
10101204:	0001883a 	nop
10101208:	e037883a 	mov	sp,fp
1010120c:	dfc00117 	ldw	ra,4(sp)
10101210:	df000017 	ldw	fp,0(sp)
10101214:	dec00204 	addi	sp,sp,8
10101218:	f800283a 	ret

1010121c <Fill_Memory_RGBG>:

void Fill_Memory_RGBG(void) // Function to display stripes of different colors.
{
1010121c:	defffc04 	addi	sp,sp,-16
10101220:	dfc00315 	stw	ra,12(sp)
10101224:	df000215 	stw	fp,8(sp)
10101228:	df000204 	addi	fp,sp,8
	volatile int i;

	volatile int Verif;

		for (i = 0; i < LENGTHBUFFER; i += 4)
1010122c:	e03ffe15 	stw	zero,-8(fp)
10101230:	00005c06 	br	101013a4 <Fill_Memory_RGBG+0x188>
		{
			if ( i< LENGTHBUFFER/4)
10101234:	e0bffe17 	ldw	r2,-8(fp)
10101238:	00e57fd4 	movui	r3,38399
1010123c:	18801016 	blt	r3,r2,10101280 <Fill_Memory_RGBG+0x64>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,RED);
10101240:	e0bffe17 	ldw	r2,-8(fp)
10101244:	1007883a 	mov	r3,r2
10101248:	00be0074 	movhi	r2,63489
1010124c:	10be0004 	addi	r2,r2,-2048
10101250:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101254:	e0bffe17 	ldw	r2,-8(fp)
10101258:	10800037 	ldwio	r2,0(r2)
1010125c:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != RED)
10101260:	e0ffff17 	ldw	r3,-4(fp)
10101264:	00be0074 	movhi	r2,63489
10101268:	10be0004 	addi	r2,r2,-2048
1010126c:	18804a26 	beq	r3,r2,10101398 <Fill_Memory_RGBG+0x17c>
				{
					printf("Error !\n");
10101270:	01040474 	movhi	r4,4113
10101274:	211d4d04 	addi	r4,r4,30004
10101278:	010534c0 	call	1010534c <puts>
1010127c:	00004606 	br	10101398 <Fill_Memory_RGBG+0x17c>
				}
			}
			else if ( i> LENGTHBUFFER/4 & i<LENGTHBUFFER/2)
10101280:	e0bffe17 	ldw	r2,-8(fp)
10101284:	00e58014 	movui	r3,38400
10101288:	1884803a 	cmplt	r2,r3,r2
1010128c:	1009883a 	mov	r4,r2
10101290:	e0fffe17 	ldw	r3,-8(fp)
10101294:	00800074 	movhi	r2,1
10101298:	108affc4 	addi	r2,r2,11263
1010129c:	10c4403a 	cmpge	r2,r2,r3
101012a0:	2084703a 	and	r2,r4,r2
101012a4:	10803fcc 	andi	r2,r2,255
101012a8:	10001026 	beq	r2,zero,101012ec <Fill_Memory_RGBG+0xd0>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,GREEN);
101012ac:	e0bffe17 	ldw	r2,-8(fp)
101012b0:	1007883a 	mov	r3,r2
101012b4:	0081f834 	movhi	r2,2016
101012b8:	1081f804 	addi	r2,r2,2016
101012bc:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101012c0:	e0bffe17 	ldw	r2,-8(fp)
101012c4:	10800037 	ldwio	r2,0(r2)
101012c8:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != GREEN)
101012cc:	e0ffff17 	ldw	r3,-4(fp)
101012d0:	0081f834 	movhi	r2,2016
101012d4:	1081f804 	addi	r2,r2,2016
101012d8:	18802f26 	beq	r3,r2,10101398 <Fill_Memory_RGBG+0x17c>
				{
					printf("Error !\n");
101012dc:	01040474 	movhi	r4,4113
101012e0:	211d4d04 	addi	r4,r4,30004
101012e4:	010534c0 	call	1010534c <puts>
101012e8:	00002b06 	br	10101398 <Fill_Memory_RGBG+0x17c>
				}
			}
			else if ( i> LENGTHBUFFER/2 & i<3*LENGTHBUFFER/4)
101012ec:	e0fffe17 	ldw	r3,-8(fp)
101012f0:	00800074 	movhi	r2,1
101012f4:	108b0004 	addi	r2,r2,11264
101012f8:	10c4803a 	cmplt	r2,r2,r3
101012fc:	1009883a 	mov	r4,r2
10101300:	e0fffe17 	ldw	r3,-8(fp)
10101304:	008000b4 	movhi	r2,2
10101308:	10b07fc4 	addi	r2,r2,-15873
1010130c:	10c4403a 	cmpge	r2,r2,r3
10101310:	2084703a 	and	r2,r4,r2
10101314:	10803fcc 	andi	r2,r2,255
10101318:	10001026 	beq	r2,zero,1010135c <Fill_Memory_RGBG+0x140>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,BLUE);
1010131c:	e0bffe17 	ldw	r2,-8(fp)
10101320:	1007883a 	mov	r3,r2
10101324:	008007f4 	movhi	r2,31
10101328:	108007c4 	addi	r2,r2,31
1010132c:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101330:	e0bffe17 	ldw	r2,-8(fp)
10101334:	10800037 	ldwio	r2,0(r2)
10101338:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != BLUE)
1010133c:	e0ffff17 	ldw	r3,-4(fp)
10101340:	008007f4 	movhi	r2,31
10101344:	108007c4 	addi	r2,r2,31
10101348:	18801326 	beq	r3,r2,10101398 <Fill_Memory_RGBG+0x17c>
				{
					printf("Error !\n");
1010134c:	01040474 	movhi	r4,4113
10101350:	211d4d04 	addi	r4,r4,30004
10101354:	010534c0 	call	1010534c <puts>
10101358:	00000f06 	br	10101398 <Fill_Memory_RGBG+0x17c>
				}
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,GREEN);
1010135c:	e0bffe17 	ldw	r2,-8(fp)
10101360:	1007883a 	mov	r3,r2
10101364:	0081f834 	movhi	r2,2016
10101368:	1081f804 	addi	r2,r2,2016
1010136c:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101370:	e0bffe17 	ldw	r2,-8(fp)
10101374:	10800037 	ldwio	r2,0(r2)
10101378:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != GREEN)
1010137c:	e0ffff17 	ldw	r3,-4(fp)
10101380:	0081f834 	movhi	r2,2016
10101384:	1081f804 	addi	r2,r2,2016
10101388:	18800326 	beq	r3,r2,10101398 <Fill_Memory_RGBG+0x17c>
				{
					printf("Error !\n");
1010138c:	01040474 	movhi	r4,4113
10101390:	211d4d04 	addi	r4,r4,30004
10101394:	010534c0 	call	1010534c <puts>
{
	volatile int i;

	volatile int Verif;

		for (i = 0; i < LENGTHBUFFER; i += 4)
10101398:	e0bffe17 	ldw	r2,-8(fp)
1010139c:	10800104 	addi	r2,r2,4
101013a0:	e0bffe15 	stw	r2,-8(fp)
101013a4:	e0fffe17 	ldw	r3,-8(fp)
101013a8:	008000b4 	movhi	r2,2
101013ac:	1095ffc4 	addi	r2,r2,22527
101013b0:	10ffa00e 	bge	r2,r3,10101234 <_gp+0xfffdfca4>
				}
			}

		}

		printf("Memory filled !\n");
101013b4:	01040474 	movhi	r4,4113
101013b8:	211d4f04 	addi	r4,r4,30012
101013bc:	010534c0 	call	1010534c <puts>
}
101013c0:	0001883a 	nop
101013c4:	e037883a 	mov	sp,fp
101013c8:	dfc00117 	ldw	ra,4(sp)
101013cc:	df000017 	ldw	fp,0(sp)
101013d0:	dec00204 	addi	sp,sp,8
101013d4:	f800283a 	ret

101013d8 <Fill_Memory_0_1>:

void Fill_Memory_0_1(void) // Function to display 2 white pixels and then 2 black pixels.
{
101013d8:	defffb04 	addi	sp,sp,-20
101013dc:	dfc00415 	stw	ra,16(sp)
101013e0:	df000315 	stw	fp,12(sp)
101013e4:	df000304 	addi	fp,sp,12
	volatile int i;
	volatile int j;

	volatile int Verif;

	j = 0;
101013e8:	e03ffe15 	stw	zero,-8(fp)

	for (i = 0; i < LENGTHBUFFER; i += 4)
101013ec:	e03ffd15 	stw	zero,-12(fp)
101013f0:	00002106 	br	10101478 <Fill_Memory_0_1+0xa0>
		{
			if (j == 0)
101013f4:	e0bffe17 	ldw	r2,-8(fp)
101013f8:	10000e1e 	bne	r2,zero,10101434 <Fill_Memory_0_1+0x5c>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,0);
101013fc:	e0bffd17 	ldw	r2,-12(fp)
10101400:	0007883a 	mov	r3,zero
10101404:	10c00035 	stwio	r3,0(r2)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101408:	e0bffd17 	ldw	r2,-12(fp)
1010140c:	10800037 	ldwio	r2,0(r2)
10101410:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != 0)
10101414:	e0bfff17 	ldw	r2,-4(fp)
10101418:	10000326 	beq	r2,zero,10101428 <Fill_Memory_0_1+0x50>
				{
					printf("Error !\n");
1010141c:	01040474 	movhi	r4,4113
10101420:	211d4d04 	addi	r4,r4,30004
10101424:	010534c0 	call	1010534c <puts>
				}
				j = 1;
10101428:	00800044 	movi	r2,1
1010142c:	e0bffe15 	stw	r2,-8(fp)
10101430:	00000e06 	br	1010146c <Fill_Memory_0_1+0x94>
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,0xFFFFFFFF);
10101434:	e0bffd17 	ldw	r2,-12(fp)
10101438:	1007883a 	mov	r3,r2
1010143c:	00bfffc4 	movi	r2,-1
10101440:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101444:	e0bffd17 	ldw	r2,-12(fp)
10101448:	10800037 	ldwio	r2,0(r2)
1010144c:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != 0xFFFFFFFF)
10101450:	e0bfff17 	ldw	r2,-4(fp)
10101454:	10bfffe0 	cmpeqi	r2,r2,-1
10101458:	1000031e 	bne	r2,zero,10101468 <Fill_Memory_0_1+0x90>
				{
					printf("Error !\n");
1010145c:	01040474 	movhi	r4,4113
10101460:	211d4d04 	addi	r4,r4,30004
10101464:	010534c0 	call	1010534c <puts>
				}
				j = 0;
10101468:	e03ffe15 	stw	zero,-8(fp)

	volatile int Verif;

	j = 0;

	for (i = 0; i < LENGTHBUFFER; i += 4)
1010146c:	e0bffd17 	ldw	r2,-12(fp)
10101470:	10800104 	addi	r2,r2,4
10101474:	e0bffd15 	stw	r2,-12(fp)
10101478:	e0fffd17 	ldw	r3,-12(fp)
1010147c:	008000b4 	movhi	r2,2
10101480:	1095ffc4 	addi	r2,r2,22527
10101484:	10ffdb0e 	bge	r2,r3,101013f4 <_gp+0xfffdfe64>
				}
				j = 0;
			}
		}

		printf("Memory filled !\n");
10101488:	01040474 	movhi	r4,4113
1010148c:	211d4f04 	addi	r4,r4,30012
10101490:	010534c0 	call	1010534c <puts>
}
10101494:	0001883a 	nop
10101498:	e037883a 	mov	sp,fp
1010149c:	dfc00117 	ldw	ra,4(sp)
101014a0:	df000017 	ldw	fp,0(sp)
101014a4:	dec00204 	addi	sp,sp,8
101014a8:	f800283a 	ret

101014ac <Fill_Test_0>:


void Fill_Test_0(void)
{
101014ac:	defffd04 	addi	sp,sp,-12
101014b0:	df000215 	stw	fp,8(sp)
101014b4:	df000204 	addi	fp,sp,8
	volatile int i;
	volatile int j;

	j = 0;
101014b8:	e03fff15 	stw	zero,-4(fp)

	for (i = STARTADD; i < LENGTHBUFFER; i+=4)
101014bc:	e03ffe15 	stw	zero,-8(fp)
101014c0:	00002b06 	br	10101570 <Fill_Test_0+0xc4>
	{
		if (i < 160*4*8)
101014c4:	e0bffe17 	ldw	r2,-8(fp)
101014c8:	10850008 	cmpgei	r2,r2,5120
101014cc:	10000e1e 	bne	r2,zero,10101508 <Fill_Test_0+0x5c>
		{
			if(j == 0)
101014d0:	e0bfff17 	ldw	r2,-4(fp)
101014d4:	1000061e 	bne	r2,zero,101014f0 <Fill_Test_0+0x44>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,BLACK);
101014d8:	e0bffe17 	ldw	r2,-8(fp)
101014dc:	0007883a 	mov	r3,zero
101014e0:	10c00035 	stwio	r3,0(r2)
				j = 1;
101014e4:	00800044 	movi	r2,1
101014e8:	e0bfff15 	stw	r2,-4(fp)
101014ec:	00001d06 	br	10101564 <Fill_Test_0+0xb8>
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,WHITE);
101014f0:	e0bffe17 	ldw	r2,-8(fp)
101014f4:	1007883a 	mov	r3,r2
101014f8:	00bfffc4 	movi	r2,-1
101014fc:	18800035 	stwio	r2,0(r3)
				j = 0;
10101500:	e03fff15 	stw	zero,-4(fp)
10101504:	00001706 	br	10101564 <Fill_Test_0+0xb8>
			}
		}
		else if (i >= LENGTHBUFFER-160*4*8)
10101508:	e0fffe17 	ldw	r3,-8(fp)
1010150c:	008000b4 	movhi	r2,2
10101510:	1090ffc4 	addi	r2,r2,17407
10101514:	10c00e0e 	bge	r2,r3,10101550 <Fill_Test_0+0xa4>
		{
			if(j == 0)
10101518:	e0bfff17 	ldw	r2,-4(fp)
1010151c:	1000061e 	bne	r2,zero,10101538 <Fill_Test_0+0x8c>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,BLACK);
10101520:	e0bffe17 	ldw	r2,-8(fp)
10101524:	0007883a 	mov	r3,zero
10101528:	10c00035 	stwio	r3,0(r2)
				j = 1;
1010152c:	00800044 	movi	r2,1
10101530:	e0bfff15 	stw	r2,-4(fp)
10101534:	00000b06 	br	10101564 <Fill_Test_0+0xb8>
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,WHITE);
10101538:	e0bffe17 	ldw	r2,-8(fp)
1010153c:	1007883a 	mov	r3,r2
10101540:	00bfffc4 	movi	r2,-1
10101544:	18800035 	stwio	r2,0(r3)
				j = 0;
10101548:	e03fff15 	stw	zero,-4(fp)
1010154c:	00000506 	br	10101564 <Fill_Test_0+0xb8>
			}
		}
		else
		{
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,RED);
10101550:	e0bffe17 	ldw	r2,-8(fp)
10101554:	1007883a 	mov	r3,r2
10101558:	00be0074 	movhi	r2,63489
1010155c:	10be0004 	addi	r2,r2,-2048
10101560:	18800035 	stwio	r2,0(r3)
	volatile int i;
	volatile int j;

	j = 0;

	for (i = STARTADD; i < LENGTHBUFFER; i+=4)
10101564:	e0bffe17 	ldw	r2,-8(fp)
10101568:	10800104 	addi	r2,r2,4
1010156c:	e0bffe15 	stw	r2,-8(fp)
10101570:	e0fffe17 	ldw	r3,-8(fp)
10101574:	008000b4 	movhi	r2,2
10101578:	1095ffc4 	addi	r2,r2,22527
1010157c:	10ffd10e 	bge	r2,r3,101014c4 <_gp+0xfffdff34>
		else
		{
			IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,RED);
		}
	}
}
10101580:	0001883a 	nop
10101584:	e037883a 	mov	sp,fp
10101588:	df000017 	ldw	fp,0(sp)
1010158c:	dec00104 	addi	sp,sp,4
10101590:	f800283a 	ret

10101594 <Fill_Test_1>:

void Fill_Test_1(void)
{
10101594:	defffd04 	addi	sp,sp,-12
10101598:	df000215 	stw	fp,8(sp)
1010159c:	df000204 	addi	fp,sp,8
	volatile int i;
	volatile int j;

	for (i = 0; i < 240; i += 1)
101015a0:	e03ffe15 	stw	zero,-8(fp)
101015a4:	00002006 	br	10101628 <Fill_Test_1+0x94>
	{
		for (j = 0; j < 160; j+=1)
101015a8:	e03fff15 	stw	zero,-4(fp)
101015ac:	00001806 	br	10101610 <Fill_Test_1+0x7c>
		{
			if ( i == j)
101015b0:	e0fffe17 	ldw	r3,-8(fp)
101015b4:	e0bfff17 	ldw	r2,-4(fp)
101015b8:	18800a1e 	bne	r3,r2,101015e4 <Fill_Test_1+0x50>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i*160*4 + j*4, WHITE);
101015bc:	e0bffe17 	ldw	r2,-8(fp)
101015c0:	10c02824 	muli	r3,r2,160
101015c4:	e0bfff17 	ldw	r2,-4(fp)
101015c8:	1885883a 	add	r2,r3,r2
101015cc:	1085883a 	add	r2,r2,r2
101015d0:	1085883a 	add	r2,r2,r2
101015d4:	1007883a 	mov	r3,r2
101015d8:	00bfffc4 	movi	r2,-1
101015dc:	18800035 	stwio	r2,0(r3)
101015e0:	00000806 	br	10101604 <Fill_Test_1+0x70>
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i*160*4 + j*4, BLACK);
101015e4:	e0bffe17 	ldw	r2,-8(fp)
101015e8:	10c02824 	muli	r3,r2,160
101015ec:	e0bfff17 	ldw	r2,-4(fp)
101015f0:	1885883a 	add	r2,r3,r2
101015f4:	1085883a 	add	r2,r2,r2
101015f8:	1085883a 	add	r2,r2,r2
101015fc:	0007883a 	mov	r3,zero
10101600:	10c00035 	stwio	r3,0(r2)
	volatile int i;
	volatile int j;

	for (i = 0; i < 240; i += 1)
	{
		for (j = 0; j < 160; j+=1)
10101604:	e0bfff17 	ldw	r2,-4(fp)
10101608:	10800044 	addi	r2,r2,1
1010160c:	e0bfff15 	stw	r2,-4(fp)
10101610:	e0bfff17 	ldw	r2,-4(fp)
10101614:	10802810 	cmplti	r2,r2,160
10101618:	103fe51e 	bne	r2,zero,101015b0 <_gp+0xfffe0020>
void Fill_Test_1(void)
{
	volatile int i;
	volatile int j;

	for (i = 0; i < 240; i += 1)
1010161c:	e0bffe17 	ldw	r2,-8(fp)
10101620:	10800044 	addi	r2,r2,1
10101624:	e0bffe15 	stw	r2,-8(fp)
10101628:	e0bffe17 	ldw	r2,-8(fp)
1010162c:	10803c10 	cmplti	r2,r2,240
10101630:	103fdd1e 	bne	r2,zero,101015a8 <_gp+0xfffe0018>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i*160*4 + j*4, BLACK);
			}
		}
	}
}
10101634:	0001883a 	nop
10101638:	e037883a 	mov	sp,fp
1010163c:	df000017 	ldw	fp,0(sp)
10101640:	dec00104 	addi	sp,sp,4
10101644:	f800283a 	ret

10101648 <LCD_Write_Command>:

void LCD_Write_Command(int Command_Data) // Write a command.
{
10101648:	defffd04 	addi	sp,sp,-12
1010164c:	df000215 	stw	fp,8(sp)
10101650:	df000204 	addi	fp,sp,8
10101654:	e13fff15 	stw	r4,-4(fp)
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
10101658:	00840034 	movhi	r2,4096
1010165c:	10822104 	addi	r2,r2,2180
10101660:	10800037 	ldwio	r2,0(r2)
10101664:	e0bffe15 	stw	r2,-8(fp)

	while (Check != 0)
10101668:	00000406 	br	1010167c <LCD_Write_Command+0x34>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
1010166c:	00840034 	movhi	r2,4096
10101670:	10822104 	addi	r2,r2,2180
10101674:	10800037 	ldwio	r2,0(r2)
10101678:	e0bffe15 	stw	r2,-8(fp)
{
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);

	while (Check != 0)
1010167c:	e0bffe17 	ldw	r2,-8(fp)
10101680:	103ffa1e 	bne	r2,zero,1010166c <_gp+0xfffe00dc>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
	}

	IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,Command_Data);
10101684:	00840034 	movhi	r2,4096
10101688:	10822004 	addi	r2,r2,2176
1010168c:	e0ffff17 	ldw	r3,-4(fp)
10101690:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0x00000001);
10101694:	00c00044 	movi	r3,1
10101698:	00840034 	movhi	r2,4096
1010169c:	10822104 	addi	r2,r2,2180
101016a0:	10c00035 	stwio	r3,0(r2)
}
101016a4:	0001883a 	nop
101016a8:	e037883a 	mov	sp,fp
101016ac:	df000017 	ldw	fp,0(sp)
101016b0:	dec00104 	addi	sp,sp,4
101016b4:	f800283a 	ret

101016b8 <LCD_Write_Data>:

void LCD_Write_Data(int Command_Data) // Write data.
{
101016b8:	defffd04 	addi	sp,sp,-12
101016bc:	df000215 	stw	fp,8(sp)
101016c0:	df000204 	addi	fp,sp,8
101016c4:	e13fff15 	stw	r4,-4(fp)
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
101016c8:	00840034 	movhi	r2,4096
101016cc:	10822104 	addi	r2,r2,2180
101016d0:	10800037 	ldwio	r2,0(r2)
101016d4:	e0bffe15 	stw	r2,-8(fp)

	while (Check != 0)
101016d8:	00000406 	br	101016ec <LCD_Write_Data+0x34>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
101016dc:	00840034 	movhi	r2,4096
101016e0:	10822104 	addi	r2,r2,2180
101016e4:	10800037 	ldwio	r2,0(r2)
101016e8:	e0bffe15 	stw	r2,-8(fp)
{
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);

	while (Check != 0)
101016ec:	e0bffe17 	ldw	r2,-8(fp)
101016f0:	103ffa1e 	bne	r2,zero,101016dc <_gp+0xfffe014c>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
	}

	IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,Command_Data);
101016f4:	00840034 	movhi	r2,4096
101016f8:	10822004 	addi	r2,r2,2176
101016fc:	e0ffff17 	ldw	r3,-4(fp)
10101700:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0x00000002);
10101704:	00c00084 	movi	r3,2
10101708:	00840034 	movhi	r2,4096
1010170c:	10822104 	addi	r2,r2,2180
10101710:	10c00035 	stwio	r3,0(r2)
}
10101714:	0001883a 	nop
10101718:	e037883a 	mov	sp,fp
1010171c:	df000017 	ldw	fp,0(sp)
10101720:	dec00104 	addi	sp,sp,4
10101724:	f800283a 	ret

10101728 <LCD_Display>:

void LCD_Display() // Continuous display.
{
10101728:	defffe04 	addi	sp,sp,-8
1010172c:	df000115 	stw	fp,4(sp)
10101730:	df000104 	addi	fp,sp,4
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
10101734:	00840034 	movhi	r2,4096
10101738:	10822104 	addi	r2,r2,2180
1010173c:	10800037 	ldwio	r2,0(r2)
10101740:	e0bfff15 	stw	r2,-4(fp)

	while (Check != 0)
10101744:	00000406 	br	10101758 <LCD_Display+0x30>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
10101748:	00840034 	movhi	r2,4096
1010174c:	10822104 	addi	r2,r2,2180
10101750:	10800037 	ldwio	r2,0(r2)
10101754:	e0bfff15 	stw	r2,-4(fp)
{
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);

	while (Check != 0)
10101758:	e0bfff17 	ldw	r2,-4(fp)
1010175c:	103ffa1e 	bne	r2,zero,10101748 <_gp+0xfffe01b8>
	{
		Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
	}

	IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,0x0000002C);
10101760:	00c00b04 	movi	r3,44
10101764:	00840034 	movhi	r2,4096
10101768:	10822004 	addi	r2,r2,2176
1010176c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0x00000003);
10101770:	00c000c4 	movi	r3,3
10101774:	00840034 	movhi	r2,4096
10101778:	10822104 	addi	r2,r2,2180
1010177c:	10c00035 	stwio	r3,0(r2)
}
10101780:	0001883a 	nop
10101784:	e037883a 	mov	sp,fp
10101788:	df000017 	ldw	fp,0(sp)
1010178c:	dec00104 	addi	sp,sp,4
10101790:	f800283a 	ret

10101794 <LCD_Configuration>:

void LCD_Configuration()
{
10101794:	defffd04 	addi	sp,sp,-12
10101798:	dfc00215 	stw	ra,8(sp)
1010179c:	df000115 	stw	fp,4(sp)
101017a0:	df000104 	addi	fp,sp,4
	volatile int j;


		printf("Configuration LCD Start \n");
101017a4:	01040474 	movhi	r4,4113
101017a8:	211d5304 	addi	r4,r4,30028
101017ac:	010534c0 	call	1010534c <puts>
		for (j = 0; j < 10000; j += 1);
101017b0:	e03fff15 	stw	zero,-4(fp)
101017b4:	00000306 	br	101017c4 <LCD_Configuration+0x30>
101017b8:	e0bfff17 	ldw	r2,-4(fp)
101017bc:	10800044 	addi	r2,r2,1
101017c0:	e0bfff15 	stw	r2,-4(fp)
101017c4:	e0bfff17 	ldw	r2,-4(fp)
101017c8:	1089c410 	cmplti	r2,r2,10000
101017cc:	103ffa1e 	bne	r2,zero,101017b8 <_gp+0xfffe0228>
		// Before anything we provide the hardware the start address and the length of a buffer. They are define in "Define_Header.h".
		IOWR_32DIRECT(LCD_0_BASE,REGSTARTADD,HPS_0_BRIDGES_BASE);
101017d0:	0007883a 	mov	r3,zero
101017d4:	00840034 	movhi	r2,4096
101017d8:	10822204 	addi	r2,r2,2184
101017dc:	10c00035 	stwio	r3,0(r2)
		alt_printf("RegStartAdd=%x\n", IORD_32DIRECT(LCD_0_BASE,REGSTARTADD));
101017e0:	00840034 	movhi	r2,4096
101017e4:	10822204 	addi	r2,r2,2184
101017e8:	10800037 	ldwio	r2,0(r2)
101017ec:	100b883a 	mov	r5,r2
101017f0:	01040474 	movhi	r4,4113
101017f4:	211d5a04 	addi	r4,r4,30056
101017f8:	0114b040 	call	10114b04 <alt_printf>
		IOWR_32DIRECT(LCD_0_BASE,REGLENGTHBUFFER,LENGTHBUFFER);
101017fc:	00c000b4 	movhi	r3,2
10101800:	18d60004 	addi	r3,r3,22528
10101804:	00840034 	movhi	r2,4096
10101808:	10822304 	addi	r2,r2,2188
1010180c:	10c00035 	stwio	r3,0(r2)
		alt_printf("RegLengthBuffer=%x\n", IORD_32DIRECT(LCD_0_BASE,REGLENGTHBUFFER));
10101810:	00840034 	movhi	r2,4096
10101814:	10822304 	addi	r2,r2,2188
10101818:	10800037 	ldwio	r2,0(r2)
1010181c:	100b883a 	mov	r5,r2
10101820:	01040474 	movhi	r4,4113
10101824:	211d5e04 	addi	r4,r4,30072
10101828:	0114b040 	call	10114b04 <alt_printf>

		// To avoid any trouble we manually reset the values in RegCommandData and in RegStateCommandData.
		IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0);
1010182c:	0007883a 	mov	r3,zero
10101830:	00840034 	movhi	r2,4096
10101834:	10822104 	addi	r2,r2,2180
10101838:	10c00035 	stwio	r3,0(r2)
		alt_printf("RegStateCommandData=%x\n", IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA));
1010183c:	00840034 	movhi	r2,4096
10101840:	10822104 	addi	r2,r2,2180
10101844:	10800037 	ldwio	r2,0(r2)
10101848:	100b883a 	mov	r5,r2
1010184c:	01040474 	movhi	r4,4113
10101850:	211d6304 	addi	r4,r4,30092
10101854:	0114b040 	call	10114b04 <alt_printf>
		IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,0);
10101858:	0007883a 	mov	r3,zero
1010185c:	00840034 	movhi	r2,4096
10101860:	10822004 	addi	r2,r2,2176
10101864:	10c00035 	stwio	r3,0(r2)
		alt_printf("RegCommandData=%x\n", IORD_32DIRECT(LCD_0_BASE,REGCOMMANDDATA));
10101868:	00840034 	movhi	r2,4096
1010186c:	10822004 	addi	r2,r2,2176
10101870:	10800037 	ldwio	r2,0(r2)
10101874:	100b883a 	mov	r5,r2
10101878:	01040474 	movhi	r4,4113
1010187c:	211d6904 	addi	r4,r4,30116
10101880:	0114b040 	call	10114b04 <alt_printf>

		// Function to fill the memory.
		//Fill_Memory(STARTADD,LENGTHBUFFER/2,RED);
		//Fill_Memory(LENGTHBUFFER/2,LENGTHBUFFER,BLUE);
		//Fill_Memory_0_1();
		Fill_Memory_RGBG();
10101884:	010121c0 	call	1010121c <Fill_Memory_RGBG>
		//Fill_Test_0();
		//Fill_Test_1();

		// Software reset of the LCD.
		LCD_Write_Command(0x00000001);
10101888:	01000044 	movi	r4,1
1010188c:	01016480 	call	10101648 <LCD_Write_Command>
		for (j = 0; j < 10000; j += 1); // Mandatory delay.
10101890:	e03fff15 	stw	zero,-4(fp)
10101894:	00000306 	br	101018a4 <LCD_Configuration+0x110>
10101898:	e0bfff17 	ldw	r2,-4(fp)
1010189c:	10800044 	addi	r2,r2,1
101018a0:	e0bfff15 	stw	r2,-4(fp)
101018a4:	e0bfff17 	ldw	r2,-4(fp)
101018a8:	1089c410 	cmplti	r2,r2,10000
101018ac:	103ffa1e 	bne	r2,zero,10101898 <_gp+0xfffe0308>
		LCD_Write_Command(0x00000000);
101018b0:	0009883a 	mov	r4,zero
101018b4:	01016480 	call	10101648 <LCD_Write_Command>
		for (j = 0; j < 100000; j += 1); // Mandatory delay.
101018b8:	e03fff15 	stw	zero,-4(fp)
101018bc:	00000306 	br	101018cc <LCD_Configuration+0x138>
101018c0:	e0bfff17 	ldw	r2,-4(fp)
101018c4:	10800044 	addi	r2,r2,1
101018c8:	e0bfff15 	stw	r2,-4(fp)
101018cc:	e0ffff17 	ldw	r3,-4(fp)
101018d0:	008000b4 	movhi	r2,2
101018d4:	10a1a7c4 	addi	r2,r2,-31073
101018d8:	10fff90e 	bge	r2,r3,101018c0 <_gp+0xfffe0330>
		LCD_Write_Command(0x00000001);
101018dc:	01000044 	movi	r4,1
101018e0:	01016480 	call	10101648 <LCD_Write_Command>
		for (j = 0; j < 500000; j += 1); // Mandatory delay.
101018e4:	e03fff15 	stw	zero,-4(fp)
101018e8:	00000306 	br	101018f8 <LCD_Configuration+0x164>
101018ec:	e0bfff17 	ldw	r2,-4(fp)
101018f0:	10800044 	addi	r2,r2,1
101018f4:	e0bfff15 	stw	r2,-4(fp)
101018f8:	e0ffff17 	ldw	r3,-4(fp)
101018fc:	00800234 	movhi	r2,8
10101900:	10a847c4 	addi	r2,r2,-24289
10101904:	10fff90e 	bge	r2,r3,101018ec <_gp+0xfffe035c>

		// We define all the parameters for the LCD.
		LCD_Write_Command(0x00000011);
10101908:	01000444 	movi	r4,17
1010190c:	01016480 	call	10101648 <LCD_Write_Command>

		LCD_Write_Command(0x000000CF);
10101910:	010033c4 	movi	r4,207
10101914:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
10101918:	0009883a 	mov	r4,zero
1010191c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000081);
10101920:	01002044 	movi	r4,129
10101924:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x000000C0);
10101928:	01003004 	movi	r4,192
1010192c:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000ED);
10101930:	01003b44 	movi	r4,237
10101934:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000064);
10101938:	01001904 	movi	r4,100
1010193c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000003);
10101940:	010000c4 	movi	r4,3
10101944:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000012);
10101948:	01000484 	movi	r4,18
1010194c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000081);
10101950:	01002044 	movi	r4,129
10101954:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000E8);
10101958:	01003a04 	movi	r4,232
1010195c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000085);
10101960:	01002144 	movi	r4,133
10101964:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000001);
10101968:	01000044 	movi	r4,1
1010196c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000798);
10101970:	0101e604 	movi	r4,1944
10101974:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000CB);
10101978:	010032c4 	movi	r4,203
1010197c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000039);
10101980:	01000e44 	movi	r4,57
10101984:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000002C);
10101988:	01000b04 	movi	r4,44
1010198c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101990:	0009883a 	mov	r4,zero
10101994:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000034);
10101998:	01000d04 	movi	r4,52
1010199c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000002);
101019a0:	01000084 	movi	r4,2
101019a4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000F7);
101019a8:	01003dc4 	movi	r4,247
101019ac:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000020);
101019b0:	01000804 	movi	r4,32
101019b4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000EA);
101019b8:	01003a84 	movi	r4,234
101019bc:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
101019c0:	0009883a 	mov	r4,zero
101019c4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
101019c8:	0009883a 	mov	r4,zero
101019cc:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000B1);
101019d0:	01002c44 	movi	r4,177
101019d4:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
101019d8:	0009883a 	mov	r4,zero
101019dc:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000001B);
101019e0:	010006c4 	movi	r4,27
101019e4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000B6);
101019e8:	01002d84 	movi	r4,182
101019ec:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x0000000A);
101019f0:	01000284 	movi	r4,10
101019f4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x000000A2);
101019f8:	01002884 	movi	r4,162
101019fc:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000C0);
10101a00:	01003004 	movi	r4,192
10101a04:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000005);
10101a08:	01000144 	movi	r4,5
10101a0c:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000C1);
10101a10:	01003044 	movi	r4,193
10101a14:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000011);
10101a18:	01000444 	movi	r4,17
10101a1c:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000C5);
10101a20:	01003144 	movi	r4,197
10101a24:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000045);
10101a28:	01001144 	movi	r4,69
10101a2c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000045);
10101a30:	01001144 	movi	r4,69
10101a34:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000C7);
10101a38:	010031c4 	movi	r4,199
10101a3c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x000000A2);
10101a40:	01002884 	movi	r4,162
10101a44:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x00000036); // Modified to match our image.
10101a48:	01000d84 	movi	r4,54
10101a4c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x000000E8);
10101a50:	01003a04 	movi	r4,232
10101a54:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000F2);
10101a58:	01003c84 	movi	r4,242
10101a5c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
10101a60:	0009883a 	mov	r4,zero
10101a64:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x00000026);
10101a68:	01000984 	movi	r4,38
10101a6c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000001);
10101a70:	01000044 	movi	r4,1
10101a74:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000E0);
10101a78:	01003804 	movi	r4,224
10101a7c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x0000000F);
10101a80:	010003c4 	movi	r4,15
10101a84:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000026);
10101a88:	01000984 	movi	r4,38
10101a8c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000024);
10101a90:	01000904 	movi	r4,36
10101a94:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000000B);
10101a98:	010002c4 	movi	r4,11
10101a9c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000000E);
10101aa0:	01000384 	movi	r4,14
10101aa4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000008);
10101aa8:	01000204 	movi	r4,8
10101aac:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000004B);
10101ab0:	010012c4 	movi	r4,75
10101ab4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x000000A8);
10101ab8:	01002a04 	movi	r4,168
10101abc:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000003B);
10101ac0:	01000ec4 	movi	r4,59
10101ac4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000000A);
10101ac8:	01000284 	movi	r4,10
10101acc:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000014);
10101ad0:	01000504 	movi	r4,20
10101ad4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000006);
10101ad8:	01000184 	movi	r4,6
10101adc:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000010);
10101ae0:	01000404 	movi	r4,16
10101ae4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000009);
10101ae8:	01000244 	movi	r4,9
10101aec:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101af0:	0009883a 	mov	r4,zero
10101af4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000E1);
10101af8:	01003844 	movi	r4,225
10101afc:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
10101b00:	0009883a 	mov	r4,zero
10101b04:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000001C);
10101b08:	01000704 	movi	r4,28
10101b0c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000020);
10101b10:	01000804 	movi	r4,32
10101b14:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000004);
10101b18:	01000104 	movi	r4,4
10101b1c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000010);
10101b20:	01000404 	movi	r4,16
10101b24:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000008);
10101b28:	01000204 	movi	r4,8
10101b2c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000034);
10101b30:	01000d04 	movi	r4,52
10101b34:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000047);
10101b38:	010011c4 	movi	r4,71
10101b3c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000044);
10101b40:	01001104 	movi	r4,68
10101b44:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000005);
10101b48:	01000144 	movi	r4,5
10101b4c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000000B);
10101b50:	010002c4 	movi	r4,11
10101b54:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000009);
10101b58:	01000244 	movi	r4,9
10101b5c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000002F);
10101b60:	01000bc4 	movi	r4,47
10101b64:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000036);
10101b68:	01000d84 	movi	r4,54
10101b6c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000000F);
10101b70:	010003c4 	movi	r4,15
10101b74:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x0000002A);	// Modified to match our image.
10101b78:	01000a84 	movi	r4,42
10101b7c:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
10101b80:	0009883a 	mov	r4,zero
10101b84:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101b88:	0009883a 	mov	r4,zero
10101b8c:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000001);
10101b90:	01000044 	movi	r4,1
10101b94:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x0000003F);
10101b98:	01000fc4 	movi	r4,63
10101b9c:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x0000002B);	// Modified to match our image.
10101ba0:	01000ac4 	movi	r4,43
10101ba4:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000000);
10101ba8:	0009883a 	mov	r4,zero
10101bac:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101bb0:	0009883a 	mov	r4,zero
10101bb4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101bb8:	0009883a 	mov	r4,zero
10101bbc:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x000000EF);
10101bc0:	01003bc4 	movi	r4,239
10101bc4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x0000003A);
10101bc8:	01000e84 	movi	r4,58
10101bcc:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000055);
10101bd0:	01001544 	movi	r4,85
10101bd4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x000000F6);
10101bd8:	01003d84 	movi	r4,246
10101bdc:	01016480 	call	10101648 <LCD_Write_Command>
		LCD_Write_Data(0x00000001);
10101be0:	01000044 	movi	r4,1
10101be4:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000030);
10101be8:	01000c04 	movi	r4,48
10101bec:	01016b80 	call	101016b8 <LCD_Write_Data>
		LCD_Write_Data(0x00000000);
10101bf0:	0009883a 	mov	r4,zero
10101bf4:	01016b80 	call	101016b8 <LCD_Write_Data>

		LCD_Write_Command(0x00000029);
10101bf8:	01000a44 	movi	r4,41
10101bfc:	01016480 	call	10101648 <LCD_Write_Command>

		// To perform a single display.
		//LCD_Write_Command(0x0000002C);

		// To perform a continuous display.
		LCD_Display();
10101c00:	01017280 	call	10101728 <LCD_Display>
		printf("Configuration LCD Over \n");
10101c04:	01040474 	movhi	r4,4113
10101c08:	211d6e04 	addi	r4,r4,30136
10101c0c:	010534c0 	call	1010534c <puts>


}
10101c10:	0001883a 	nop
10101c14:	e037883a 	mov	sp,fp
10101c18:	dfc00117 	ldw	ra,4(sp)
10101c1c:	df000017 	ldw	fp,0(sp)
10101c20:	dec00204 	addi	sp,sp,8
10101c24:	f800283a 	ret

10101c28 <Test_Memory_Map>:
#define HPS_0_BRIDGES_SPAN 268435456 /* address_span_expander span from system.h (ADAPT TO YOUR DESIGN) */
#define HPS_0_BRIDGES_BASE 0x0
#define ONE_MB (1024 * 1024) //

int Test_Memory_Map()
{
10101c28:	defff904 	addi	sp,sp,-28
10101c2c:	dfc00615 	stw	ra,24(sp)
10101c30:	df000515 	stw	fp,20(sp)
10101c34:	df000504 	addi	fp,sp,20
		uint32_t megabyte_count = 0;
10101c38:	e03ffb15 	stw	zero,-20(fp)

	    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10101c3c:	e03ffc15 	stw	zero,-16(fp)
10101c40:	00002406 	br	10101cd4 <Test_Memory_Map+0xac>

	        // Print progress through 256 MB memory available through address span expander
	        if ((i % ONE_MB) == 0) {
10101c44:	e0fffc17 	ldw	r3,-16(fp)
10101c48:	00800434 	movhi	r2,16
10101c4c:	10bfffc4 	addi	r2,r2,-1
10101c50:	1884703a 	and	r2,r3,r2
10101c54:	1000071e 	bne	r2,zero,10101c74 <Test_Memory_Map+0x4c>
	            printf("megabyte_count = %" PRIu32 "\n", megabyte_count);
10101c58:	e17ffb17 	ldw	r5,-20(fp)
10101c5c:	01040474 	movhi	r4,4113
10101c60:	211d7404 	addi	r4,r4,30160
10101c64:	01052500 	call	10105250 <printf>
	            megabyte_count++;
10101c68:	e0bffb17 	ldw	r2,-20(fp)
10101c6c:	10800044 	addi	r2,r2,1
10101c70:	e0bffb15 	stw	r2,-20(fp)
	        }

	        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10101c74:	e0bffc17 	ldw	r2,-16(fp)
10101c78:	e0bffd15 	stw	r2,-12(fp)

	        // Write through address span expander
	        uint32_t writedata = i;
10101c7c:	e0bffc17 	ldw	r2,-16(fp)
10101c80:	e0bffe15 	stw	r2,-8(fp)
	        IOWR_32DIRECT(addr, 0, writedata);
10101c84:	e0bffd17 	ldw	r2,-12(fp)
10101c88:	e0fffe17 	ldw	r3,-8(fp)
10101c8c:	10c00035 	stwio	r3,0(r2)

	        // Read through address span expander
	        uint32_t readdata = IORD_32DIRECT(addr, 0);
10101c90:	e0bffd17 	ldw	r2,-12(fp)
10101c94:	10800037 	ldwio	r2,0(r2)
10101c98:	e0bfff15 	stw	r2,-4(fp)

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
10101c9c:	e0fffe17 	ldw	r3,-8(fp)
10101ca0:	e0bfff17 	ldw	r2,-4(fp)
10101ca4:	18800826 	beq	r3,r2,10101cc8 <Test_Memory_Map+0xa0>
10101ca8:	01c40474 	movhi	r7,4113
10101cac:	39dd7a04 	addi	r7,r7,30184
10101cb0:	01840474 	movhi	r6,4113
10101cb4:	319d9504 	addi	r6,r6,30292
10101cb8:	01400784 	movi	r5,30
10101cbc:	01040474 	movhi	r4,4113
10101cc0:	211d8004 	addi	r4,r4,30208
10101cc4:	01031bc0 	call	101031bc <__assert_func>

int Test_Memory_Map()
{
		uint32_t megabyte_count = 0;

	    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10101cc8:	e0bffc17 	ldw	r2,-16(fp)
10101ccc:	10800104 	addi	r2,r2,4
10101cd0:	e0bffc15 	stw	r2,-16(fp)
10101cd4:	e0fffc17 	ldw	r3,-16(fp)
10101cd8:	00840034 	movhi	r2,4096
10101cdc:	18bfd936 	bltu	r3,r2,10101c44 <_gp+0xfffe06b4>
	        uint32_t readdata = IORD_32DIRECT(addr, 0);

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
	    }
	    printf("Memory PASS\n");
10101ce0:	01040474 	movhi	r4,4113
10101ce4:	211d8904 	addi	r4,r4,30244
10101ce8:	010534c0 	call	1010534c <puts>
	    return EXIT_SUCCESS;
10101cec:	0005883a 	mov	r2,zero
}
10101cf0:	e037883a 	mov	sp,fp
10101cf4:	dfc00117 	ldw	ra,4(sp)
10101cf8:	df000017 	ldw	fp,0(sp)
10101cfc:	dec00204 	addi	sp,sp,8
10101d00:	f800283a 	ret

10101d04 <Quick_Test_Memory_Map>:
int Quick_Test_Memory_Map()
{
10101d04:	defff804 	addi	sp,sp,-32
10101d08:	dfc00715 	stw	ra,28(sp)
10101d0c:	df000615 	stw	fp,24(sp)
10101d10:	df000604 	addi	fp,sp,24
		uint32_t megabyte_count = 0;
10101d14:	e03ffa15 	stw	zero,-24(fp)
		srand(time(NULL));
10101d18:	0009883a 	mov	r4,zero
10101d1c:	0107a900 	call	10107a90 <time>
10101d20:	1009883a 	mov	r4,r2
10101d24:	01053600 	call	10105360 <srand>
		int r = rand()%255;//0 to 255
10101d28:	01053780 	call	10105378 <rand>
10101d2c:	01403fc4 	movi	r5,255
10101d30:	1009883a 	mov	r4,r2
10101d34:	010308c0 	call	1010308c <__modsi3>
10101d38:	e0bffc15 	stw	r2,-16(fp)
	    for (uint32_t i = r*ONE_MB; i < (r+1)*ONE_MB; i += sizeof(uint32_t)) {
10101d3c:	e0bffc17 	ldw	r2,-16(fp)
10101d40:	1004953a 	slli	r2,r2,20
10101d44:	e0bffb15 	stw	r2,-20(fp)
10101d48:	00002406 	br	10101ddc <Quick_Test_Memory_Map+0xd8>

	        // Print progress through 256 MB memory available through address span expander
	        if ((i % ONE_MB) == 0) {
10101d4c:	e0fffb17 	ldw	r3,-20(fp)
10101d50:	00800434 	movhi	r2,16
10101d54:	10bfffc4 	addi	r2,r2,-1
10101d58:	1884703a 	and	r2,r3,r2
10101d5c:	1000071e 	bne	r2,zero,10101d7c <Quick_Test_Memory_Map+0x78>
	            printf("MB tested = %d\n", r);
10101d60:	e17ffc17 	ldw	r5,-16(fp)
10101d64:	01040474 	movhi	r4,4113
10101d68:	211d8c04 	addi	r4,r4,30256
10101d6c:	01052500 	call	10105250 <printf>
	            megabyte_count++;
10101d70:	e0bffa17 	ldw	r2,-24(fp)
10101d74:	10800044 	addi	r2,r2,1
10101d78:	e0bffa15 	stw	r2,-24(fp)
	        }
	        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10101d7c:	e0bffb17 	ldw	r2,-20(fp)
10101d80:	e0bffd15 	stw	r2,-12(fp)

	        // Write through address span expander
	        uint32_t writedata = i;
10101d84:	e0bffb17 	ldw	r2,-20(fp)
10101d88:	e0bffe15 	stw	r2,-8(fp)
	        IOWR_32DIRECT(addr, 0, writedata);
10101d8c:	e0bffd17 	ldw	r2,-12(fp)
10101d90:	e0fffe17 	ldw	r3,-8(fp)
10101d94:	10c00035 	stwio	r3,0(r2)

	        // Read through address span expander
	        uint32_t readdata = IORD_32DIRECT(addr, 0);
10101d98:	e0bffd17 	ldw	r2,-12(fp)
10101d9c:	10800037 	ldwio	r2,0(r2)
10101da0:	e0bfff15 	stw	r2,-4(fp)

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
10101da4:	e0fffe17 	ldw	r3,-8(fp)
10101da8:	e0bfff17 	ldw	r2,-4(fp)
10101dac:	18800826 	beq	r3,r2,10101dd0 <Quick_Test_Memory_Map+0xcc>
10101db0:	01c40474 	movhi	r7,4113
10101db4:	39dd7a04 	addi	r7,r7,30184
10101db8:	01840474 	movhi	r6,4113
10101dbc:	319d9904 	addi	r6,r6,30308
10101dc0:	01400e44 	movi	r5,57
10101dc4:	01040474 	movhi	r4,4113
10101dc8:	211d8004 	addi	r4,r4,30208
10101dcc:	01031bc0 	call	101031bc <__assert_func>
int Quick_Test_Memory_Map()
{
		uint32_t megabyte_count = 0;
		srand(time(NULL));
		int r = rand()%255;//0 to 255
	    for (uint32_t i = r*ONE_MB; i < (r+1)*ONE_MB; i += sizeof(uint32_t)) {
10101dd0:	e0bffb17 	ldw	r2,-20(fp)
10101dd4:	10800104 	addi	r2,r2,4
10101dd8:	e0bffb15 	stw	r2,-20(fp)
10101ddc:	e0bffc17 	ldw	r2,-16(fp)
10101de0:	10800044 	addi	r2,r2,1
10101de4:	1004953a 	slli	r2,r2,20
10101de8:	1007883a 	mov	r3,r2
10101dec:	e0bffb17 	ldw	r2,-20(fp)
10101df0:	10ffd636 	bltu	r2,r3,10101d4c <_gp+0xfffe07bc>
	        uint32_t readdata = IORD_32DIRECT(addr, 0);

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
	    }
	    printf("Memory Quick PASS\r\n");
10101df4:	01040474 	movhi	r4,4113
10101df8:	211d9004 	addi	r4,r4,30272
10101dfc:	010534c0 	call	1010534c <puts>
	    return EXIT_SUCCESS;
10101e00:	0005883a 	mov	r2,zero
}
10101e04:	e037883a 	mov	sp,fp
10101e08:	dfc00117 	ldw	ra,4(sp)
10101e0c:	df000017 	ldw	fp,0(sp)
10101e10:	dec00204 	addi	sp,sp,8
10101e14:	f800283a 	ret

10101e18 <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
10101e18:	defffe04 	addi	sp,sp,-8
10101e1c:	df000115 	stw	fp,4(sp)
10101e20:	df000104 	addi	fp,sp,4
10101e24:	2005883a 	mov	r2,r4
10101e28:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
10101e2c:	e0bfff0b 	ldhu	r2,-4(fp)
10101e30:	10800058 	cmpnei	r2,r2,1
10101e34:	1000021e 	bne	r2,zero,10101e40 <TRDB_D5M_log2+0x28>
10101e38:	0005883a 	mov	r2,zero
10101e3c:	00004706 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
10101e40:	e0bfff0b 	ldhu	r2,-4(fp)
10101e44:	10800098 	cmpnei	r2,r2,2
10101e48:	1000021e 	bne	r2,zero,10101e54 <TRDB_D5M_log2+0x3c>
10101e4c:	00800044 	movi	r2,1
10101e50:	00004206 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
10101e54:	e0bfff0b 	ldhu	r2,-4(fp)
10101e58:	10800118 	cmpnei	r2,r2,4
10101e5c:	1000021e 	bne	r2,zero,10101e68 <TRDB_D5M_log2+0x50>
10101e60:	00800084 	movi	r2,2
10101e64:	00003d06 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
10101e68:	e0bfff0b 	ldhu	r2,-4(fp)
10101e6c:	10800218 	cmpnei	r2,r2,8
10101e70:	1000021e 	bne	r2,zero,10101e7c <TRDB_D5M_log2+0x64>
10101e74:	008000c4 	movi	r2,3
10101e78:	00003806 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
10101e7c:	e0bfff0b 	ldhu	r2,-4(fp)
10101e80:	10800418 	cmpnei	r2,r2,16
10101e84:	1000021e 	bne	r2,zero,10101e90 <TRDB_D5M_log2+0x78>
10101e88:	00800104 	movi	r2,4
10101e8c:	00003306 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
10101e90:	e0bfff0b 	ldhu	r2,-4(fp)
10101e94:	10800818 	cmpnei	r2,r2,32
10101e98:	1000021e 	bne	r2,zero,10101ea4 <TRDB_D5M_log2+0x8c>
10101e9c:	00800144 	movi	r2,5
10101ea0:	00002e06 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
10101ea4:	e0bfff0b 	ldhu	r2,-4(fp)
10101ea8:	10801018 	cmpnei	r2,r2,64
10101eac:	1000021e 	bne	r2,zero,10101eb8 <TRDB_D5M_log2+0xa0>
10101eb0:	00800184 	movi	r2,6
10101eb4:	00002906 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
10101eb8:	e0bfff0b 	ldhu	r2,-4(fp)
10101ebc:	10802018 	cmpnei	r2,r2,128
10101ec0:	1000021e 	bne	r2,zero,10101ecc <TRDB_D5M_log2+0xb4>
10101ec4:	008001c4 	movi	r2,7
10101ec8:	00002406 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
10101ecc:	e0bfff0b 	ldhu	r2,-4(fp)
10101ed0:	10804018 	cmpnei	r2,r2,256
10101ed4:	1000021e 	bne	r2,zero,10101ee0 <TRDB_D5M_log2+0xc8>
10101ed8:	00800204 	movi	r2,8
10101edc:	00001f06 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
10101ee0:	e0bfff0b 	ldhu	r2,-4(fp)
10101ee4:	10808018 	cmpnei	r2,r2,512
10101ee8:	1000021e 	bne	r2,zero,10101ef4 <TRDB_D5M_log2+0xdc>
10101eec:	00800244 	movi	r2,9
10101ef0:	00001a06 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
10101ef4:	e0bfff0b 	ldhu	r2,-4(fp)
10101ef8:	10810018 	cmpnei	r2,r2,1024
10101efc:	1000021e 	bne	r2,zero,10101f08 <TRDB_D5M_log2+0xf0>
10101f00:	00800284 	movi	r2,10
10101f04:	00001506 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
10101f08:	e0bfff0b 	ldhu	r2,-4(fp)
10101f0c:	10820018 	cmpnei	r2,r2,2048
10101f10:	1000021e 	bne	r2,zero,10101f1c <TRDB_D5M_log2+0x104>
10101f14:	008002c4 	movi	r2,11
10101f18:	00001006 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
10101f1c:	e0bfff0b 	ldhu	r2,-4(fp)
10101f20:	10840018 	cmpnei	r2,r2,4096
10101f24:	1000021e 	bne	r2,zero,10101f30 <TRDB_D5M_log2+0x118>
10101f28:	00800304 	movi	r2,12
10101f2c:	00000b06 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
10101f30:	e0bfff0b 	ldhu	r2,-4(fp)
10101f34:	10880018 	cmpnei	r2,r2,8192
10101f38:	1000021e 	bne	r2,zero,10101f44 <TRDB_D5M_log2+0x12c>
10101f3c:	00800344 	movi	r2,13
10101f40:	00000606 	br	10101f5c <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
10101f44:	e0bfff0b 	ldhu	r2,-4(fp)
10101f48:	10900018 	cmpnei	r2,r2,16384
10101f4c:	1000021e 	bne	r2,zero,10101f58 <TRDB_D5M_log2+0x140>
10101f50:	00800384 	movi	r2,14
10101f54:	00000106 	br	10101f5c <TRDB_D5M_log2+0x144>
    else                           return 15;
10101f58:	008003c4 	movi	r2,15
}
10101f5c:	e037883a 	mov	sp,fp
10101f60:	df000017 	ldw	fp,0(sp)
10101f64:	dec00104 	addi	sp,sp,4
10101f68:	f800283a 	ret

10101f6c <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
10101f6c:	defffd04 	addi	sp,sp,-12
10101f70:	dfc00215 	stw	ra,8(sp)
10101f74:	df000115 	stw	fp,4(sp)
10101f78:	df000104 	addi	fp,sp,4
10101f7c:	2005883a 	mov	r2,r4
10101f80:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
10101f84:	e0bfff0b 	ldhu	r2,-4(fp)
10101f88:	0085c83a 	sub	r2,zero,r2
10101f8c:	1007883a 	mov	r3,r2
10101f90:	e0bfff0b 	ldhu	r2,-4(fp)
10101f94:	1884703a 	and	r2,r3,r2
10101f98:	10bfffcc 	andi	r2,r2,65535
10101f9c:	1009883a 	mov	r4,r2
10101fa0:	0101e180 	call	10101e18 <TRDB_D5M_log2>
}
10101fa4:	e037883a 	mov	sp,fp
10101fa8:	dfc00117 	ldw	ra,4(sp)
10101fac:	df000017 	ldw	fp,0(sp)
10101fb0:	dec00204 	addi	sp,sp,8
10101fb4:	f800283a 	ret

10101fb8 <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
10101fb8:	defffb04 	addi	sp,sp,-20
10101fbc:	dfc00415 	stw	ra,16(sp)
10101fc0:	df000315 	stw	fp,12(sp)
10101fc4:	dc000215 	stw	r16,8(sp)
10101fc8:	df000304 	addi	fp,sp,12
10101fcc:	2007883a 	mov	r3,r4
10101fd0:	2805883a 	mov	r2,r5
10101fd4:	e0fffd0d 	sth	r3,-12(fp)
10101fd8:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
10101fdc:	e0fffd0b 	ldhu	r3,-12(fp)
10101fe0:	e0bffe0b 	ldhu	r2,-8(fp)
10101fe4:	1884703a 	and	r2,r3,r2
10101fe8:	143fffcc 	andi	r16,r2,65535
10101fec:	e0bffe0b 	ldhu	r2,-8(fp)
10101ff0:	1009883a 	mov	r4,r2
10101ff4:	0101f6c0 	call	10101f6c <TRDB_D5M_shift_amount>
10101ff8:	10bfffcc 	andi	r2,r2,65535
10101ffc:	8085d83a 	sra	r2,r16,r2
}
10102000:	e6ffff04 	addi	sp,fp,-4
10102004:	dfc00217 	ldw	ra,8(sp)
10102008:	df000117 	ldw	fp,4(sp)
1010200c:	dc000017 	ldw	r16,0(sp)
10102010:	dec00304 	addi	sp,sp,12
10102014:	f800283a 	ret

10102018 <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
10102018:	defffa04 	addi	sp,sp,-24
1010201c:	dfc00515 	stw	ra,20(sp)
10102020:	df000415 	stw	fp,16(sp)
10102024:	dc000315 	stw	r16,12(sp)
10102028:	df000404 	addi	fp,sp,16
1010202c:	2807883a 	mov	r3,r5
10102030:	3005883a 	mov	r2,r6
10102034:	e13ffc0d 	sth	r4,-16(fp)
10102038:	e0fffd0d 	sth	r3,-12(fp)
1010203c:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
10102040:	e43ffe0b 	ldhu	r16,-8(fp)
10102044:	e0bffd0b 	ldhu	r2,-12(fp)
10102048:	1009883a 	mov	r4,r2
1010204c:	0101f6c0 	call	10101f6c <TRDB_D5M_shift_amount>
10102050:	10bfffcc 	andi	r2,r2,65535
10102054:	8084983a 	sll	r2,r16,r2
10102058:	1007883a 	mov	r3,r2
1010205c:	e0bffc0b 	ldhu	r2,-16(fp)
10102060:	1884f03a 	xor	r2,r3,r2
10102064:	1007883a 	mov	r3,r2
10102068:	e0bffd0b 	ldhu	r2,-12(fp)
1010206c:	1884703a 	and	r2,r3,r2
10102070:	1007883a 	mov	r3,r2
10102074:	e0bffc0b 	ldhu	r2,-16(fp)
10102078:	1884f03a 	xor	r2,r3,r2
}
1010207c:	e6ffff04 	addi	sp,fp,-4
10102080:	dfc00217 	ldw	ra,8(sp)
10102084:	df000117 	ldw	fp,4(sp)
10102088:	dc000017 	ldw	r16,0(sp)
1010208c:	dec00304 	addi	sp,sp,12
10102090:	f800283a 	ret

10102094 <trdb_d5m_write>:
#define I2C_FREQ              (50000000) /* Clock frequency driving the i2c core: 50 MHz in this example (ADAPT TO YOUR DESIGN) */
#define TRDB_D5M_I2C_ADDRESS  (0xba)

#define TRDB_D5M_0_I2C_0_BASE I2C_0_BASE   /* i2c base address from system.h (ADAPT TO YOUR DESIGN) */
i2c_dev i2c;
bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
10102094:	defff804 	addi	sp,sp,-32
10102098:	dfc00715 	stw	ra,28(sp)
1010209c:	df000615 	stw	fp,24(sp)
101020a0:	df000604 	addi	fp,sp,24
101020a4:	e13ffd15 	stw	r4,-12(fp)
101020a8:	2807883a 	mov	r3,r5
101020ac:	3005883a 	mov	r2,r6
101020b0:	e0fffe05 	stb	r3,-8(fp)
101020b4:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
101020b8:	e0bfff0b 	ldhu	r2,-4(fp)
101020bc:	1004d23a 	srli	r2,r2,8
101020c0:	e0bffc05 	stb	r2,-16(fp)
101020c4:	e0bfff0b 	ldhu	r2,-4(fp)
101020c8:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
101020cc:	e0fffe03 	ldbu	r3,-8(fp)
101020d0:	e13ffc04 	addi	r4,fp,-16
101020d4:	00800084 	movi	r2,2
101020d8:	d8800015 	stw	r2,0(sp)
101020dc:	200f883a 	mov	r7,r4
101020e0:	180d883a 	mov	r6,r3
101020e4:	01402e84 	movi	r5,186
101020e8:	e13ffd17 	ldw	r4,-12(fp)
101020ec:	0102ccc0 	call	10102ccc <i2c_write_array>
101020f0:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
101020f4:	e0bffb17 	ldw	r2,-20(fp)
101020f8:	10000226 	beq	r2,zero,10102104 <trdb_d5m_write+0x70>
        return false;
101020fc:	0005883a 	mov	r2,zero
10102100:	00000106 	br	10102108 <trdb_d5m_write+0x74>
    } else {
        return true;
10102104:	00800044 	movi	r2,1
    }
}
10102108:	e037883a 	mov	sp,fp
1010210c:	dfc00117 	ldw	ra,4(sp)
10102110:	df000017 	ldw	fp,0(sp)
10102114:	dec00204 	addi	sp,sp,8
10102118:	f800283a 	ret

1010211c <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
1010211c:	defff804 	addi	sp,sp,-32
10102120:	dfc00715 	stw	ra,28(sp)
10102124:	df000615 	stw	fp,24(sp)
10102128:	df000604 	addi	fp,sp,24
1010212c:	e13ffd15 	stw	r4,-12(fp)
10102130:	2805883a 	mov	r2,r5
10102134:	e1bfff15 	stw	r6,-4(fp)
10102138:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
1010213c:	e03ffc05 	stb	zero,-16(fp)
10102140:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10102144:	e0fffe03 	ldbu	r3,-8(fp)
10102148:	e13ffc04 	addi	r4,fp,-16
1010214c:	00800084 	movi	r2,2
10102150:	d8800015 	stw	r2,0(sp)
10102154:	200f883a 	mov	r7,r4
10102158:	180d883a 	mov	r6,r3
1010215c:	01402e84 	movi	r5,186
10102160:	e13ffd17 	ldw	r4,-12(fp)
10102164:	0102e600 	call	10102e60 <i2c_read_array>
10102168:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
1010216c:	e0bffb17 	ldw	r2,-20(fp)
10102170:	10000226 	beq	r2,zero,1010217c <trdb_d5m_read+0x60>
        return false;
10102174:	0005883a 	mov	r2,zero
10102178:	00000b06 	br	101021a8 <trdb_d5m_read+0x8c>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
1010217c:	e0bffc03 	ldbu	r2,-16(fp)
10102180:	10803fcc 	andi	r2,r2,255
10102184:	1004923a 	slli	r2,r2,8
10102188:	1007883a 	mov	r3,r2
1010218c:	e0bffc43 	ldbu	r2,-15(fp)
10102190:	10803fcc 	andi	r2,r2,255
10102194:	1885883a 	add	r2,r3,r2
10102198:	1007883a 	mov	r3,r2
1010219c:	e0bfff17 	ldw	r2,-4(fp)
101021a0:	10c0000d 	sth	r3,0(r2)
        return true;
101021a4:	00800044 	movi	r2,1
    }
}
101021a8:	e037883a 	mov	sp,fp
101021ac:	dfc00117 	ldw	ra,4(sp)
101021b0:	df000017 	ldw	fp,0(sp)
101021b4:	dec00204 	addi	sp,sp,8
101021b8:	f800283a 	ret

101021bc <Test_i2c>:
bool Test_i2c()
{
101021bc:	defffe04 	addi	sp,sp,-8
101021c0:	dfc00115 	stw	ra,4(sp)
101021c4:	df000015 	stw	fp,0(sp)
101021c8:	d839883a 	mov	fp,sp
	init_I2C();
101021cc:	01022200 	call	10102220 <init_I2C>
    if (Write_and_Read_I2C(&i2c,10,23)) {
101021d0:	018005c4 	movi	r6,23
101021d4:	01400284 	movi	r5,10
101021d8:	d126f904 	addi	r4,gp,-25628
101021dc:	01022680 	call	10102268 <Write_and_Read_I2C>
101021e0:	10803fcc 	andi	r2,r2,255
101021e4:	10000526 	beq	r2,zero,101021fc <Test_i2c+0x40>
    	printf("I2C PASS\r\n");
101021e8:	01040474 	movhi	r4,4113
101021ec:	211d9f04 	addi	r4,r4,30332
101021f0:	010534c0 	call	1010534c <puts>
        return EXIT_SUCCESS;
101021f4:	0005883a 	mov	r2,zero
101021f8:	00000406 	br	1010220c <Test_i2c+0x50>
    } else {
    	printf("I2C FAIL\r\n");
101021fc:	01040474 	movhi	r4,4113
10102200:	211da204 	addi	r4,r4,30344
10102204:	010534c0 	call	1010534c <puts>
        return EXIT_FAILURE;
10102208:	00800044 	movi	r2,1
    }
}
1010220c:	e037883a 	mov	sp,fp
10102210:	dfc00117 	ldw	ra,4(sp)
10102214:	df000017 	ldw	fp,0(sp)
10102218:	dec00204 	addi	sp,sp,8
1010221c:	f800283a 	ret

10102220 <init_I2C>:
void init_I2C()
{
10102220:	defffe04 	addi	sp,sp,-8
10102224:	dfc00115 	stw	ra,4(sp)
10102228:	df000015 	stw	fp,0(sp)
1010222c:	d839883a 	mov	fp,sp
	i2c = i2c_inst((void *) TRDB_D5M_0_I2C_0_BASE);
10102230:	01040034 	movhi	r4,4096
10102234:	21020304 	addi	r4,r4,2060
10102238:	01029480 	call	10102948 <i2c_inst>
1010223c:	d0a6f915 	stw	r2,-25628(gp)
	i2c_init(&i2c, I2C_FREQ);
10102240:	0140bef4 	movhi	r5,763
10102244:	297c2004 	addi	r5,r5,-3968
10102248:	d126f904 	addi	r4,gp,-25628
1010224c:	01029740 	call	10102974 <i2c_init>
}
10102250:	0001883a 	nop
10102254:	e037883a 	mov	sp,fp
10102258:	dfc00117 	ldw	ra,4(sp)
1010225c:	df000017 	ldw	fp,0(sp)
10102260:	dec00204 	addi	sp,sp,8
10102264:	f800283a 	ret

10102268 <Write_and_Read_I2C>:
bool Write_and_Read_I2C(i2c_dev *i2c,uint8_t register_offset, uint16_t data)
{
10102268:	defffa04 	addi	sp,sp,-24
1010226c:	dfc00515 	stw	ra,20(sp)
10102270:	df000415 	stw	fp,16(sp)
10102274:	df000404 	addi	fp,sp,16
10102278:	e13ffd15 	stw	r4,-12(fp)
1010227c:	2807883a 	mov	r3,r5
10102280:	3005883a 	mov	r2,r6
10102284:	e0fffe05 	stb	r3,-8(fp)
10102288:	e0bfff0d 	sth	r2,-4(fp)
	 	bool success = true;
1010228c:	00800044 	movi	r2,1
10102290:	e0bffc05 	stb	r2,-16(fp)
	 	 /* write the 16-bit value 23 to register 10 */
	    success &= trdb_d5m_write(i2c, register_offset, data);
10102294:	e0bffe03 	ldbu	r2,-8(fp)
10102298:	e0ffff0b 	ldhu	r3,-4(fp)
1010229c:	180d883a 	mov	r6,r3
101022a0:	100b883a 	mov	r5,r2
101022a4:	e13ffd17 	ldw	r4,-12(fp)
101022a8:	01020940 	call	10102094 <trdb_d5m_write>
101022ac:	e0fffc03 	ldbu	r3,-16(fp)
101022b0:	10803fcc 	andi	r2,r2,255
101022b4:	1884703a 	and	r2,r3,r2
101022b8:	1004c03a 	cmpne	r2,r2,zero
101022bc:	e0bffc05 	stb	r2,-16(fp)

	    /* read from register 10, put data in readdata */
	    uint16_t readdata = 0;
101022c0:	e03ffc8d 	sth	zero,-14(fp)
	    success &= trdb_d5m_read(i2c, register_offset, &readdata);
101022c4:	e0bffe03 	ldbu	r2,-8(fp)
101022c8:	e0fffc84 	addi	r3,fp,-14
101022cc:	180d883a 	mov	r6,r3
101022d0:	100b883a 	mov	r5,r2
101022d4:	e13ffd17 	ldw	r4,-12(fp)
101022d8:	010211c0 	call	1010211c <trdb_d5m_read>
101022dc:	e0fffc03 	ldbu	r3,-16(fp)
101022e0:	10803fcc 	andi	r2,r2,255
101022e4:	1884703a 	and	r2,r3,r2
101022e8:	1004c03a 	cmpne	r2,r2,zero
101022ec:	e0bffc05 	stb	r2,-16(fp)

	    if (success && readdata==data ) {
101022f0:	e0bffc03 	ldbu	r2,-16(fp)
101022f4:	10000626 	beq	r2,zero,10102310 <Write_and_Read_I2C+0xa8>
101022f8:	e0bffc8b 	ldhu	r2,-14(fp)
101022fc:	10ffffcc 	andi	r3,r2,65535
10102300:	e0bfff0b 	ldhu	r2,-4(fp)
10102304:	1880021e 	bne	r3,r2,10102310 <Write_and_Read_I2C+0xa8>
	        return true;
10102308:	00800044 	movi	r2,1
1010230c:	00000106 	br	10102314 <Write_and_Read_I2C+0xac>
	    } else {
	        return false;
10102310:	0005883a 	mov	r2,zero
	    }
}
10102314:	e037883a 	mov	sp,fp
10102318:	dfc00117 	ldw	ra,4(sp)
1010231c:	df000017 	ldw	fp,0(sp)
10102320:	dec00204 	addi	sp,sp,8
10102324:	f800283a 	ret

10102328 <Camera_Configuration>:
bool Camera_Configuration()
{
10102328:	defffd04 	addi	sp,sp,-12
1010232c:	dfc00215 	stw	ra,8(sp)
10102330:	df000115 	stw	fp,4(sp)
10102334:	df000104 	addi	fp,sp,4
	init_I2C();
10102338:	01022200 	call	10102220 <init_I2C>

    bool success = true;
1010233c:	00800044 	movi	r2,1
10102340:	e0bfff05 	stb	r2,-4(fp)
    uint16_t data=0;
10102344:	e03fff8d 	sth	zero,-2(fp)
    trdb_d5m_read(&i2c, 0, &data);
10102348:	e0bfff84 	addi	r2,fp,-2
1010234c:	100d883a 	mov	r6,r2
10102350:	000b883a 	mov	r5,zero
10102354:	d126f904 	addi	r4,gp,-25628
10102358:	010211c0 	call	1010211c <trdb_d5m_read>
    printf("Camera version :  %d\r\n",data);
1010235c:	e0bfff8b 	ldhu	r2,-2(fp)
10102360:	10bfffcc 	andi	r2,r2,65535
10102364:	100b883a 	mov	r5,r2
10102368:	01040474 	movhi	r4,4113
1010236c:	211da504 	addi	r4,r4,30356
10102370:	01052500 	call	10105250 <printf>
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_COLUMN_SIZE_REG,2559);//Resolution for lt24 with binning
10102374:	01827fc4 	movi	r6,2559
10102378:	01400104 	movi	r5,4
1010237c:	d126f904 	addi	r4,gp,-25628
10102380:	01022680 	call	10102268 <Write_and_Read_I2C>
10102384:	e0ffff03 	ldbu	r3,-4(fp)
10102388:	10803fcc 	andi	r2,r2,255
1010238c:	1884703a 	and	r2,r3,r2
10102390:	1004c03a 	cmpne	r2,r2,zero
10102394:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_ROW_SIZE_REG,1919);// Resolution for lt24 with binning
10102398:	0181dfc4 	movi	r6,1919
1010239c:	014000c4 	movi	r5,3
101023a0:	d126f904 	addi	r4,gp,-25628
101023a4:	01022680 	call	10102268 <Write_and_Read_I2C>
101023a8:	e0ffff03 	ldbu	r3,-4(fp)
101023ac:	10803fcc 	andi	r2,r2,255
101023b0:	1884703a 	and	r2,r3,r2
101023b4:	1004c03a 	cmpne	r2,r2,zero
101023b8:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_SHUTTER_WIDTH_UPPER_REG,0000);//Control light
101023bc:	000d883a 	mov	r6,zero
101023c0:	01400204 	movi	r5,8
101023c4:	d126f904 	addi	r4,gp,-25628
101023c8:	01022680 	call	10102268 <Write_and_Read_I2C>
101023cc:	e0ffff03 	ldbu	r3,-4(fp)
101023d0:	10803fcc 	andi	r2,r2,255
101023d4:	1884703a 	and	r2,r3,r2
101023d8:	1004c03a 	cmpne	r2,r2,zero
101023dc:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_SHUTTER_WIDTH_LOWER_REG,3500);//Control light
101023e0:	01836b04 	movi	r6,3500
101023e4:	01400244 	movi	r5,9
101023e8:	d126f904 	addi	r4,gp,-25628
101023ec:	01022680 	call	10102268 <Write_and_Read_I2C>
101023f0:	e0ffff03 	ldbu	r3,-4(fp)
101023f4:	10803fcc 	andi	r2,r2,255
101023f8:	1884703a 	and	r2,r3,r2
101023fc:	1004c03a 	cmpne	r2,r2,zero
10102400:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_ROW_ADDRESS_MODE_REG,0x0033);//Binning x4
10102404:	01800cc4 	movi	r6,51
10102408:	01400884 	movi	r5,34
1010240c:	d126f904 	addi	r4,gp,-25628
10102410:	01022680 	call	10102268 <Write_and_Read_I2C>
10102414:	e0ffff03 	ldbu	r3,-4(fp)
10102418:	10803fcc 	andi	r2,r2,255
1010241c:	1884703a 	and	r2,r3,r2
10102420:	1004c03a 	cmpne	r2,r2,zero
10102424:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_COLUMN_ADDRESS_MODE_REG,0x0033);//Binning x4
10102428:	01800cc4 	movi	r6,51
1010242c:	014008c4 	movi	r5,35
10102430:	d126f904 	addi	r4,gp,-25628
10102434:	01022680 	call	10102268 <Write_and_Read_I2C>
10102438:	e0ffff03 	ldbu	r3,-4(fp)
1010243c:	10803fcc 	andi	r2,r2,255
10102440:	1884703a 	and	r2,r3,r2
10102444:	1004c03a 	cmpne	r2,r2,zero
10102448:	e0bfff05 	stb	r2,-4(fp)
#if LCD_Connected
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_RED_GAIN_REG,15);//Binning x4
1010244c:	018003c4 	movi	r6,15
10102450:	01400b44 	movi	r5,45
10102454:	d126f904 	addi	r4,gp,-25628
10102458:	01022680 	call	10102268 <Write_and_Read_I2C>
1010245c:	e0ffff03 	ldbu	r3,-4(fp)
10102460:	10803fcc 	andi	r2,r2,255
10102464:	1884703a 	and	r2,r3,r2
10102468:	1004c03a 	cmpne	r2,r2,zero
1010246c:	e0bfff05 	stb	r2,-4(fp)
   success &= Write_and_Read_I2C(&i2c,TRDB_D5M_GREEN_1_GAIN_REG,12);//Binning x4
10102470:	01800304 	movi	r6,12
10102474:	01400ac4 	movi	r5,43
10102478:	d126f904 	addi	r4,gp,-25628
1010247c:	01022680 	call	10102268 <Write_and_Read_I2C>
10102480:	e0ffff03 	ldbu	r3,-4(fp)
10102484:	10803fcc 	andi	r2,r2,255
10102488:	1884703a 	and	r2,r3,r2
1010248c:	1004c03a 	cmpne	r2,r2,zero
10102490:	e0bfff05 	stb	r2,-4(fp)
   success &= Write_and_Read_I2C(&i2c,TRDB_D5M_GREEN_2_GAIN_REG,12);//Binning x4
10102494:	01800304 	movi	r6,12
10102498:	01400b84 	movi	r5,46
1010249c:	d126f904 	addi	r4,gp,-25628
101024a0:	01022680 	call	10102268 <Write_and_Read_I2C>
101024a4:	e0ffff03 	ldbu	r3,-4(fp)
101024a8:	10803fcc 	andi	r2,r2,255
101024ac:	1884703a 	and	r2,r3,r2
101024b0:	1004c03a 	cmpne	r2,r2,zero
101024b4:	e0bfff05 	stb	r2,-4(fp)
   success &= Write_and_Read_I2C(&i2c,TRDB_D5M_BLUE_GAIN_REG,14);//Binning x4
101024b8:	01800384 	movi	r6,14
101024bc:	01400b04 	movi	r5,44
101024c0:	d126f904 	addi	r4,gp,-25628
101024c4:	01022680 	call	10102268 <Write_and_Read_I2C>
101024c8:	e0ffff03 	ldbu	r3,-4(fp)
101024cc:	10803fcc 	andi	r2,r2,255
101024d0:	1884703a 	and	r2,r3,r2
101024d4:	1004c03a 	cmpne	r2,r2,zero
101024d8:	e0bfff05 	stb	r2,-4(fp)
     *success &= Write_and_Read_I2C(&i2c,TRDB_D5M_PLL_CONFIG_1_REG,0x4C14);//N=10, 0x14, M=76, 0x4C
     *success &= Write_and_Read_I2C(&i2c,TRDB_D5M_PLL_CONFIG_2_REG,0x0002);//P1=2 , 0x02
     */


    if (success  ) {
101024dc:	e0bfff03 	ldbu	r2,-4(fp)
101024e0:	10000526 	beq	r2,zero,101024f8 <Camera_Configuration+0x1d0>
    	printf("I2C Configuration PASS\r\n");
101024e4:	01040474 	movhi	r4,4113
101024e8:	211dab04 	addi	r4,r4,30380
101024ec:	010534c0 	call	1010534c <puts>
        return true;
101024f0:	00800044 	movi	r2,1
101024f4:	00000406 	br	10102508 <Camera_Configuration+0x1e0>
    } else {
    	printf("I2C Configuration FAIL\r\n");
101024f8:	01040474 	movhi	r4,4113
101024fc:	211db104 	addi	r4,r4,30404
10102500:	010534c0 	call	1010534c <puts>
        return false;
10102504:	0005883a 	mov	r2,zero
    }
}
10102508:	e037883a 	mov	sp,fp
1010250c:	dfc00117 	ldw	ra,4(sp)
10102510:	df000017 	ldw	fp,0(sp)
10102514:	dec00204 	addi	sp,sp,8
10102518:	f800283a 	ret

1010251c <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
1010251c:	defffe04 	addi	sp,sp,-8
10102520:	df000115 	stw	fp,4(sp)
10102524:	df000104 	addi	fp,sp,4
10102528:	2005883a 	mov	r2,r4
1010252c:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
10102530:	e0bfff0b 	ldhu	r2,-4(fp)
10102534:	10800058 	cmpnei	r2,r2,1
10102538:	1000021e 	bne	r2,zero,10102544 <TRDB_D5M_log2+0x28>
1010253c:	0005883a 	mov	r2,zero
10102540:	00004706 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
10102544:	e0bfff0b 	ldhu	r2,-4(fp)
10102548:	10800098 	cmpnei	r2,r2,2
1010254c:	1000021e 	bne	r2,zero,10102558 <TRDB_D5M_log2+0x3c>
10102550:	00800044 	movi	r2,1
10102554:	00004206 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
10102558:	e0bfff0b 	ldhu	r2,-4(fp)
1010255c:	10800118 	cmpnei	r2,r2,4
10102560:	1000021e 	bne	r2,zero,1010256c <TRDB_D5M_log2+0x50>
10102564:	00800084 	movi	r2,2
10102568:	00003d06 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
1010256c:	e0bfff0b 	ldhu	r2,-4(fp)
10102570:	10800218 	cmpnei	r2,r2,8
10102574:	1000021e 	bne	r2,zero,10102580 <TRDB_D5M_log2+0x64>
10102578:	008000c4 	movi	r2,3
1010257c:	00003806 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
10102580:	e0bfff0b 	ldhu	r2,-4(fp)
10102584:	10800418 	cmpnei	r2,r2,16
10102588:	1000021e 	bne	r2,zero,10102594 <TRDB_D5M_log2+0x78>
1010258c:	00800104 	movi	r2,4
10102590:	00003306 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
10102594:	e0bfff0b 	ldhu	r2,-4(fp)
10102598:	10800818 	cmpnei	r2,r2,32
1010259c:	1000021e 	bne	r2,zero,101025a8 <TRDB_D5M_log2+0x8c>
101025a0:	00800144 	movi	r2,5
101025a4:	00002e06 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
101025a8:	e0bfff0b 	ldhu	r2,-4(fp)
101025ac:	10801018 	cmpnei	r2,r2,64
101025b0:	1000021e 	bne	r2,zero,101025bc <TRDB_D5M_log2+0xa0>
101025b4:	00800184 	movi	r2,6
101025b8:	00002906 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
101025bc:	e0bfff0b 	ldhu	r2,-4(fp)
101025c0:	10802018 	cmpnei	r2,r2,128
101025c4:	1000021e 	bne	r2,zero,101025d0 <TRDB_D5M_log2+0xb4>
101025c8:	008001c4 	movi	r2,7
101025cc:	00002406 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
101025d0:	e0bfff0b 	ldhu	r2,-4(fp)
101025d4:	10804018 	cmpnei	r2,r2,256
101025d8:	1000021e 	bne	r2,zero,101025e4 <TRDB_D5M_log2+0xc8>
101025dc:	00800204 	movi	r2,8
101025e0:	00001f06 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
101025e4:	e0bfff0b 	ldhu	r2,-4(fp)
101025e8:	10808018 	cmpnei	r2,r2,512
101025ec:	1000021e 	bne	r2,zero,101025f8 <TRDB_D5M_log2+0xdc>
101025f0:	00800244 	movi	r2,9
101025f4:	00001a06 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
101025f8:	e0bfff0b 	ldhu	r2,-4(fp)
101025fc:	10810018 	cmpnei	r2,r2,1024
10102600:	1000021e 	bne	r2,zero,1010260c <TRDB_D5M_log2+0xf0>
10102604:	00800284 	movi	r2,10
10102608:	00001506 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
1010260c:	e0bfff0b 	ldhu	r2,-4(fp)
10102610:	10820018 	cmpnei	r2,r2,2048
10102614:	1000021e 	bne	r2,zero,10102620 <TRDB_D5M_log2+0x104>
10102618:	008002c4 	movi	r2,11
1010261c:	00001006 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
10102620:	e0bfff0b 	ldhu	r2,-4(fp)
10102624:	10840018 	cmpnei	r2,r2,4096
10102628:	1000021e 	bne	r2,zero,10102634 <TRDB_D5M_log2+0x118>
1010262c:	00800304 	movi	r2,12
10102630:	00000b06 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
10102634:	e0bfff0b 	ldhu	r2,-4(fp)
10102638:	10880018 	cmpnei	r2,r2,8192
1010263c:	1000021e 	bne	r2,zero,10102648 <TRDB_D5M_log2+0x12c>
10102640:	00800344 	movi	r2,13
10102644:	00000606 	br	10102660 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
10102648:	e0bfff0b 	ldhu	r2,-4(fp)
1010264c:	10900018 	cmpnei	r2,r2,16384
10102650:	1000021e 	bne	r2,zero,1010265c <TRDB_D5M_log2+0x140>
10102654:	00800384 	movi	r2,14
10102658:	00000106 	br	10102660 <TRDB_D5M_log2+0x144>
    else                           return 15;
1010265c:	008003c4 	movi	r2,15
}
10102660:	e037883a 	mov	sp,fp
10102664:	df000017 	ldw	fp,0(sp)
10102668:	dec00104 	addi	sp,sp,4
1010266c:	f800283a 	ret

10102670 <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
10102670:	defffd04 	addi	sp,sp,-12
10102674:	dfc00215 	stw	ra,8(sp)
10102678:	df000115 	stw	fp,4(sp)
1010267c:	df000104 	addi	fp,sp,4
10102680:	2005883a 	mov	r2,r4
10102684:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
10102688:	e0bfff0b 	ldhu	r2,-4(fp)
1010268c:	0085c83a 	sub	r2,zero,r2
10102690:	1007883a 	mov	r3,r2
10102694:	e0bfff0b 	ldhu	r2,-4(fp)
10102698:	1884703a 	and	r2,r3,r2
1010269c:	10bfffcc 	andi	r2,r2,65535
101026a0:	1009883a 	mov	r4,r2
101026a4:	010251c0 	call	1010251c <TRDB_D5M_log2>
}
101026a8:	e037883a 	mov	sp,fp
101026ac:	dfc00117 	ldw	ra,4(sp)
101026b0:	df000017 	ldw	fp,0(sp)
101026b4:	dec00204 	addi	sp,sp,8
101026b8:	f800283a 	ret

101026bc <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
101026bc:	defffb04 	addi	sp,sp,-20
101026c0:	dfc00415 	stw	ra,16(sp)
101026c4:	df000315 	stw	fp,12(sp)
101026c8:	dc000215 	stw	r16,8(sp)
101026cc:	df000304 	addi	fp,sp,12
101026d0:	2007883a 	mov	r3,r4
101026d4:	2805883a 	mov	r2,r5
101026d8:	e0fffd0d 	sth	r3,-12(fp)
101026dc:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
101026e0:	e0fffd0b 	ldhu	r3,-12(fp)
101026e4:	e0bffe0b 	ldhu	r2,-8(fp)
101026e8:	1884703a 	and	r2,r3,r2
101026ec:	143fffcc 	andi	r16,r2,65535
101026f0:	e0bffe0b 	ldhu	r2,-8(fp)
101026f4:	1009883a 	mov	r4,r2
101026f8:	01026700 	call	10102670 <TRDB_D5M_shift_amount>
101026fc:	10bfffcc 	andi	r2,r2,65535
10102700:	8085d83a 	sra	r2,r16,r2
}
10102704:	e6ffff04 	addi	sp,fp,-4
10102708:	dfc00217 	ldw	ra,8(sp)
1010270c:	df000117 	ldw	fp,4(sp)
10102710:	dc000017 	ldw	r16,0(sp)
10102714:	dec00304 	addi	sp,sp,12
10102718:	f800283a 	ret

1010271c <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
1010271c:	defffa04 	addi	sp,sp,-24
10102720:	dfc00515 	stw	ra,20(sp)
10102724:	df000415 	stw	fp,16(sp)
10102728:	dc000315 	stw	r16,12(sp)
1010272c:	df000404 	addi	fp,sp,16
10102730:	2807883a 	mov	r3,r5
10102734:	3005883a 	mov	r2,r6
10102738:	e13ffc0d 	sth	r4,-16(fp)
1010273c:	e0fffd0d 	sth	r3,-12(fp)
10102740:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
10102744:	e43ffe0b 	ldhu	r16,-8(fp)
10102748:	e0bffd0b 	ldhu	r2,-12(fp)
1010274c:	1009883a 	mov	r4,r2
10102750:	01026700 	call	10102670 <TRDB_D5M_shift_amount>
10102754:	10bfffcc 	andi	r2,r2,65535
10102758:	8084983a 	sll	r2,r16,r2
1010275c:	1007883a 	mov	r3,r2
10102760:	e0bffc0b 	ldhu	r2,-16(fp)
10102764:	1884f03a 	xor	r2,r3,r2
10102768:	1007883a 	mov	r3,r2
1010276c:	e0bffd0b 	ldhu	r2,-12(fp)
10102770:	1884703a 	and	r2,r3,r2
10102774:	1007883a 	mov	r3,r2
10102778:	e0bffc0b 	ldhu	r2,-16(fp)
1010277c:	1884f03a 	xor	r2,r3,r2
}
10102780:	e6ffff04 	addi	sp,fp,-4
10102784:	dfc00217 	ldw	ra,8(sp)
10102788:	df000117 	ldw	fp,4(sp)
1010278c:	dc000017 	ldw	r16,0(sp)
10102790:	dec00304 	addi	sp,sp,12
10102794:	f800283a 	ret

10102798 <main>:
#include "custom_functions/function_i2c.h"
#include "custom_functions/LCD_function.h"



int main(void) {
10102798:	defffe04 	addi	sp,sp,-8
1010279c:	dfc00115 	stw	ra,4(sp)
101027a0:	df000015 	stw	fp,0(sp)
101027a4:	d839883a 	mov	fp,sp
	printf("Hello from Nios II and Camera Generator!\n");
101027a8:	01040474 	movhi	r4,4113
101027ac:	211db704 	addi	r4,r4,30428
101027b0:	010534c0 	call	1010534c <puts>
	printf("Compiled %s %s\n", __DATE__, __TIME__);
101027b4:	01840474 	movhi	r6,4113
101027b8:	319dc204 	addi	r6,r6,30472
101027bc:	01440474 	movhi	r5,4113
101027c0:	295dc504 	addi	r5,r5,30484
101027c4:	01040474 	movhi	r4,4113
101027c8:	211dc804 	addi	r4,r4,30496
101027cc:	01052500 	call	10105250 <printf>
	delay(1000);
101027d0:	0100fa04 	movi	r4,1000
101027d4:	0100fb40 	call	10100fb4 <delay>
#endif
#if Frame_Generator && !Camera_Connected
	Test_Function_Generator();
#endif
#if LCD_Connected
	LCD_Configuration();
101027d8:	01017940 	call	10101794 <LCD_Configuration>
#endif
#if Camera_Connected
	Camera_Configuration();
101027dc:	01023280 	call	10102328 <Camera_Configuration>
	Test_Camera_Memory();
101027e0:	0100d9c0 	call	10100d9c <Test_Camera_Memory>
101027e4:	0005883a 	mov	r2,zero

	/*while(1)
	{	LCD_Configuration();

	}*/
}
101027e8:	e037883a 	mov	sp,fp
101027ec:	dfc00117 	ldw	ra,4(sp)
101027f0:	df000017 	ldw	fp,0(sp)
101027f4:	dec00204 	addi	sp,sp,8
101027f8:	f800283a 	ret

101027fc <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
101027fc:	defffd04 	addi	sp,sp,-12
10102800:	dfc00215 	stw	ra,8(sp)
10102804:	df000115 	stw	fp,4(sp)
10102808:	df000104 	addi	fp,sp,4
1010280c:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10102810:	e13fff17 	ldw	r4,-4(fp)
10102814:	011515c0 	call	1011515c <usleep>
#endif
}
10102818:	0001883a 	nop
1010281c:	e037883a 	mov	sp,fp
10102820:	dfc00117 	ldw	ra,4(sp)
10102824:	df000017 	ldw	fp,0(sp)
10102828:	dec00204 	addi	sp,sp,8
1010282c:	f800283a 	ret

10102830 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
10102830:	defffe04 	addi	sp,sp,-8
10102834:	df000115 	stw	fp,4(sp)
10102838:	df000104 	addi	fp,sp,4
1010283c:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
10102840:	0001883a 	nop
10102844:	e0bfff17 	ldw	r2,-4(fp)
10102848:	10800017 	ldw	r2,0(r2)
1010284c:	10800084 	addi	r2,r2,2
10102850:	10800023 	ldbuio	r2,0(r2)
10102854:	10803fcc 	andi	r2,r2,255
10102858:	1080020c 	andi	r2,r2,8
1010285c:	103ff91e 	bne	r2,zero,10102844 <_gp+0xfffe12b4>
}
10102860:	0001883a 	nop
10102864:	e037883a 	mov	sp,fp
10102868:	df000017 	ldw	fp,0(sp)
1010286c:	dec00104 	addi	sp,sp,4
10102870:	f800283a 	ret

10102874 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
10102874:	defffb04 	addi	sp,sp,-20
10102878:	dfc00415 	stw	ra,16(sp)
1010287c:	df000315 	stw	fp,12(sp)
10102880:	df000304 	addi	fp,sp,12
10102884:	e13ffd15 	stw	r4,-12(fp)
10102888:	2807883a 	mov	r3,r5
1010288c:	3005883a 	mov	r2,r6
10102890:	e0fffe05 	stb	r3,-8(fp)
10102894:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10102898:	e13ffd17 	ldw	r4,-12(fp)
1010289c:	01028300 	call	10102830 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
101028a0:	e0bffd17 	ldw	r2,-12(fp)
101028a4:	10800017 	ldw	r2,0(r2)
101028a8:	e0fffe03 	ldbu	r3,-8(fp)
101028ac:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
101028b0:	e0bffd17 	ldw	r2,-12(fp)
101028b4:	10800017 	ldw	r2,0(r2)
101028b8:	10800044 	addi	r2,r2,1
101028bc:	e0ffff03 	ldbu	r3,-4(fp)
101028c0:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
101028c4:	e13ffd17 	ldw	r4,-12(fp)
101028c8:	01028300 	call	10102830 <wait_end_of_transfer>
}
101028cc:	0001883a 	nop
101028d0:	e037883a 	mov	sp,fp
101028d4:	dfc00117 	ldw	ra,4(sp)
101028d8:	df000017 	ldw	fp,0(sp)
101028dc:	dec00204 	addi	sp,sp,8
101028e0:	f800283a 	ret

101028e4 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
101028e4:	defffc04 	addi	sp,sp,-16
101028e8:	dfc00315 	stw	ra,12(sp)
101028ec:	df000215 	stw	fp,8(sp)
101028f0:	df000204 	addi	fp,sp,8
101028f4:	e13ffe15 	stw	r4,-8(fp)
101028f8:	2805883a 	mov	r2,r5
101028fc:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10102900:	e13ffe17 	ldw	r4,-8(fp)
10102904:	01028300 	call	10102830 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
10102908:	e0bffe17 	ldw	r2,-8(fp)
1010290c:	10800017 	ldw	r2,0(r2)
10102910:	10800044 	addi	r2,r2,1
10102914:	e0ffff03 	ldbu	r3,-4(fp)
10102918:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
1010291c:	e13ffe17 	ldw	r4,-8(fp)
10102920:	01028300 	call	10102830 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10102924:	e0bffe17 	ldw	r2,-8(fp)
10102928:	10800017 	ldw	r2,0(r2)
1010292c:	10800023 	ldbuio	r2,0(r2)
10102930:	10803fcc 	andi	r2,r2,255
}
10102934:	e037883a 	mov	sp,fp
10102938:	dfc00117 	ldw	ra,4(sp)
1010293c:	df000017 	ldw	fp,0(sp)
10102940:	dec00204 	addi	sp,sp,8
10102944:	f800283a 	ret

10102948 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
10102948:	defffd04 	addi	sp,sp,-12
1010294c:	df000215 	stw	fp,8(sp)
10102950:	df000204 	addi	fp,sp,8
10102954:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
10102958:	e0bfff17 	ldw	r2,-4(fp)
1010295c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
10102960:	e0bffe17 	ldw	r2,-8(fp)
}
10102964:	e037883a 	mov	sp,fp
10102968:	df000017 	ldw	fp,0(sp)
1010296c:	dec00104 	addi	sp,sp,4
10102970:	f800283a 	ret

10102974 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
10102974:	defffb04 	addi	sp,sp,-20
10102978:	dfc00415 	stw	ra,16(sp)
1010297c:	df000315 	stw	fp,12(sp)
10102980:	dc000215 	stw	r16,8(sp)
10102984:	df000304 	addi	fp,sp,12
10102988:	e13ffd15 	stw	r4,-12(fp)
1010298c:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10102990:	e0bffd17 	ldw	r2,-12(fp)
10102994:	10800017 	ldw	r2,0(r2)
10102998:	140000c4 	addi	r16,r2,3
1010299c:	e0bffe17 	ldw	r2,-8(fp)
101029a0:	014001b4 	movhi	r5,6
101029a4:	2946a004 	addi	r5,r5,6784
101029a8:	1009883a 	mov	r4,r2
101029ac:	01031000 	call	10103100 <__udivsi3>
101029b0:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
101029b4:	0104e204 	movi	r4,5000
101029b8:	01027fc0 	call	101027fc <i2c_usleep>
}
101029bc:	0001883a 	nop
101029c0:	e6ffff04 	addi	sp,fp,-4
101029c4:	dfc00217 	ldw	ra,8(sp)
101029c8:	df000117 	ldw	fp,4(sp)
101029cc:	dc000017 	ldw	r16,0(sp)
101029d0:	dec00304 	addi	sp,sp,12
101029d4:	f800283a 	ret

101029d8 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
101029d8:	defffc04 	addi	sp,sp,-16
101029dc:	df000315 	stw	fp,12(sp)
101029e0:	df000304 	addi	fp,sp,12
101029e4:	e13ffe15 	stw	r4,-8(fp)
101029e8:	2805883a 	mov	r2,r5
101029ec:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
101029f0:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
101029f4:	e0bfff03 	ldbu	r2,-4(fp)
101029f8:	10000426 	beq	r2,zero,10102a0c <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
101029fc:	e0bffd17 	ldw	r2,-12(fp)
10102a00:	10800814 	ori	r2,r2,32
10102a04:	e0bffd15 	stw	r2,-12(fp)
10102a08:	00000406 	br	10102a1c <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10102a0c:	e0fffd17 	ldw	r3,-12(fp)
10102a10:	00bff7c4 	movi	r2,-33
10102a14:	1884703a 	and	r2,r3,r2
10102a18:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102a1c:	e0bffe17 	ldw	r2,-8(fp)
10102a20:	10800017 	ldw	r2,0(r2)
10102a24:	10800044 	addi	r2,r2,1
10102a28:	00c00084 	movi	r3,2
10102a2c:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
10102a30:	e0bffe17 	ldw	r2,-8(fp)
10102a34:	10800017 	ldw	r2,0(r2)
10102a38:	10800044 	addi	r2,r2,1
10102a3c:	e0fffd17 	ldw	r3,-12(fp)
10102a40:	10c00025 	stbio	r3,0(r2)
}
10102a44:	0001883a 	nop
10102a48:	e037883a 	mov	sp,fp
10102a4c:	df000017 	ldw	fp,0(sp)
10102a50:	dec00104 	addi	sp,sp,4
10102a54:	f800283a 	ret

10102a58 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
10102a58:	defffa04 	addi	sp,sp,-24
10102a5c:	dfc00515 	stw	ra,20(sp)
10102a60:	df000415 	stw	fp,16(sp)
10102a64:	df000404 	addi	fp,sp,16
10102a68:	e13ffc15 	stw	r4,-16(fp)
10102a6c:	2809883a 	mov	r4,r5
10102a70:	3007883a 	mov	r3,r6
10102a74:	3805883a 	mov	r2,r7
10102a78:	e13ffd05 	stb	r4,-12(fp)
10102a7c:	e0fffe05 	stb	r3,-8(fp)
10102a80:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102a84:	e0bffd03 	ldbu	r2,-12(fp)
10102a88:	10803f8c 	andi	r2,r2,254
10102a8c:	01800504 	movi	r6,20
10102a90:	100b883a 	mov	r5,r2
10102a94:	e13ffc17 	ldw	r4,-16(fp)
10102a98:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102a9c:	e0bffc17 	ldw	r2,-16(fp)
10102aa0:	10800017 	ldw	r2,0(r2)
10102aa4:	10800084 	addi	r2,r2,2
10102aa8:	10800023 	ldbuio	r2,0(r2)
10102aac:	10803fcc 	andi	r2,r2,255
10102ab0:	1080004c 	andi	r2,r2,1
10102ab4:	10000726 	beq	r2,zero,10102ad4 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102ab8:	e0bffc17 	ldw	r2,-16(fp)
10102abc:	10800017 	ldw	r2,0(r2)
10102ac0:	10800044 	addi	r2,r2,1
10102ac4:	00c00084 	movi	r3,2
10102ac8:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102acc:	00800044 	movi	r2,1
10102ad0:	00002706 	br	10102b70 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102ad4:	e0bffe03 	ldbu	r2,-8(fp)
10102ad8:	01800404 	movi	r6,16
10102adc:	100b883a 	mov	r5,r2
10102ae0:	e13ffc17 	ldw	r4,-16(fp)
10102ae4:	01028740 	call	10102874 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102ae8:	e0bffc17 	ldw	r2,-16(fp)
10102aec:	10800017 	ldw	r2,0(r2)
10102af0:	10800084 	addi	r2,r2,2
10102af4:	10800023 	ldbuio	r2,0(r2)
10102af8:	10803fcc 	andi	r2,r2,255
10102afc:	1080004c 	andi	r2,r2,1
10102b00:	10000726 	beq	r2,zero,10102b20 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102b04:	e0bffc17 	ldw	r2,-16(fp)
10102b08:	10800017 	ldw	r2,0(r2)
10102b0c:	10800044 	addi	r2,r2,1
10102b10:	00c00084 	movi	r3,2
10102b14:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102b18:	00800084 	movi	r2,2
10102b1c:	00001406 	br	10102b70 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102b20:	e0bfff03 	ldbu	r2,-4(fp)
10102b24:	01800484 	movi	r6,18
10102b28:	100b883a 	mov	r5,r2
10102b2c:	e13ffc17 	ldw	r4,-16(fp)
10102b30:	01028740 	call	10102874 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102b34:	e0bffc17 	ldw	r2,-16(fp)
10102b38:	10800017 	ldw	r2,0(r2)
10102b3c:	10800084 	addi	r2,r2,2
10102b40:	10800023 	ldbuio	r2,0(r2)
10102b44:	10803fcc 	andi	r2,r2,255
10102b48:	1080004c 	andi	r2,r2,1
10102b4c:	10000726 	beq	r2,zero,10102b6c <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102b50:	e0bffc17 	ldw	r2,-16(fp)
10102b54:	10800017 	ldw	r2,0(r2)
10102b58:	10800044 	addi	r2,r2,1
10102b5c:	00c00084 	movi	r3,2
10102b60:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102b64:	00800084 	movi	r2,2
10102b68:	00000106 	br	10102b70 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
10102b6c:	0005883a 	mov	r2,zero
}
10102b70:	e037883a 	mov	sp,fp
10102b74:	dfc00117 	ldw	ra,4(sp)
10102b78:	df000017 	ldw	fp,0(sp)
10102b7c:	dec00204 	addi	sp,sp,8
10102b80:	f800283a 	ret

10102b84 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
10102b84:	defffa04 	addi	sp,sp,-24
10102b88:	dfc00515 	stw	ra,20(sp)
10102b8c:	df000415 	stw	fp,16(sp)
10102b90:	df000404 	addi	fp,sp,16
10102b94:	e13ffc15 	stw	r4,-16(fp)
10102b98:	2807883a 	mov	r3,r5
10102b9c:	3005883a 	mov	r2,r6
10102ba0:	e1ffff15 	stw	r7,-4(fp)
10102ba4:	e0fffd05 	stb	r3,-12(fp)
10102ba8:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102bac:	e0bffd03 	ldbu	r2,-12(fp)
10102bb0:	10803f8c 	andi	r2,r2,254
10102bb4:	01800504 	movi	r6,20
10102bb8:	100b883a 	mov	r5,r2
10102bbc:	e13ffc17 	ldw	r4,-16(fp)
10102bc0:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102bc4:	e0bffc17 	ldw	r2,-16(fp)
10102bc8:	10800017 	ldw	r2,0(r2)
10102bcc:	10800084 	addi	r2,r2,2
10102bd0:	10800023 	ldbuio	r2,0(r2)
10102bd4:	10803fcc 	andi	r2,r2,255
10102bd8:	1080004c 	andi	r2,r2,1
10102bdc:	10000726 	beq	r2,zero,10102bfc <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102be0:	e0bffc17 	ldw	r2,-16(fp)
10102be4:	10800017 	ldw	r2,0(r2)
10102be8:	10800044 	addi	r2,r2,1
10102bec:	00c00084 	movi	r3,2
10102bf0:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102bf4:	00800044 	movi	r2,1
10102bf8:	00002f06 	br	10102cb8 <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102bfc:	e0bffe03 	ldbu	r2,-8(fp)
10102c00:	01800404 	movi	r6,16
10102c04:	100b883a 	mov	r5,r2
10102c08:	e13ffc17 	ldw	r4,-16(fp)
10102c0c:	01028740 	call	10102874 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102c10:	e0bffc17 	ldw	r2,-16(fp)
10102c14:	10800017 	ldw	r2,0(r2)
10102c18:	10800084 	addi	r2,r2,2
10102c1c:	10800023 	ldbuio	r2,0(r2)
10102c20:	10803fcc 	andi	r2,r2,255
10102c24:	1080004c 	andi	r2,r2,1
10102c28:	10000726 	beq	r2,zero,10102c48 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102c2c:	e0bffc17 	ldw	r2,-16(fp)
10102c30:	10800017 	ldw	r2,0(r2)
10102c34:	10800044 	addi	r2,r2,1
10102c38:	00c00084 	movi	r3,2
10102c3c:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102c40:	00800084 	movi	r2,2
10102c44:	00001c06 	br	10102cb8 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102c48:	e0bffd03 	ldbu	r2,-12(fp)
10102c4c:	10800054 	ori	r2,r2,1
10102c50:	10803fcc 	andi	r2,r2,255
10102c54:	01800504 	movi	r6,20
10102c58:	100b883a 	mov	r5,r2
10102c5c:	e13ffc17 	ldw	r4,-16(fp)
10102c60:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102c64:	e0bffc17 	ldw	r2,-16(fp)
10102c68:	10800017 	ldw	r2,0(r2)
10102c6c:	10800084 	addi	r2,r2,2
10102c70:	10800023 	ldbuio	r2,0(r2)
10102c74:	10803fcc 	andi	r2,r2,255
10102c78:	1080004c 	andi	r2,r2,1
10102c7c:	10000726 	beq	r2,zero,10102c9c <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102c80:	e0bffc17 	ldw	r2,-16(fp)
10102c84:	10800017 	ldw	r2,0(r2)
10102c88:	10800044 	addi	r2,r2,1
10102c8c:	00c00084 	movi	r3,2
10102c90:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102c94:	00800044 	movi	r2,1
10102c98:	00000706 	br	10102cb8 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10102c9c:	014002c4 	movi	r5,11
10102ca0:	e13ffc17 	ldw	r4,-16(fp)
10102ca4:	01028e40 	call	101028e4 <get_data_set_control>
10102ca8:	1007883a 	mov	r3,r2
10102cac:	e0bfff17 	ldw	r2,-4(fp)
10102cb0:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10102cb4:	0005883a 	mov	r2,zero
}
10102cb8:	e037883a 	mov	sp,fp
10102cbc:	dfc00117 	ldw	ra,4(sp)
10102cc0:	df000017 	ldw	fp,0(sp)
10102cc4:	dec00204 	addi	sp,sp,8
10102cc8:	f800283a 	ret

10102ccc <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10102ccc:	defff904 	addi	sp,sp,-28
10102cd0:	dfc00615 	stw	ra,24(sp)
10102cd4:	df000515 	stw	fp,20(sp)
10102cd8:	df000504 	addi	fp,sp,20
10102cdc:	e13ffc15 	stw	r4,-16(fp)
10102ce0:	2807883a 	mov	r3,r5
10102ce4:	3005883a 	mov	r2,r6
10102ce8:	e1ffff15 	stw	r7,-4(fp)
10102cec:	e0fffd05 	stb	r3,-12(fp)
10102cf0:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102cf4:	e0bffd03 	ldbu	r2,-12(fp)
10102cf8:	10803f8c 	andi	r2,r2,254
10102cfc:	01800504 	movi	r6,20
10102d00:	100b883a 	mov	r5,r2
10102d04:	e13ffc17 	ldw	r4,-16(fp)
10102d08:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102d0c:	e0bffc17 	ldw	r2,-16(fp)
10102d10:	10800017 	ldw	r2,0(r2)
10102d14:	10800084 	addi	r2,r2,2
10102d18:	10800023 	ldbuio	r2,0(r2)
10102d1c:	10803fcc 	andi	r2,r2,255
10102d20:	1080004c 	andi	r2,r2,1
10102d24:	10000726 	beq	r2,zero,10102d44 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102d28:	e0bffc17 	ldw	r2,-16(fp)
10102d2c:	10800017 	ldw	r2,0(r2)
10102d30:	10800044 	addi	r2,r2,1
10102d34:	00c00084 	movi	r3,2
10102d38:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102d3c:	00800044 	movi	r2,1
10102d40:	00004206 	br	10102e4c <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102d44:	e0bffe03 	ldbu	r2,-8(fp)
10102d48:	01800404 	movi	r6,16
10102d4c:	100b883a 	mov	r5,r2
10102d50:	e13ffc17 	ldw	r4,-16(fp)
10102d54:	01028740 	call	10102874 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102d58:	e0bffc17 	ldw	r2,-16(fp)
10102d5c:	10800017 	ldw	r2,0(r2)
10102d60:	10800084 	addi	r2,r2,2
10102d64:	10800023 	ldbuio	r2,0(r2)
10102d68:	10803fcc 	andi	r2,r2,255
10102d6c:	1080004c 	andi	r2,r2,1
10102d70:	10000726 	beq	r2,zero,10102d90 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102d74:	e0bffc17 	ldw	r2,-16(fp)
10102d78:	10800017 	ldw	r2,0(r2)
10102d7c:	10800044 	addi	r2,r2,1
10102d80:	00c00084 	movi	r3,2
10102d84:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102d88:	00800084 	movi	r2,2
10102d8c:	00002f06 	br	10102e4c <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10102d90:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10102d94:	e03ffb15 	stw	zero,-20(fp)
10102d98:	00002806 	br	10102e3c <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
10102d9c:	e0800217 	ldw	r2,8(fp)
10102da0:	10bfffc4 	addi	r2,r2,-1
10102da4:	e0fffb17 	ldw	r3,-20(fp)
10102da8:	18800a2e 	bgeu	r3,r2,10102dd4 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10102dac:	e0ffff17 	ldw	r3,-4(fp)
10102db0:	e0bffb17 	ldw	r2,-20(fp)
10102db4:	1885883a 	add	r2,r3,r2
10102db8:	10800003 	ldbu	r2,0(r2)
10102dbc:	10803fcc 	andi	r2,r2,255
10102dc0:	01800404 	movi	r6,16
10102dc4:	100b883a 	mov	r5,r2
10102dc8:	e13ffc17 	ldw	r4,-16(fp)
10102dcc:	01028740 	call	10102874 <set_data_control>
10102dd0:	00000906 	br	10102df8 <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102dd4:	e0ffff17 	ldw	r3,-4(fp)
10102dd8:	e0bffb17 	ldw	r2,-20(fp)
10102ddc:	1885883a 	add	r2,r3,r2
10102de0:	10800003 	ldbu	r2,0(r2)
10102de4:	10803fcc 	andi	r2,r2,255
10102de8:	01800484 	movi	r6,18
10102dec:	100b883a 	mov	r5,r2
10102df0:	e13ffc17 	ldw	r4,-16(fp)
10102df4:	01028740 	call	10102874 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102df8:	e0bffc17 	ldw	r2,-16(fp)
10102dfc:	10800017 	ldw	r2,0(r2)
10102e00:	10800084 	addi	r2,r2,2
10102e04:	10800023 	ldbuio	r2,0(r2)
10102e08:	10803fcc 	andi	r2,r2,255
10102e0c:	1080004c 	andi	r2,r2,1
10102e10:	10000726 	beq	r2,zero,10102e30 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102e14:	e0bffc17 	ldw	r2,-16(fp)
10102e18:	10800017 	ldw	r2,0(r2)
10102e1c:	10800044 	addi	r2,r2,1
10102e20:	00c00084 	movi	r3,2
10102e24:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
10102e28:	00800084 	movi	r2,2
10102e2c:	00000706 	br	10102e4c <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10102e30:	e0bffb17 	ldw	r2,-20(fp)
10102e34:	10800044 	addi	r2,r2,1
10102e38:	e0bffb15 	stw	r2,-20(fp)
10102e3c:	e0fffb17 	ldw	r3,-20(fp)
10102e40:	e0800217 	ldw	r2,8(fp)
10102e44:	18bfd536 	bltu	r3,r2,10102d9c <_gp+0xfffe180c>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
10102e48:	0005883a 	mov	r2,zero
}
10102e4c:	e037883a 	mov	sp,fp
10102e50:	dfc00117 	ldw	ra,4(sp)
10102e54:	df000017 	ldw	fp,0(sp)
10102e58:	dec00204 	addi	sp,sp,8
10102e5c:	f800283a 	ret

10102e60 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10102e60:	defff804 	addi	sp,sp,-32
10102e64:	dfc00715 	stw	ra,28(sp)
10102e68:	df000615 	stw	fp,24(sp)
10102e6c:	dc000515 	stw	r16,20(sp)
10102e70:	df000604 	addi	fp,sp,24
10102e74:	e13ffb15 	stw	r4,-20(fp)
10102e78:	2807883a 	mov	r3,r5
10102e7c:	3005883a 	mov	r2,r6
10102e80:	e1fffe15 	stw	r7,-8(fp)
10102e84:	e0fffc05 	stb	r3,-16(fp)
10102e88:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102e8c:	e0bffc03 	ldbu	r2,-16(fp)
10102e90:	10803f8c 	andi	r2,r2,254
10102e94:	01800504 	movi	r6,20
10102e98:	100b883a 	mov	r5,r2
10102e9c:	e13ffb17 	ldw	r4,-20(fp)
10102ea0:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102ea4:	e0bffb17 	ldw	r2,-20(fp)
10102ea8:	10800017 	ldw	r2,0(r2)
10102eac:	10800084 	addi	r2,r2,2
10102eb0:	10800023 	ldbuio	r2,0(r2)
10102eb4:	10803fcc 	andi	r2,r2,255
10102eb8:	1080004c 	andi	r2,r2,1
10102ebc:	10000726 	beq	r2,zero,10102edc <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102ec0:	e0bffb17 	ldw	r2,-20(fp)
10102ec4:	10800017 	ldw	r2,0(r2)
10102ec8:	10800044 	addi	r2,r2,1
10102ecc:	00c00084 	movi	r3,2
10102ed0:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102ed4:	00800044 	movi	r2,1
10102ed8:	00004506 	br	10102ff0 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102edc:	e0bffd03 	ldbu	r2,-12(fp)
10102ee0:	01800404 	movi	r6,16
10102ee4:	100b883a 	mov	r5,r2
10102ee8:	e13ffb17 	ldw	r4,-20(fp)
10102eec:	01028740 	call	10102874 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102ef0:	e0bffb17 	ldw	r2,-20(fp)
10102ef4:	10800017 	ldw	r2,0(r2)
10102ef8:	10800084 	addi	r2,r2,2
10102efc:	10800023 	ldbuio	r2,0(r2)
10102f00:	10803fcc 	andi	r2,r2,255
10102f04:	1080004c 	andi	r2,r2,1
10102f08:	10000726 	beq	r2,zero,10102f28 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102f0c:	e0bffb17 	ldw	r2,-20(fp)
10102f10:	10800017 	ldw	r2,0(r2)
10102f14:	10800044 	addi	r2,r2,1
10102f18:	00c00084 	movi	r3,2
10102f1c:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102f20:	00800084 	movi	r2,2
10102f24:	00003206 	br	10102ff0 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102f28:	e0bffc03 	ldbu	r2,-16(fp)
10102f2c:	10800054 	ori	r2,r2,1
10102f30:	10803fcc 	andi	r2,r2,255
10102f34:	01800504 	movi	r6,20
10102f38:	100b883a 	mov	r5,r2
10102f3c:	e13ffb17 	ldw	r4,-20(fp)
10102f40:	01028740 	call	10102874 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102f44:	e0bffb17 	ldw	r2,-20(fp)
10102f48:	10800017 	ldw	r2,0(r2)
10102f4c:	10800084 	addi	r2,r2,2
10102f50:	10800023 	ldbuio	r2,0(r2)
10102f54:	10803fcc 	andi	r2,r2,255
10102f58:	1080004c 	andi	r2,r2,1
10102f5c:	10000726 	beq	r2,zero,10102f7c <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102f60:	e0bffb17 	ldw	r2,-20(fp)
10102f64:	10800017 	ldw	r2,0(r2)
10102f68:	10800044 	addi	r2,r2,1
10102f6c:	00c00084 	movi	r3,2
10102f70:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102f74:	00800044 	movi	r2,1
10102f78:	00001d06 	br	10102ff0 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10102f7c:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10102f80:	e03ffa15 	stw	zero,-24(fp)
10102f84:	00001606 	br	10102fe0 <i2c_read_array+0x180>
        if (i < size - 1) {
10102f88:	e0800217 	ldw	r2,8(fp)
10102f8c:	10bfffc4 	addi	r2,r2,-1
10102f90:	e0fffa17 	ldw	r3,-24(fp)
10102f94:	1880082e 	bgeu	r3,r2,10102fb8 <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
10102f98:	e0fffe17 	ldw	r3,-8(fp)
10102f9c:	e0bffa17 	ldw	r2,-24(fp)
10102fa0:	18a1883a 	add	r16,r3,r2
10102fa4:	01400204 	movi	r5,8
10102fa8:	e13ffb17 	ldw	r4,-20(fp)
10102fac:	01028e40 	call	101028e4 <get_data_set_control>
10102fb0:	80800005 	stb	r2,0(r16)
10102fb4:	00000706 	br	10102fd4 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10102fb8:	e0fffe17 	ldw	r3,-8(fp)
10102fbc:	e0bffa17 	ldw	r2,-24(fp)
10102fc0:	18a1883a 	add	r16,r3,r2
10102fc4:	014002c4 	movi	r5,11
10102fc8:	e13ffb17 	ldw	r4,-20(fp)
10102fcc:	01028e40 	call	101028e4 <get_data_set_control>
10102fd0:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10102fd4:	e0bffa17 	ldw	r2,-24(fp)
10102fd8:	10800044 	addi	r2,r2,1
10102fdc:	e0bffa15 	stw	r2,-24(fp)
10102fe0:	e0fffa17 	ldw	r3,-24(fp)
10102fe4:	e0800217 	ldw	r2,8(fp)
10102fe8:	18bfe736 	bltu	r3,r2,10102f88 <_gp+0xfffe19f8>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10102fec:	0005883a 	mov	r2,zero
}
10102ff0:	e6ffff04 	addi	sp,fp,-4
10102ff4:	dfc00217 	ldw	ra,8(sp)
10102ff8:	df000117 	ldw	fp,4(sp)
10102ffc:	dc000017 	ldw	r16,0(sp)
10103000:	dec00304 	addi	sp,sp,12
10103004:	f800283a 	ret

10103008 <__divsi3>:
10103008:	20001b16 	blt	r4,zero,10103078 <__divsi3+0x70>
1010300c:	000f883a 	mov	r7,zero
10103010:	28001616 	blt	r5,zero,1010306c <__divsi3+0x64>
10103014:	200d883a 	mov	r6,r4
10103018:	29001a2e 	bgeu	r5,r4,10103084 <__divsi3+0x7c>
1010301c:	00800804 	movi	r2,32
10103020:	00c00044 	movi	r3,1
10103024:	00000106 	br	1010302c <__divsi3+0x24>
10103028:	10000d26 	beq	r2,zero,10103060 <__divsi3+0x58>
1010302c:	294b883a 	add	r5,r5,r5
10103030:	10bfffc4 	addi	r2,r2,-1
10103034:	18c7883a 	add	r3,r3,r3
10103038:	293ffb36 	bltu	r5,r4,10103028 <_gp+0xfffe1a98>
1010303c:	0005883a 	mov	r2,zero
10103040:	18000726 	beq	r3,zero,10103060 <__divsi3+0x58>
10103044:	0005883a 	mov	r2,zero
10103048:	31400236 	bltu	r6,r5,10103054 <__divsi3+0x4c>
1010304c:	314dc83a 	sub	r6,r6,r5
10103050:	10c4b03a 	or	r2,r2,r3
10103054:	1806d07a 	srli	r3,r3,1
10103058:	280ad07a 	srli	r5,r5,1
1010305c:	183ffa1e 	bne	r3,zero,10103048 <_gp+0xfffe1ab8>
10103060:	38000126 	beq	r7,zero,10103068 <__divsi3+0x60>
10103064:	0085c83a 	sub	r2,zero,r2
10103068:	f800283a 	ret
1010306c:	014bc83a 	sub	r5,zero,r5
10103070:	39c0005c 	xori	r7,r7,1
10103074:	003fe706 	br	10103014 <_gp+0xfffe1a84>
10103078:	0109c83a 	sub	r4,zero,r4
1010307c:	01c00044 	movi	r7,1
10103080:	003fe306 	br	10103010 <_gp+0xfffe1a80>
10103084:	00c00044 	movi	r3,1
10103088:	003fee06 	br	10103044 <_gp+0xfffe1ab4>

1010308c <__modsi3>:
1010308c:	20001716 	blt	r4,zero,101030ec <__modsi3+0x60>
10103090:	000f883a 	mov	r7,zero
10103094:	2005883a 	mov	r2,r4
10103098:	28001216 	blt	r5,zero,101030e4 <__modsi3+0x58>
1010309c:	2900162e 	bgeu	r5,r4,101030f8 <__modsi3+0x6c>
101030a0:	01800804 	movi	r6,32
101030a4:	00c00044 	movi	r3,1
101030a8:	00000106 	br	101030b0 <__modsi3+0x24>
101030ac:	30000a26 	beq	r6,zero,101030d8 <__modsi3+0x4c>
101030b0:	294b883a 	add	r5,r5,r5
101030b4:	31bfffc4 	addi	r6,r6,-1
101030b8:	18c7883a 	add	r3,r3,r3
101030bc:	293ffb36 	bltu	r5,r4,101030ac <_gp+0xfffe1b1c>
101030c0:	18000526 	beq	r3,zero,101030d8 <__modsi3+0x4c>
101030c4:	1806d07a 	srli	r3,r3,1
101030c8:	11400136 	bltu	r2,r5,101030d0 <__modsi3+0x44>
101030cc:	1145c83a 	sub	r2,r2,r5
101030d0:	280ad07a 	srli	r5,r5,1
101030d4:	183ffb1e 	bne	r3,zero,101030c4 <_gp+0xfffe1b34>
101030d8:	38000126 	beq	r7,zero,101030e0 <__modsi3+0x54>
101030dc:	0085c83a 	sub	r2,zero,r2
101030e0:	f800283a 	ret
101030e4:	014bc83a 	sub	r5,zero,r5
101030e8:	003fec06 	br	1010309c <_gp+0xfffe1b0c>
101030ec:	0109c83a 	sub	r4,zero,r4
101030f0:	01c00044 	movi	r7,1
101030f4:	003fe706 	br	10103094 <_gp+0xfffe1b04>
101030f8:	00c00044 	movi	r3,1
101030fc:	003ff106 	br	101030c4 <_gp+0xfffe1b34>

10103100 <__udivsi3>:
10103100:	200d883a 	mov	r6,r4
10103104:	2900152e 	bgeu	r5,r4,1010315c <__udivsi3+0x5c>
10103108:	28001416 	blt	r5,zero,1010315c <__udivsi3+0x5c>
1010310c:	00800804 	movi	r2,32
10103110:	00c00044 	movi	r3,1
10103114:	00000206 	br	10103120 <__udivsi3+0x20>
10103118:	10000e26 	beq	r2,zero,10103154 <__udivsi3+0x54>
1010311c:	28000516 	blt	r5,zero,10103134 <__udivsi3+0x34>
10103120:	294b883a 	add	r5,r5,r5
10103124:	10bfffc4 	addi	r2,r2,-1
10103128:	18c7883a 	add	r3,r3,r3
1010312c:	293ffa36 	bltu	r5,r4,10103118 <_gp+0xfffe1b88>
10103130:	18000826 	beq	r3,zero,10103154 <__udivsi3+0x54>
10103134:	0005883a 	mov	r2,zero
10103138:	31400236 	bltu	r6,r5,10103144 <__udivsi3+0x44>
1010313c:	314dc83a 	sub	r6,r6,r5
10103140:	10c4b03a 	or	r2,r2,r3
10103144:	1806d07a 	srli	r3,r3,1
10103148:	280ad07a 	srli	r5,r5,1
1010314c:	183ffa1e 	bne	r3,zero,10103138 <_gp+0xfffe1ba8>
10103150:	f800283a 	ret
10103154:	0005883a 	mov	r2,zero
10103158:	f800283a 	ret
1010315c:	00c00044 	movi	r3,1
10103160:	003ff406 	br	10103134 <_gp+0xfffe1ba4>

10103164 <__umodsi3>:
10103164:	2005883a 	mov	r2,r4
10103168:	2900122e 	bgeu	r5,r4,101031b4 <__umodsi3+0x50>
1010316c:	28001116 	blt	r5,zero,101031b4 <__umodsi3+0x50>
10103170:	01800804 	movi	r6,32
10103174:	00c00044 	movi	r3,1
10103178:	00000206 	br	10103184 <__umodsi3+0x20>
1010317c:	30000c26 	beq	r6,zero,101031b0 <__umodsi3+0x4c>
10103180:	28000516 	blt	r5,zero,10103198 <__umodsi3+0x34>
10103184:	294b883a 	add	r5,r5,r5
10103188:	31bfffc4 	addi	r6,r6,-1
1010318c:	18c7883a 	add	r3,r3,r3
10103190:	293ffa36 	bltu	r5,r4,1010317c <_gp+0xfffe1bec>
10103194:	18000626 	beq	r3,zero,101031b0 <__umodsi3+0x4c>
10103198:	1806d07a 	srli	r3,r3,1
1010319c:	11400136 	bltu	r2,r5,101031a4 <__umodsi3+0x40>
101031a0:	1145c83a 	sub	r2,r2,r5
101031a4:	280ad07a 	srli	r5,r5,1
101031a8:	183ffb1e 	bne	r3,zero,10103198 <_gp+0xfffe1c08>
101031ac:	f800283a 	ret
101031b0:	f800283a 	ret
101031b4:	00c00044 	movi	r3,1
101031b8:	003ff706 	br	10103198 <_gp+0xfffe1c08>

101031bc <__assert_func>:
101031bc:	008404b4 	movhi	r2,4114
101031c0:	10a56504 	addi	r2,r2,-27244
101031c4:	10800017 	ldw	r2,0(r2)
101031c8:	defffc04 	addi	sp,sp,-16
101031cc:	dfc00315 	stw	ra,12(sp)
101031d0:	2015883a 	mov	r10,r4
101031d4:	2811883a 	mov	r8,r5
101031d8:	3813883a 	mov	r9,r7
101031dc:	11000317 	ldw	r4,12(r2)
101031e0:	30000c26 	beq	r6,zero,10103214 <__assert_func+0x58>
101031e4:	00c40474 	movhi	r3,4113
101031e8:	18ddcc04 	addi	r3,r3,30512
101031ec:	3005883a 	mov	r2,r6
101031f0:	01440474 	movhi	r5,4113
101031f4:	295dd004 	addi	r5,r5,30528
101031f8:	500f883a 	mov	r7,r10
101031fc:	480d883a 	mov	r6,r9
10103200:	d8c00115 	stw	r3,4(sp)
10103204:	da000015 	stw	r8,0(sp)
10103208:	d8800215 	stw	r2,8(sp)
1010320c:	01039a40 	call	101039a4 <fiprintf>
10103210:	0109fd00 	call	10109fd0 <abort>
10103214:	00c40474 	movhi	r3,4113
10103218:	18ddcf04 	addi	r3,r3,30524
1010321c:	1805883a 	mov	r2,r3
10103220:	003ff306 	br	101031f0 <_gp+0xfffe1c60>

10103224 <__assert>:
10103224:	deffff04 	addi	sp,sp,-4
10103228:	300f883a 	mov	r7,r6
1010322c:	000d883a 	mov	r6,zero
10103230:	dfc00015 	stw	ra,0(sp)
10103234:	01031bc0 	call	101031bc <__assert_func>

10103238 <_fclose_r>:
10103238:	28003926 	beq	r5,zero,10103320 <_fclose_r+0xe8>
1010323c:	defffc04 	addi	sp,sp,-16
10103240:	dc400115 	stw	r17,4(sp)
10103244:	dc000015 	stw	r16,0(sp)
10103248:	dfc00315 	stw	ra,12(sp)
1010324c:	dc800215 	stw	r18,8(sp)
10103250:	2023883a 	mov	r17,r4
10103254:	2821883a 	mov	r16,r5
10103258:	20000226 	beq	r4,zero,10103264 <_fclose_r+0x2c>
1010325c:	20800e17 	ldw	r2,56(r4)
10103260:	10002726 	beq	r2,zero,10103300 <_fclose_r+0xc8>
10103264:	8080030f 	ldh	r2,12(r16)
10103268:	1000071e 	bne	r2,zero,10103288 <_fclose_r+0x50>
1010326c:	0005883a 	mov	r2,zero
10103270:	dfc00317 	ldw	ra,12(sp)
10103274:	dc800217 	ldw	r18,8(sp)
10103278:	dc400117 	ldw	r17,4(sp)
1010327c:	dc000017 	ldw	r16,0(sp)
10103280:	dec00404 	addi	sp,sp,16
10103284:	f800283a 	ret
10103288:	800b883a 	mov	r5,r16
1010328c:	8809883a 	mov	r4,r17
10103290:	010333c0 	call	1010333c <__sflush_r>
10103294:	1025883a 	mov	r18,r2
10103298:	80800b17 	ldw	r2,44(r16)
1010329c:	10000426 	beq	r2,zero,101032b0 <_fclose_r+0x78>
101032a0:	81400717 	ldw	r5,28(r16)
101032a4:	8809883a 	mov	r4,r17
101032a8:	103ee83a 	callr	r2
101032ac:	10001616 	blt	r2,zero,10103308 <_fclose_r+0xd0>
101032b0:	8080030b 	ldhu	r2,12(r16)
101032b4:	1080200c 	andi	r2,r2,128
101032b8:	1000151e 	bne	r2,zero,10103310 <_fclose_r+0xd8>
101032bc:	81400c17 	ldw	r5,48(r16)
101032c0:	28000526 	beq	r5,zero,101032d8 <_fclose_r+0xa0>
101032c4:	80801004 	addi	r2,r16,64
101032c8:	28800226 	beq	r5,r2,101032d4 <_fclose_r+0x9c>
101032cc:	8809883a 	mov	r4,r17
101032d0:	0103c5c0 	call	10103c5c <_free_r>
101032d4:	80000c15 	stw	zero,48(r16)
101032d8:	81401117 	ldw	r5,68(r16)
101032dc:	28000326 	beq	r5,zero,101032ec <_fclose_r+0xb4>
101032e0:	8809883a 	mov	r4,r17
101032e4:	0103c5c0 	call	10103c5c <_free_r>
101032e8:	80001115 	stw	zero,68(r16)
101032ec:	01039440 	call	10103944 <__sfp_lock_acquire>
101032f0:	8000030d 	sth	zero,12(r16)
101032f4:	01039480 	call	10103948 <__sfp_lock_release>
101032f8:	9005883a 	mov	r2,r18
101032fc:	003fdc06 	br	10103270 <_gp+0xfffe1ce0>
10103300:	01039340 	call	10103934 <__sinit>
10103304:	003fd706 	br	10103264 <_gp+0xfffe1cd4>
10103308:	04bfffc4 	movi	r18,-1
1010330c:	003fe806 	br	101032b0 <_gp+0xfffe1d20>
10103310:	81400417 	ldw	r5,16(r16)
10103314:	8809883a 	mov	r4,r17
10103318:	0103c5c0 	call	10103c5c <_free_r>
1010331c:	003fe706 	br	101032bc <_gp+0xfffe1d2c>
10103320:	0005883a 	mov	r2,zero
10103324:	f800283a 	ret

10103328 <fclose>:
10103328:	008404b4 	movhi	r2,4114
1010332c:	10a56504 	addi	r2,r2,-27244
10103330:	200b883a 	mov	r5,r4
10103334:	11000017 	ldw	r4,0(r2)
10103338:	01032381 	jmpi	10103238 <_fclose_r>

1010333c <__sflush_r>:
1010333c:	2880030b 	ldhu	r2,12(r5)
10103340:	defffb04 	addi	sp,sp,-20
10103344:	dcc00315 	stw	r19,12(sp)
10103348:	dc400115 	stw	r17,4(sp)
1010334c:	dfc00415 	stw	ra,16(sp)
10103350:	dc800215 	stw	r18,8(sp)
10103354:	dc000015 	stw	r16,0(sp)
10103358:	10c0020c 	andi	r3,r2,8
1010335c:	2823883a 	mov	r17,r5
10103360:	2027883a 	mov	r19,r4
10103364:	1800311e 	bne	r3,zero,1010342c <__sflush_r+0xf0>
10103368:	28c00117 	ldw	r3,4(r5)
1010336c:	10820014 	ori	r2,r2,2048
10103370:	2880030d 	sth	r2,12(r5)
10103374:	00c04b0e 	bge	zero,r3,101034a4 <__sflush_r+0x168>
10103378:	8a000a17 	ldw	r8,40(r17)
1010337c:	40002326 	beq	r8,zero,1010340c <__sflush_r+0xd0>
10103380:	9c000017 	ldw	r16,0(r19)
10103384:	10c4000c 	andi	r3,r2,4096
10103388:	98000015 	stw	zero,0(r19)
1010338c:	18004826 	beq	r3,zero,101034b0 <__sflush_r+0x174>
10103390:	89801417 	ldw	r6,80(r17)
10103394:	10c0010c 	andi	r3,r2,4
10103398:	18000626 	beq	r3,zero,101033b4 <__sflush_r+0x78>
1010339c:	88c00117 	ldw	r3,4(r17)
101033a0:	88800c17 	ldw	r2,48(r17)
101033a4:	30cdc83a 	sub	r6,r6,r3
101033a8:	10000226 	beq	r2,zero,101033b4 <__sflush_r+0x78>
101033ac:	88800f17 	ldw	r2,60(r17)
101033b0:	308dc83a 	sub	r6,r6,r2
101033b4:	89400717 	ldw	r5,28(r17)
101033b8:	000f883a 	mov	r7,zero
101033bc:	9809883a 	mov	r4,r19
101033c0:	403ee83a 	callr	r8
101033c4:	00ffffc4 	movi	r3,-1
101033c8:	10c04426 	beq	r2,r3,101034dc <__sflush_r+0x1a0>
101033cc:	88c0030b 	ldhu	r3,12(r17)
101033d0:	89000417 	ldw	r4,16(r17)
101033d4:	88000115 	stw	zero,4(r17)
101033d8:	197dffcc 	andi	r5,r3,63487
101033dc:	8940030d 	sth	r5,12(r17)
101033e0:	89000015 	stw	r4,0(r17)
101033e4:	18c4000c 	andi	r3,r3,4096
101033e8:	18002c1e 	bne	r3,zero,1010349c <__sflush_r+0x160>
101033ec:	89400c17 	ldw	r5,48(r17)
101033f0:	9c000015 	stw	r16,0(r19)
101033f4:	28000526 	beq	r5,zero,1010340c <__sflush_r+0xd0>
101033f8:	88801004 	addi	r2,r17,64
101033fc:	28800226 	beq	r5,r2,10103408 <__sflush_r+0xcc>
10103400:	9809883a 	mov	r4,r19
10103404:	0103c5c0 	call	10103c5c <_free_r>
10103408:	88000c15 	stw	zero,48(r17)
1010340c:	0005883a 	mov	r2,zero
10103410:	dfc00417 	ldw	ra,16(sp)
10103414:	dcc00317 	ldw	r19,12(sp)
10103418:	dc800217 	ldw	r18,8(sp)
1010341c:	dc400117 	ldw	r17,4(sp)
10103420:	dc000017 	ldw	r16,0(sp)
10103424:	dec00504 	addi	sp,sp,20
10103428:	f800283a 	ret
1010342c:	2c800417 	ldw	r18,16(r5)
10103430:	903ff626 	beq	r18,zero,1010340c <_gp+0xfffe1e7c>
10103434:	2c000017 	ldw	r16,0(r5)
10103438:	108000cc 	andi	r2,r2,3
1010343c:	2c800015 	stw	r18,0(r5)
10103440:	84a1c83a 	sub	r16,r16,r18
10103444:	1000131e 	bne	r2,zero,10103494 <__sflush_r+0x158>
10103448:	28800517 	ldw	r2,20(r5)
1010344c:	88800215 	stw	r2,8(r17)
10103450:	04000316 	blt	zero,r16,10103460 <__sflush_r+0x124>
10103454:	003fed06 	br	1010340c <_gp+0xfffe1e7c>
10103458:	90a5883a 	add	r18,r18,r2
1010345c:	043feb0e 	bge	zero,r16,1010340c <_gp+0xfffe1e7c>
10103460:	88800917 	ldw	r2,36(r17)
10103464:	89400717 	ldw	r5,28(r17)
10103468:	800f883a 	mov	r7,r16
1010346c:	900d883a 	mov	r6,r18
10103470:	9809883a 	mov	r4,r19
10103474:	103ee83a 	callr	r2
10103478:	80a1c83a 	sub	r16,r16,r2
1010347c:	00bff616 	blt	zero,r2,10103458 <_gp+0xfffe1ec8>
10103480:	88c0030b 	ldhu	r3,12(r17)
10103484:	00bfffc4 	movi	r2,-1
10103488:	18c01014 	ori	r3,r3,64
1010348c:	88c0030d 	sth	r3,12(r17)
10103490:	003fdf06 	br	10103410 <_gp+0xfffe1e80>
10103494:	0005883a 	mov	r2,zero
10103498:	003fec06 	br	1010344c <_gp+0xfffe1ebc>
1010349c:	88801415 	stw	r2,80(r17)
101034a0:	003fd206 	br	101033ec <_gp+0xfffe1e5c>
101034a4:	28c00f17 	ldw	r3,60(r5)
101034a8:	00ffb316 	blt	zero,r3,10103378 <_gp+0xfffe1de8>
101034ac:	003fd706 	br	1010340c <_gp+0xfffe1e7c>
101034b0:	89400717 	ldw	r5,28(r17)
101034b4:	000d883a 	mov	r6,zero
101034b8:	01c00044 	movi	r7,1
101034bc:	9809883a 	mov	r4,r19
101034c0:	403ee83a 	callr	r8
101034c4:	100d883a 	mov	r6,r2
101034c8:	00bfffc4 	movi	r2,-1
101034cc:	30801426 	beq	r6,r2,10103520 <__sflush_r+0x1e4>
101034d0:	8880030b 	ldhu	r2,12(r17)
101034d4:	8a000a17 	ldw	r8,40(r17)
101034d8:	003fae06 	br	10103394 <_gp+0xfffe1e04>
101034dc:	98c00017 	ldw	r3,0(r19)
101034e0:	183fba26 	beq	r3,zero,101033cc <_gp+0xfffe1e3c>
101034e4:	01000744 	movi	r4,29
101034e8:	19000626 	beq	r3,r4,10103504 <__sflush_r+0x1c8>
101034ec:	01000584 	movi	r4,22
101034f0:	19000426 	beq	r3,r4,10103504 <__sflush_r+0x1c8>
101034f4:	88c0030b 	ldhu	r3,12(r17)
101034f8:	18c01014 	ori	r3,r3,64
101034fc:	88c0030d 	sth	r3,12(r17)
10103500:	003fc306 	br	10103410 <_gp+0xfffe1e80>
10103504:	8880030b 	ldhu	r2,12(r17)
10103508:	88c00417 	ldw	r3,16(r17)
1010350c:	88000115 	stw	zero,4(r17)
10103510:	10bdffcc 	andi	r2,r2,63487
10103514:	8880030d 	sth	r2,12(r17)
10103518:	88c00015 	stw	r3,0(r17)
1010351c:	003fb306 	br	101033ec <_gp+0xfffe1e5c>
10103520:	98800017 	ldw	r2,0(r19)
10103524:	103fea26 	beq	r2,zero,101034d0 <_gp+0xfffe1f40>
10103528:	00c00744 	movi	r3,29
1010352c:	10c00226 	beq	r2,r3,10103538 <__sflush_r+0x1fc>
10103530:	00c00584 	movi	r3,22
10103534:	10c0031e 	bne	r2,r3,10103544 <__sflush_r+0x208>
10103538:	9c000015 	stw	r16,0(r19)
1010353c:	0005883a 	mov	r2,zero
10103540:	003fb306 	br	10103410 <_gp+0xfffe1e80>
10103544:	88c0030b 	ldhu	r3,12(r17)
10103548:	3005883a 	mov	r2,r6
1010354c:	18c01014 	ori	r3,r3,64
10103550:	88c0030d 	sth	r3,12(r17)
10103554:	003fae06 	br	10103410 <_gp+0xfffe1e80>

10103558 <_fflush_r>:
10103558:	defffd04 	addi	sp,sp,-12
1010355c:	dc000115 	stw	r16,4(sp)
10103560:	dfc00215 	stw	ra,8(sp)
10103564:	2021883a 	mov	r16,r4
10103568:	20000226 	beq	r4,zero,10103574 <_fflush_r+0x1c>
1010356c:	20800e17 	ldw	r2,56(r4)
10103570:	10000c26 	beq	r2,zero,101035a4 <_fflush_r+0x4c>
10103574:	2880030f 	ldh	r2,12(r5)
10103578:	1000051e 	bne	r2,zero,10103590 <_fflush_r+0x38>
1010357c:	0005883a 	mov	r2,zero
10103580:	dfc00217 	ldw	ra,8(sp)
10103584:	dc000117 	ldw	r16,4(sp)
10103588:	dec00304 	addi	sp,sp,12
1010358c:	f800283a 	ret
10103590:	8009883a 	mov	r4,r16
10103594:	dfc00217 	ldw	ra,8(sp)
10103598:	dc000117 	ldw	r16,4(sp)
1010359c:	dec00304 	addi	sp,sp,12
101035a0:	010333c1 	jmpi	1010333c <__sflush_r>
101035a4:	d9400015 	stw	r5,0(sp)
101035a8:	01039340 	call	10103934 <__sinit>
101035ac:	d9400017 	ldw	r5,0(sp)
101035b0:	003ff006 	br	10103574 <_gp+0xfffe1fe4>

101035b4 <fflush>:
101035b4:	20000526 	beq	r4,zero,101035cc <fflush+0x18>
101035b8:	008404b4 	movhi	r2,4114
101035bc:	10a56504 	addi	r2,r2,-27244
101035c0:	200b883a 	mov	r5,r4
101035c4:	11000017 	ldw	r4,0(r2)
101035c8:	01035581 	jmpi	10103558 <_fflush_r>
101035cc:	008404b4 	movhi	r2,4114
101035d0:	10a56404 	addi	r2,r2,-27248
101035d4:	11000017 	ldw	r4,0(r2)
101035d8:	01440434 	movhi	r5,4112
101035dc:	294d5604 	addi	r5,r5,13656
101035e0:	010450c1 	jmpi	1010450c <_fwalk_reent>

101035e4 <__fp_unlock>:
101035e4:	0005883a 	mov	r2,zero
101035e8:	f800283a 	ret

101035ec <_cleanup_r>:
101035ec:	01440434 	movhi	r5,4112
101035f0:	294c8e04 	addi	r5,r5,12856
101035f4:	010450c1 	jmpi	1010450c <_fwalk_reent>

101035f8 <__sinit.part.1>:
101035f8:	defff704 	addi	sp,sp,-36
101035fc:	00c40434 	movhi	r3,4112
10103600:	dfc00815 	stw	ra,32(sp)
10103604:	ddc00715 	stw	r23,28(sp)
10103608:	dd800615 	stw	r22,24(sp)
1010360c:	dd400515 	stw	r21,20(sp)
10103610:	dd000415 	stw	r20,16(sp)
10103614:	dcc00315 	stw	r19,12(sp)
10103618:	dc800215 	stw	r18,8(sp)
1010361c:	dc400115 	stw	r17,4(sp)
10103620:	dc000015 	stw	r16,0(sp)
10103624:	18cd7b04 	addi	r3,r3,13804
10103628:	24000117 	ldw	r16,4(r4)
1010362c:	20c00f15 	stw	r3,60(r4)
10103630:	2080bb04 	addi	r2,r4,748
10103634:	00c000c4 	movi	r3,3
10103638:	20c0b915 	stw	r3,740(r4)
1010363c:	2080ba15 	stw	r2,744(r4)
10103640:	2000b815 	stw	zero,736(r4)
10103644:	05c00204 	movi	r23,8
10103648:	00800104 	movi	r2,4
1010364c:	2025883a 	mov	r18,r4
10103650:	b80d883a 	mov	r6,r23
10103654:	81001704 	addi	r4,r16,92
10103658:	000b883a 	mov	r5,zero
1010365c:	80000015 	stw	zero,0(r16)
10103660:	80000115 	stw	zero,4(r16)
10103664:	80000215 	stw	zero,8(r16)
10103668:	8080030d 	sth	r2,12(r16)
1010366c:	80001915 	stw	zero,100(r16)
10103670:	8000038d 	sth	zero,14(r16)
10103674:	80000415 	stw	zero,16(r16)
10103678:	80000515 	stw	zero,20(r16)
1010367c:	80000615 	stw	zero,24(r16)
10103680:	01050980 	call	10105098 <memset>
10103684:	05840434 	movhi	r22,4112
10103688:	94400217 	ldw	r17,8(r18)
1010368c:	05440434 	movhi	r21,4112
10103690:	05040434 	movhi	r20,4112
10103694:	04c40434 	movhi	r19,4112
10103698:	b595b904 	addi	r22,r22,22244
1010369c:	ad55d004 	addi	r21,r21,22336
101036a0:	a515ef04 	addi	r20,r20,22460
101036a4:	9cd60604 	addi	r19,r19,22552
101036a8:	85800815 	stw	r22,32(r16)
101036ac:	85400915 	stw	r21,36(r16)
101036b0:	85000a15 	stw	r20,40(r16)
101036b4:	84c00b15 	stw	r19,44(r16)
101036b8:	84000715 	stw	r16,28(r16)
101036bc:	00800284 	movi	r2,10
101036c0:	8880030d 	sth	r2,12(r17)
101036c4:	00800044 	movi	r2,1
101036c8:	b80d883a 	mov	r6,r23
101036cc:	89001704 	addi	r4,r17,92
101036d0:	000b883a 	mov	r5,zero
101036d4:	88000015 	stw	zero,0(r17)
101036d8:	88000115 	stw	zero,4(r17)
101036dc:	88000215 	stw	zero,8(r17)
101036e0:	88001915 	stw	zero,100(r17)
101036e4:	8880038d 	sth	r2,14(r17)
101036e8:	88000415 	stw	zero,16(r17)
101036ec:	88000515 	stw	zero,20(r17)
101036f0:	88000615 	stw	zero,24(r17)
101036f4:	01050980 	call	10105098 <memset>
101036f8:	94000317 	ldw	r16,12(r18)
101036fc:	00800484 	movi	r2,18
10103700:	8c400715 	stw	r17,28(r17)
10103704:	8d800815 	stw	r22,32(r17)
10103708:	8d400915 	stw	r21,36(r17)
1010370c:	8d000a15 	stw	r20,40(r17)
10103710:	8cc00b15 	stw	r19,44(r17)
10103714:	8080030d 	sth	r2,12(r16)
10103718:	00800084 	movi	r2,2
1010371c:	80000015 	stw	zero,0(r16)
10103720:	80000115 	stw	zero,4(r16)
10103724:	80000215 	stw	zero,8(r16)
10103728:	80001915 	stw	zero,100(r16)
1010372c:	8080038d 	sth	r2,14(r16)
10103730:	80000415 	stw	zero,16(r16)
10103734:	80000515 	stw	zero,20(r16)
10103738:	80000615 	stw	zero,24(r16)
1010373c:	b80d883a 	mov	r6,r23
10103740:	000b883a 	mov	r5,zero
10103744:	81001704 	addi	r4,r16,92
10103748:	01050980 	call	10105098 <memset>
1010374c:	00800044 	movi	r2,1
10103750:	84000715 	stw	r16,28(r16)
10103754:	85800815 	stw	r22,32(r16)
10103758:	85400915 	stw	r21,36(r16)
1010375c:	85000a15 	stw	r20,40(r16)
10103760:	84c00b15 	stw	r19,44(r16)
10103764:	90800e15 	stw	r2,56(r18)
10103768:	dfc00817 	ldw	ra,32(sp)
1010376c:	ddc00717 	ldw	r23,28(sp)
10103770:	dd800617 	ldw	r22,24(sp)
10103774:	dd400517 	ldw	r21,20(sp)
10103778:	dd000417 	ldw	r20,16(sp)
1010377c:	dcc00317 	ldw	r19,12(sp)
10103780:	dc800217 	ldw	r18,8(sp)
10103784:	dc400117 	ldw	r17,4(sp)
10103788:	dc000017 	ldw	r16,0(sp)
1010378c:	dec00904 	addi	sp,sp,36
10103790:	f800283a 	ret

10103794 <__fp_lock>:
10103794:	0005883a 	mov	r2,zero
10103798:	f800283a 	ret

1010379c <__sfmoreglue>:
1010379c:	defffc04 	addi	sp,sp,-16
101037a0:	dc400115 	stw	r17,4(sp)
101037a4:	2c7fffc4 	addi	r17,r5,-1
101037a8:	8c401a24 	muli	r17,r17,104
101037ac:	dc800215 	stw	r18,8(sp)
101037b0:	2825883a 	mov	r18,r5
101037b4:	89401d04 	addi	r5,r17,116
101037b8:	dc000015 	stw	r16,0(sp)
101037bc:	dfc00315 	stw	ra,12(sp)
101037c0:	010488c0 	call	1010488c <_malloc_r>
101037c4:	1021883a 	mov	r16,r2
101037c8:	10000726 	beq	r2,zero,101037e8 <__sfmoreglue+0x4c>
101037cc:	11000304 	addi	r4,r2,12
101037d0:	10000015 	stw	zero,0(r2)
101037d4:	14800115 	stw	r18,4(r2)
101037d8:	11000215 	stw	r4,8(r2)
101037dc:	89801a04 	addi	r6,r17,104
101037e0:	000b883a 	mov	r5,zero
101037e4:	01050980 	call	10105098 <memset>
101037e8:	8005883a 	mov	r2,r16
101037ec:	dfc00317 	ldw	ra,12(sp)
101037f0:	dc800217 	ldw	r18,8(sp)
101037f4:	dc400117 	ldw	r17,4(sp)
101037f8:	dc000017 	ldw	r16,0(sp)
101037fc:	dec00404 	addi	sp,sp,16
10103800:	f800283a 	ret

10103804 <__sfp>:
10103804:	defffb04 	addi	sp,sp,-20
10103808:	dc000015 	stw	r16,0(sp)
1010380c:	040404b4 	movhi	r16,4114
10103810:	84256404 	addi	r16,r16,-27248
10103814:	dcc00315 	stw	r19,12(sp)
10103818:	2027883a 	mov	r19,r4
1010381c:	81000017 	ldw	r4,0(r16)
10103820:	dfc00415 	stw	ra,16(sp)
10103824:	dc800215 	stw	r18,8(sp)
10103828:	20800e17 	ldw	r2,56(r4)
1010382c:	dc400115 	stw	r17,4(sp)
10103830:	1000021e 	bne	r2,zero,1010383c <__sfp+0x38>
10103834:	01035f80 	call	101035f8 <__sinit.part.1>
10103838:	81000017 	ldw	r4,0(r16)
1010383c:	2480b804 	addi	r18,r4,736
10103840:	047fffc4 	movi	r17,-1
10103844:	91000117 	ldw	r4,4(r18)
10103848:	94000217 	ldw	r16,8(r18)
1010384c:	213fffc4 	addi	r4,r4,-1
10103850:	20000a16 	blt	r4,zero,1010387c <__sfp+0x78>
10103854:	8080030f 	ldh	r2,12(r16)
10103858:	10000c26 	beq	r2,zero,1010388c <__sfp+0x88>
1010385c:	80c01d04 	addi	r3,r16,116
10103860:	00000206 	br	1010386c <__sfp+0x68>
10103864:	18bfe60f 	ldh	r2,-104(r3)
10103868:	10000826 	beq	r2,zero,1010388c <__sfp+0x88>
1010386c:	213fffc4 	addi	r4,r4,-1
10103870:	1c3ffd04 	addi	r16,r3,-12
10103874:	18c01a04 	addi	r3,r3,104
10103878:	247ffa1e 	bne	r4,r17,10103864 <_gp+0xfffe22d4>
1010387c:	90800017 	ldw	r2,0(r18)
10103880:	10001d26 	beq	r2,zero,101038f8 <__sfp+0xf4>
10103884:	1025883a 	mov	r18,r2
10103888:	003fee06 	br	10103844 <_gp+0xfffe22b4>
1010388c:	00bfffc4 	movi	r2,-1
10103890:	8080038d 	sth	r2,14(r16)
10103894:	00800044 	movi	r2,1
10103898:	8080030d 	sth	r2,12(r16)
1010389c:	80001915 	stw	zero,100(r16)
101038a0:	80000015 	stw	zero,0(r16)
101038a4:	80000215 	stw	zero,8(r16)
101038a8:	80000115 	stw	zero,4(r16)
101038ac:	80000415 	stw	zero,16(r16)
101038b0:	80000515 	stw	zero,20(r16)
101038b4:	80000615 	stw	zero,24(r16)
101038b8:	01800204 	movi	r6,8
101038bc:	000b883a 	mov	r5,zero
101038c0:	81001704 	addi	r4,r16,92
101038c4:	01050980 	call	10105098 <memset>
101038c8:	8005883a 	mov	r2,r16
101038cc:	80000c15 	stw	zero,48(r16)
101038d0:	80000d15 	stw	zero,52(r16)
101038d4:	80001115 	stw	zero,68(r16)
101038d8:	80001215 	stw	zero,72(r16)
101038dc:	dfc00417 	ldw	ra,16(sp)
101038e0:	dcc00317 	ldw	r19,12(sp)
101038e4:	dc800217 	ldw	r18,8(sp)
101038e8:	dc400117 	ldw	r17,4(sp)
101038ec:	dc000017 	ldw	r16,0(sp)
101038f0:	dec00504 	addi	sp,sp,20
101038f4:	f800283a 	ret
101038f8:	01400104 	movi	r5,4
101038fc:	9809883a 	mov	r4,r19
10103900:	010379c0 	call	1010379c <__sfmoreglue>
10103904:	90800015 	stw	r2,0(r18)
10103908:	103fde1e 	bne	r2,zero,10103884 <_gp+0xfffe22f4>
1010390c:	00800304 	movi	r2,12
10103910:	98800015 	stw	r2,0(r19)
10103914:	0005883a 	mov	r2,zero
10103918:	003ff006 	br	101038dc <_gp+0xfffe234c>

1010391c <_cleanup>:
1010391c:	008404b4 	movhi	r2,4114
10103920:	10a56404 	addi	r2,r2,-27248
10103924:	11000017 	ldw	r4,0(r2)
10103928:	01440434 	movhi	r5,4112
1010392c:	294c8e04 	addi	r5,r5,12856
10103930:	010450c1 	jmpi	1010450c <_fwalk_reent>

10103934 <__sinit>:
10103934:	20800e17 	ldw	r2,56(r4)
10103938:	10000126 	beq	r2,zero,10103940 <__sinit+0xc>
1010393c:	f800283a 	ret
10103940:	01035f81 	jmpi	101035f8 <__sinit.part.1>

10103944 <__sfp_lock_acquire>:
10103944:	f800283a 	ret

10103948 <__sfp_lock_release>:
10103948:	f800283a 	ret

1010394c <__sinit_lock_acquire>:
1010394c:	f800283a 	ret

10103950 <__sinit_lock_release>:
10103950:	f800283a 	ret

10103954 <__fp_lock_all>:
10103954:	008404b4 	movhi	r2,4114
10103958:	10a56504 	addi	r2,r2,-27244
1010395c:	11000017 	ldw	r4,0(r2)
10103960:	01440434 	movhi	r5,4112
10103964:	294de504 	addi	r5,r5,14228
10103968:	01044481 	jmpi	10104448 <_fwalk>

1010396c <__fp_unlock_all>:
1010396c:	008404b4 	movhi	r2,4114
10103970:	10a56504 	addi	r2,r2,-27244
10103974:	11000017 	ldw	r4,0(r2)
10103978:	01440434 	movhi	r5,4112
1010397c:	294d7904 	addi	r5,r5,13796
10103980:	01044481 	jmpi	10104448 <_fwalk>

10103984 <_fiprintf_r>:
10103984:	defffe04 	addi	sp,sp,-8
10103988:	dfc00015 	stw	ra,0(sp)
1010398c:	d9c00115 	stw	r7,4(sp)
10103990:	d9c00104 	addi	r7,sp,4
10103994:	0107ae00 	call	10107ae0 <_vfiprintf_r>
10103998:	dfc00017 	ldw	ra,0(sp)
1010399c:	dec00204 	addi	sp,sp,8
101039a0:	f800283a 	ret

101039a4 <fiprintf>:
101039a4:	defffd04 	addi	sp,sp,-12
101039a8:	2005883a 	mov	r2,r4
101039ac:	dfc00015 	stw	ra,0(sp)
101039b0:	d9800115 	stw	r6,4(sp)
101039b4:	d9c00215 	stw	r7,8(sp)
101039b8:	00c404b4 	movhi	r3,4114
101039bc:	18e56504 	addi	r3,r3,-27244
101039c0:	19000017 	ldw	r4,0(r3)
101039c4:	280d883a 	mov	r6,r5
101039c8:	d9c00104 	addi	r7,sp,4
101039cc:	100b883a 	mov	r5,r2
101039d0:	0107ae00 	call	10107ae0 <_vfiprintf_r>
101039d4:	dfc00017 	ldw	ra,0(sp)
101039d8:	dec00304 	addi	sp,sp,12
101039dc:	f800283a 	ret

101039e0 <_fopen_r>:
101039e0:	defffa04 	addi	sp,sp,-24
101039e4:	3005883a 	mov	r2,r6
101039e8:	dcc00415 	stw	r19,16(sp)
101039ec:	d80d883a 	mov	r6,sp
101039f0:	2827883a 	mov	r19,r5
101039f4:	100b883a 	mov	r5,r2
101039f8:	dc800315 	stw	r18,12(sp)
101039fc:	dfc00515 	stw	ra,20(sp)
10103a00:	dc400215 	stw	r17,8(sp)
10103a04:	dc000115 	stw	r16,4(sp)
10103a08:	2025883a 	mov	r18,r4
10103a0c:	010b8700 	call	1010b870 <__sflags>
10103a10:	10002726 	beq	r2,zero,10103ab0 <_fopen_r+0xd0>
10103a14:	9009883a 	mov	r4,r18
10103a18:	1023883a 	mov	r17,r2
10103a1c:	01038040 	call	10103804 <__sfp>
10103a20:	1021883a 	mov	r16,r2
10103a24:	10002226 	beq	r2,zero,10103ab0 <_fopen_r+0xd0>
10103a28:	d9800017 	ldw	r6,0(sp)
10103a2c:	01c06d84 	movi	r7,438
10103a30:	980b883a 	mov	r5,r19
10103a34:	9009883a 	mov	r4,r18
10103a38:	01051c00 	call	101051c0 <_open_r>
10103a3c:	10001916 	blt	r2,zero,10103aa4 <_fopen_r+0xc4>
10103a40:	8080038d 	sth	r2,14(r16)
10103a44:	00840434 	movhi	r2,4112
10103a48:	1095b904 	addi	r2,r2,22244
10103a4c:	80800815 	stw	r2,32(r16)
10103a50:	00840434 	movhi	r2,4112
10103a54:	1095d004 	addi	r2,r2,22336
10103a58:	80800915 	stw	r2,36(r16)
10103a5c:	00840434 	movhi	r2,4112
10103a60:	1095ef04 	addi	r2,r2,22460
10103a64:	80800a15 	stw	r2,40(r16)
10103a68:	00840434 	movhi	r2,4112
10103a6c:	10960604 	addi	r2,r2,22552
10103a70:	8440030d 	sth	r17,12(r16)
10103a74:	84000715 	stw	r16,28(r16)
10103a78:	80800b15 	stw	r2,44(r16)
10103a7c:	8c40400c 	andi	r17,r17,256
10103a80:	88000d1e 	bne	r17,zero,10103ab8 <_fopen_r+0xd8>
10103a84:	8005883a 	mov	r2,r16
10103a88:	dfc00517 	ldw	ra,20(sp)
10103a8c:	dcc00417 	ldw	r19,16(sp)
10103a90:	dc800317 	ldw	r18,12(sp)
10103a94:	dc400217 	ldw	r17,8(sp)
10103a98:	dc000117 	ldw	r16,4(sp)
10103a9c:	dec00604 	addi	sp,sp,24
10103aa0:	f800283a 	ret
10103aa4:	01039440 	call	10103944 <__sfp_lock_acquire>
10103aa8:	8000030d 	sth	zero,12(r16)
10103aac:	01039480 	call	10103948 <__sfp_lock_release>
10103ab0:	0005883a 	mov	r2,zero
10103ab4:	003ff406 	br	10103a88 <_gp+0xfffe24f8>
10103ab8:	01c00084 	movi	r7,2
10103abc:	000d883a 	mov	r6,zero
10103ac0:	800b883a 	mov	r5,r16
10103ac4:	9009883a 	mov	r4,r18
10103ac8:	0103f6c0 	call	10103f6c <_fseek_r>
10103acc:	8005883a 	mov	r2,r16
10103ad0:	003fed06 	br	10103a88 <_gp+0xfffe24f8>

10103ad4 <fopen>:
10103ad4:	008404b4 	movhi	r2,4114
10103ad8:	10a56504 	addi	r2,r2,-27244
10103adc:	280d883a 	mov	r6,r5
10103ae0:	200b883a 	mov	r5,r4
10103ae4:	11000017 	ldw	r4,0(r2)
10103ae8:	01039e01 	jmpi	101039e0 <_fopen_r>

10103aec <_fprintf_r>:
10103aec:	defffe04 	addi	sp,sp,-8
10103af0:	2809883a 	mov	r4,r5
10103af4:	300b883a 	mov	r5,r6
10103af8:	dfc00015 	stw	ra,0(sp)
10103afc:	d9c00115 	stw	r7,4(sp)
10103b00:	d9800104 	addi	r6,sp,4
10103b04:	0109cf00 	call	10109cf0 <__vfprintf_internal>
10103b08:	dfc00017 	ldw	ra,0(sp)
10103b0c:	dec00204 	addi	sp,sp,8
10103b10:	f800283a 	ret

10103b14 <fprintf>:
10103b14:	defffd04 	addi	sp,sp,-12
10103b18:	dfc00015 	stw	ra,0(sp)
10103b1c:	d9800115 	stw	r6,4(sp)
10103b20:	d9c00215 	stw	r7,8(sp)
10103b24:	d9800104 	addi	r6,sp,4
10103b28:	0109cf00 	call	10109cf0 <__vfprintf_internal>
10103b2c:	dfc00017 	ldw	ra,0(sp)
10103b30:	dec00304 	addi	sp,sp,12
10103b34:	f800283a 	ret

10103b38 <_malloc_trim_r>:
10103b38:	defffb04 	addi	sp,sp,-20
10103b3c:	dcc00315 	stw	r19,12(sp)
10103b40:	04c40474 	movhi	r19,4113
10103b44:	dc800215 	stw	r18,8(sp)
10103b48:	dc400115 	stw	r17,4(sp)
10103b4c:	dc000015 	stw	r16,0(sp)
10103b50:	dfc00415 	stw	ra,16(sp)
10103b54:	2821883a 	mov	r16,r5
10103b58:	9cdfb804 	addi	r19,r19,32480
10103b5c:	2025883a 	mov	r18,r4
10103b60:	01148680 	call	10114868 <__malloc_lock>
10103b64:	98800217 	ldw	r2,8(r19)
10103b68:	14400117 	ldw	r17,4(r2)
10103b6c:	00bfff04 	movi	r2,-4
10103b70:	88a2703a 	and	r17,r17,r2
10103b74:	8c21c83a 	sub	r16,r17,r16
10103b78:	8403fbc4 	addi	r16,r16,4079
10103b7c:	8020d33a 	srli	r16,r16,12
10103b80:	0083ffc4 	movi	r2,4095
10103b84:	843fffc4 	addi	r16,r16,-1
10103b88:	8020933a 	slli	r16,r16,12
10103b8c:	1400060e 	bge	r2,r16,10103ba8 <_malloc_trim_r+0x70>
10103b90:	000b883a 	mov	r5,zero
10103b94:	9009883a 	mov	r4,r18
10103b98:	01055cc0 	call	101055cc <_sbrk_r>
10103b9c:	98c00217 	ldw	r3,8(r19)
10103ba0:	1c47883a 	add	r3,r3,r17
10103ba4:	10c00a26 	beq	r2,r3,10103bd0 <_malloc_trim_r+0x98>
10103ba8:	9009883a 	mov	r4,r18
10103bac:	011488c0 	call	1011488c <__malloc_unlock>
10103bb0:	0005883a 	mov	r2,zero
10103bb4:	dfc00417 	ldw	ra,16(sp)
10103bb8:	dcc00317 	ldw	r19,12(sp)
10103bbc:	dc800217 	ldw	r18,8(sp)
10103bc0:	dc400117 	ldw	r17,4(sp)
10103bc4:	dc000017 	ldw	r16,0(sp)
10103bc8:	dec00504 	addi	sp,sp,20
10103bcc:	f800283a 	ret
10103bd0:	040bc83a 	sub	r5,zero,r16
10103bd4:	9009883a 	mov	r4,r18
10103bd8:	01055cc0 	call	101055cc <_sbrk_r>
10103bdc:	00ffffc4 	movi	r3,-1
10103be0:	10c00d26 	beq	r2,r3,10103c18 <_malloc_trim_r+0xe0>
10103be4:	00c404b4 	movhi	r3,4114
10103be8:	18ec7004 	addi	r3,r3,-20032
10103bec:	18800017 	ldw	r2,0(r3)
10103bf0:	99000217 	ldw	r4,8(r19)
10103bf4:	8c23c83a 	sub	r17,r17,r16
10103bf8:	8c400054 	ori	r17,r17,1
10103bfc:	1421c83a 	sub	r16,r2,r16
10103c00:	24400115 	stw	r17,4(r4)
10103c04:	9009883a 	mov	r4,r18
10103c08:	1c000015 	stw	r16,0(r3)
10103c0c:	011488c0 	call	1011488c <__malloc_unlock>
10103c10:	00800044 	movi	r2,1
10103c14:	003fe706 	br	10103bb4 <_gp+0xfffe2624>
10103c18:	000b883a 	mov	r5,zero
10103c1c:	9009883a 	mov	r4,r18
10103c20:	01055cc0 	call	101055cc <_sbrk_r>
10103c24:	99000217 	ldw	r4,8(r19)
10103c28:	014003c4 	movi	r5,15
10103c2c:	1107c83a 	sub	r3,r2,r4
10103c30:	28ffdd0e 	bge	r5,r3,10103ba8 <_gp+0xfffe2618>
10103c34:	014404b4 	movhi	r5,4114
10103c38:	29656604 	addi	r5,r5,-27240
10103c3c:	29400017 	ldw	r5,0(r5)
10103c40:	18c00054 	ori	r3,r3,1
10103c44:	20c00115 	stw	r3,4(r4)
10103c48:	00c404b4 	movhi	r3,4114
10103c4c:	1145c83a 	sub	r2,r2,r5
10103c50:	18ec7004 	addi	r3,r3,-20032
10103c54:	18800015 	stw	r2,0(r3)
10103c58:	003fd306 	br	10103ba8 <_gp+0xfffe2618>

10103c5c <_free_r>:
10103c5c:	28004126 	beq	r5,zero,10103d64 <_free_r+0x108>
10103c60:	defffd04 	addi	sp,sp,-12
10103c64:	dc400115 	stw	r17,4(sp)
10103c68:	dc000015 	stw	r16,0(sp)
10103c6c:	2023883a 	mov	r17,r4
10103c70:	2821883a 	mov	r16,r5
10103c74:	dfc00215 	stw	ra,8(sp)
10103c78:	01148680 	call	10114868 <__malloc_lock>
10103c7c:	81ffff17 	ldw	r7,-4(r16)
10103c80:	00bfff84 	movi	r2,-2
10103c84:	01040474 	movhi	r4,4113
10103c88:	81bffe04 	addi	r6,r16,-8
10103c8c:	3884703a 	and	r2,r7,r2
10103c90:	211fb804 	addi	r4,r4,32480
10103c94:	308b883a 	add	r5,r6,r2
10103c98:	2a400117 	ldw	r9,4(r5)
10103c9c:	22000217 	ldw	r8,8(r4)
10103ca0:	00ffff04 	movi	r3,-4
10103ca4:	48c6703a 	and	r3,r9,r3
10103ca8:	2a005726 	beq	r5,r8,10103e08 <_free_r+0x1ac>
10103cac:	28c00115 	stw	r3,4(r5)
10103cb0:	39c0004c 	andi	r7,r7,1
10103cb4:	3800091e 	bne	r7,zero,10103cdc <_free_r+0x80>
10103cb8:	823ffe17 	ldw	r8,-8(r16)
10103cbc:	22400204 	addi	r9,r4,8
10103cc0:	320dc83a 	sub	r6,r6,r8
10103cc4:	31c00217 	ldw	r7,8(r6)
10103cc8:	1205883a 	add	r2,r2,r8
10103ccc:	3a406526 	beq	r7,r9,10103e64 <_free_r+0x208>
10103cd0:	32000317 	ldw	r8,12(r6)
10103cd4:	3a000315 	stw	r8,12(r7)
10103cd8:	41c00215 	stw	r7,8(r8)
10103cdc:	28cf883a 	add	r7,r5,r3
10103ce0:	39c00117 	ldw	r7,4(r7)
10103ce4:	39c0004c 	andi	r7,r7,1
10103ce8:	38003a26 	beq	r7,zero,10103dd4 <_free_r+0x178>
10103cec:	10c00054 	ori	r3,r2,1
10103cf0:	30c00115 	stw	r3,4(r6)
10103cf4:	3087883a 	add	r3,r6,r2
10103cf8:	18800015 	stw	r2,0(r3)
10103cfc:	00c07fc4 	movi	r3,511
10103d00:	18801936 	bltu	r3,r2,10103d68 <_free_r+0x10c>
10103d04:	1004d0fa 	srli	r2,r2,3
10103d08:	01c00044 	movi	r7,1
10103d0c:	21400117 	ldw	r5,4(r4)
10103d10:	10c00044 	addi	r3,r2,1
10103d14:	18c7883a 	add	r3,r3,r3
10103d18:	1005d0ba 	srai	r2,r2,2
10103d1c:	18c7883a 	add	r3,r3,r3
10103d20:	18c7883a 	add	r3,r3,r3
10103d24:	1907883a 	add	r3,r3,r4
10103d28:	3884983a 	sll	r2,r7,r2
10103d2c:	19c00017 	ldw	r7,0(r3)
10103d30:	1a3ffe04 	addi	r8,r3,-8
10103d34:	1144b03a 	or	r2,r2,r5
10103d38:	32000315 	stw	r8,12(r6)
10103d3c:	31c00215 	stw	r7,8(r6)
10103d40:	20800115 	stw	r2,4(r4)
10103d44:	19800015 	stw	r6,0(r3)
10103d48:	39800315 	stw	r6,12(r7)
10103d4c:	8809883a 	mov	r4,r17
10103d50:	dfc00217 	ldw	ra,8(sp)
10103d54:	dc400117 	ldw	r17,4(sp)
10103d58:	dc000017 	ldw	r16,0(sp)
10103d5c:	dec00304 	addi	sp,sp,12
10103d60:	011488c1 	jmpi	1011488c <__malloc_unlock>
10103d64:	f800283a 	ret
10103d68:	100ad27a 	srli	r5,r2,9
10103d6c:	00c00104 	movi	r3,4
10103d70:	19404a36 	bltu	r3,r5,10103e9c <_free_r+0x240>
10103d74:	100ad1ba 	srli	r5,r2,6
10103d78:	28c00e44 	addi	r3,r5,57
10103d7c:	18c7883a 	add	r3,r3,r3
10103d80:	29400e04 	addi	r5,r5,56
10103d84:	18c7883a 	add	r3,r3,r3
10103d88:	18c7883a 	add	r3,r3,r3
10103d8c:	1909883a 	add	r4,r3,r4
10103d90:	20c00017 	ldw	r3,0(r4)
10103d94:	01c40474 	movhi	r7,4113
10103d98:	213ffe04 	addi	r4,r4,-8
10103d9c:	39dfb804 	addi	r7,r7,32480
10103da0:	20c04426 	beq	r4,r3,10103eb4 <_free_r+0x258>
10103da4:	01ffff04 	movi	r7,-4
10103da8:	19400117 	ldw	r5,4(r3)
10103dac:	29ca703a 	and	r5,r5,r7
10103db0:	1140022e 	bgeu	r2,r5,10103dbc <_free_r+0x160>
10103db4:	18c00217 	ldw	r3,8(r3)
10103db8:	20fffb1e 	bne	r4,r3,10103da8 <_gp+0xfffe2818>
10103dbc:	19000317 	ldw	r4,12(r3)
10103dc0:	31000315 	stw	r4,12(r6)
10103dc4:	30c00215 	stw	r3,8(r6)
10103dc8:	21800215 	stw	r6,8(r4)
10103dcc:	19800315 	stw	r6,12(r3)
10103dd0:	003fde06 	br	10103d4c <_gp+0xfffe27bc>
10103dd4:	29c00217 	ldw	r7,8(r5)
10103dd8:	10c5883a 	add	r2,r2,r3
10103ddc:	00c40474 	movhi	r3,4113
10103de0:	18dfba04 	addi	r3,r3,32488
10103de4:	38c03b26 	beq	r7,r3,10103ed4 <_free_r+0x278>
10103de8:	2a000317 	ldw	r8,12(r5)
10103dec:	11400054 	ori	r5,r2,1
10103df0:	3087883a 	add	r3,r6,r2
10103df4:	3a000315 	stw	r8,12(r7)
10103df8:	41c00215 	stw	r7,8(r8)
10103dfc:	31400115 	stw	r5,4(r6)
10103e00:	18800015 	stw	r2,0(r3)
10103e04:	003fbd06 	br	10103cfc <_gp+0xfffe276c>
10103e08:	39c0004c 	andi	r7,r7,1
10103e0c:	10c5883a 	add	r2,r2,r3
10103e10:	3800071e 	bne	r7,zero,10103e30 <_free_r+0x1d4>
10103e14:	81fffe17 	ldw	r7,-8(r16)
10103e18:	31cdc83a 	sub	r6,r6,r7
10103e1c:	30c00317 	ldw	r3,12(r6)
10103e20:	31400217 	ldw	r5,8(r6)
10103e24:	11c5883a 	add	r2,r2,r7
10103e28:	28c00315 	stw	r3,12(r5)
10103e2c:	19400215 	stw	r5,8(r3)
10103e30:	10c00054 	ori	r3,r2,1
10103e34:	30c00115 	stw	r3,4(r6)
10103e38:	00c404b4 	movhi	r3,4114
10103e3c:	18e56704 	addi	r3,r3,-27236
10103e40:	18c00017 	ldw	r3,0(r3)
10103e44:	21800215 	stw	r6,8(r4)
10103e48:	10ffc036 	bltu	r2,r3,10103d4c <_gp+0xfffe27bc>
10103e4c:	008404b4 	movhi	r2,4114
10103e50:	10ac6104 	addi	r2,r2,-20092
10103e54:	11400017 	ldw	r5,0(r2)
10103e58:	8809883a 	mov	r4,r17
10103e5c:	0103b380 	call	10103b38 <_malloc_trim_r>
10103e60:	003fba06 	br	10103d4c <_gp+0xfffe27bc>
10103e64:	28c9883a 	add	r4,r5,r3
10103e68:	21000117 	ldw	r4,4(r4)
10103e6c:	2100004c 	andi	r4,r4,1
10103e70:	2000391e 	bne	r4,zero,10103f58 <_free_r+0x2fc>
10103e74:	29c00217 	ldw	r7,8(r5)
10103e78:	29000317 	ldw	r4,12(r5)
10103e7c:	1885883a 	add	r2,r3,r2
10103e80:	10c00054 	ori	r3,r2,1
10103e84:	39000315 	stw	r4,12(r7)
10103e88:	21c00215 	stw	r7,8(r4)
10103e8c:	30c00115 	stw	r3,4(r6)
10103e90:	308d883a 	add	r6,r6,r2
10103e94:	30800015 	stw	r2,0(r6)
10103e98:	003fac06 	br	10103d4c <_gp+0xfffe27bc>
10103e9c:	00c00504 	movi	r3,20
10103ea0:	19401536 	bltu	r3,r5,10103ef8 <_free_r+0x29c>
10103ea4:	28c01704 	addi	r3,r5,92
10103ea8:	18c7883a 	add	r3,r3,r3
10103eac:	294016c4 	addi	r5,r5,91
10103eb0:	003fb406 	br	10103d84 <_gp+0xfffe27f4>
10103eb4:	280bd0ba 	srai	r5,r5,2
10103eb8:	00c00044 	movi	r3,1
10103ebc:	38800117 	ldw	r2,4(r7)
10103ec0:	194a983a 	sll	r5,r3,r5
10103ec4:	2007883a 	mov	r3,r4
10103ec8:	2884b03a 	or	r2,r5,r2
10103ecc:	38800115 	stw	r2,4(r7)
10103ed0:	003fbb06 	br	10103dc0 <_gp+0xfffe2830>
10103ed4:	21800515 	stw	r6,20(r4)
10103ed8:	21800415 	stw	r6,16(r4)
10103edc:	10c00054 	ori	r3,r2,1
10103ee0:	31c00315 	stw	r7,12(r6)
10103ee4:	31c00215 	stw	r7,8(r6)
10103ee8:	30c00115 	stw	r3,4(r6)
10103eec:	308d883a 	add	r6,r6,r2
10103ef0:	30800015 	stw	r2,0(r6)
10103ef4:	003f9506 	br	10103d4c <_gp+0xfffe27bc>
10103ef8:	00c01504 	movi	r3,84
10103efc:	19400536 	bltu	r3,r5,10103f14 <_free_r+0x2b8>
10103f00:	100ad33a 	srli	r5,r2,12
10103f04:	28c01bc4 	addi	r3,r5,111
10103f08:	18c7883a 	add	r3,r3,r3
10103f0c:	29401b84 	addi	r5,r5,110
10103f10:	003f9c06 	br	10103d84 <_gp+0xfffe27f4>
10103f14:	00c05504 	movi	r3,340
10103f18:	19400536 	bltu	r3,r5,10103f30 <_free_r+0x2d4>
10103f1c:	100ad3fa 	srli	r5,r2,15
10103f20:	28c01e04 	addi	r3,r5,120
10103f24:	18c7883a 	add	r3,r3,r3
10103f28:	29401dc4 	addi	r5,r5,119
10103f2c:	003f9506 	br	10103d84 <_gp+0xfffe27f4>
10103f30:	00c15504 	movi	r3,1364
10103f34:	19400536 	bltu	r3,r5,10103f4c <_free_r+0x2f0>
10103f38:	100ad4ba 	srli	r5,r2,18
10103f3c:	28c01f44 	addi	r3,r5,125
10103f40:	18c7883a 	add	r3,r3,r3
10103f44:	29401f04 	addi	r5,r5,124
10103f48:	003f8e06 	br	10103d84 <_gp+0xfffe27f4>
10103f4c:	00c03f84 	movi	r3,254
10103f50:	01401f84 	movi	r5,126
10103f54:	003f8b06 	br	10103d84 <_gp+0xfffe27f4>
10103f58:	10c00054 	ori	r3,r2,1
10103f5c:	30c00115 	stw	r3,4(r6)
10103f60:	308d883a 	add	r6,r6,r2
10103f64:	30800015 	stw	r2,0(r6)
10103f68:	003f7806 	br	10103d4c <_gp+0xfffe27bc>

10103f6c <_fseek_r>:
10103f6c:	0103f8c1 	jmpi	10103f8c <_fseeko_r>

10103f70 <fseek>:
10103f70:	008404b4 	movhi	r2,4114
10103f74:	10a56504 	addi	r2,r2,-27244
10103f78:	300f883a 	mov	r7,r6
10103f7c:	280d883a 	mov	r6,r5
10103f80:	200b883a 	mov	r5,r4
10103f84:	11000017 	ldw	r4,0(r2)
10103f88:	0103f8c1 	jmpi	10103f8c <_fseeko_r>

10103f8c <_fseeko_r>:
10103f8c:	deffe804 	addi	sp,sp,-96
10103f90:	dd401415 	stw	r21,80(sp)
10103f94:	dc801115 	stw	r18,68(sp)
10103f98:	dc401015 	stw	r17,64(sp)
10103f9c:	dc000f15 	stw	r16,60(sp)
10103fa0:	dfc01715 	stw	ra,92(sp)
10103fa4:	ddc01615 	stw	r23,88(sp)
10103fa8:	dd801515 	stw	r22,84(sp)
10103fac:	dd001315 	stw	r20,76(sp)
10103fb0:	dcc01215 	stw	r19,72(sp)
10103fb4:	2023883a 	mov	r17,r4
10103fb8:	2821883a 	mov	r16,r5
10103fbc:	302b883a 	mov	r21,r6
10103fc0:	3825883a 	mov	r18,r7
10103fc4:	20000226 	beq	r4,zero,10103fd0 <_fseeko_r+0x44>
10103fc8:	20800e17 	ldw	r2,56(r4)
10103fcc:	10005a26 	beq	r2,zero,10104138 <_fseeko_r+0x1ac>
10103fd0:	8080030b 	ldhu	r2,12(r16)
10103fd4:	00c04204 	movi	r3,264
10103fd8:	1080420c 	andi	r2,r2,264
10103fdc:	10c05b26 	beq	r2,r3,1010414c <_fseeko_r+0x1c0>
10103fe0:	85000a17 	ldw	r20,40(r16)
10103fe4:	a000f626 	beq	r20,zero,101043c0 <_fseeko_r+0x434>
10103fe8:	00800044 	movi	r2,1
10103fec:	90803e26 	beq	r18,r2,101040e8 <_fseeko_r+0x15c>
10103ff0:	00800084 	movi	r2,2
10103ff4:	90801026 	beq	r18,r2,10104038 <_fseeko_r+0xac>
10103ff8:	90000f26 	beq	r18,zero,10104038 <_fseeko_r+0xac>
10103ffc:	00800584 	movi	r2,22
10104000:	88800015 	stw	r2,0(r17)
10104004:	04ffffc4 	movi	r19,-1
10104008:	9805883a 	mov	r2,r19
1010400c:	dfc01717 	ldw	ra,92(sp)
10104010:	ddc01617 	ldw	r23,88(sp)
10104014:	dd801517 	ldw	r22,84(sp)
10104018:	dd401417 	ldw	r21,80(sp)
1010401c:	dd001317 	ldw	r20,76(sp)
10104020:	dcc01217 	ldw	r19,72(sp)
10104024:	dc801117 	ldw	r18,68(sp)
10104028:	dc401017 	ldw	r17,64(sp)
1010402c:	dc000f17 	ldw	r16,60(sp)
10104030:	dec01804 	addi	sp,sp,96
10104034:	f800283a 	ret
10104038:	80800417 	ldw	r2,16(r16)
1010403c:	002f883a 	mov	r23,zero
10104040:	0027883a 	mov	r19,zero
10104044:	1000cb26 	beq	r2,zero,10104374 <_fseeko_r+0x3e8>
10104048:	8080030b 	ldhu	r2,12(r16)
1010404c:	10c2068c 	andi	r3,r2,2074
10104050:	1800071e 	bne	r3,zero,10104070 <_fseeko_r+0xe4>
10104054:	10c1000c 	andi	r3,r2,1024
10104058:	1800451e 	bne	r3,zero,10104170 <_fseeko_r+0x1e4>
1010405c:	00c40434 	movhi	r3,4112
10104060:	18d5ef04 	addi	r3,r3,22460
10104064:	a0c0b726 	beq	r20,r3,10104344 <_fseeko_r+0x3b8>
10104068:	10820014 	ori	r2,r2,2048
1010406c:	8080030d 	sth	r2,12(r16)
10104070:	800b883a 	mov	r5,r16
10104074:	8809883a 	mov	r4,r17
10104078:	01035580 	call	10103558 <_fflush_r>
1010407c:	1027883a 	mov	r19,r2
10104080:	103fe01e 	bne	r2,zero,10104004 <_gp+0xfffe2a74>
10104084:	81400717 	ldw	r5,28(r16)
10104088:	900f883a 	mov	r7,r18
1010408c:	a80d883a 	mov	r6,r21
10104090:	8809883a 	mov	r4,r17
10104094:	a03ee83a 	callr	r20
10104098:	00ffffc4 	movi	r3,-1
1010409c:	10ffd926 	beq	r2,r3,10104004 <_gp+0xfffe2a74>
101040a0:	81400c17 	ldw	r5,48(r16)
101040a4:	28000526 	beq	r5,zero,101040bc <_fseeko_r+0x130>
101040a8:	80801004 	addi	r2,r16,64
101040ac:	28800226 	beq	r5,r2,101040b8 <_fseeko_r+0x12c>
101040b0:	8809883a 	mov	r4,r17
101040b4:	0103c5c0 	call	10103c5c <_free_r>
101040b8:	80000c15 	stw	zero,48(r16)
101040bc:	8080030b 	ldhu	r2,12(r16)
101040c0:	80c00417 	ldw	r3,16(r16)
101040c4:	80000115 	stw	zero,4(r16)
101040c8:	10bdf7cc 	andi	r2,r2,63455
101040cc:	80c00015 	stw	r3,0(r16)
101040d0:	8080030d 	sth	r2,12(r16)
101040d4:	01800204 	movi	r6,8
101040d8:	000b883a 	mov	r5,zero
101040dc:	81001704 	addi	r4,r16,92
101040e0:	01050980 	call	10105098 <memset>
101040e4:	003fc806 	br	10104008 <_gp+0xfffe2a78>
101040e8:	800b883a 	mov	r5,r16
101040ec:	8809883a 	mov	r4,r17
101040f0:	01035580 	call	10103558 <_fflush_r>
101040f4:	8080030b 	ldhu	r2,12(r16)
101040f8:	10c4000c 	andi	r3,r2,4096
101040fc:	18008726 	beq	r3,zero,1010431c <_fseeko_r+0x390>
10104100:	84c01417 	ldw	r19,80(r16)
10104104:	10c0010c 	andi	r3,r2,4
10104108:	1800431e 	bne	r3,zero,10104218 <_fseeko_r+0x28c>
1010410c:	1080020c 	andi	r2,r2,8
10104110:	10008026 	beq	r2,zero,10104314 <_fseeko_r+0x388>
10104114:	80c00017 	ldw	r3,0(r16)
10104118:	80800417 	ldw	r2,16(r16)
1010411c:	18000226 	beq	r3,zero,10104128 <_fseeko_r+0x19c>
10104120:	1887c83a 	sub	r3,r3,r2
10104124:	98e7883a 	add	r19,r19,r3
10104128:	aceb883a 	add	r21,r21,r19
1010412c:	05c00044 	movi	r23,1
10104130:	0025883a 	mov	r18,zero
10104134:	003fc306 	br	10104044 <_gp+0xfffe2ab4>
10104138:	01039340 	call	10103934 <__sinit>
1010413c:	8080030b 	ldhu	r2,12(r16)
10104140:	00c04204 	movi	r3,264
10104144:	1080420c 	andi	r2,r2,264
10104148:	10ffa51e 	bne	r2,r3,10103fe0 <_gp+0xfffe2a50>
1010414c:	800b883a 	mov	r5,r16
10104150:	8809883a 	mov	r4,r17
10104154:	01035580 	call	10103558 <_fflush_r>
10104158:	003fa106 	br	10103fe0 <_gp+0xfffe2a50>
1010415c:	8080030b 	ldhu	r2,12(r16)
10104160:	00c10004 	movi	r3,1024
10104164:	80c01315 	stw	r3,76(r16)
10104168:	10c4b03a 	or	r2,r2,r3
1010416c:	8080030d 	sth	r2,12(r16)
10104170:	9000311e 	bne	r18,zero,10104238 <_fseeko_r+0x2ac>
10104174:	a82d883a 	mov	r22,r21
10104178:	b800371e 	bne	r23,zero,10104258 <_fseeko_r+0x2cc>
1010417c:	8080030b 	ldhu	r2,12(r16)
10104180:	1084000c 	andi	r2,r2,4096
10104184:	10007f26 	beq	r2,zero,10104384 <_fseeko_r+0x3f8>
10104188:	80801417 	ldw	r2,80(r16)
1010418c:	81800117 	ldw	r6,4(r16)
10104190:	81400c17 	ldw	r5,48(r16)
10104194:	11a7c83a 	sub	r19,r2,r6
10104198:	28008226 	beq	r5,zero,101043a4 <_fseeko_r+0x418>
1010419c:	81c00f17 	ldw	r7,60(r16)
101041a0:	99e7c83a 	sub	r19,r19,r7
101041a4:	81000e17 	ldw	r4,56(r16)
101041a8:	80800417 	ldw	r2,16(r16)
101041ac:	99a7883a 	add	r19,r19,r6
101041b0:	2087c83a 	sub	r3,r4,r2
101041b4:	98e7c83a 	sub	r19,r19,r3
101041b8:	38c7883a 	add	r3,r7,r3
101041bc:	b4c02b16 	blt	r22,r19,1010426c <_fseeko_r+0x2e0>
101041c0:	98c9883a 	add	r4,r19,r3
101041c4:	b100292e 	bgeu	r22,r4,1010426c <_fseeko_r+0x2e0>
101041c8:	b4e7c83a 	sub	r19,r22,r19
101041cc:	14c5883a 	add	r2,r2,r19
101041d0:	1ce7c83a 	sub	r19,r3,r19
101041d4:	80800015 	stw	r2,0(r16)
101041d8:	84c00115 	stw	r19,4(r16)
101041dc:	28000526 	beq	r5,zero,101041f4 <_fseeko_r+0x268>
101041e0:	80801004 	addi	r2,r16,64
101041e4:	28800226 	beq	r5,r2,101041f0 <_fseeko_r+0x264>
101041e8:	8809883a 	mov	r4,r17
101041ec:	0103c5c0 	call	10103c5c <_free_r>
101041f0:	80000c15 	stw	zero,48(r16)
101041f4:	8080030b 	ldhu	r2,12(r16)
101041f8:	01800204 	movi	r6,8
101041fc:	000b883a 	mov	r5,zero
10104200:	10bff7cc 	andi	r2,r2,65503
10104204:	8080030d 	sth	r2,12(r16)
10104208:	81001704 	addi	r4,r16,92
1010420c:	01050980 	call	10105098 <memset>
10104210:	0027883a 	mov	r19,zero
10104214:	003f7c06 	br	10104008 <_gp+0xfffe2a78>
10104218:	80c00117 	ldw	r3,4(r16)
1010421c:	80800c17 	ldw	r2,48(r16)
10104220:	98e7c83a 	sub	r19,r19,r3
10104224:	10003b26 	beq	r2,zero,10104314 <_fseeko_r+0x388>
10104228:	80c00f17 	ldw	r3,60(r16)
1010422c:	80800417 	ldw	r2,16(r16)
10104230:	98e7c83a 	sub	r19,r19,r3
10104234:	003fbc06 	br	10104128 <_gp+0xfffe2b98>
10104238:	8140038f 	ldh	r5,14(r16)
1010423c:	d80d883a 	mov	r6,sp
10104240:	8809883a 	mov	r4,r17
10104244:	01043ec0 	call	101043ec <_fstat_r>
10104248:	103f891e 	bne	r2,zero,10104070 <_gp+0xfffe2ae0>
1010424c:	dd800417 	ldw	r22,16(sp)
10104250:	adad883a 	add	r22,r21,r22
10104254:	b83fc926 	beq	r23,zero,1010417c <_gp+0xfffe2bec>
10104258:	81400c17 	ldw	r5,48(r16)
1010425c:	81800117 	ldw	r6,4(r16)
10104260:	28005026 	beq	r5,zero,101043a4 <_fseeko_r+0x418>
10104264:	81c00f17 	ldw	r7,60(r16)
10104268:	003fce06 	br	101041a4 <_gp+0xfffe2c14>
1010426c:	84c01317 	ldw	r19,76(r16)
10104270:	81400717 	ldw	r5,28(r16)
10104274:	000f883a 	mov	r7,zero
10104278:	04e7c83a 	sub	r19,zero,r19
1010427c:	9da6703a 	and	r19,r19,r22
10104280:	980d883a 	mov	r6,r19
10104284:	8809883a 	mov	r4,r17
10104288:	a03ee83a 	callr	r20
1010428c:	00ffffc4 	movi	r3,-1
10104290:	10ff7726 	beq	r2,r3,10104070 <_gp+0xfffe2ae0>
10104294:	80800417 	ldw	r2,16(r16)
10104298:	81400c17 	ldw	r5,48(r16)
1010429c:	80000115 	stw	zero,4(r16)
101042a0:	80800015 	stw	r2,0(r16)
101042a4:	28000526 	beq	r5,zero,101042bc <_fseeko_r+0x330>
101042a8:	80801004 	addi	r2,r16,64
101042ac:	28800226 	beq	r5,r2,101042b8 <_fseeko_r+0x32c>
101042b0:	8809883a 	mov	r4,r17
101042b4:	0103c5c0 	call	10103c5c <_free_r>
101042b8:	80000c15 	stw	zero,48(r16)
101042bc:	8080030b 	ldhu	r2,12(r16)
101042c0:	b4e7c83a 	sub	r19,r22,r19
101042c4:	10bff7cc 	andi	r2,r2,65503
101042c8:	8080030d 	sth	r2,12(r16)
101042cc:	98000b26 	beq	r19,zero,101042fc <_fseeko_r+0x370>
101042d0:	800b883a 	mov	r5,r16
101042d4:	8809883a 	mov	r4,r17
101042d8:	01053f80 	call	101053f8 <__srefill_r>
101042dc:	103f641e 	bne	r2,zero,10104070 <_gp+0xfffe2ae0>
101042e0:	80800117 	ldw	r2,4(r16)
101042e4:	14ff6236 	bltu	r2,r19,10104070 <_gp+0xfffe2ae0>
101042e8:	80c00017 	ldw	r3,0(r16)
101042ec:	14c5c83a 	sub	r2,r2,r19
101042f0:	80800115 	stw	r2,4(r16)
101042f4:	1ce7883a 	add	r19,r3,r19
101042f8:	84c00015 	stw	r19,0(r16)
101042fc:	01800204 	movi	r6,8
10104300:	000b883a 	mov	r5,zero
10104304:	81001704 	addi	r4,r16,92
10104308:	01050980 	call	10105098 <memset>
1010430c:	0027883a 	mov	r19,zero
10104310:	003f3d06 	br	10104008 <_gp+0xfffe2a78>
10104314:	80800417 	ldw	r2,16(r16)
10104318:	003f8306 	br	10104128 <_gp+0xfffe2b98>
1010431c:	81400717 	ldw	r5,28(r16)
10104320:	900f883a 	mov	r7,r18
10104324:	000d883a 	mov	r6,zero
10104328:	8809883a 	mov	r4,r17
1010432c:	a03ee83a 	callr	r20
10104330:	1027883a 	mov	r19,r2
10104334:	00bfffc4 	movi	r2,-1
10104338:	98bf3226 	beq	r19,r2,10104004 <_gp+0xfffe2a74>
1010433c:	8080030b 	ldhu	r2,12(r16)
10104340:	003f7006 	br	10104104 <_gp+0xfffe2b74>
10104344:	8140038f 	ldh	r5,14(r16)
10104348:	283f4716 	blt	r5,zero,10104068 <_gp+0xfffe2ad8>
1010434c:	d80d883a 	mov	r6,sp
10104350:	8809883a 	mov	r4,r17
10104354:	01043ec0 	call	101043ec <_fstat_r>
10104358:	1000041e 	bne	r2,zero,1010436c <_fseeko_r+0x3e0>
1010435c:	d8800117 	ldw	r2,4(sp)
10104360:	00e00014 	movui	r3,32768
10104364:	10bc000c 	andi	r2,r2,61440
10104368:	10ff7c26 	beq	r2,r3,1010415c <_gp+0xfffe2bcc>
1010436c:	8080030b 	ldhu	r2,12(r16)
10104370:	003f3d06 	br	10104068 <_gp+0xfffe2ad8>
10104374:	800b883a 	mov	r5,r16
10104378:	8809883a 	mov	r4,r17
1010437c:	01046d00 	call	101046d0 <__smakebuf_r>
10104380:	003f3106 	br	10104048 <_gp+0xfffe2ab8>
10104384:	81400717 	ldw	r5,28(r16)
10104388:	01c00044 	movi	r7,1
1010438c:	000d883a 	mov	r6,zero
10104390:	8809883a 	mov	r4,r17
10104394:	a03ee83a 	callr	r20
10104398:	00ffffc4 	movi	r3,-1
1010439c:	10ff7b1e 	bne	r2,r3,1010418c <_gp+0xfffe2bfc>
101043a0:	003f3306 	br	10104070 <_gp+0xfffe2ae0>
101043a4:	80c00017 	ldw	r3,0(r16)
101043a8:	80800417 	ldw	r2,16(r16)
101043ac:	000b883a 	mov	r5,zero
101043b0:	1887c83a 	sub	r3,r3,r2
101043b4:	98e7c83a 	sub	r19,r19,r3
101043b8:	30c7883a 	add	r3,r6,r3
101043bc:	003f7f06 	br	101041bc <_gp+0xfffe2c2c>
101043c0:	00800744 	movi	r2,29
101043c4:	88800015 	stw	r2,0(r17)
101043c8:	04ffffc4 	movi	r19,-1
101043cc:	003f0e06 	br	10104008 <_gp+0xfffe2a78>

101043d0 <fseeko>:
101043d0:	008404b4 	movhi	r2,4114
101043d4:	10a56504 	addi	r2,r2,-27244
101043d8:	300f883a 	mov	r7,r6
101043dc:	280d883a 	mov	r6,r5
101043e0:	200b883a 	mov	r5,r4
101043e4:	11000017 	ldw	r4,0(r2)
101043e8:	0103f8c1 	jmpi	10103f8c <_fseeko_r>

101043ec <_fstat_r>:
101043ec:	defffd04 	addi	sp,sp,-12
101043f0:	2805883a 	mov	r2,r5
101043f4:	dc000015 	stw	r16,0(sp)
101043f8:	040404b4 	movhi	r16,4114
101043fc:	dc400115 	stw	r17,4(sp)
10104400:	842c5e04 	addi	r16,r16,-20104
10104404:	2023883a 	mov	r17,r4
10104408:	300b883a 	mov	r5,r6
1010440c:	1009883a 	mov	r4,r2
10104410:	dfc00215 	stw	ra,8(sp)
10104414:	80000015 	stw	zero,0(r16)
10104418:	01140e00 	call	101140e0 <fstat>
1010441c:	00ffffc4 	movi	r3,-1
10104420:	10c00526 	beq	r2,r3,10104438 <_fstat_r+0x4c>
10104424:	dfc00217 	ldw	ra,8(sp)
10104428:	dc400117 	ldw	r17,4(sp)
1010442c:	dc000017 	ldw	r16,0(sp)
10104430:	dec00304 	addi	sp,sp,12
10104434:	f800283a 	ret
10104438:	80c00017 	ldw	r3,0(r16)
1010443c:	183ff926 	beq	r3,zero,10104424 <_gp+0xfffe2e94>
10104440:	88c00015 	stw	r3,0(r17)
10104444:	003ff706 	br	10104424 <_gp+0xfffe2e94>

10104448 <_fwalk>:
10104448:	defff704 	addi	sp,sp,-36
1010444c:	dd000415 	stw	r20,16(sp)
10104450:	dfc00815 	stw	ra,32(sp)
10104454:	ddc00715 	stw	r23,28(sp)
10104458:	dd800615 	stw	r22,24(sp)
1010445c:	dd400515 	stw	r21,20(sp)
10104460:	dcc00315 	stw	r19,12(sp)
10104464:	dc800215 	stw	r18,8(sp)
10104468:	dc400115 	stw	r17,4(sp)
1010446c:	dc000015 	stw	r16,0(sp)
10104470:	2500b804 	addi	r20,r4,736
10104474:	a0002326 	beq	r20,zero,10104504 <_fwalk+0xbc>
10104478:	282b883a 	mov	r21,r5
1010447c:	002f883a 	mov	r23,zero
10104480:	05800044 	movi	r22,1
10104484:	04ffffc4 	movi	r19,-1
10104488:	a4400117 	ldw	r17,4(r20)
1010448c:	a4800217 	ldw	r18,8(r20)
10104490:	8c7fffc4 	addi	r17,r17,-1
10104494:	88000d16 	blt	r17,zero,101044cc <_fwalk+0x84>
10104498:	94000304 	addi	r16,r18,12
1010449c:	94800384 	addi	r18,r18,14
101044a0:	8080000b 	ldhu	r2,0(r16)
101044a4:	8c7fffc4 	addi	r17,r17,-1
101044a8:	813ffd04 	addi	r4,r16,-12
101044ac:	b080042e 	bgeu	r22,r2,101044c0 <_fwalk+0x78>
101044b0:	9080000f 	ldh	r2,0(r18)
101044b4:	14c00226 	beq	r2,r19,101044c0 <_fwalk+0x78>
101044b8:	a83ee83a 	callr	r21
101044bc:	b8aeb03a 	or	r23,r23,r2
101044c0:	84001a04 	addi	r16,r16,104
101044c4:	94801a04 	addi	r18,r18,104
101044c8:	8cfff51e 	bne	r17,r19,101044a0 <_gp+0xfffe2f10>
101044cc:	a5000017 	ldw	r20,0(r20)
101044d0:	a03fed1e 	bne	r20,zero,10104488 <_gp+0xfffe2ef8>
101044d4:	b805883a 	mov	r2,r23
101044d8:	dfc00817 	ldw	ra,32(sp)
101044dc:	ddc00717 	ldw	r23,28(sp)
101044e0:	dd800617 	ldw	r22,24(sp)
101044e4:	dd400517 	ldw	r21,20(sp)
101044e8:	dd000417 	ldw	r20,16(sp)
101044ec:	dcc00317 	ldw	r19,12(sp)
101044f0:	dc800217 	ldw	r18,8(sp)
101044f4:	dc400117 	ldw	r17,4(sp)
101044f8:	dc000017 	ldw	r16,0(sp)
101044fc:	dec00904 	addi	sp,sp,36
10104500:	f800283a 	ret
10104504:	002f883a 	mov	r23,zero
10104508:	003ff206 	br	101044d4 <_gp+0xfffe2f44>

1010450c <_fwalk_reent>:
1010450c:	defff704 	addi	sp,sp,-36
10104510:	dd000415 	stw	r20,16(sp)
10104514:	dfc00815 	stw	ra,32(sp)
10104518:	ddc00715 	stw	r23,28(sp)
1010451c:	dd800615 	stw	r22,24(sp)
10104520:	dd400515 	stw	r21,20(sp)
10104524:	dcc00315 	stw	r19,12(sp)
10104528:	dc800215 	stw	r18,8(sp)
1010452c:	dc400115 	stw	r17,4(sp)
10104530:	dc000015 	stw	r16,0(sp)
10104534:	2500b804 	addi	r20,r4,736
10104538:	a0002326 	beq	r20,zero,101045c8 <_fwalk_reent+0xbc>
1010453c:	282b883a 	mov	r21,r5
10104540:	2027883a 	mov	r19,r4
10104544:	002f883a 	mov	r23,zero
10104548:	05800044 	movi	r22,1
1010454c:	04bfffc4 	movi	r18,-1
10104550:	a4400117 	ldw	r17,4(r20)
10104554:	a4000217 	ldw	r16,8(r20)
10104558:	8c7fffc4 	addi	r17,r17,-1
1010455c:	88000c16 	blt	r17,zero,10104590 <_fwalk_reent+0x84>
10104560:	84000304 	addi	r16,r16,12
10104564:	8080000b 	ldhu	r2,0(r16)
10104568:	8c7fffc4 	addi	r17,r17,-1
1010456c:	817ffd04 	addi	r5,r16,-12
10104570:	b080052e 	bgeu	r22,r2,10104588 <_fwalk_reent+0x7c>
10104574:	8080008f 	ldh	r2,2(r16)
10104578:	9809883a 	mov	r4,r19
1010457c:	14800226 	beq	r2,r18,10104588 <_fwalk_reent+0x7c>
10104580:	a83ee83a 	callr	r21
10104584:	b8aeb03a 	or	r23,r23,r2
10104588:	84001a04 	addi	r16,r16,104
1010458c:	8cbff51e 	bne	r17,r18,10104564 <_gp+0xfffe2fd4>
10104590:	a5000017 	ldw	r20,0(r20)
10104594:	a03fee1e 	bne	r20,zero,10104550 <_gp+0xfffe2fc0>
10104598:	b805883a 	mov	r2,r23
1010459c:	dfc00817 	ldw	ra,32(sp)
101045a0:	ddc00717 	ldw	r23,28(sp)
101045a4:	dd800617 	ldw	r22,24(sp)
101045a8:	dd400517 	ldw	r21,20(sp)
101045ac:	dd000417 	ldw	r20,16(sp)
101045b0:	dcc00317 	ldw	r19,12(sp)
101045b4:	dc800217 	ldw	r18,8(sp)
101045b8:	dc400117 	ldw	r17,4(sp)
101045bc:	dc000017 	ldw	r16,0(sp)
101045c0:	dec00904 	addi	sp,sp,36
101045c4:	f800283a 	ret
101045c8:	002f883a 	mov	r23,zero
101045cc:	003ff206 	br	10104598 <_gp+0xfffe3008>

101045d0 <_fwrite_r>:
101045d0:	defff504 	addi	sp,sp,-44
101045d4:	dc800815 	stw	r18,32(sp)
101045d8:	39a5383a 	mul	r18,r7,r6
101045dc:	d8800304 	addi	r2,sp,12
101045e0:	d8800015 	stw	r2,0(sp)
101045e4:	00800044 	movi	r2,1
101045e8:	dcc00915 	stw	r19,36(sp)
101045ec:	dc400715 	stw	r17,28(sp)
101045f0:	dc000615 	stw	r16,24(sp)
101045f4:	d9400315 	stw	r5,12(sp)
101045f8:	dfc00a15 	stw	ra,40(sp)
101045fc:	dc800415 	stw	r18,16(sp)
10104600:	dc800215 	stw	r18,8(sp)
10104604:	d8800115 	stw	r2,4(sp)
10104608:	3027883a 	mov	r19,r6
1010460c:	3821883a 	mov	r16,r7
10104610:	2023883a 	mov	r17,r4
10104614:	d9400b17 	ldw	r5,44(sp)
10104618:	20000226 	beq	r4,zero,10104624 <_fwrite_r+0x54>
1010461c:	20800e17 	ldw	r2,56(r4)
10104620:	10001a26 	beq	r2,zero,1010468c <_fwrite_r+0xbc>
10104624:	2880030b 	ldhu	r2,12(r5)
10104628:	10c8000c 	andi	r3,r2,8192
1010462c:	1800061e 	bne	r3,zero,10104648 <_fwrite_r+0x78>
10104630:	29001917 	ldw	r4,100(r5)
10104634:	00f7ffc4 	movi	r3,-8193
10104638:	10880014 	ori	r2,r2,8192
1010463c:	20c6703a 	and	r3,r4,r3
10104640:	2880030d 	sth	r2,12(r5)
10104644:	28c01915 	stw	r3,100(r5)
10104648:	d80d883a 	mov	r6,sp
1010464c:	8809883a 	mov	r4,r17
10104650:	010b91c0 	call	1010b91c <__sfvwrite_r>
10104654:	10000b26 	beq	r2,zero,10104684 <_fwrite_r+0xb4>
10104658:	d9000217 	ldw	r4,8(sp)
1010465c:	980b883a 	mov	r5,r19
10104660:	9109c83a 	sub	r4,r18,r4
10104664:	01031000 	call	10103100 <__udivsi3>
10104668:	dfc00a17 	ldw	ra,40(sp)
1010466c:	dcc00917 	ldw	r19,36(sp)
10104670:	dc800817 	ldw	r18,32(sp)
10104674:	dc400717 	ldw	r17,28(sp)
10104678:	dc000617 	ldw	r16,24(sp)
1010467c:	dec00b04 	addi	sp,sp,44
10104680:	f800283a 	ret
10104684:	8005883a 	mov	r2,r16
10104688:	003ff706 	br	10104668 <_gp+0xfffe30d8>
1010468c:	d9400515 	stw	r5,20(sp)
10104690:	01039340 	call	10103934 <__sinit>
10104694:	d9400517 	ldw	r5,20(sp)
10104698:	003fe206 	br	10104624 <_gp+0xfffe3094>

1010469c <fwrite>:
1010469c:	defffe04 	addi	sp,sp,-8
101046a0:	008404b4 	movhi	r2,4114
101046a4:	d9c00015 	stw	r7,0(sp)
101046a8:	10a56504 	addi	r2,r2,-27244
101046ac:	300f883a 	mov	r7,r6
101046b0:	280d883a 	mov	r6,r5
101046b4:	200b883a 	mov	r5,r4
101046b8:	11000017 	ldw	r4,0(r2)
101046bc:	dfc00115 	stw	ra,4(sp)
101046c0:	01045d00 	call	101045d0 <_fwrite_r>
101046c4:	dfc00117 	ldw	ra,4(sp)
101046c8:	dec00204 	addi	sp,sp,8
101046cc:	f800283a 	ret

101046d0 <__smakebuf_r>:
101046d0:	2880030b 	ldhu	r2,12(r5)
101046d4:	10c0008c 	andi	r3,r2,2
101046d8:	1800411e 	bne	r3,zero,101047e0 <__smakebuf_r+0x110>
101046dc:	deffec04 	addi	sp,sp,-80
101046e0:	dc000f15 	stw	r16,60(sp)
101046e4:	2821883a 	mov	r16,r5
101046e8:	2940038f 	ldh	r5,14(r5)
101046ec:	dc401015 	stw	r17,64(sp)
101046f0:	dfc01315 	stw	ra,76(sp)
101046f4:	dcc01215 	stw	r19,72(sp)
101046f8:	dc801115 	stw	r18,68(sp)
101046fc:	2023883a 	mov	r17,r4
10104700:	28001c16 	blt	r5,zero,10104774 <__smakebuf_r+0xa4>
10104704:	d80d883a 	mov	r6,sp
10104708:	01043ec0 	call	101043ec <_fstat_r>
1010470c:	10001816 	blt	r2,zero,10104770 <__smakebuf_r+0xa0>
10104710:	d8800117 	ldw	r2,4(sp)
10104714:	00e00014 	movui	r3,32768
10104718:	10bc000c 	andi	r2,r2,61440
1010471c:	14c80020 	cmpeqi	r19,r2,8192
10104720:	10c03726 	beq	r2,r3,10104800 <__smakebuf_r+0x130>
10104724:	80c0030b 	ldhu	r3,12(r16)
10104728:	18c20014 	ori	r3,r3,2048
1010472c:	80c0030d 	sth	r3,12(r16)
10104730:	00c80004 	movi	r3,8192
10104734:	10c0521e 	bne	r2,r3,10104880 <__smakebuf_r+0x1b0>
10104738:	8140038f 	ldh	r5,14(r16)
1010473c:	8809883a 	mov	r4,r17
10104740:	010be340 	call	1010be34 <_isatty_r>
10104744:	10004c26 	beq	r2,zero,10104878 <__smakebuf_r+0x1a8>
10104748:	8080030b 	ldhu	r2,12(r16)
1010474c:	80c010c4 	addi	r3,r16,67
10104750:	80c00015 	stw	r3,0(r16)
10104754:	10800054 	ori	r2,r2,1
10104758:	8080030d 	sth	r2,12(r16)
1010475c:	00800044 	movi	r2,1
10104760:	80c00415 	stw	r3,16(r16)
10104764:	80800515 	stw	r2,20(r16)
10104768:	04810004 	movi	r18,1024
1010476c:	00000706 	br	1010478c <__smakebuf_r+0xbc>
10104770:	8080030b 	ldhu	r2,12(r16)
10104774:	10c0200c 	andi	r3,r2,128
10104778:	18001f1e 	bne	r3,zero,101047f8 <__smakebuf_r+0x128>
1010477c:	04810004 	movi	r18,1024
10104780:	10820014 	ori	r2,r2,2048
10104784:	8080030d 	sth	r2,12(r16)
10104788:	0027883a 	mov	r19,zero
1010478c:	900b883a 	mov	r5,r18
10104790:	8809883a 	mov	r4,r17
10104794:	010488c0 	call	1010488c <_malloc_r>
10104798:	10002c26 	beq	r2,zero,1010484c <__smakebuf_r+0x17c>
1010479c:	80c0030b 	ldhu	r3,12(r16)
101047a0:	01040434 	movhi	r4,4112
101047a4:	210d7b04 	addi	r4,r4,13804
101047a8:	89000f15 	stw	r4,60(r17)
101047ac:	18c02014 	ori	r3,r3,128
101047b0:	80c0030d 	sth	r3,12(r16)
101047b4:	80800015 	stw	r2,0(r16)
101047b8:	80800415 	stw	r2,16(r16)
101047bc:	84800515 	stw	r18,20(r16)
101047c0:	98001a1e 	bne	r19,zero,1010482c <__smakebuf_r+0x15c>
101047c4:	dfc01317 	ldw	ra,76(sp)
101047c8:	dcc01217 	ldw	r19,72(sp)
101047cc:	dc801117 	ldw	r18,68(sp)
101047d0:	dc401017 	ldw	r17,64(sp)
101047d4:	dc000f17 	ldw	r16,60(sp)
101047d8:	dec01404 	addi	sp,sp,80
101047dc:	f800283a 	ret
101047e0:	288010c4 	addi	r2,r5,67
101047e4:	28800015 	stw	r2,0(r5)
101047e8:	28800415 	stw	r2,16(r5)
101047ec:	00800044 	movi	r2,1
101047f0:	28800515 	stw	r2,20(r5)
101047f4:	f800283a 	ret
101047f8:	04801004 	movi	r18,64
101047fc:	003fe006 	br	10104780 <_gp+0xfffe31f0>
10104800:	81000a17 	ldw	r4,40(r16)
10104804:	00c40434 	movhi	r3,4112
10104808:	18d5ef04 	addi	r3,r3,22460
1010480c:	20ffc51e 	bne	r4,r3,10104724 <_gp+0xfffe3194>
10104810:	8080030b 	ldhu	r2,12(r16)
10104814:	04810004 	movi	r18,1024
10104818:	84801315 	stw	r18,76(r16)
1010481c:	1484b03a 	or	r2,r2,r18
10104820:	8080030d 	sth	r2,12(r16)
10104824:	0027883a 	mov	r19,zero
10104828:	003fd806 	br	1010478c <_gp+0xfffe31fc>
1010482c:	8140038f 	ldh	r5,14(r16)
10104830:	8809883a 	mov	r4,r17
10104834:	010be340 	call	1010be34 <_isatty_r>
10104838:	103fe226 	beq	r2,zero,101047c4 <_gp+0xfffe3234>
1010483c:	8080030b 	ldhu	r2,12(r16)
10104840:	10800054 	ori	r2,r2,1
10104844:	8080030d 	sth	r2,12(r16)
10104848:	003fde06 	br	101047c4 <_gp+0xfffe3234>
1010484c:	8080030b 	ldhu	r2,12(r16)
10104850:	10c0800c 	andi	r3,r2,512
10104854:	183fdb1e 	bne	r3,zero,101047c4 <_gp+0xfffe3234>
10104858:	10800094 	ori	r2,r2,2
1010485c:	80c010c4 	addi	r3,r16,67
10104860:	8080030d 	sth	r2,12(r16)
10104864:	00800044 	movi	r2,1
10104868:	80c00015 	stw	r3,0(r16)
1010486c:	80c00415 	stw	r3,16(r16)
10104870:	80800515 	stw	r2,20(r16)
10104874:	003fd306 	br	101047c4 <_gp+0xfffe3234>
10104878:	04810004 	movi	r18,1024
1010487c:	003fc306 	br	1010478c <_gp+0xfffe31fc>
10104880:	0027883a 	mov	r19,zero
10104884:	04810004 	movi	r18,1024
10104888:	003fc006 	br	1010478c <_gp+0xfffe31fc>

1010488c <_malloc_r>:
1010488c:	defff504 	addi	sp,sp,-44
10104890:	dc800315 	stw	r18,12(sp)
10104894:	dfc00a15 	stw	ra,40(sp)
10104898:	df000915 	stw	fp,36(sp)
1010489c:	ddc00815 	stw	r23,32(sp)
101048a0:	dd800715 	stw	r22,28(sp)
101048a4:	dd400615 	stw	r21,24(sp)
101048a8:	dd000515 	stw	r20,20(sp)
101048ac:	dcc00415 	stw	r19,16(sp)
101048b0:	dc400215 	stw	r17,8(sp)
101048b4:	dc000115 	stw	r16,4(sp)
101048b8:	288002c4 	addi	r2,r5,11
101048bc:	00c00584 	movi	r3,22
101048c0:	2025883a 	mov	r18,r4
101048c4:	18807f2e 	bgeu	r3,r2,10104ac4 <_malloc_r+0x238>
101048c8:	047ffe04 	movi	r17,-8
101048cc:	1462703a 	and	r17,r2,r17
101048d0:	8800a316 	blt	r17,zero,10104b60 <_malloc_r+0x2d4>
101048d4:	8940a236 	bltu	r17,r5,10104b60 <_malloc_r+0x2d4>
101048d8:	01148680 	call	10114868 <__malloc_lock>
101048dc:	00807dc4 	movi	r2,503
101048e0:	1441e92e 	bgeu	r2,r17,10105088 <_malloc_r+0x7fc>
101048e4:	8804d27a 	srli	r2,r17,9
101048e8:	1000a126 	beq	r2,zero,10104b70 <_malloc_r+0x2e4>
101048ec:	00c00104 	movi	r3,4
101048f0:	18811e36 	bltu	r3,r2,10104d6c <_malloc_r+0x4e0>
101048f4:	8804d1ba 	srli	r2,r17,6
101048f8:	12000e44 	addi	r8,r2,57
101048fc:	11c00e04 	addi	r7,r2,56
10104900:	4209883a 	add	r4,r8,r8
10104904:	04c40474 	movhi	r19,4113
10104908:	2109883a 	add	r4,r4,r4
1010490c:	9cdfb804 	addi	r19,r19,32480
10104910:	2109883a 	add	r4,r4,r4
10104914:	9909883a 	add	r4,r19,r4
10104918:	24000117 	ldw	r16,4(r4)
1010491c:	213ffe04 	addi	r4,r4,-8
10104920:	24009726 	beq	r4,r16,10104b80 <_malloc_r+0x2f4>
10104924:	80800117 	ldw	r2,4(r16)
10104928:	01bfff04 	movi	r6,-4
1010492c:	014003c4 	movi	r5,15
10104930:	1184703a 	and	r2,r2,r6
10104934:	1447c83a 	sub	r3,r2,r17
10104938:	28c00716 	blt	r5,r3,10104958 <_malloc_r+0xcc>
1010493c:	1800920e 	bge	r3,zero,10104b88 <_malloc_r+0x2fc>
10104940:	84000317 	ldw	r16,12(r16)
10104944:	24008e26 	beq	r4,r16,10104b80 <_malloc_r+0x2f4>
10104948:	80800117 	ldw	r2,4(r16)
1010494c:	1184703a 	and	r2,r2,r6
10104950:	1447c83a 	sub	r3,r2,r17
10104954:	28fff90e 	bge	r5,r3,1010493c <_gp+0xfffe33ac>
10104958:	3809883a 	mov	r4,r7
1010495c:	01840474 	movhi	r6,4113
10104960:	9c000417 	ldw	r16,16(r19)
10104964:	319fb804 	addi	r6,r6,32480
10104968:	32000204 	addi	r8,r6,8
1010496c:	82013426 	beq	r16,r8,10104e40 <_malloc_r+0x5b4>
10104970:	80c00117 	ldw	r3,4(r16)
10104974:	00bfff04 	movi	r2,-4
10104978:	188e703a 	and	r7,r3,r2
1010497c:	3c45c83a 	sub	r2,r7,r17
10104980:	00c003c4 	movi	r3,15
10104984:	18811f16 	blt	r3,r2,10104e04 <_malloc_r+0x578>
10104988:	32000515 	stw	r8,20(r6)
1010498c:	32000415 	stw	r8,16(r6)
10104990:	10007f0e 	bge	r2,zero,10104b90 <_malloc_r+0x304>
10104994:	00807fc4 	movi	r2,511
10104998:	11c0fd36 	bltu	r2,r7,10104d90 <_malloc_r+0x504>
1010499c:	3806d0fa 	srli	r3,r7,3
101049a0:	01c00044 	movi	r7,1
101049a4:	30800117 	ldw	r2,4(r6)
101049a8:	19400044 	addi	r5,r3,1
101049ac:	294b883a 	add	r5,r5,r5
101049b0:	1807d0ba 	srai	r3,r3,2
101049b4:	294b883a 	add	r5,r5,r5
101049b8:	294b883a 	add	r5,r5,r5
101049bc:	298b883a 	add	r5,r5,r6
101049c0:	38c6983a 	sll	r3,r7,r3
101049c4:	29c00017 	ldw	r7,0(r5)
101049c8:	2a7ffe04 	addi	r9,r5,-8
101049cc:	1886b03a 	or	r3,r3,r2
101049d0:	82400315 	stw	r9,12(r16)
101049d4:	81c00215 	stw	r7,8(r16)
101049d8:	30c00115 	stw	r3,4(r6)
101049dc:	2c000015 	stw	r16,0(r5)
101049e0:	3c000315 	stw	r16,12(r7)
101049e4:	2005d0ba 	srai	r2,r4,2
101049e8:	01400044 	movi	r5,1
101049ec:	288a983a 	sll	r5,r5,r2
101049f0:	19406f36 	bltu	r3,r5,10104bb0 <_malloc_r+0x324>
101049f4:	28c4703a 	and	r2,r5,r3
101049f8:	10000a1e 	bne	r2,zero,10104a24 <_malloc_r+0x198>
101049fc:	00bfff04 	movi	r2,-4
10104a00:	294b883a 	add	r5,r5,r5
10104a04:	2088703a 	and	r4,r4,r2
10104a08:	28c4703a 	and	r2,r5,r3
10104a0c:	21000104 	addi	r4,r4,4
10104a10:	1000041e 	bne	r2,zero,10104a24 <_malloc_r+0x198>
10104a14:	294b883a 	add	r5,r5,r5
10104a18:	28c4703a 	and	r2,r5,r3
10104a1c:	21000104 	addi	r4,r4,4
10104a20:	103ffc26 	beq	r2,zero,10104a14 <_gp+0xfffe3484>
10104a24:	02bfff04 	movi	r10,-4
10104a28:	024003c4 	movi	r9,15
10104a2c:	21800044 	addi	r6,r4,1
10104a30:	318d883a 	add	r6,r6,r6
10104a34:	318d883a 	add	r6,r6,r6
10104a38:	318d883a 	add	r6,r6,r6
10104a3c:	998d883a 	add	r6,r19,r6
10104a40:	333ffe04 	addi	r12,r6,-8
10104a44:	2017883a 	mov	r11,r4
10104a48:	31800104 	addi	r6,r6,4
10104a4c:	34000017 	ldw	r16,0(r6)
10104a50:	31fffd04 	addi	r7,r6,-12
10104a54:	81c0041e 	bne	r16,r7,10104a68 <_malloc_r+0x1dc>
10104a58:	0000fb06 	br	10104e48 <_malloc_r+0x5bc>
10104a5c:	1801030e 	bge	r3,zero,10104e6c <_malloc_r+0x5e0>
10104a60:	84000317 	ldw	r16,12(r16)
10104a64:	81c0f826 	beq	r16,r7,10104e48 <_malloc_r+0x5bc>
10104a68:	80800117 	ldw	r2,4(r16)
10104a6c:	1284703a 	and	r2,r2,r10
10104a70:	1447c83a 	sub	r3,r2,r17
10104a74:	48fff90e 	bge	r9,r3,10104a5c <_gp+0xfffe34cc>
10104a78:	80800317 	ldw	r2,12(r16)
10104a7c:	81000217 	ldw	r4,8(r16)
10104a80:	89400054 	ori	r5,r17,1
10104a84:	81400115 	stw	r5,4(r16)
10104a88:	20800315 	stw	r2,12(r4)
10104a8c:	11000215 	stw	r4,8(r2)
10104a90:	8463883a 	add	r17,r16,r17
10104a94:	9c400515 	stw	r17,20(r19)
10104a98:	9c400415 	stw	r17,16(r19)
10104a9c:	18800054 	ori	r2,r3,1
10104aa0:	88800115 	stw	r2,4(r17)
10104aa4:	8a000315 	stw	r8,12(r17)
10104aa8:	8a000215 	stw	r8,8(r17)
10104aac:	88e3883a 	add	r17,r17,r3
10104ab0:	88c00015 	stw	r3,0(r17)
10104ab4:	9009883a 	mov	r4,r18
10104ab8:	011488c0 	call	1011488c <__malloc_unlock>
10104abc:	80800204 	addi	r2,r16,8
10104ac0:	00001b06 	br	10104b30 <_malloc_r+0x2a4>
10104ac4:	04400404 	movi	r17,16
10104ac8:	89402536 	bltu	r17,r5,10104b60 <_malloc_r+0x2d4>
10104acc:	01148680 	call	10114868 <__malloc_lock>
10104ad0:	00800184 	movi	r2,6
10104ad4:	01000084 	movi	r4,2
10104ad8:	04c40474 	movhi	r19,4113
10104adc:	1085883a 	add	r2,r2,r2
10104ae0:	9cdfb804 	addi	r19,r19,32480
10104ae4:	1085883a 	add	r2,r2,r2
10104ae8:	9885883a 	add	r2,r19,r2
10104aec:	14000117 	ldw	r16,4(r2)
10104af0:	10fffe04 	addi	r3,r2,-8
10104af4:	80c0d926 	beq	r16,r3,10104e5c <_malloc_r+0x5d0>
10104af8:	80c00117 	ldw	r3,4(r16)
10104afc:	81000317 	ldw	r4,12(r16)
10104b00:	00bfff04 	movi	r2,-4
10104b04:	1884703a 	and	r2,r3,r2
10104b08:	81400217 	ldw	r5,8(r16)
10104b0c:	8085883a 	add	r2,r16,r2
10104b10:	10c00117 	ldw	r3,4(r2)
10104b14:	29000315 	stw	r4,12(r5)
10104b18:	21400215 	stw	r5,8(r4)
10104b1c:	18c00054 	ori	r3,r3,1
10104b20:	10c00115 	stw	r3,4(r2)
10104b24:	9009883a 	mov	r4,r18
10104b28:	011488c0 	call	1011488c <__malloc_unlock>
10104b2c:	80800204 	addi	r2,r16,8
10104b30:	dfc00a17 	ldw	ra,40(sp)
10104b34:	df000917 	ldw	fp,36(sp)
10104b38:	ddc00817 	ldw	r23,32(sp)
10104b3c:	dd800717 	ldw	r22,28(sp)
10104b40:	dd400617 	ldw	r21,24(sp)
10104b44:	dd000517 	ldw	r20,20(sp)
10104b48:	dcc00417 	ldw	r19,16(sp)
10104b4c:	dc800317 	ldw	r18,12(sp)
10104b50:	dc400217 	ldw	r17,8(sp)
10104b54:	dc000117 	ldw	r16,4(sp)
10104b58:	dec00b04 	addi	sp,sp,44
10104b5c:	f800283a 	ret
10104b60:	00800304 	movi	r2,12
10104b64:	90800015 	stw	r2,0(r18)
10104b68:	0005883a 	mov	r2,zero
10104b6c:	003ff006 	br	10104b30 <_gp+0xfffe35a0>
10104b70:	01002004 	movi	r4,128
10104b74:	02001004 	movi	r8,64
10104b78:	01c00fc4 	movi	r7,63
10104b7c:	003f6106 	br	10104904 <_gp+0xfffe3374>
10104b80:	4009883a 	mov	r4,r8
10104b84:	003f7506 	br	1010495c <_gp+0xfffe33cc>
10104b88:	81000317 	ldw	r4,12(r16)
10104b8c:	003fde06 	br	10104b08 <_gp+0xfffe3578>
10104b90:	81c5883a 	add	r2,r16,r7
10104b94:	11400117 	ldw	r5,4(r2)
10104b98:	9009883a 	mov	r4,r18
10104b9c:	29400054 	ori	r5,r5,1
10104ba0:	11400115 	stw	r5,4(r2)
10104ba4:	011488c0 	call	1011488c <__malloc_unlock>
10104ba8:	80800204 	addi	r2,r16,8
10104bac:	003fe006 	br	10104b30 <_gp+0xfffe35a0>
10104bb0:	9c000217 	ldw	r16,8(r19)
10104bb4:	00bfff04 	movi	r2,-4
10104bb8:	85800117 	ldw	r22,4(r16)
10104bbc:	b0ac703a 	and	r22,r22,r2
10104bc0:	b4400336 	bltu	r22,r17,10104bd0 <_malloc_r+0x344>
10104bc4:	b445c83a 	sub	r2,r22,r17
10104bc8:	00c003c4 	movi	r3,15
10104bcc:	18805d16 	blt	r3,r2,10104d44 <_malloc_r+0x4b8>
10104bd0:	05c404b4 	movhi	r23,4114
10104bd4:	008404b4 	movhi	r2,4114
10104bd8:	10ac6104 	addi	r2,r2,-20092
10104bdc:	bde56604 	addi	r23,r23,-27240
10104be0:	15400017 	ldw	r21,0(r2)
10104be4:	b8c00017 	ldw	r3,0(r23)
10104be8:	00bfffc4 	movi	r2,-1
10104bec:	858d883a 	add	r6,r16,r22
10104bf0:	8d6b883a 	add	r21,r17,r21
10104bf4:	1880ea26 	beq	r3,r2,10104fa0 <_malloc_r+0x714>
10104bf8:	ad4403c4 	addi	r21,r21,4111
10104bfc:	00bc0004 	movi	r2,-4096
10104c00:	a8aa703a 	and	r21,r21,r2
10104c04:	a80b883a 	mov	r5,r21
10104c08:	9009883a 	mov	r4,r18
10104c0c:	d9800015 	stw	r6,0(sp)
10104c10:	01055cc0 	call	101055cc <_sbrk_r>
10104c14:	1029883a 	mov	r20,r2
10104c18:	00bfffc4 	movi	r2,-1
10104c1c:	d9800017 	ldw	r6,0(sp)
10104c20:	a080e826 	beq	r20,r2,10104fc4 <_malloc_r+0x738>
10104c24:	a180a636 	bltu	r20,r6,10104ec0 <_malloc_r+0x634>
10104c28:	070404b4 	movhi	fp,4114
10104c2c:	e72c7004 	addi	fp,fp,-20032
10104c30:	e0800017 	ldw	r2,0(fp)
10104c34:	a887883a 	add	r3,r21,r2
10104c38:	e0c00015 	stw	r3,0(fp)
10104c3c:	3500e626 	beq	r6,r20,10104fd8 <_malloc_r+0x74c>
10104c40:	b9000017 	ldw	r4,0(r23)
10104c44:	00bfffc4 	movi	r2,-1
10104c48:	2080ee26 	beq	r4,r2,10105004 <_malloc_r+0x778>
10104c4c:	a185c83a 	sub	r2,r20,r6
10104c50:	10c5883a 	add	r2,r2,r3
10104c54:	e0800015 	stw	r2,0(fp)
10104c58:	a0c001cc 	andi	r3,r20,7
10104c5c:	1800bc26 	beq	r3,zero,10104f50 <_malloc_r+0x6c4>
10104c60:	a0e9c83a 	sub	r20,r20,r3
10104c64:	00840204 	movi	r2,4104
10104c68:	a5000204 	addi	r20,r20,8
10104c6c:	10c7c83a 	sub	r3,r2,r3
10104c70:	a545883a 	add	r2,r20,r21
10104c74:	1083ffcc 	andi	r2,r2,4095
10104c78:	18abc83a 	sub	r21,r3,r2
10104c7c:	a80b883a 	mov	r5,r21
10104c80:	9009883a 	mov	r4,r18
10104c84:	01055cc0 	call	101055cc <_sbrk_r>
10104c88:	00ffffc4 	movi	r3,-1
10104c8c:	10c0e126 	beq	r2,r3,10105014 <_malloc_r+0x788>
10104c90:	1505c83a 	sub	r2,r2,r20
10104c94:	1545883a 	add	r2,r2,r21
10104c98:	10800054 	ori	r2,r2,1
10104c9c:	e0c00017 	ldw	r3,0(fp)
10104ca0:	9d000215 	stw	r20,8(r19)
10104ca4:	a0800115 	stw	r2,4(r20)
10104ca8:	a8c7883a 	add	r3,r21,r3
10104cac:	e0c00015 	stw	r3,0(fp)
10104cb0:	84c00e26 	beq	r16,r19,10104cec <_malloc_r+0x460>
10104cb4:	018003c4 	movi	r6,15
10104cb8:	3580a72e 	bgeu	r6,r22,10104f58 <_malloc_r+0x6cc>
10104cbc:	81400117 	ldw	r5,4(r16)
10104cc0:	013ffe04 	movi	r4,-8
10104cc4:	b0bffd04 	addi	r2,r22,-12
10104cc8:	1104703a 	and	r2,r2,r4
10104ccc:	2900004c 	andi	r4,r5,1
10104cd0:	2088b03a 	or	r4,r4,r2
10104cd4:	81000115 	stw	r4,4(r16)
10104cd8:	01400144 	movi	r5,5
10104cdc:	8089883a 	add	r4,r16,r2
10104ce0:	21400115 	stw	r5,4(r4)
10104ce4:	21400215 	stw	r5,8(r4)
10104ce8:	3080cd36 	bltu	r6,r2,10105020 <_malloc_r+0x794>
10104cec:	008404b4 	movhi	r2,4114
10104cf0:	10ac6004 	addi	r2,r2,-20096
10104cf4:	11000017 	ldw	r4,0(r2)
10104cf8:	20c0012e 	bgeu	r4,r3,10104d00 <_malloc_r+0x474>
10104cfc:	10c00015 	stw	r3,0(r2)
10104d00:	008404b4 	movhi	r2,4114
10104d04:	10ac5f04 	addi	r2,r2,-20100
10104d08:	11000017 	ldw	r4,0(r2)
10104d0c:	9c000217 	ldw	r16,8(r19)
10104d10:	20c0012e 	bgeu	r4,r3,10104d18 <_malloc_r+0x48c>
10104d14:	10c00015 	stw	r3,0(r2)
10104d18:	80c00117 	ldw	r3,4(r16)
10104d1c:	00bfff04 	movi	r2,-4
10104d20:	1886703a 	and	r3,r3,r2
10104d24:	1c45c83a 	sub	r2,r3,r17
10104d28:	1c400236 	bltu	r3,r17,10104d34 <_malloc_r+0x4a8>
10104d2c:	00c003c4 	movi	r3,15
10104d30:	18800416 	blt	r3,r2,10104d44 <_malloc_r+0x4b8>
10104d34:	9009883a 	mov	r4,r18
10104d38:	011488c0 	call	1011488c <__malloc_unlock>
10104d3c:	0005883a 	mov	r2,zero
10104d40:	003f7b06 	br	10104b30 <_gp+0xfffe35a0>
10104d44:	88c00054 	ori	r3,r17,1
10104d48:	80c00115 	stw	r3,4(r16)
10104d4c:	8463883a 	add	r17,r16,r17
10104d50:	10800054 	ori	r2,r2,1
10104d54:	9c400215 	stw	r17,8(r19)
10104d58:	88800115 	stw	r2,4(r17)
10104d5c:	9009883a 	mov	r4,r18
10104d60:	011488c0 	call	1011488c <__malloc_unlock>
10104d64:	80800204 	addi	r2,r16,8
10104d68:	003f7106 	br	10104b30 <_gp+0xfffe35a0>
10104d6c:	00c00504 	movi	r3,20
10104d70:	18804a2e 	bgeu	r3,r2,10104e9c <_malloc_r+0x610>
10104d74:	00c01504 	movi	r3,84
10104d78:	18806e36 	bltu	r3,r2,10104f34 <_malloc_r+0x6a8>
10104d7c:	8804d33a 	srli	r2,r17,12
10104d80:	12001bc4 	addi	r8,r2,111
10104d84:	11c01b84 	addi	r7,r2,110
10104d88:	4209883a 	add	r4,r8,r8
10104d8c:	003edd06 	br	10104904 <_gp+0xfffe3374>
10104d90:	3804d27a 	srli	r2,r7,9
10104d94:	00c00104 	movi	r3,4
10104d98:	1880442e 	bgeu	r3,r2,10104eac <_malloc_r+0x620>
10104d9c:	00c00504 	movi	r3,20
10104da0:	18808136 	bltu	r3,r2,10104fa8 <_malloc_r+0x71c>
10104da4:	11401704 	addi	r5,r2,92
10104da8:	10c016c4 	addi	r3,r2,91
10104dac:	294b883a 	add	r5,r5,r5
10104db0:	294b883a 	add	r5,r5,r5
10104db4:	294b883a 	add	r5,r5,r5
10104db8:	994b883a 	add	r5,r19,r5
10104dbc:	28800017 	ldw	r2,0(r5)
10104dc0:	01840474 	movhi	r6,4113
10104dc4:	297ffe04 	addi	r5,r5,-8
10104dc8:	319fb804 	addi	r6,r6,32480
10104dcc:	28806526 	beq	r5,r2,10104f64 <_malloc_r+0x6d8>
10104dd0:	01bfff04 	movi	r6,-4
10104dd4:	10c00117 	ldw	r3,4(r2)
10104dd8:	1986703a 	and	r3,r3,r6
10104ddc:	38c0022e 	bgeu	r7,r3,10104de8 <_malloc_r+0x55c>
10104de0:	10800217 	ldw	r2,8(r2)
10104de4:	28bffb1e 	bne	r5,r2,10104dd4 <_gp+0xfffe3844>
10104de8:	11400317 	ldw	r5,12(r2)
10104dec:	98c00117 	ldw	r3,4(r19)
10104df0:	81400315 	stw	r5,12(r16)
10104df4:	80800215 	stw	r2,8(r16)
10104df8:	2c000215 	stw	r16,8(r5)
10104dfc:	14000315 	stw	r16,12(r2)
10104e00:	003ef806 	br	101049e4 <_gp+0xfffe3454>
10104e04:	88c00054 	ori	r3,r17,1
10104e08:	80c00115 	stw	r3,4(r16)
10104e0c:	8463883a 	add	r17,r16,r17
10104e10:	34400515 	stw	r17,20(r6)
10104e14:	34400415 	stw	r17,16(r6)
10104e18:	10c00054 	ori	r3,r2,1
10104e1c:	8a000315 	stw	r8,12(r17)
10104e20:	8a000215 	stw	r8,8(r17)
10104e24:	88c00115 	stw	r3,4(r17)
10104e28:	88a3883a 	add	r17,r17,r2
10104e2c:	88800015 	stw	r2,0(r17)
10104e30:	9009883a 	mov	r4,r18
10104e34:	011488c0 	call	1011488c <__malloc_unlock>
10104e38:	80800204 	addi	r2,r16,8
10104e3c:	003f3c06 	br	10104b30 <_gp+0xfffe35a0>
10104e40:	30c00117 	ldw	r3,4(r6)
10104e44:	003ee706 	br	101049e4 <_gp+0xfffe3454>
10104e48:	5ac00044 	addi	r11,r11,1
10104e4c:	588000cc 	andi	r2,r11,3
10104e50:	31800204 	addi	r6,r6,8
10104e54:	103efd1e 	bne	r2,zero,10104a4c <_gp+0xfffe34bc>
10104e58:	00002406 	br	10104eec <_malloc_r+0x660>
10104e5c:	14000317 	ldw	r16,12(r2)
10104e60:	143f251e 	bne	r2,r16,10104af8 <_gp+0xfffe3568>
10104e64:	21000084 	addi	r4,r4,2
10104e68:	003ebc06 	br	1010495c <_gp+0xfffe33cc>
10104e6c:	8085883a 	add	r2,r16,r2
10104e70:	10c00117 	ldw	r3,4(r2)
10104e74:	81000317 	ldw	r4,12(r16)
10104e78:	81400217 	ldw	r5,8(r16)
10104e7c:	18c00054 	ori	r3,r3,1
10104e80:	10c00115 	stw	r3,4(r2)
10104e84:	29000315 	stw	r4,12(r5)
10104e88:	21400215 	stw	r5,8(r4)
10104e8c:	9009883a 	mov	r4,r18
10104e90:	011488c0 	call	1011488c <__malloc_unlock>
10104e94:	80800204 	addi	r2,r16,8
10104e98:	003f2506 	br	10104b30 <_gp+0xfffe35a0>
10104e9c:	12001704 	addi	r8,r2,92
10104ea0:	11c016c4 	addi	r7,r2,91
10104ea4:	4209883a 	add	r4,r8,r8
10104ea8:	003e9606 	br	10104904 <_gp+0xfffe3374>
10104eac:	3804d1ba 	srli	r2,r7,6
10104eb0:	11400e44 	addi	r5,r2,57
10104eb4:	10c00e04 	addi	r3,r2,56
10104eb8:	294b883a 	add	r5,r5,r5
10104ebc:	003fbc06 	br	10104db0 <_gp+0xfffe3820>
10104ec0:	84ff5926 	beq	r16,r19,10104c28 <_gp+0xfffe3698>
10104ec4:	00840474 	movhi	r2,4113
10104ec8:	109fb804 	addi	r2,r2,32480
10104ecc:	14000217 	ldw	r16,8(r2)
10104ed0:	00bfff04 	movi	r2,-4
10104ed4:	80c00117 	ldw	r3,4(r16)
10104ed8:	1886703a 	and	r3,r3,r2
10104edc:	003f9106 	br	10104d24 <_gp+0xfffe3794>
10104ee0:	60800217 	ldw	r2,8(r12)
10104ee4:	213fffc4 	addi	r4,r4,-1
10104ee8:	1300651e 	bne	r2,r12,10105080 <_malloc_r+0x7f4>
10104eec:	208000cc 	andi	r2,r4,3
10104ef0:	633ffe04 	addi	r12,r12,-8
10104ef4:	103ffa1e 	bne	r2,zero,10104ee0 <_gp+0xfffe3950>
10104ef8:	98800117 	ldw	r2,4(r19)
10104efc:	0146303a 	nor	r3,zero,r5
10104f00:	1884703a 	and	r2,r3,r2
10104f04:	98800115 	stw	r2,4(r19)
10104f08:	294b883a 	add	r5,r5,r5
10104f0c:	117f2836 	bltu	r2,r5,10104bb0 <_gp+0xfffe3620>
10104f10:	283f2726 	beq	r5,zero,10104bb0 <_gp+0xfffe3620>
10104f14:	2886703a 	and	r3,r5,r2
10104f18:	5809883a 	mov	r4,r11
10104f1c:	183ec31e 	bne	r3,zero,10104a2c <_gp+0xfffe349c>
10104f20:	294b883a 	add	r5,r5,r5
10104f24:	2886703a 	and	r3,r5,r2
10104f28:	21000104 	addi	r4,r4,4
10104f2c:	183ffc26 	beq	r3,zero,10104f20 <_gp+0xfffe3990>
10104f30:	003ebe06 	br	10104a2c <_gp+0xfffe349c>
10104f34:	00c05504 	movi	r3,340
10104f38:	18801236 	bltu	r3,r2,10104f84 <_malloc_r+0x6f8>
10104f3c:	8804d3fa 	srli	r2,r17,15
10104f40:	12001e04 	addi	r8,r2,120
10104f44:	11c01dc4 	addi	r7,r2,119
10104f48:	4209883a 	add	r4,r8,r8
10104f4c:	003e6d06 	br	10104904 <_gp+0xfffe3374>
10104f50:	00c40004 	movi	r3,4096
10104f54:	003f4606 	br	10104c70 <_gp+0xfffe36e0>
10104f58:	00800044 	movi	r2,1
10104f5c:	a0800115 	stw	r2,4(r20)
10104f60:	003f7406 	br	10104d34 <_gp+0xfffe37a4>
10104f64:	1805d0ba 	srai	r2,r3,2
10104f68:	01c00044 	movi	r7,1
10104f6c:	30c00117 	ldw	r3,4(r6)
10104f70:	388e983a 	sll	r7,r7,r2
10104f74:	2805883a 	mov	r2,r5
10104f78:	38c6b03a 	or	r3,r7,r3
10104f7c:	30c00115 	stw	r3,4(r6)
10104f80:	003f9b06 	br	10104df0 <_gp+0xfffe3860>
10104f84:	00c15504 	movi	r3,1364
10104f88:	18801a36 	bltu	r3,r2,10104ff4 <_malloc_r+0x768>
10104f8c:	8804d4ba 	srli	r2,r17,18
10104f90:	12001f44 	addi	r8,r2,125
10104f94:	11c01f04 	addi	r7,r2,124
10104f98:	4209883a 	add	r4,r8,r8
10104f9c:	003e5906 	br	10104904 <_gp+0xfffe3374>
10104fa0:	ad400404 	addi	r21,r21,16
10104fa4:	003f1706 	br	10104c04 <_gp+0xfffe3674>
10104fa8:	00c01504 	movi	r3,84
10104fac:	18802336 	bltu	r3,r2,1010503c <_malloc_r+0x7b0>
10104fb0:	3804d33a 	srli	r2,r7,12
10104fb4:	11401bc4 	addi	r5,r2,111
10104fb8:	10c01b84 	addi	r3,r2,110
10104fbc:	294b883a 	add	r5,r5,r5
10104fc0:	003f7b06 	br	10104db0 <_gp+0xfffe3820>
10104fc4:	9c000217 	ldw	r16,8(r19)
10104fc8:	00bfff04 	movi	r2,-4
10104fcc:	80c00117 	ldw	r3,4(r16)
10104fd0:	1886703a 	and	r3,r3,r2
10104fd4:	003f5306 	br	10104d24 <_gp+0xfffe3794>
10104fd8:	3083ffcc 	andi	r2,r6,4095
10104fdc:	103f181e 	bne	r2,zero,10104c40 <_gp+0xfffe36b0>
10104fe0:	99000217 	ldw	r4,8(r19)
10104fe4:	b545883a 	add	r2,r22,r21
10104fe8:	10800054 	ori	r2,r2,1
10104fec:	20800115 	stw	r2,4(r4)
10104ff0:	003f3e06 	br	10104cec <_gp+0xfffe375c>
10104ff4:	01003f84 	movi	r4,254
10104ff8:	02001fc4 	movi	r8,127
10104ffc:	01c01f84 	movi	r7,126
10105000:	003e4006 	br	10104904 <_gp+0xfffe3374>
10105004:	008404b4 	movhi	r2,4114
10105008:	10a56604 	addi	r2,r2,-27240
1010500c:	15000015 	stw	r20,0(r2)
10105010:	003f1106 	br	10104c58 <_gp+0xfffe36c8>
10105014:	00800044 	movi	r2,1
10105018:	002b883a 	mov	r21,zero
1010501c:	003f1f06 	br	10104c9c <_gp+0xfffe370c>
10105020:	81400204 	addi	r5,r16,8
10105024:	9009883a 	mov	r4,r18
10105028:	0103c5c0 	call	10103c5c <_free_r>
1010502c:	008404b4 	movhi	r2,4114
10105030:	10ac7004 	addi	r2,r2,-20032
10105034:	10c00017 	ldw	r3,0(r2)
10105038:	003f2c06 	br	10104cec <_gp+0xfffe375c>
1010503c:	00c05504 	movi	r3,340
10105040:	18800536 	bltu	r3,r2,10105058 <_malloc_r+0x7cc>
10105044:	3804d3fa 	srli	r2,r7,15
10105048:	11401e04 	addi	r5,r2,120
1010504c:	10c01dc4 	addi	r3,r2,119
10105050:	294b883a 	add	r5,r5,r5
10105054:	003f5606 	br	10104db0 <_gp+0xfffe3820>
10105058:	00c15504 	movi	r3,1364
1010505c:	18800536 	bltu	r3,r2,10105074 <_malloc_r+0x7e8>
10105060:	3804d4ba 	srli	r2,r7,18
10105064:	11401f44 	addi	r5,r2,125
10105068:	10c01f04 	addi	r3,r2,124
1010506c:	294b883a 	add	r5,r5,r5
10105070:	003f4f06 	br	10104db0 <_gp+0xfffe3820>
10105074:	01403f84 	movi	r5,254
10105078:	00c01f84 	movi	r3,126
1010507c:	003f4c06 	br	10104db0 <_gp+0xfffe3820>
10105080:	98800117 	ldw	r2,4(r19)
10105084:	003fa006 	br	10104f08 <_gp+0xfffe3978>
10105088:	8808d0fa 	srli	r4,r17,3
1010508c:	20800044 	addi	r2,r4,1
10105090:	1085883a 	add	r2,r2,r2
10105094:	003e9006 	br	10104ad8 <_gp+0xfffe3548>

10105098 <memset>:
10105098:	20c000cc 	andi	r3,r4,3
1010509c:	2005883a 	mov	r2,r4
101050a0:	18004426 	beq	r3,zero,101051b4 <memset+0x11c>
101050a4:	31ffffc4 	addi	r7,r6,-1
101050a8:	30004026 	beq	r6,zero,101051ac <memset+0x114>
101050ac:	2813883a 	mov	r9,r5
101050b0:	200d883a 	mov	r6,r4
101050b4:	2007883a 	mov	r3,r4
101050b8:	00000406 	br	101050cc <memset+0x34>
101050bc:	3a3fffc4 	addi	r8,r7,-1
101050c0:	31800044 	addi	r6,r6,1
101050c4:	38003926 	beq	r7,zero,101051ac <memset+0x114>
101050c8:	400f883a 	mov	r7,r8
101050cc:	18c00044 	addi	r3,r3,1
101050d0:	32400005 	stb	r9,0(r6)
101050d4:	1a0000cc 	andi	r8,r3,3
101050d8:	403ff81e 	bne	r8,zero,101050bc <_gp+0xfffe3b2c>
101050dc:	010000c4 	movi	r4,3
101050e0:	21c02d2e 	bgeu	r4,r7,10105198 <memset+0x100>
101050e4:	29003fcc 	andi	r4,r5,255
101050e8:	200c923a 	slli	r6,r4,8
101050ec:	3108b03a 	or	r4,r6,r4
101050f0:	200c943a 	slli	r6,r4,16
101050f4:	218cb03a 	or	r6,r4,r6
101050f8:	010003c4 	movi	r4,15
101050fc:	21c0182e 	bgeu	r4,r7,10105160 <memset+0xc8>
10105100:	3b3ffc04 	addi	r12,r7,-16
10105104:	6018d13a 	srli	r12,r12,4
10105108:	1a000104 	addi	r8,r3,4
1010510c:	1ac00204 	addi	r11,r3,8
10105110:	6008913a 	slli	r4,r12,4
10105114:	1a800304 	addi	r10,r3,12
10105118:	1813883a 	mov	r9,r3
1010511c:	21000504 	addi	r4,r4,20
10105120:	1909883a 	add	r4,r3,r4
10105124:	49800015 	stw	r6,0(r9)
10105128:	41800015 	stw	r6,0(r8)
1010512c:	59800015 	stw	r6,0(r11)
10105130:	51800015 	stw	r6,0(r10)
10105134:	42000404 	addi	r8,r8,16
10105138:	4a400404 	addi	r9,r9,16
1010513c:	5ac00404 	addi	r11,r11,16
10105140:	52800404 	addi	r10,r10,16
10105144:	413ff71e 	bne	r8,r4,10105124 <_gp+0xfffe3b94>
10105148:	63000044 	addi	r12,r12,1
1010514c:	6018913a 	slli	r12,r12,4
10105150:	39c003cc 	andi	r7,r7,15
10105154:	010000c4 	movi	r4,3
10105158:	1b07883a 	add	r3,r3,r12
1010515c:	21c00e2e 	bgeu	r4,r7,10105198 <memset+0x100>
10105160:	1813883a 	mov	r9,r3
10105164:	3811883a 	mov	r8,r7
10105168:	010000c4 	movi	r4,3
1010516c:	49800015 	stw	r6,0(r9)
10105170:	423fff04 	addi	r8,r8,-4
10105174:	4a400104 	addi	r9,r9,4
10105178:	223ffc36 	bltu	r4,r8,1010516c <_gp+0xfffe3bdc>
1010517c:	393fff04 	addi	r4,r7,-4
10105180:	2008d0ba 	srli	r4,r4,2
10105184:	39c000cc 	andi	r7,r7,3
10105188:	21000044 	addi	r4,r4,1
1010518c:	2109883a 	add	r4,r4,r4
10105190:	2109883a 	add	r4,r4,r4
10105194:	1907883a 	add	r3,r3,r4
10105198:	38000526 	beq	r7,zero,101051b0 <memset+0x118>
1010519c:	19cf883a 	add	r7,r3,r7
101051a0:	19400005 	stb	r5,0(r3)
101051a4:	18c00044 	addi	r3,r3,1
101051a8:	38fffd1e 	bne	r7,r3,101051a0 <_gp+0xfffe3c10>
101051ac:	f800283a 	ret
101051b0:	f800283a 	ret
101051b4:	2007883a 	mov	r3,r4
101051b8:	300f883a 	mov	r7,r6
101051bc:	003fc706 	br	101050dc <_gp+0xfffe3b4c>

101051c0 <_open_r>:
101051c0:	defffd04 	addi	sp,sp,-12
101051c4:	2805883a 	mov	r2,r5
101051c8:	dc000015 	stw	r16,0(sp)
101051cc:	040404b4 	movhi	r16,4114
101051d0:	dc400115 	stw	r17,4(sp)
101051d4:	300b883a 	mov	r5,r6
101051d8:	842c5e04 	addi	r16,r16,-20104
101051dc:	2023883a 	mov	r17,r4
101051e0:	380d883a 	mov	r6,r7
101051e4:	1009883a 	mov	r4,r2
101051e8:	dfc00215 	stw	ra,8(sp)
101051ec:	80000015 	stw	zero,0(r16)
101051f0:	01149b00 	call	101149b0 <open>
101051f4:	00ffffc4 	movi	r3,-1
101051f8:	10c00526 	beq	r2,r3,10105210 <_open_r+0x50>
101051fc:	dfc00217 	ldw	ra,8(sp)
10105200:	dc400117 	ldw	r17,4(sp)
10105204:	dc000017 	ldw	r16,0(sp)
10105208:	dec00304 	addi	sp,sp,12
1010520c:	f800283a 	ret
10105210:	80c00017 	ldw	r3,0(r16)
10105214:	183ff926 	beq	r3,zero,101051fc <_gp+0xfffe3c6c>
10105218:	88c00015 	stw	r3,0(r17)
1010521c:	003ff706 	br	101051fc <_gp+0xfffe3c6c>

10105220 <_printf_r>:
10105220:	defffd04 	addi	sp,sp,-12
10105224:	2805883a 	mov	r2,r5
10105228:	dfc00015 	stw	ra,0(sp)
1010522c:	d9800115 	stw	r6,4(sp)
10105230:	d9c00215 	stw	r7,8(sp)
10105234:	21400217 	ldw	r5,8(r4)
10105238:	d9c00104 	addi	r7,sp,4
1010523c:	100d883a 	mov	r6,r2
10105240:	0107af80 	call	10107af8 <___vfprintf_internal_r>
10105244:	dfc00017 	ldw	ra,0(sp)
10105248:	dec00304 	addi	sp,sp,12
1010524c:	f800283a 	ret

10105250 <printf>:
10105250:	defffc04 	addi	sp,sp,-16
10105254:	dfc00015 	stw	ra,0(sp)
10105258:	d9400115 	stw	r5,4(sp)
1010525c:	d9800215 	stw	r6,8(sp)
10105260:	d9c00315 	stw	r7,12(sp)
10105264:	008404b4 	movhi	r2,4114
10105268:	10a56504 	addi	r2,r2,-27244
1010526c:	10800017 	ldw	r2,0(r2)
10105270:	200b883a 	mov	r5,r4
10105274:	d9800104 	addi	r6,sp,4
10105278:	11000217 	ldw	r4,8(r2)
1010527c:	0109cf00 	call	10109cf0 <__vfprintf_internal>
10105280:	dfc00017 	ldw	ra,0(sp)
10105284:	dec00404 	addi	sp,sp,16
10105288:	f800283a 	ret

1010528c <_puts_r>:
1010528c:	defff604 	addi	sp,sp,-40
10105290:	dc000715 	stw	r16,28(sp)
10105294:	2021883a 	mov	r16,r4
10105298:	2809883a 	mov	r4,r5
1010529c:	dc400815 	stw	r17,32(sp)
101052a0:	dfc00915 	stw	ra,36(sp)
101052a4:	2823883a 	mov	r17,r5
101052a8:	01058200 	call	10105820 <strlen>
101052ac:	10c00044 	addi	r3,r2,1
101052b0:	d8800115 	stw	r2,4(sp)
101052b4:	00840474 	movhi	r2,4113
101052b8:	109ddd04 	addi	r2,r2,30580
101052bc:	d8800215 	stw	r2,8(sp)
101052c0:	00800044 	movi	r2,1
101052c4:	d8800315 	stw	r2,12(sp)
101052c8:	00800084 	movi	r2,2
101052cc:	dc400015 	stw	r17,0(sp)
101052d0:	d8c00615 	stw	r3,24(sp)
101052d4:	dec00415 	stw	sp,16(sp)
101052d8:	d8800515 	stw	r2,20(sp)
101052dc:	80000226 	beq	r16,zero,101052e8 <_puts_r+0x5c>
101052e0:	80800e17 	ldw	r2,56(r16)
101052e4:	10001426 	beq	r2,zero,10105338 <_puts_r+0xac>
101052e8:	81400217 	ldw	r5,8(r16)
101052ec:	2880030b 	ldhu	r2,12(r5)
101052f0:	10c8000c 	andi	r3,r2,8192
101052f4:	1800061e 	bne	r3,zero,10105310 <_puts_r+0x84>
101052f8:	29001917 	ldw	r4,100(r5)
101052fc:	00f7ffc4 	movi	r3,-8193
10105300:	10880014 	ori	r2,r2,8192
10105304:	20c6703a 	and	r3,r4,r3
10105308:	2880030d 	sth	r2,12(r5)
1010530c:	28c01915 	stw	r3,100(r5)
10105310:	d9800404 	addi	r6,sp,16
10105314:	8009883a 	mov	r4,r16
10105318:	010b91c0 	call	1010b91c <__sfvwrite_r>
1010531c:	1000091e 	bne	r2,zero,10105344 <_puts_r+0xb8>
10105320:	00800284 	movi	r2,10
10105324:	dfc00917 	ldw	ra,36(sp)
10105328:	dc400817 	ldw	r17,32(sp)
1010532c:	dc000717 	ldw	r16,28(sp)
10105330:	dec00a04 	addi	sp,sp,40
10105334:	f800283a 	ret
10105338:	8009883a 	mov	r4,r16
1010533c:	01039340 	call	10103934 <__sinit>
10105340:	003fe906 	br	101052e8 <_gp+0xfffe3d58>
10105344:	00bfffc4 	movi	r2,-1
10105348:	003ff606 	br	10105324 <_gp+0xfffe3d94>

1010534c <puts>:
1010534c:	008404b4 	movhi	r2,4114
10105350:	10a56504 	addi	r2,r2,-27244
10105354:	200b883a 	mov	r5,r4
10105358:	11000017 	ldw	r4,0(r2)
1010535c:	010528c1 	jmpi	1010528c <_puts_r>

10105360 <srand>:
10105360:	008404b4 	movhi	r2,4114
10105364:	10a56504 	addi	r2,r2,-27244
10105368:	10800017 	ldw	r2,0(r2)
1010536c:	11002915 	stw	r4,164(r2)
10105370:	10002a15 	stw	zero,168(r2)
10105374:	f800283a 	ret

10105378 <rand>:
10105378:	008404b4 	movhi	r2,4114
1010537c:	defffe04 	addi	sp,sp,-8
10105380:	10a56504 	addi	r2,r2,-27244
10105384:	dc000015 	stw	r16,0(sp)
10105388:	14000017 	ldw	r16,0(r2)
1010538c:	dfc00115 	stw	ra,4(sp)
10105390:	01932574 	movhi	r6,19605
10105394:	81002917 	ldw	r4,164(r16)
10105398:	81402a17 	ldw	r5,168(r16)
1010539c:	01d614b4 	movhi	r7,22610
101053a0:	319fcb44 	addi	r6,r6,32557
101053a4:	39fd0b44 	addi	r7,r7,-3027
101053a8:	0110dc00 	call	10110dc0 <__muldi3>
101053ac:	11000044 	addi	r4,r2,1
101053b0:	2085803a 	cmpltu	r2,r4,r2
101053b4:	10c7883a 	add	r3,r2,r3
101053b8:	00a00034 	movhi	r2,32768
101053bc:	10bfffc4 	addi	r2,r2,-1
101053c0:	1884703a 	and	r2,r3,r2
101053c4:	81002915 	stw	r4,164(r16)
101053c8:	80c02a15 	stw	r3,168(r16)
101053cc:	dfc00117 	ldw	ra,4(sp)
101053d0:	dc000017 	ldw	r16,0(sp)
101053d4:	dec00204 	addi	sp,sp,8
101053d8:	f800283a 	ret

101053dc <lflush>:
101053dc:	2080030b 	ldhu	r2,12(r4)
101053e0:	00c00244 	movi	r3,9
101053e4:	1080024c 	andi	r2,r2,9
101053e8:	10c00226 	beq	r2,r3,101053f4 <lflush+0x18>
101053ec:	0005883a 	mov	r2,zero
101053f0:	f800283a 	ret
101053f4:	01035b41 	jmpi	101035b4 <fflush>

101053f8 <__srefill_r>:
101053f8:	defffc04 	addi	sp,sp,-16
101053fc:	dc400115 	stw	r17,4(sp)
10105400:	dc000015 	stw	r16,0(sp)
10105404:	dfc00315 	stw	ra,12(sp)
10105408:	dc800215 	stw	r18,8(sp)
1010540c:	2023883a 	mov	r17,r4
10105410:	2821883a 	mov	r16,r5
10105414:	20000226 	beq	r4,zero,10105420 <__srefill_r+0x28>
10105418:	20800e17 	ldw	r2,56(r4)
1010541c:	10003c26 	beq	r2,zero,10105510 <__srefill_r+0x118>
10105420:	80c0030b 	ldhu	r3,12(r16)
10105424:	1908000c 	andi	r4,r3,8192
10105428:	1805883a 	mov	r2,r3
1010542c:	2000071e 	bne	r4,zero,1010544c <__srefill_r+0x54>
10105430:	81001917 	ldw	r4,100(r16)
10105434:	18880014 	ori	r2,r3,8192
10105438:	00f7ffc4 	movi	r3,-8193
1010543c:	20c8703a 	and	r4,r4,r3
10105440:	8080030d 	sth	r2,12(r16)
10105444:	1007883a 	mov	r3,r2
10105448:	81001915 	stw	r4,100(r16)
1010544c:	80000115 	stw	zero,4(r16)
10105450:	1100080c 	andi	r4,r2,32
10105454:	2000571e 	bne	r4,zero,101055b4 <__srefill_r+0x1bc>
10105458:	1100010c 	andi	r4,r2,4
1010545c:	20001f26 	beq	r4,zero,101054dc <__srefill_r+0xe4>
10105460:	81400c17 	ldw	r5,48(r16)
10105464:	28000826 	beq	r5,zero,10105488 <__srefill_r+0x90>
10105468:	80801004 	addi	r2,r16,64
1010546c:	28800226 	beq	r5,r2,10105478 <__srefill_r+0x80>
10105470:	8809883a 	mov	r4,r17
10105474:	0103c5c0 	call	10103c5c <_free_r>
10105478:	80800f17 	ldw	r2,60(r16)
1010547c:	80000c15 	stw	zero,48(r16)
10105480:	80800115 	stw	r2,4(r16)
10105484:	1000391e 	bne	r2,zero,1010556c <__srefill_r+0x174>
10105488:	80800417 	ldw	r2,16(r16)
1010548c:	10004b26 	beq	r2,zero,101055bc <__srefill_r+0x1c4>
10105490:	8480030b 	ldhu	r18,12(r16)
10105494:	908000cc 	andi	r2,r18,3
10105498:	10001f1e 	bne	r2,zero,10105518 <__srefill_r+0x120>
1010549c:	81800417 	ldw	r6,16(r16)
101054a0:	80800817 	ldw	r2,32(r16)
101054a4:	81c00517 	ldw	r7,20(r16)
101054a8:	81400717 	ldw	r5,28(r16)
101054ac:	81800015 	stw	r6,0(r16)
101054b0:	8809883a 	mov	r4,r17
101054b4:	103ee83a 	callr	r2
101054b8:	80800115 	stw	r2,4(r16)
101054bc:	00800e0e 	bge	zero,r2,101054f8 <__srefill_r+0x100>
101054c0:	0005883a 	mov	r2,zero
101054c4:	dfc00317 	ldw	ra,12(sp)
101054c8:	dc800217 	ldw	r18,8(sp)
101054cc:	dc400117 	ldw	r17,4(sp)
101054d0:	dc000017 	ldw	r16,0(sp)
101054d4:	dec00404 	addi	sp,sp,16
101054d8:	f800283a 	ret
101054dc:	1100040c 	andi	r4,r2,16
101054e0:	20003026 	beq	r4,zero,101055a4 <__srefill_r+0x1ac>
101054e4:	1080020c 	andi	r2,r2,8
101054e8:	1000241e 	bne	r2,zero,1010557c <__srefill_r+0x184>
101054ec:	18c00114 	ori	r3,r3,4
101054f0:	80c0030d 	sth	r3,12(r16)
101054f4:	003fe406 	br	10105488 <_gp+0xfffe3ef8>
101054f8:	80c0030b 	ldhu	r3,12(r16)
101054fc:	1000161e 	bne	r2,zero,10105558 <__srefill_r+0x160>
10105500:	18c00814 	ori	r3,r3,32
10105504:	00bfffc4 	movi	r2,-1
10105508:	80c0030d 	sth	r3,12(r16)
1010550c:	003fed06 	br	101054c4 <_gp+0xfffe3f34>
10105510:	01039340 	call	10103934 <__sinit>
10105514:	003fc206 	br	10105420 <_gp+0xfffe3e90>
10105518:	008404b4 	movhi	r2,4114
1010551c:	10a56404 	addi	r2,r2,-27248
10105520:	11000017 	ldw	r4,0(r2)
10105524:	01440434 	movhi	r5,4112
10105528:	00800044 	movi	r2,1
1010552c:	2954f704 	addi	r5,r5,21468
10105530:	8080030d 	sth	r2,12(r16)
10105534:	01044480 	call	10104448 <_fwalk>
10105538:	00800244 	movi	r2,9
1010553c:	8480030d 	sth	r18,12(r16)
10105540:	9480024c 	andi	r18,r18,9
10105544:	90bfd51e 	bne	r18,r2,1010549c <_gp+0xfffe3f0c>
10105548:	800b883a 	mov	r5,r16
1010554c:	8809883a 	mov	r4,r17
10105550:	010333c0 	call	1010333c <__sflush_r>
10105554:	003fd106 	br	1010549c <_gp+0xfffe3f0c>
10105558:	18c01014 	ori	r3,r3,64
1010555c:	80000115 	stw	zero,4(r16)
10105560:	00bfffc4 	movi	r2,-1
10105564:	80c0030d 	sth	r3,12(r16)
10105568:	003fd606 	br	101054c4 <_gp+0xfffe3f34>
1010556c:	80c00e17 	ldw	r3,56(r16)
10105570:	0005883a 	mov	r2,zero
10105574:	80c00015 	stw	r3,0(r16)
10105578:	003fd206 	br	101054c4 <_gp+0xfffe3f34>
1010557c:	800b883a 	mov	r5,r16
10105580:	8809883a 	mov	r4,r17
10105584:	01035580 	call	10103558 <_fflush_r>
10105588:	10000a1e 	bne	r2,zero,101055b4 <__srefill_r+0x1bc>
1010558c:	8080030b 	ldhu	r2,12(r16)
10105590:	00fffdc4 	movi	r3,-9
10105594:	80000215 	stw	zero,8(r16)
10105598:	1886703a 	and	r3,r3,r2
1010559c:	80000615 	stw	zero,24(r16)
101055a0:	003fd206 	br	101054ec <_gp+0xfffe3f5c>
101055a4:	00800244 	movi	r2,9
101055a8:	88800015 	stw	r2,0(r17)
101055ac:	18c01014 	ori	r3,r3,64
101055b0:	80c0030d 	sth	r3,12(r16)
101055b4:	00bfffc4 	movi	r2,-1
101055b8:	003fc206 	br	101054c4 <_gp+0xfffe3f34>
101055bc:	800b883a 	mov	r5,r16
101055c0:	8809883a 	mov	r4,r17
101055c4:	01046d00 	call	101046d0 <__smakebuf_r>
101055c8:	003fb106 	br	10105490 <_gp+0xfffe3f00>

101055cc <_sbrk_r>:
101055cc:	defffd04 	addi	sp,sp,-12
101055d0:	dc000015 	stw	r16,0(sp)
101055d4:	040404b4 	movhi	r16,4114
101055d8:	dc400115 	stw	r17,4(sp)
101055dc:	842c5e04 	addi	r16,r16,-20104
101055e0:	2023883a 	mov	r17,r4
101055e4:	2809883a 	mov	r4,r5
101055e8:	dfc00215 	stw	ra,8(sp)
101055ec:	80000015 	stw	zero,0(r16)
101055f0:	0114f080 	call	10114f08 <sbrk>
101055f4:	00ffffc4 	movi	r3,-1
101055f8:	10c00526 	beq	r2,r3,10105610 <_sbrk_r+0x44>
101055fc:	dfc00217 	ldw	ra,8(sp)
10105600:	dc400117 	ldw	r17,4(sp)
10105604:	dc000017 	ldw	r16,0(sp)
10105608:	dec00304 	addi	sp,sp,12
1010560c:	f800283a 	ret
10105610:	80c00017 	ldw	r3,0(r16)
10105614:	183ff926 	beq	r3,zero,101055fc <_gp+0xfffe406c>
10105618:	88c00015 	stw	r3,0(r17)
1010561c:	003ff706 	br	101055fc <_gp+0xfffe406c>

10105620 <_sprintf_r>:
10105620:	deffe404 	addi	sp,sp,-112
10105624:	2807883a 	mov	r3,r5
10105628:	dfc01a15 	stw	ra,104(sp)
1010562c:	d9c01b15 	stw	r7,108(sp)
10105630:	00a00034 	movhi	r2,32768
10105634:	10bfffc4 	addi	r2,r2,-1
10105638:	02008204 	movi	r8,520
1010563c:	d8800215 	stw	r2,8(sp)
10105640:	d8800515 	stw	r2,20(sp)
10105644:	d9c01b04 	addi	r7,sp,108
10105648:	d80b883a 	mov	r5,sp
1010564c:	00bfffc4 	movi	r2,-1
10105650:	d8c00015 	stw	r3,0(sp)
10105654:	d8c00415 	stw	r3,16(sp)
10105658:	da00030d 	sth	r8,12(sp)
1010565c:	d880038d 	sth	r2,14(sp)
10105660:	01058b80 	call	101058b8 <___svfprintf_internal_r>
10105664:	d8c00017 	ldw	r3,0(sp)
10105668:	18000005 	stb	zero,0(r3)
1010566c:	dfc01a17 	ldw	ra,104(sp)
10105670:	dec01c04 	addi	sp,sp,112
10105674:	f800283a 	ret

10105678 <sprintf>:
10105678:	deffe304 	addi	sp,sp,-116
1010567c:	2007883a 	mov	r3,r4
10105680:	dfc01a15 	stw	ra,104(sp)
10105684:	d9801b15 	stw	r6,108(sp)
10105688:	d9c01c15 	stw	r7,112(sp)
1010568c:	010404b4 	movhi	r4,4114
10105690:	21256504 	addi	r4,r4,-27244
10105694:	21000017 	ldw	r4,0(r4)
10105698:	00a00034 	movhi	r2,32768
1010569c:	10bfffc4 	addi	r2,r2,-1
101056a0:	280d883a 	mov	r6,r5
101056a4:	02008204 	movi	r8,520
101056a8:	d8800215 	stw	r2,8(sp)
101056ac:	d8800515 	stw	r2,20(sp)
101056b0:	d9c01b04 	addi	r7,sp,108
101056b4:	d80b883a 	mov	r5,sp
101056b8:	00bfffc4 	movi	r2,-1
101056bc:	d8c00015 	stw	r3,0(sp)
101056c0:	d8c00415 	stw	r3,16(sp)
101056c4:	da00030d 	sth	r8,12(sp)
101056c8:	d880038d 	sth	r2,14(sp)
101056cc:	01058b80 	call	101058b8 <___svfprintf_internal_r>
101056d0:	d8c00017 	ldw	r3,0(sp)
101056d4:	18000005 	stb	zero,0(r3)
101056d8:	dfc01a17 	ldw	ra,104(sp)
101056dc:	dec01d04 	addi	sp,sp,116
101056e0:	f800283a 	ret

101056e4 <__sread>:
101056e4:	defffe04 	addi	sp,sp,-8
101056e8:	dc000015 	stw	r16,0(sp)
101056ec:	2821883a 	mov	r16,r5
101056f0:	2940038f 	ldh	r5,14(r5)
101056f4:	dfc00115 	stw	ra,4(sp)
101056f8:	010d3480 	call	1010d348 <_read_r>
101056fc:	10000716 	blt	r2,zero,1010571c <__sread+0x38>
10105700:	80c01417 	ldw	r3,80(r16)
10105704:	1887883a 	add	r3,r3,r2
10105708:	80c01415 	stw	r3,80(r16)
1010570c:	dfc00117 	ldw	ra,4(sp)
10105710:	dc000017 	ldw	r16,0(sp)
10105714:	dec00204 	addi	sp,sp,8
10105718:	f800283a 	ret
1010571c:	80c0030b 	ldhu	r3,12(r16)
10105720:	18fbffcc 	andi	r3,r3,61439
10105724:	80c0030d 	sth	r3,12(r16)
10105728:	dfc00117 	ldw	ra,4(sp)
1010572c:	dc000017 	ldw	r16,0(sp)
10105730:	dec00204 	addi	sp,sp,8
10105734:	f800283a 	ret

10105738 <__seofread>:
10105738:	0005883a 	mov	r2,zero
1010573c:	f800283a 	ret

10105740 <__swrite>:
10105740:	2880030b 	ldhu	r2,12(r5)
10105744:	defffb04 	addi	sp,sp,-20
10105748:	dcc00315 	stw	r19,12(sp)
1010574c:	dc800215 	stw	r18,8(sp)
10105750:	dc400115 	stw	r17,4(sp)
10105754:	dc000015 	stw	r16,0(sp)
10105758:	dfc00415 	stw	ra,16(sp)
1010575c:	10c0400c 	andi	r3,r2,256
10105760:	2821883a 	mov	r16,r5
10105764:	2023883a 	mov	r17,r4
10105768:	3025883a 	mov	r18,r6
1010576c:	3827883a 	mov	r19,r7
10105770:	18000526 	beq	r3,zero,10105788 <__swrite+0x48>
10105774:	2940038f 	ldh	r5,14(r5)
10105778:	01c00084 	movi	r7,2
1010577c:	000d883a 	mov	r6,zero
10105780:	010bf640 	call	1010bf64 <_lseek_r>
10105784:	8080030b 	ldhu	r2,12(r16)
10105788:	8140038f 	ldh	r5,14(r16)
1010578c:	10bbffcc 	andi	r2,r2,61439
10105790:	980f883a 	mov	r7,r19
10105794:	900d883a 	mov	r6,r18
10105798:	8809883a 	mov	r4,r17
1010579c:	8080030d 	sth	r2,12(r16)
101057a0:	dfc00417 	ldw	ra,16(sp)
101057a4:	dcc00317 	ldw	r19,12(sp)
101057a8:	dc800217 	ldw	r18,8(sp)
101057ac:	dc400117 	ldw	r17,4(sp)
101057b0:	dc000017 	ldw	r16,0(sp)
101057b4:	dec00504 	addi	sp,sp,20
101057b8:	0109dc81 	jmpi	10109dc8 <_write_r>

101057bc <__sseek>:
101057bc:	defffe04 	addi	sp,sp,-8
101057c0:	dc000015 	stw	r16,0(sp)
101057c4:	2821883a 	mov	r16,r5
101057c8:	2940038f 	ldh	r5,14(r5)
101057cc:	dfc00115 	stw	ra,4(sp)
101057d0:	010bf640 	call	1010bf64 <_lseek_r>
101057d4:	00ffffc4 	movi	r3,-1
101057d8:	10c00826 	beq	r2,r3,101057fc <__sseek+0x40>
101057dc:	80c0030b 	ldhu	r3,12(r16)
101057e0:	80801415 	stw	r2,80(r16)
101057e4:	18c40014 	ori	r3,r3,4096
101057e8:	80c0030d 	sth	r3,12(r16)
101057ec:	dfc00117 	ldw	ra,4(sp)
101057f0:	dc000017 	ldw	r16,0(sp)
101057f4:	dec00204 	addi	sp,sp,8
101057f8:	f800283a 	ret
101057fc:	80c0030b 	ldhu	r3,12(r16)
10105800:	18fbffcc 	andi	r3,r3,61439
10105804:	80c0030d 	sth	r3,12(r16)
10105808:	dfc00117 	ldw	ra,4(sp)
1010580c:	dc000017 	ldw	r16,0(sp)
10105810:	dec00204 	addi	sp,sp,8
10105814:	f800283a 	ret

10105818 <__sclose>:
10105818:	2940038f 	ldh	r5,14(r5)
1010581c:	0109f7c1 	jmpi	10109f7c <_close_r>

10105820 <strlen>:
10105820:	208000cc 	andi	r2,r4,3
10105824:	10002026 	beq	r2,zero,101058a8 <strlen+0x88>
10105828:	20800007 	ldb	r2,0(r4)
1010582c:	10002026 	beq	r2,zero,101058b0 <strlen+0x90>
10105830:	2005883a 	mov	r2,r4
10105834:	00000206 	br	10105840 <strlen+0x20>
10105838:	10c00007 	ldb	r3,0(r2)
1010583c:	18001826 	beq	r3,zero,101058a0 <strlen+0x80>
10105840:	10800044 	addi	r2,r2,1
10105844:	10c000cc 	andi	r3,r2,3
10105848:	183ffb1e 	bne	r3,zero,10105838 <_gp+0xfffe42a8>
1010584c:	10c00017 	ldw	r3,0(r2)
10105850:	01ffbff4 	movhi	r7,65279
10105854:	39ffbfc4 	addi	r7,r7,-257
10105858:	00ca303a 	nor	r5,zero,r3
1010585c:	01a02074 	movhi	r6,32897
10105860:	19c7883a 	add	r3,r3,r7
10105864:	31a02004 	addi	r6,r6,-32640
10105868:	1946703a 	and	r3,r3,r5
1010586c:	1986703a 	and	r3,r3,r6
10105870:	1800091e 	bne	r3,zero,10105898 <strlen+0x78>
10105874:	10800104 	addi	r2,r2,4
10105878:	10c00017 	ldw	r3,0(r2)
1010587c:	19cb883a 	add	r5,r3,r7
10105880:	00c6303a 	nor	r3,zero,r3
10105884:	28c6703a 	and	r3,r5,r3
10105888:	1986703a 	and	r3,r3,r6
1010588c:	183ff926 	beq	r3,zero,10105874 <_gp+0xfffe42e4>
10105890:	00000106 	br	10105898 <strlen+0x78>
10105894:	10800044 	addi	r2,r2,1
10105898:	10c00007 	ldb	r3,0(r2)
1010589c:	183ffd1e 	bne	r3,zero,10105894 <_gp+0xfffe4304>
101058a0:	1105c83a 	sub	r2,r2,r4
101058a4:	f800283a 	ret
101058a8:	2005883a 	mov	r2,r4
101058ac:	003fe706 	br	1010584c <_gp+0xfffe42bc>
101058b0:	0005883a 	mov	r2,zero
101058b4:	f800283a 	ret

101058b8 <___svfprintf_internal_r>:
101058b8:	deffb704 	addi	sp,sp,-292
101058bc:	dfc04815 	stw	ra,288(sp)
101058c0:	ddc04615 	stw	r23,280(sp)
101058c4:	d9402c15 	stw	r5,176(sp)
101058c8:	d9003915 	stw	r4,228(sp)
101058cc:	302f883a 	mov	r23,r6
101058d0:	d9c02d15 	stw	r7,180(sp)
101058d4:	df004715 	stw	fp,284(sp)
101058d8:	dd804515 	stw	r22,276(sp)
101058dc:	dd404415 	stw	r21,272(sp)
101058e0:	dd004315 	stw	r20,268(sp)
101058e4:	dcc04215 	stw	r19,264(sp)
101058e8:	dc804115 	stw	r18,260(sp)
101058ec:	dc404015 	stw	r17,256(sp)
101058f0:	dc003f15 	stw	r16,252(sp)
101058f4:	010bf340 	call	1010bf34 <_localeconv_r>
101058f8:	10800017 	ldw	r2,0(r2)
101058fc:	1009883a 	mov	r4,r2
10105900:	d8803415 	stw	r2,208(sp)
10105904:	01058200 	call	10105820 <strlen>
10105908:	d8c02c17 	ldw	r3,176(sp)
1010590c:	d8803815 	stw	r2,224(sp)
10105910:	1880030b 	ldhu	r2,12(r3)
10105914:	1080200c 	andi	r2,r2,128
10105918:	10000226 	beq	r2,zero,10105924 <___svfprintf_internal_r+0x6c>
1010591c:	18800417 	ldw	r2,16(r3)
10105920:	10067f26 	beq	r2,zero,10107320 <___svfprintf_internal_r+0x1a68>
10105924:	dcc03917 	ldw	r19,228(sp)
10105928:	d8c00404 	addi	r3,sp,16
1010592c:	05440474 	movhi	r21,4113
10105930:	d9001e04 	addi	r4,sp,120
10105934:	ad5dee84 	addi	r21,r21,30650
10105938:	d8c01e15 	stw	r3,120(sp)
1010593c:	d8002015 	stw	zero,128(sp)
10105940:	d8001f15 	stw	zero,124(sp)
10105944:	d8003315 	stw	zero,204(sp)
10105948:	d8003615 	stw	zero,216(sp)
1010594c:	d8003715 	stw	zero,220(sp)
10105950:	1811883a 	mov	r8,r3
10105954:	d8003a15 	stw	zero,232(sp)
10105958:	d8003b15 	stw	zero,236(sp)
1010595c:	d8002f15 	stw	zero,188(sp)
10105960:	d9002815 	stw	r4,160(sp)
10105964:	b8800007 	ldb	r2,0(r23)
10105968:	10026726 	beq	r2,zero,10106308 <___svfprintf_internal_r+0xa50>
1010596c:	00c00944 	movi	r3,37
10105970:	b821883a 	mov	r16,r23
10105974:	10c0021e 	bne	r2,r3,10105980 <___svfprintf_internal_r+0xc8>
10105978:	00001406 	br	101059cc <___svfprintf_internal_r+0x114>
1010597c:	10c00326 	beq	r2,r3,1010598c <___svfprintf_internal_r+0xd4>
10105980:	84000044 	addi	r16,r16,1
10105984:	80800007 	ldb	r2,0(r16)
10105988:	103ffc1e 	bne	r2,zero,1010597c <_gp+0xfffe43ec>
1010598c:	85e3c83a 	sub	r17,r16,r23
10105990:	88000e26 	beq	r17,zero,101059cc <___svfprintf_internal_r+0x114>
10105994:	d8c02017 	ldw	r3,128(sp)
10105998:	d8801f17 	ldw	r2,124(sp)
1010599c:	45c00015 	stw	r23,0(r8)
101059a0:	1c47883a 	add	r3,r3,r17
101059a4:	10800044 	addi	r2,r2,1
101059a8:	d8c02015 	stw	r3,128(sp)
101059ac:	44400115 	stw	r17,4(r8)
101059b0:	d8801f15 	stw	r2,124(sp)
101059b4:	00c001c4 	movi	r3,7
101059b8:	18809716 	blt	r3,r2,10105c18 <___svfprintf_internal_r+0x360>
101059bc:	42000204 	addi	r8,r8,8
101059c0:	d9402f17 	ldw	r5,188(sp)
101059c4:	2c4b883a 	add	r5,r5,r17
101059c8:	d9402f15 	stw	r5,188(sp)
101059cc:	80800007 	ldb	r2,0(r16)
101059d0:	10009826 	beq	r2,zero,10105c34 <___svfprintf_internal_r+0x37c>
101059d4:	84400047 	ldb	r17,1(r16)
101059d8:	00bfffc4 	movi	r2,-1
101059dc:	85c00044 	addi	r23,r16,1
101059e0:	d8002785 	stb	zero,158(sp)
101059e4:	0007883a 	mov	r3,zero
101059e8:	000f883a 	mov	r7,zero
101059ec:	d8802915 	stw	r2,164(sp)
101059f0:	d8003115 	stw	zero,196(sp)
101059f4:	0025883a 	mov	r18,zero
101059f8:	01401604 	movi	r5,88
101059fc:	01800244 	movi	r6,9
10105a00:	02800a84 	movi	r10,42
10105a04:	02401b04 	movi	r9,108
10105a08:	bdc00044 	addi	r23,r23,1
10105a0c:	88bff804 	addi	r2,r17,-32
10105a10:	2882f036 	bltu	r5,r2,101065d4 <___svfprintf_internal_r+0xd1c>
10105a14:	100490ba 	slli	r2,r2,2
10105a18:	01040434 	movhi	r4,4112
10105a1c:	21168b04 	addi	r4,r4,23084
10105a20:	1105883a 	add	r2,r2,r4
10105a24:	10800017 	ldw	r2,0(r2)
10105a28:	1000683a 	jmp	r2
10105a2c:	1010653c 	xorhi	zero,r2,16788
10105a30:	101065d4 	ori	zero,r2,16791
10105a34:	101065d4 	ori	zero,r2,16791
10105a38:	10106530 	cmpltui	zero,r2,16788
10105a3c:	101065d4 	ori	zero,r2,16791
10105a40:	101065d4 	ori	zero,r2,16791
10105a44:	101065d4 	ori	zero,r2,16791
10105a48:	101065d4 	ori	zero,r2,16791
10105a4c:	101065d4 	ori	zero,r2,16791
10105a50:	101065d4 	ori	zero,r2,16791
10105a54:	10105c90 	cmplti	zero,r2,16754
10105a58:	1010646c 	andhi	zero,r2,16785
10105a5c:	101065d4 	ori	zero,r2,16791
10105a60:	10105ba0 	cmpeqi	zero,r2,16750
10105a64:	10105cb8 	rdprs	zero,r2,16754
10105a68:	101065d4 	ori	zero,r2,16791
10105a6c:	10105d2c 	andhi	zero,r2,16756
10105a70:	10105cf8 	rdprs	zero,r2,16755
10105a74:	10105cf8 	rdprs	zero,r2,16755
10105a78:	10105cf8 	rdprs	zero,r2,16755
10105a7c:	10105cf8 	rdprs	zero,r2,16755
10105a80:	10105cf8 	rdprs	zero,r2,16755
10105a84:	10105cf8 	rdprs	zero,r2,16755
10105a88:	10105cf8 	rdprs	zero,r2,16755
10105a8c:	10105cf8 	rdprs	zero,r2,16755
10105a90:	10105cf8 	rdprs	zero,r2,16755
10105a94:	101065d4 	ori	zero,r2,16791
10105a98:	101065d4 	ori	zero,r2,16791
10105a9c:	101065d4 	ori	zero,r2,16791
10105aa0:	101065d4 	ori	zero,r2,16791
10105aa4:	101065d4 	ori	zero,r2,16791
10105aa8:	101065d4 	ori	zero,r2,16791
10105aac:	101065d4 	ori	zero,r2,16791
10105ab0:	101065d4 	ori	zero,r2,16791
10105ab4:	101065d4 	ori	zero,r2,16791
10105ab8:	101065d4 	ori	zero,r2,16791
10105abc:	10105de4 	muli	zero,r2,16759
10105ac0:	10105d38 	rdprs	zero,r2,16756
10105ac4:	101065d4 	ori	zero,r2,16791
10105ac8:	10105d38 	rdprs	zero,r2,16756
10105acc:	101065d4 	ori	zero,r2,16791
10105ad0:	101065d4 	ori	zero,r2,16791
10105ad4:	101065d4 	ori	zero,r2,16791
10105ad8:	101065d4 	ori	zero,r2,16791
10105adc:	10105dd8 	cmpnei	zero,r2,16759
10105ae0:	101065d4 	ori	zero,r2,16791
10105ae4:	101065d4 	ori	zero,r2,16791
10105ae8:	10105ea0 	cmpeqi	zero,r2,16762
10105aec:	101065d4 	ori	zero,r2,16791
10105af0:	101065d4 	ori	zero,r2,16791
10105af4:	101065d4 	ori	zero,r2,16791
10105af8:	101065d4 	ori	zero,r2,16791
10105afc:	101065d4 	ori	zero,r2,16791
10105b00:	10106310 	cmplti	zero,r2,16780
10105b04:	101065d4 	ori	zero,r2,16791
10105b08:	101065d4 	ori	zero,r2,16791
10105b0c:	10106370 	cmpltui	zero,r2,16781
10105b10:	101065d4 	ori	zero,r2,16791
10105b14:	101065d4 	ori	zero,r2,16791
10105b18:	101065d4 	ori	zero,r2,16791
10105b1c:	101065d4 	ori	zero,r2,16791
10105b20:	101065d4 	ori	zero,r2,16791
10105b24:	101065d4 	ori	zero,r2,16791
10105b28:	101065d4 	ori	zero,r2,16791
10105b2c:	101065d4 	ori	zero,r2,16791
10105b30:	101065d4 	ori	zero,r2,16791
10105b34:	101065d4 	ori	zero,r2,16791
10105b38:	10106420 	cmpeqi	zero,r2,16784
10105b3c:	1010655c 	xori	zero,r2,16789
10105b40:	10105d38 	rdprs	zero,r2,16756
10105b44:	10105d38 	rdprs	zero,r2,16756
10105b48:	10105d38 	rdprs	zero,r2,16756
10105b4c:	101065b0 	cmpltui	zero,r2,16790
10105b50:	1010655c 	xori	zero,r2,16789
10105b54:	101065d4 	ori	zero,r2,16791
10105b58:	101065d4 	ori	zero,r2,16791
10105b5c:	1010656c 	andhi	zero,r2,16789
10105b60:	101065d4 	ori	zero,r2,16791
10105b64:	1010657c 	xorhi	zero,r2,16789
10105b68:	1010645c 	xori	zero,r2,16785
10105b6c:	10105bac 	andhi	zero,r2,16750
10105b70:	1010647c 	xorhi	zero,r2,16785
10105b74:	101065d4 	ori	zero,r2,16791
10105b78:	10106488 	cmpgei	zero,r2,16786
10105b7c:	101065d4 	ori	zero,r2,16791
10105b80:	101064e4 	muli	zero,r2,16787
10105b84:	101065d4 	ori	zero,r2,16791
10105b88:	101065d4 	ori	zero,r2,16791
10105b8c:	101064f4 	orhi	zero,r2,16787
10105b90:	d9003117 	ldw	r4,196(sp)
10105b94:	d8802d15 	stw	r2,180(sp)
10105b98:	0109c83a 	sub	r4,zero,r4
10105b9c:	d9003115 	stw	r4,196(sp)
10105ba0:	94800114 	ori	r18,r18,4
10105ba4:	bc400007 	ldb	r17,0(r23)
10105ba8:	003f9706 	br	10105a08 <_gp+0xfffe4478>
10105bac:	00800c04 	movi	r2,48
10105bb0:	d9002d17 	ldw	r4,180(sp)
10105bb4:	d9402917 	ldw	r5,164(sp)
10105bb8:	d8802705 	stb	r2,156(sp)
10105bbc:	00801e04 	movi	r2,120
10105bc0:	d8802745 	stb	r2,157(sp)
10105bc4:	d8002785 	stb	zero,158(sp)
10105bc8:	20c00104 	addi	r3,r4,4
10105bcc:	25000017 	ldw	r20,0(r4)
10105bd0:	002d883a 	mov	r22,zero
10105bd4:	90800094 	ori	r2,r18,2
10105bd8:	28028616 	blt	r5,zero,101065f4 <___svfprintf_internal_r+0xd3c>
10105bdc:	00bfdfc4 	movi	r2,-129
10105be0:	90a4703a 	and	r18,r18,r2
10105be4:	d8c02d15 	stw	r3,180(sp)
10105be8:	94800094 	ori	r18,r18,2
10105bec:	a002731e 	bne	r20,zero,101065bc <___svfprintf_internal_r+0xd04>
10105bf0:	00840474 	movhi	r2,4113
10105bf4:	109de704 	addi	r2,r2,30620
10105bf8:	d8803a15 	stw	r2,232(sp)
10105bfc:	04401e04 	movi	r17,120
10105c00:	d8c02917 	ldw	r3,164(sp)
10105c04:	0039883a 	mov	fp,zero
10105c08:	1801d526 	beq	r3,zero,10106360 <___svfprintf_internal_r+0xaa8>
10105c0c:	0029883a 	mov	r20,zero
10105c10:	002d883a 	mov	r22,zero
10105c14:	0001f106 	br	101063dc <___svfprintf_internal_r+0xb24>
10105c18:	d9402c17 	ldw	r5,176(sp)
10105c1c:	d9801e04 	addi	r6,sp,120
10105c20:	9809883a 	mov	r4,r19
10105c24:	010dd600 	call	1010dd60 <__ssprint_r>
10105c28:	1000081e 	bne	r2,zero,10105c4c <___svfprintf_internal_r+0x394>
10105c2c:	da000404 	addi	r8,sp,16
10105c30:	003f6306 	br	101059c0 <_gp+0xfffe4430>
10105c34:	d8802017 	ldw	r2,128(sp)
10105c38:	10000426 	beq	r2,zero,10105c4c <___svfprintf_internal_r+0x394>
10105c3c:	d9402c17 	ldw	r5,176(sp)
10105c40:	d9003917 	ldw	r4,228(sp)
10105c44:	d9801e04 	addi	r6,sp,120
10105c48:	010dd600 	call	1010dd60 <__ssprint_r>
10105c4c:	d8802c17 	ldw	r2,176(sp)
10105c50:	10c0030b 	ldhu	r3,12(r2)
10105c54:	d8802f17 	ldw	r2,188(sp)
10105c58:	18c0100c 	andi	r3,r3,64
10105c5c:	1805f51e 	bne	r3,zero,10107434 <___svfprintf_internal_r+0x1b7c>
10105c60:	dfc04817 	ldw	ra,288(sp)
10105c64:	df004717 	ldw	fp,284(sp)
10105c68:	ddc04617 	ldw	r23,280(sp)
10105c6c:	dd804517 	ldw	r22,276(sp)
10105c70:	dd404417 	ldw	r21,272(sp)
10105c74:	dd004317 	ldw	r20,268(sp)
10105c78:	dcc04217 	ldw	r19,264(sp)
10105c7c:	dc804117 	ldw	r18,260(sp)
10105c80:	dc404017 	ldw	r17,256(sp)
10105c84:	dc003f17 	ldw	r16,252(sp)
10105c88:	dec04904 	addi	sp,sp,292
10105c8c:	f800283a 	ret
10105c90:	d8802d17 	ldw	r2,180(sp)
10105c94:	d9002d17 	ldw	r4,180(sp)
10105c98:	10800017 	ldw	r2,0(r2)
10105c9c:	d8803115 	stw	r2,196(sp)
10105ca0:	20800104 	addi	r2,r4,4
10105ca4:	d9003117 	ldw	r4,196(sp)
10105ca8:	203fb916 	blt	r4,zero,10105b90 <_gp+0xfffe4600>
10105cac:	d8802d15 	stw	r2,180(sp)
10105cb0:	bc400007 	ldb	r17,0(r23)
10105cb4:	003f5406 	br	10105a08 <_gp+0xfffe4478>
10105cb8:	bc400007 	ldb	r17,0(r23)
10105cbc:	bac00044 	addi	r11,r23,1
10105cc0:	8a873926 	beq	r17,r10,101079a8 <___svfprintf_internal_r+0x20f0>
10105cc4:	88bff404 	addi	r2,r17,-48
10105cc8:	0009883a 	mov	r4,zero
10105ccc:	30868836 	bltu	r6,r2,101076f0 <___svfprintf_internal_r+0x1e38>
10105cd0:	5c400007 	ldb	r17,0(r11)
10105cd4:	210002a4 	muli	r4,r4,10
10105cd8:	5dc00044 	addi	r23,r11,1
10105cdc:	b817883a 	mov	r11,r23
10105ce0:	2089883a 	add	r4,r4,r2
10105ce4:	88bff404 	addi	r2,r17,-48
10105ce8:	30bff92e 	bgeu	r6,r2,10105cd0 <_gp+0xfffe4740>
10105cec:	2005d716 	blt	r4,zero,1010744c <___svfprintf_internal_r+0x1b94>
10105cf0:	d9002915 	stw	r4,164(sp)
10105cf4:	003f4506 	br	10105a0c <_gp+0xfffe447c>
10105cf8:	b809883a 	mov	r4,r23
10105cfc:	d8003115 	stw	zero,196(sp)
10105d00:	88bff404 	addi	r2,r17,-48
10105d04:	0017883a 	mov	r11,zero
10105d08:	24400007 	ldb	r17,0(r4)
10105d0c:	5ac002a4 	muli	r11,r11,10
10105d10:	bdc00044 	addi	r23,r23,1
10105d14:	b809883a 	mov	r4,r23
10105d18:	12d7883a 	add	r11,r2,r11
10105d1c:	88bff404 	addi	r2,r17,-48
10105d20:	30bff92e 	bgeu	r6,r2,10105d08 <_gp+0xfffe4778>
10105d24:	dac03115 	stw	r11,196(sp)
10105d28:	003f3806 	br	10105a0c <_gp+0xfffe447c>
10105d2c:	94802014 	ori	r18,r18,128
10105d30:	bc400007 	ldb	r17,0(r23)
10105d34:	003f3406 	br	10105a08 <_gp+0xfffe4478>
10105d38:	18c03fcc 	andi	r3,r3,255
10105d3c:	1807471e 	bne	r3,zero,10107a5c <___svfprintf_internal_r+0x21a4>
10105d40:	9080020c 	andi	r2,r18,8
10105d44:	10047d26 	beq	r2,zero,10106f3c <___svfprintf_internal_r+0x1684>
10105d48:	d8c02d17 	ldw	r3,180(sp)
10105d4c:	d9002d17 	ldw	r4,180(sp)
10105d50:	d9402d17 	ldw	r5,180(sp)
10105d54:	18c00017 	ldw	r3,0(r3)
10105d58:	21000117 	ldw	r4,4(r4)
10105d5c:	29400204 	addi	r5,r5,8
10105d60:	d8c03615 	stw	r3,216(sp)
10105d64:	d9003715 	stw	r4,220(sp)
10105d68:	d9402d15 	stw	r5,180(sp)
10105d6c:	d9003617 	ldw	r4,216(sp)
10105d70:	d9403717 	ldw	r5,220(sp)
10105d74:	da003e15 	stw	r8,248(sp)
10105d78:	04000044 	movi	r16,1
10105d7c:	010d90c0 	call	1010d90c <__fpclassifyd>
10105d80:	da003e17 	ldw	r8,248(sp)
10105d84:	14044b1e 	bne	r2,r16,10106eb4 <___svfprintf_internal_r+0x15fc>
10105d88:	d9003617 	ldw	r4,216(sp)
10105d8c:	d9403717 	ldw	r5,220(sp)
10105d90:	000d883a 	mov	r6,zero
10105d94:	000f883a 	mov	r7,zero
10105d98:	0112bc80 	call	10112bc8 <__ledf2>
10105d9c:	da003e17 	ldw	r8,248(sp)
10105da0:	1005f316 	blt	r2,zero,10107570 <___svfprintf_internal_r+0x1cb8>
10105da4:	df002783 	ldbu	fp,158(sp)
10105da8:	008011c4 	movi	r2,71
10105dac:	1445590e 	bge	r2,r17,10107314 <___svfprintf_internal_r+0x1a5c>
10105db0:	04040474 	movhi	r16,4113
10105db4:	841ddf04 	addi	r16,r16,30588
10105db8:	00c000c4 	movi	r3,3
10105dbc:	00bfdfc4 	movi	r2,-129
10105dc0:	d8c02a15 	stw	r3,168(sp)
10105dc4:	90a4703a 	and	r18,r18,r2
10105dc8:	d8c02e15 	stw	r3,184(sp)
10105dcc:	d8002915 	stw	zero,164(sp)
10105dd0:	d8003215 	stw	zero,200(sp)
10105dd4:	00006606 	br	10105f70 <___svfprintf_internal_r+0x6b8>
10105dd8:	94800214 	ori	r18,r18,8
10105ddc:	bc400007 	ldb	r17,0(r23)
10105de0:	003f0906 	br	10105a08 <_gp+0xfffe4478>
10105de4:	18c03fcc 	andi	r3,r3,255
10105de8:	1807181e 	bne	r3,zero,10107a4c <___svfprintf_internal_r+0x2194>
10105dec:	94800414 	ori	r18,r18,16
10105df0:	9080080c 	andi	r2,r18,32
10105df4:	10039626 	beq	r2,zero,10106c50 <___svfprintf_internal_r+0x1398>
10105df8:	d9402d17 	ldw	r5,180(sp)
10105dfc:	28800117 	ldw	r2,4(r5)
10105e00:	2d000017 	ldw	r20,0(r5)
10105e04:	29400204 	addi	r5,r5,8
10105e08:	d9402d15 	stw	r5,180(sp)
10105e0c:	102d883a 	mov	r22,r2
10105e10:	10039816 	blt	r2,zero,10106c74 <___svfprintf_internal_r+0x13bc>
10105e14:	d9402917 	ldw	r5,164(sp)
10105e18:	df002783 	ldbu	fp,158(sp)
10105e1c:	2803ab16 	blt	r5,zero,10106ccc <___svfprintf_internal_r+0x1414>
10105e20:	00ffdfc4 	movi	r3,-129
10105e24:	a584b03a 	or	r2,r20,r22
10105e28:	90e4703a 	and	r18,r18,r3
10105e2c:	10014a26 	beq	r2,zero,10106358 <___svfprintf_internal_r+0xaa0>
10105e30:	b0034b26 	beq	r22,zero,10106b60 <___svfprintf_internal_r+0x12a8>
10105e34:	dc402a15 	stw	r17,168(sp)
10105e38:	dc001e04 	addi	r16,sp,120
10105e3c:	b023883a 	mov	r17,r22
10105e40:	402d883a 	mov	r22,r8
10105e44:	a009883a 	mov	r4,r20
10105e48:	880b883a 	mov	r5,r17
10105e4c:	01800284 	movi	r6,10
10105e50:	000f883a 	mov	r7,zero
10105e54:	01113980 	call	10111398 <__umoddi3>
10105e58:	10800c04 	addi	r2,r2,48
10105e5c:	843fffc4 	addi	r16,r16,-1
10105e60:	a009883a 	mov	r4,r20
10105e64:	880b883a 	mov	r5,r17
10105e68:	80800005 	stb	r2,0(r16)
10105e6c:	01800284 	movi	r6,10
10105e70:	000f883a 	mov	r7,zero
10105e74:	0110e200 	call	10110e20 <__udivdi3>
10105e78:	1029883a 	mov	r20,r2
10105e7c:	10c4b03a 	or	r2,r2,r3
10105e80:	1823883a 	mov	r17,r3
10105e84:	103fef1e 	bne	r2,zero,10105e44 <_gp+0xfffe48b4>
10105e88:	d8c02817 	ldw	r3,160(sp)
10105e8c:	dc402a17 	ldw	r17,168(sp)
10105e90:	b011883a 	mov	r8,r22
10105e94:	1c07c83a 	sub	r3,r3,r16
10105e98:	d8c02e15 	stw	r3,184(sp)
10105e9c:	00002e06 	br	10105f58 <___svfprintf_internal_r+0x6a0>
10105ea0:	18c03fcc 	andi	r3,r3,255
10105ea4:	1806e71e 	bne	r3,zero,10107a44 <___svfprintf_internal_r+0x218c>
10105ea8:	94800414 	ori	r18,r18,16
10105eac:	9080080c 	andi	r2,r18,32
10105eb0:	1002d426 	beq	r2,zero,10106a04 <___svfprintf_internal_r+0x114c>
10105eb4:	d9402d17 	ldw	r5,180(sp)
10105eb8:	d8c02917 	ldw	r3,164(sp)
10105ebc:	d8002785 	stb	zero,158(sp)
10105ec0:	28800204 	addi	r2,r5,8
10105ec4:	2d000017 	ldw	r20,0(r5)
10105ec8:	2d800117 	ldw	r22,4(r5)
10105ecc:	18041516 	blt	r3,zero,10106f24 <___svfprintf_internal_r+0x166c>
10105ed0:	013fdfc4 	movi	r4,-129
10105ed4:	a586b03a 	or	r3,r20,r22
10105ed8:	d8802d15 	stw	r2,180(sp)
10105edc:	9124703a 	and	r18,r18,r4
10105ee0:	1802d51e 	bne	r3,zero,10106a38 <___svfprintf_internal_r+0x1180>
10105ee4:	d9402917 	ldw	r5,164(sp)
10105ee8:	0039883a 	mov	fp,zero
10105eec:	2806be26 	beq	r5,zero,101079e8 <___svfprintf_internal_r+0x2130>
10105ef0:	0029883a 	mov	r20,zero
10105ef4:	002d883a 	mov	r22,zero
10105ef8:	dc001e04 	addi	r16,sp,120
10105efc:	a006d0fa 	srli	r3,r20,3
10105f00:	b008977a 	slli	r4,r22,29
10105f04:	b02cd0fa 	srli	r22,r22,3
10105f08:	a50001cc 	andi	r20,r20,7
10105f0c:	a0800c04 	addi	r2,r20,48
10105f10:	843fffc4 	addi	r16,r16,-1
10105f14:	20e8b03a 	or	r20,r4,r3
10105f18:	80800005 	stb	r2,0(r16)
10105f1c:	a586b03a 	or	r3,r20,r22
10105f20:	183ff61e 	bne	r3,zero,10105efc <_gp+0xfffe496c>
10105f24:	90c0004c 	andi	r3,r18,1
10105f28:	18013926 	beq	r3,zero,10106410 <___svfprintf_internal_r+0xb58>
10105f2c:	10803fcc 	andi	r2,r2,255
10105f30:	1080201c 	xori	r2,r2,128
10105f34:	10bfe004 	addi	r2,r2,-128
10105f38:	00c00c04 	movi	r3,48
10105f3c:	10c13426 	beq	r2,r3,10106410 <___svfprintf_internal_r+0xb58>
10105f40:	80ffffc5 	stb	r3,-1(r16)
10105f44:	d8c02817 	ldw	r3,160(sp)
10105f48:	80bfffc4 	addi	r2,r16,-1
10105f4c:	1021883a 	mov	r16,r2
10105f50:	1887c83a 	sub	r3,r3,r2
10105f54:	d8c02e15 	stw	r3,184(sp)
10105f58:	d8802e17 	ldw	r2,184(sp)
10105f5c:	d9002917 	ldw	r4,164(sp)
10105f60:	1100010e 	bge	r2,r4,10105f68 <___svfprintf_internal_r+0x6b0>
10105f64:	2005883a 	mov	r2,r4
10105f68:	d8802a15 	stw	r2,168(sp)
10105f6c:	d8003215 	stw	zero,200(sp)
10105f70:	e7003fcc 	andi	fp,fp,255
10105f74:	e700201c 	xori	fp,fp,128
10105f78:	e73fe004 	addi	fp,fp,-128
10105f7c:	e0000326 	beq	fp,zero,10105f8c <___svfprintf_internal_r+0x6d4>
10105f80:	d8c02a17 	ldw	r3,168(sp)
10105f84:	18c00044 	addi	r3,r3,1
10105f88:	d8c02a15 	stw	r3,168(sp)
10105f8c:	90c0008c 	andi	r3,r18,2
10105f90:	d8c02b15 	stw	r3,172(sp)
10105f94:	18000326 	beq	r3,zero,10105fa4 <___svfprintf_internal_r+0x6ec>
10105f98:	d8c02a17 	ldw	r3,168(sp)
10105f9c:	18c00084 	addi	r3,r3,2
10105fa0:	d8c02a15 	stw	r3,168(sp)
10105fa4:	90c0210c 	andi	r3,r18,132
10105fa8:	d8c03015 	stw	r3,192(sp)
10105fac:	1801a11e 	bne	r3,zero,10106634 <___svfprintf_internal_r+0xd7c>
10105fb0:	d9003117 	ldw	r4,196(sp)
10105fb4:	d8c02a17 	ldw	r3,168(sp)
10105fb8:	20e9c83a 	sub	r20,r4,r3
10105fbc:	05019d0e 	bge	zero,r20,10106634 <___svfprintf_internal_r+0xd7c>
10105fc0:	02400404 	movi	r9,16
10105fc4:	d8c02017 	ldw	r3,128(sp)
10105fc8:	d8801f17 	ldw	r2,124(sp)
10105fcc:	4d051b0e 	bge	r9,r20,1010743c <___svfprintf_internal_r+0x1b84>
10105fd0:	01440474 	movhi	r5,4113
10105fd4:	295df284 	addi	r5,r5,30666
10105fd8:	dc403c15 	stw	r17,240(sp)
10105fdc:	d9403515 	stw	r5,212(sp)
10105fe0:	a023883a 	mov	r17,r20
10105fe4:	482d883a 	mov	r22,r9
10105fe8:	9029883a 	mov	r20,r18
10105fec:	070001c4 	movi	fp,7
10105ff0:	8025883a 	mov	r18,r16
10105ff4:	dc002c17 	ldw	r16,176(sp)
10105ff8:	00000306 	br	10106008 <___svfprintf_internal_r+0x750>
10105ffc:	8c7ffc04 	addi	r17,r17,-16
10106000:	42000204 	addi	r8,r8,8
10106004:	b440130e 	bge	r22,r17,10106054 <___svfprintf_internal_r+0x79c>
10106008:	01040474 	movhi	r4,4113
1010600c:	18c00404 	addi	r3,r3,16
10106010:	10800044 	addi	r2,r2,1
10106014:	211df284 	addi	r4,r4,30666
10106018:	41000015 	stw	r4,0(r8)
1010601c:	45800115 	stw	r22,4(r8)
10106020:	d8c02015 	stw	r3,128(sp)
10106024:	d8801f15 	stw	r2,124(sp)
10106028:	e0bff40e 	bge	fp,r2,10105ffc <_gp+0xfffe4a6c>
1010602c:	d9801e04 	addi	r6,sp,120
10106030:	800b883a 	mov	r5,r16
10106034:	9809883a 	mov	r4,r19
10106038:	010dd600 	call	1010dd60 <__ssprint_r>
1010603c:	103f031e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106040:	8c7ffc04 	addi	r17,r17,-16
10106044:	d8c02017 	ldw	r3,128(sp)
10106048:	d8801f17 	ldw	r2,124(sp)
1010604c:	da000404 	addi	r8,sp,16
10106050:	b47fed16 	blt	r22,r17,10106008 <_gp+0xfffe4a78>
10106054:	9021883a 	mov	r16,r18
10106058:	a025883a 	mov	r18,r20
1010605c:	8829883a 	mov	r20,r17
10106060:	dc403c17 	ldw	r17,240(sp)
10106064:	d9403517 	ldw	r5,212(sp)
10106068:	a0c7883a 	add	r3,r20,r3
1010606c:	10800044 	addi	r2,r2,1
10106070:	41400015 	stw	r5,0(r8)
10106074:	45000115 	stw	r20,4(r8)
10106078:	d8c02015 	stw	r3,128(sp)
1010607c:	d8801f15 	stw	r2,124(sp)
10106080:	010001c4 	movi	r4,7
10106084:	20829f16 	blt	r4,r2,10106b04 <___svfprintf_internal_r+0x124c>
10106088:	df002787 	ldb	fp,158(sp)
1010608c:	42000204 	addi	r8,r8,8
10106090:	e0000c26 	beq	fp,zero,101060c4 <___svfprintf_internal_r+0x80c>
10106094:	d8801f17 	ldw	r2,124(sp)
10106098:	d9002784 	addi	r4,sp,158
1010609c:	18c00044 	addi	r3,r3,1
101060a0:	10800044 	addi	r2,r2,1
101060a4:	41000015 	stw	r4,0(r8)
101060a8:	01000044 	movi	r4,1
101060ac:	41000115 	stw	r4,4(r8)
101060b0:	d8c02015 	stw	r3,128(sp)
101060b4:	d8801f15 	stw	r2,124(sp)
101060b8:	010001c4 	movi	r4,7
101060bc:	20823816 	blt	r4,r2,101069a0 <___svfprintf_internal_r+0x10e8>
101060c0:	42000204 	addi	r8,r8,8
101060c4:	d8802b17 	ldw	r2,172(sp)
101060c8:	10000c26 	beq	r2,zero,101060fc <___svfprintf_internal_r+0x844>
101060cc:	d8801f17 	ldw	r2,124(sp)
101060d0:	d9002704 	addi	r4,sp,156
101060d4:	18c00084 	addi	r3,r3,2
101060d8:	10800044 	addi	r2,r2,1
101060dc:	41000015 	stw	r4,0(r8)
101060e0:	01000084 	movi	r4,2
101060e4:	41000115 	stw	r4,4(r8)
101060e8:	d8c02015 	stw	r3,128(sp)
101060ec:	d8801f15 	stw	r2,124(sp)
101060f0:	010001c4 	movi	r4,7
101060f4:	20823216 	blt	r4,r2,101069c0 <___svfprintf_internal_r+0x1108>
101060f8:	42000204 	addi	r8,r8,8
101060fc:	d9003017 	ldw	r4,192(sp)
10106100:	00802004 	movi	r2,128
10106104:	20819726 	beq	r4,r2,10106764 <___svfprintf_internal_r+0xeac>
10106108:	d9402917 	ldw	r5,164(sp)
1010610c:	d8802e17 	ldw	r2,184(sp)
10106110:	28adc83a 	sub	r22,r5,r2
10106114:	05802f0e 	bge	zero,r22,101061d4 <___svfprintf_internal_r+0x91c>
10106118:	07000404 	movi	fp,16
1010611c:	d8801f17 	ldw	r2,124(sp)
10106120:	e583c00e 	bge	fp,r22,10107024 <___svfprintf_internal_r+0x176c>
10106124:	01440474 	movhi	r5,4113
10106128:	295dee84 	addi	r5,r5,30650
1010612c:	dc402915 	stw	r17,164(sp)
10106130:	d9402b15 	stw	r5,172(sp)
10106134:	b023883a 	mov	r17,r22
10106138:	050001c4 	movi	r20,7
1010613c:	902d883a 	mov	r22,r18
10106140:	8025883a 	mov	r18,r16
10106144:	dc002c17 	ldw	r16,176(sp)
10106148:	00000306 	br	10106158 <___svfprintf_internal_r+0x8a0>
1010614c:	8c7ffc04 	addi	r17,r17,-16
10106150:	42000204 	addi	r8,r8,8
10106154:	e440110e 	bge	fp,r17,1010619c <___svfprintf_internal_r+0x8e4>
10106158:	18c00404 	addi	r3,r3,16
1010615c:	10800044 	addi	r2,r2,1
10106160:	45400015 	stw	r21,0(r8)
10106164:	47000115 	stw	fp,4(r8)
10106168:	d8c02015 	stw	r3,128(sp)
1010616c:	d8801f15 	stw	r2,124(sp)
10106170:	a0bff60e 	bge	r20,r2,1010614c <_gp+0xfffe4bbc>
10106174:	d9801e04 	addi	r6,sp,120
10106178:	800b883a 	mov	r5,r16
1010617c:	9809883a 	mov	r4,r19
10106180:	010dd600 	call	1010dd60 <__ssprint_r>
10106184:	103eb11e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106188:	8c7ffc04 	addi	r17,r17,-16
1010618c:	d8c02017 	ldw	r3,128(sp)
10106190:	d8801f17 	ldw	r2,124(sp)
10106194:	da000404 	addi	r8,sp,16
10106198:	e47fef16 	blt	fp,r17,10106158 <_gp+0xfffe4bc8>
1010619c:	9021883a 	mov	r16,r18
101061a0:	b025883a 	mov	r18,r22
101061a4:	882d883a 	mov	r22,r17
101061a8:	dc402917 	ldw	r17,164(sp)
101061ac:	d9002b17 	ldw	r4,172(sp)
101061b0:	1d87883a 	add	r3,r3,r22
101061b4:	10800044 	addi	r2,r2,1
101061b8:	41000015 	stw	r4,0(r8)
101061bc:	45800115 	stw	r22,4(r8)
101061c0:	d8c02015 	stw	r3,128(sp)
101061c4:	d8801f15 	stw	r2,124(sp)
101061c8:	010001c4 	movi	r4,7
101061cc:	2081ec16 	blt	r4,r2,10106980 <___svfprintf_internal_r+0x10c8>
101061d0:	42000204 	addi	r8,r8,8
101061d4:	9080400c 	andi	r2,r18,256
101061d8:	1001181e 	bne	r2,zero,1010663c <___svfprintf_internal_r+0xd84>
101061dc:	d9402e17 	ldw	r5,184(sp)
101061e0:	d8801f17 	ldw	r2,124(sp)
101061e4:	44000015 	stw	r16,0(r8)
101061e8:	1947883a 	add	r3,r3,r5
101061ec:	10800044 	addi	r2,r2,1
101061f0:	41400115 	stw	r5,4(r8)
101061f4:	d8c02015 	stw	r3,128(sp)
101061f8:	d8801f15 	stw	r2,124(sp)
101061fc:	010001c4 	movi	r4,7
10106200:	2081d116 	blt	r4,r2,10106948 <___svfprintf_internal_r+0x1090>
10106204:	42000204 	addi	r8,r8,8
10106208:	9480010c 	andi	r18,r18,4
1010620c:	90003226 	beq	r18,zero,101062d8 <___svfprintf_internal_r+0xa20>
10106210:	d9403117 	ldw	r5,196(sp)
10106214:	d8802a17 	ldw	r2,168(sp)
10106218:	28a1c83a 	sub	r16,r5,r2
1010621c:	04002e0e 	bge	zero,r16,101062d8 <___svfprintf_internal_r+0xa20>
10106220:	04400404 	movi	r17,16
10106224:	d8801f17 	ldw	r2,124(sp)
10106228:	8c04b90e 	bge	r17,r16,10107510 <___svfprintf_internal_r+0x1c58>
1010622c:	01440474 	movhi	r5,4113
10106230:	295df284 	addi	r5,r5,30666
10106234:	d9403515 	stw	r5,212(sp)
10106238:	048001c4 	movi	r18,7
1010623c:	dd002c17 	ldw	r20,176(sp)
10106240:	00000306 	br	10106250 <___svfprintf_internal_r+0x998>
10106244:	843ffc04 	addi	r16,r16,-16
10106248:	42000204 	addi	r8,r8,8
1010624c:	8c00130e 	bge	r17,r16,1010629c <___svfprintf_internal_r+0x9e4>
10106250:	01040474 	movhi	r4,4113
10106254:	18c00404 	addi	r3,r3,16
10106258:	10800044 	addi	r2,r2,1
1010625c:	211df284 	addi	r4,r4,30666
10106260:	41000015 	stw	r4,0(r8)
10106264:	44400115 	stw	r17,4(r8)
10106268:	d8c02015 	stw	r3,128(sp)
1010626c:	d8801f15 	stw	r2,124(sp)
10106270:	90bff40e 	bge	r18,r2,10106244 <_gp+0xfffe4cb4>
10106274:	d9801e04 	addi	r6,sp,120
10106278:	a00b883a 	mov	r5,r20
1010627c:	9809883a 	mov	r4,r19
10106280:	010dd600 	call	1010dd60 <__ssprint_r>
10106284:	103e711e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106288:	843ffc04 	addi	r16,r16,-16
1010628c:	d8c02017 	ldw	r3,128(sp)
10106290:	d8801f17 	ldw	r2,124(sp)
10106294:	da000404 	addi	r8,sp,16
10106298:	8c3fed16 	blt	r17,r16,10106250 <_gp+0xfffe4cc0>
1010629c:	d9403517 	ldw	r5,212(sp)
101062a0:	1c07883a 	add	r3,r3,r16
101062a4:	10800044 	addi	r2,r2,1
101062a8:	41400015 	stw	r5,0(r8)
101062ac:	44000115 	stw	r16,4(r8)
101062b0:	d8c02015 	stw	r3,128(sp)
101062b4:	d8801f15 	stw	r2,124(sp)
101062b8:	010001c4 	movi	r4,7
101062bc:	2080060e 	bge	r4,r2,101062d8 <___svfprintf_internal_r+0xa20>
101062c0:	d9402c17 	ldw	r5,176(sp)
101062c4:	d9801e04 	addi	r6,sp,120
101062c8:	9809883a 	mov	r4,r19
101062cc:	010dd600 	call	1010dd60 <__ssprint_r>
101062d0:	103e5e1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101062d4:	d8c02017 	ldw	r3,128(sp)
101062d8:	d8803117 	ldw	r2,196(sp)
101062dc:	d9002a17 	ldw	r4,168(sp)
101062e0:	1100010e 	bge	r2,r4,101062e8 <___svfprintf_internal_r+0xa30>
101062e4:	2005883a 	mov	r2,r4
101062e8:	d9402f17 	ldw	r5,188(sp)
101062ec:	288b883a 	add	r5,r5,r2
101062f0:	d9402f15 	stw	r5,188(sp)
101062f4:	18019c1e 	bne	r3,zero,10106968 <___svfprintf_internal_r+0x10b0>
101062f8:	b8800007 	ldb	r2,0(r23)
101062fc:	d8001f15 	stw	zero,124(sp)
10106300:	da000404 	addi	r8,sp,16
10106304:	103d991e 	bne	r2,zero,1010596c <_gp+0xfffe43dc>
10106308:	b821883a 	mov	r16,r23
1010630c:	003daf06 	br	101059cc <_gp+0xfffe443c>
10106310:	18c03fcc 	andi	r3,r3,255
10106314:	1805c71e 	bne	r3,zero,10107a34 <___svfprintf_internal_r+0x217c>
10106318:	94800414 	ori	r18,r18,16
1010631c:	9080080c 	andi	r2,r18,32
10106320:	10020126 	beq	r2,zero,10106b28 <___svfprintf_internal_r+0x1270>
10106324:	d8802d17 	ldw	r2,180(sp)
10106328:	d9002917 	ldw	r4,164(sp)
1010632c:	d8002785 	stb	zero,158(sp)
10106330:	10c00204 	addi	r3,r2,8
10106334:	15000017 	ldw	r20,0(r2)
10106338:	15800117 	ldw	r22,4(r2)
1010633c:	20038e16 	blt	r4,zero,10107178 <___svfprintf_internal_r+0x18c0>
10106340:	013fdfc4 	movi	r4,-129
10106344:	a584b03a 	or	r2,r20,r22
10106348:	d8c02d15 	stw	r3,180(sp)
1010634c:	9124703a 	and	r18,r18,r4
10106350:	0039883a 	mov	fp,zero
10106354:	103eb61e 	bne	r2,zero,10105e30 <_gp+0xfffe48a0>
10106358:	d8802917 	ldw	r2,164(sp)
1010635c:	1002c81e 	bne	r2,zero,10106e80 <___svfprintf_internal_r+0x15c8>
10106360:	d8002915 	stw	zero,164(sp)
10106364:	d8002e15 	stw	zero,184(sp)
10106368:	dc001e04 	addi	r16,sp,120
1010636c:	003efa06 	br	10105f58 <_gp+0xfffe49c8>
10106370:	18c03fcc 	andi	r3,r3,255
10106374:	1805ad1e 	bne	r3,zero,10107a2c <___svfprintf_internal_r+0x2174>
10106378:	01440474 	movhi	r5,4113
1010637c:	295de204 	addi	r5,r5,30600
10106380:	d9403a15 	stw	r5,232(sp)
10106384:	9080080c 	andi	r2,r18,32
10106388:	10006126 	beq	r2,zero,10106510 <___svfprintf_internal_r+0xc58>
1010638c:	d8802d17 	ldw	r2,180(sp)
10106390:	15000017 	ldw	r20,0(r2)
10106394:	15800117 	ldw	r22,4(r2)
10106398:	10800204 	addi	r2,r2,8
1010639c:	d8802d15 	stw	r2,180(sp)
101063a0:	9080004c 	andi	r2,r18,1
101063a4:	10018e26 	beq	r2,zero,101069e0 <___svfprintf_internal_r+0x1128>
101063a8:	a584b03a 	or	r2,r20,r22
101063ac:	10030926 	beq	r2,zero,10106fd4 <___svfprintf_internal_r+0x171c>
101063b0:	d8c02917 	ldw	r3,164(sp)
101063b4:	00800c04 	movi	r2,48
101063b8:	d8802705 	stb	r2,156(sp)
101063bc:	dc402745 	stb	r17,157(sp)
101063c0:	d8002785 	stb	zero,158(sp)
101063c4:	90800094 	ori	r2,r18,2
101063c8:	18048716 	blt	r3,zero,101075e8 <___svfprintf_internal_r+0x1d30>
101063cc:	00bfdfc4 	movi	r2,-129
101063d0:	90a4703a 	and	r18,r18,r2
101063d4:	94800094 	ori	r18,r18,2
101063d8:	0039883a 	mov	fp,zero
101063dc:	d9003a17 	ldw	r4,232(sp)
101063e0:	dc001e04 	addi	r16,sp,120
101063e4:	a08003cc 	andi	r2,r20,15
101063e8:	b006973a 	slli	r3,r22,28
101063ec:	2085883a 	add	r2,r4,r2
101063f0:	a028d13a 	srli	r20,r20,4
101063f4:	10800003 	ldbu	r2,0(r2)
101063f8:	b02cd13a 	srli	r22,r22,4
101063fc:	843fffc4 	addi	r16,r16,-1
10106400:	1d28b03a 	or	r20,r3,r20
10106404:	80800005 	stb	r2,0(r16)
10106408:	a584b03a 	or	r2,r20,r22
1010640c:	103ff51e 	bne	r2,zero,101063e4 <_gp+0xfffe4e54>
10106410:	d8c02817 	ldw	r3,160(sp)
10106414:	1c07c83a 	sub	r3,r3,r16
10106418:	d8c02e15 	stw	r3,184(sp)
1010641c:	003ece06 	br	10105f58 <_gp+0xfffe49c8>
10106420:	d8c02d17 	ldw	r3,180(sp)
10106424:	d9002d17 	ldw	r4,180(sp)
10106428:	d8002785 	stb	zero,158(sp)
1010642c:	18800017 	ldw	r2,0(r3)
10106430:	21000104 	addi	r4,r4,4
10106434:	00c00044 	movi	r3,1
10106438:	d8c02a15 	stw	r3,168(sp)
1010643c:	d8801405 	stb	r2,80(sp)
10106440:	d9002d15 	stw	r4,180(sp)
10106444:	d8c02e15 	stw	r3,184(sp)
10106448:	d8002915 	stw	zero,164(sp)
1010644c:	d8003215 	stw	zero,200(sp)
10106450:	dc001404 	addi	r16,sp,80
10106454:	0039883a 	mov	fp,zero
10106458:	003ecc06 	br	10105f8c <_gp+0xfffe49fc>
1010645c:	18c03fcc 	andi	r3,r3,255
10106460:	183e9226 	beq	r3,zero,10105eac <_gp+0xfffe491c>
10106464:	d9c02785 	stb	r7,158(sp)
10106468:	003e9006 	br	10105eac <_gp+0xfffe491c>
1010646c:	00c00044 	movi	r3,1
10106470:	01c00ac4 	movi	r7,43
10106474:	bc400007 	ldb	r17,0(r23)
10106478:	003d6306 	br	10105a08 <_gp+0xfffe4478>
1010647c:	94800814 	ori	r18,r18,32
10106480:	bc400007 	ldb	r17,0(r23)
10106484:	003d6006 	br	10105a08 <_gp+0xfffe4478>
10106488:	d8c02d17 	ldw	r3,180(sp)
1010648c:	d8002785 	stb	zero,158(sp)
10106490:	1c000017 	ldw	r16,0(r3)
10106494:	1d000104 	addi	r20,r3,4
10106498:	80040f26 	beq	r16,zero,101074d8 <___svfprintf_internal_r+0x1c20>
1010649c:	d9002917 	ldw	r4,164(sp)
101064a0:	2003dc16 	blt	r4,zero,10107414 <___svfprintf_internal_r+0x1b5c>
101064a4:	200d883a 	mov	r6,r4
101064a8:	000b883a 	mov	r5,zero
101064ac:	8009883a 	mov	r4,r16
101064b0:	da003e15 	stw	r8,248(sp)
101064b4:	010bfc40 	call	1010bfc4 <memchr>
101064b8:	da003e17 	ldw	r8,248(sp)
101064bc:	10045826 	beq	r2,zero,10107620 <___svfprintf_internal_r+0x1d68>
101064c0:	1405c83a 	sub	r2,r2,r16
101064c4:	d8802e15 	stw	r2,184(sp)
101064c8:	1003d816 	blt	r2,zero,1010742c <___svfprintf_internal_r+0x1b74>
101064cc:	df002783 	ldbu	fp,158(sp)
101064d0:	d8802a15 	stw	r2,168(sp)
101064d4:	dd002d15 	stw	r20,180(sp)
101064d8:	d8002915 	stw	zero,164(sp)
101064dc:	d8003215 	stw	zero,200(sp)
101064e0:	003ea306 	br	10105f70 <_gp+0xfffe49e0>
101064e4:	18c03fcc 	andi	r3,r3,255
101064e8:	183f8c26 	beq	r3,zero,1010631c <_gp+0xfffe4d8c>
101064ec:	d9c02785 	stb	r7,158(sp)
101064f0:	003f8a06 	br	1010631c <_gp+0xfffe4d8c>
101064f4:	18c03fcc 	andi	r3,r3,255
101064f8:	1805631e 	bne	r3,zero,10107a88 <___svfprintf_internal_r+0x21d0>
101064fc:	01440474 	movhi	r5,4113
10106500:	295de704 	addi	r5,r5,30620
10106504:	d9403a15 	stw	r5,232(sp)
10106508:	9080080c 	andi	r2,r18,32
1010650c:	103f9f1e 	bne	r2,zero,1010638c <_gp+0xfffe4dfc>
10106510:	9080040c 	andi	r2,r18,16
10106514:	10029c26 	beq	r2,zero,10106f88 <___svfprintf_internal_r+0x16d0>
10106518:	d8c02d17 	ldw	r3,180(sp)
1010651c:	002d883a 	mov	r22,zero
10106520:	1d000017 	ldw	r20,0(r3)
10106524:	18c00104 	addi	r3,r3,4
10106528:	d8c02d15 	stw	r3,180(sp)
1010652c:	003f9c06 	br	101063a0 <_gp+0xfffe4e10>
10106530:	94800054 	ori	r18,r18,1
10106534:	bc400007 	ldb	r17,0(r23)
10106538:	003d3306 	br	10105a08 <_gp+0xfffe4478>
1010653c:	38803fcc 	andi	r2,r7,255
10106540:	1080201c 	xori	r2,r2,128
10106544:	10bfe004 	addi	r2,r2,-128
10106548:	1002971e 	bne	r2,zero,10106fa8 <___svfprintf_internal_r+0x16f0>
1010654c:	00c00044 	movi	r3,1
10106550:	01c00804 	movi	r7,32
10106554:	bc400007 	ldb	r17,0(r23)
10106558:	003d2b06 	br	10105a08 <_gp+0xfffe4478>
1010655c:	18c03fcc 	andi	r3,r3,255
10106560:	183e2326 	beq	r3,zero,10105df0 <_gp+0xfffe4860>
10106564:	d9c02785 	stb	r7,158(sp)
10106568:	003e2106 	br	10105df0 <_gp+0xfffe4860>
1010656c:	bc400007 	ldb	r17,0(r23)
10106570:	8a430426 	beq	r17,r9,10107184 <___svfprintf_internal_r+0x18cc>
10106574:	94800414 	ori	r18,r18,16
10106578:	003d2306 	br	10105a08 <_gp+0xfffe4478>
1010657c:	18c03fcc 	andi	r3,r3,255
10106580:	18053f1e 	bne	r3,zero,10107a80 <___svfprintf_internal_r+0x21c8>
10106584:	9080080c 	andi	r2,r18,32
10106588:	10028926 	beq	r2,zero,10106fb0 <___svfprintf_internal_r+0x16f8>
1010658c:	d9402d17 	ldw	r5,180(sp)
10106590:	d9002f17 	ldw	r4,188(sp)
10106594:	28800017 	ldw	r2,0(r5)
10106598:	2007d7fa 	srai	r3,r4,31
1010659c:	29400104 	addi	r5,r5,4
101065a0:	d9402d15 	stw	r5,180(sp)
101065a4:	11000015 	stw	r4,0(r2)
101065a8:	10c00115 	stw	r3,4(r2)
101065ac:	003ced06 	br	10105964 <_gp+0xfffe43d4>
101065b0:	94801014 	ori	r18,r18,64
101065b4:	bc400007 	ldb	r17,0(r23)
101065b8:	003d1306 	br	10105a08 <_gp+0xfffe4478>
101065bc:	01040474 	movhi	r4,4113
101065c0:	211de704 	addi	r4,r4,30620
101065c4:	0039883a 	mov	fp,zero
101065c8:	d9003a15 	stw	r4,232(sp)
101065cc:	04401e04 	movi	r17,120
101065d0:	003f8206 	br	101063dc <_gp+0xfffe4e4c>
101065d4:	18c03fcc 	andi	r3,r3,255
101065d8:	1805221e 	bne	r3,zero,10107a64 <___svfprintf_internal_r+0x21ac>
101065dc:	883d9526 	beq	r17,zero,10105c34 <_gp+0xfffe46a4>
101065e0:	00c00044 	movi	r3,1
101065e4:	d8c02a15 	stw	r3,168(sp)
101065e8:	dc401405 	stb	r17,80(sp)
101065ec:	d8002785 	stb	zero,158(sp)
101065f0:	003f9406 	br	10106444 <_gp+0xfffe4eb4>
101065f4:	01040474 	movhi	r4,4113
101065f8:	211de704 	addi	r4,r4,30620
101065fc:	d9003a15 	stw	r4,232(sp)
10106600:	d8c02d15 	stw	r3,180(sp)
10106604:	1025883a 	mov	r18,r2
10106608:	04401e04 	movi	r17,120
1010660c:	a584b03a 	or	r2,r20,r22
10106610:	1000fa1e 	bne	r2,zero,101069fc <___svfprintf_internal_r+0x1144>
10106614:	0039883a 	mov	fp,zero
10106618:	00800084 	movi	r2,2
1010661c:	10803fcc 	andi	r2,r2,255
10106620:	00c00044 	movi	r3,1
10106624:	10c21626 	beq	r2,r3,10106e80 <___svfprintf_internal_r+0x15c8>
10106628:	00c00084 	movi	r3,2
1010662c:	10fe301e 	bne	r2,r3,10105ef0 <_gp+0xfffe4960>
10106630:	003d7606 	br	10105c0c <_gp+0xfffe467c>
10106634:	d8c02017 	ldw	r3,128(sp)
10106638:	003e9506 	br	10106090 <_gp+0xfffe4b00>
1010663c:	00801944 	movi	r2,101
10106640:	14407c0e 	bge	r2,r17,10106834 <___svfprintf_internal_r+0xf7c>
10106644:	d9003617 	ldw	r4,216(sp)
10106648:	d9403717 	ldw	r5,220(sp)
1010664c:	000d883a 	mov	r6,zero
10106650:	000f883a 	mov	r7,zero
10106654:	d8c03d15 	stw	r3,244(sp)
10106658:	da003e15 	stw	r8,248(sp)
1010665c:	0112a640 	call	10112a64 <__eqdf2>
10106660:	d8c03d17 	ldw	r3,244(sp)
10106664:	da003e17 	ldw	r8,248(sp)
10106668:	1000f51e 	bne	r2,zero,10106a40 <___svfprintf_internal_r+0x1188>
1010666c:	d8801f17 	ldw	r2,124(sp)
10106670:	01040474 	movhi	r4,4113
10106674:	211dee04 	addi	r4,r4,30648
10106678:	18c00044 	addi	r3,r3,1
1010667c:	10800044 	addi	r2,r2,1
10106680:	41000015 	stw	r4,0(r8)
10106684:	01000044 	movi	r4,1
10106688:	41000115 	stw	r4,4(r8)
1010668c:	d8c02015 	stw	r3,128(sp)
10106690:	d8801f15 	stw	r2,124(sp)
10106694:	010001c4 	movi	r4,7
10106698:	20826616 	blt	r4,r2,10107034 <___svfprintf_internal_r+0x177c>
1010669c:	42000204 	addi	r8,r8,8
101066a0:	d8802617 	ldw	r2,152(sp)
101066a4:	d9403317 	ldw	r5,204(sp)
101066a8:	11400216 	blt	r2,r5,101066b4 <___svfprintf_internal_r+0xdfc>
101066ac:	9080004c 	andi	r2,r18,1
101066b0:	103ed526 	beq	r2,zero,10106208 <_gp+0xfffe4c78>
101066b4:	d8803817 	ldw	r2,224(sp)
101066b8:	d9003417 	ldw	r4,208(sp)
101066bc:	d9403817 	ldw	r5,224(sp)
101066c0:	1887883a 	add	r3,r3,r2
101066c4:	d8801f17 	ldw	r2,124(sp)
101066c8:	41000015 	stw	r4,0(r8)
101066cc:	41400115 	stw	r5,4(r8)
101066d0:	10800044 	addi	r2,r2,1
101066d4:	d8c02015 	stw	r3,128(sp)
101066d8:	d8801f15 	stw	r2,124(sp)
101066dc:	010001c4 	movi	r4,7
101066e0:	2082af16 	blt	r4,r2,101071a0 <___svfprintf_internal_r+0x18e8>
101066e4:	42000204 	addi	r8,r8,8
101066e8:	d8803317 	ldw	r2,204(sp)
101066ec:	143fffc4 	addi	r16,r2,-1
101066f0:	043ec50e 	bge	zero,r16,10106208 <_gp+0xfffe4c78>
101066f4:	04400404 	movi	r17,16
101066f8:	d8801f17 	ldw	r2,124(sp)
101066fc:	8c00860e 	bge	r17,r16,10106918 <___svfprintf_internal_r+0x1060>
10106700:	01440474 	movhi	r5,4113
10106704:	295dee84 	addi	r5,r5,30650
10106708:	d9402b15 	stw	r5,172(sp)
1010670c:	058001c4 	movi	r22,7
10106710:	dd002c17 	ldw	r20,176(sp)
10106714:	00000306 	br	10106724 <___svfprintf_internal_r+0xe6c>
10106718:	42000204 	addi	r8,r8,8
1010671c:	843ffc04 	addi	r16,r16,-16
10106720:	8c00800e 	bge	r17,r16,10106924 <___svfprintf_internal_r+0x106c>
10106724:	18c00404 	addi	r3,r3,16
10106728:	10800044 	addi	r2,r2,1
1010672c:	45400015 	stw	r21,0(r8)
10106730:	44400115 	stw	r17,4(r8)
10106734:	d8c02015 	stw	r3,128(sp)
10106738:	d8801f15 	stw	r2,124(sp)
1010673c:	b0bff60e 	bge	r22,r2,10106718 <_gp+0xfffe5188>
10106740:	d9801e04 	addi	r6,sp,120
10106744:	a00b883a 	mov	r5,r20
10106748:	9809883a 	mov	r4,r19
1010674c:	010dd600 	call	1010dd60 <__ssprint_r>
10106750:	103d3e1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106754:	d8c02017 	ldw	r3,128(sp)
10106758:	d8801f17 	ldw	r2,124(sp)
1010675c:	da000404 	addi	r8,sp,16
10106760:	003fee06 	br	1010671c <_gp+0xfffe518c>
10106764:	d9403117 	ldw	r5,196(sp)
10106768:	d8802a17 	ldw	r2,168(sp)
1010676c:	28adc83a 	sub	r22,r5,r2
10106770:	05be650e 	bge	zero,r22,10106108 <_gp+0xfffe4b78>
10106774:	07000404 	movi	fp,16
10106778:	d8801f17 	ldw	r2,124(sp)
1010677c:	e583a20e 	bge	fp,r22,10107608 <___svfprintf_internal_r+0x1d50>
10106780:	01440474 	movhi	r5,4113
10106784:	295dee84 	addi	r5,r5,30650
10106788:	dc403015 	stw	r17,192(sp)
1010678c:	d9402b15 	stw	r5,172(sp)
10106790:	b023883a 	mov	r17,r22
10106794:	050001c4 	movi	r20,7
10106798:	902d883a 	mov	r22,r18
1010679c:	8025883a 	mov	r18,r16
101067a0:	dc002c17 	ldw	r16,176(sp)
101067a4:	00000306 	br	101067b4 <___svfprintf_internal_r+0xefc>
101067a8:	8c7ffc04 	addi	r17,r17,-16
101067ac:	42000204 	addi	r8,r8,8
101067b0:	e440110e 	bge	fp,r17,101067f8 <___svfprintf_internal_r+0xf40>
101067b4:	18c00404 	addi	r3,r3,16
101067b8:	10800044 	addi	r2,r2,1
101067bc:	45400015 	stw	r21,0(r8)
101067c0:	47000115 	stw	fp,4(r8)
101067c4:	d8c02015 	stw	r3,128(sp)
101067c8:	d8801f15 	stw	r2,124(sp)
101067cc:	a0bff60e 	bge	r20,r2,101067a8 <_gp+0xfffe5218>
101067d0:	d9801e04 	addi	r6,sp,120
101067d4:	800b883a 	mov	r5,r16
101067d8:	9809883a 	mov	r4,r19
101067dc:	010dd600 	call	1010dd60 <__ssprint_r>
101067e0:	103d1a1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101067e4:	8c7ffc04 	addi	r17,r17,-16
101067e8:	d8c02017 	ldw	r3,128(sp)
101067ec:	d8801f17 	ldw	r2,124(sp)
101067f0:	da000404 	addi	r8,sp,16
101067f4:	e47fef16 	blt	fp,r17,101067b4 <_gp+0xfffe5224>
101067f8:	9021883a 	mov	r16,r18
101067fc:	b025883a 	mov	r18,r22
10106800:	882d883a 	mov	r22,r17
10106804:	dc403017 	ldw	r17,192(sp)
10106808:	d9002b17 	ldw	r4,172(sp)
1010680c:	1d87883a 	add	r3,r3,r22
10106810:	10800044 	addi	r2,r2,1
10106814:	41000015 	stw	r4,0(r8)
10106818:	45800115 	stw	r22,4(r8)
1010681c:	d8c02015 	stw	r3,128(sp)
10106820:	d8801f15 	stw	r2,124(sp)
10106824:	010001c4 	movi	r4,7
10106828:	20819a16 	blt	r4,r2,10106e94 <___svfprintf_internal_r+0x15dc>
1010682c:	42000204 	addi	r8,r8,8
10106830:	003e3506 	br	10106108 <_gp+0xfffe4b78>
10106834:	d9403317 	ldw	r5,204(sp)
10106838:	00800044 	movi	r2,1
1010683c:	18c00044 	addi	r3,r3,1
10106840:	1141710e 	bge	r2,r5,10106e08 <___svfprintf_internal_r+0x1550>
10106844:	dc401f17 	ldw	r17,124(sp)
10106848:	00800044 	movi	r2,1
1010684c:	40800115 	stw	r2,4(r8)
10106850:	8c400044 	addi	r17,r17,1
10106854:	44000015 	stw	r16,0(r8)
10106858:	d8c02015 	stw	r3,128(sp)
1010685c:	dc401f15 	stw	r17,124(sp)
10106860:	008001c4 	movi	r2,7
10106864:	14417416 	blt	r2,r17,10106e38 <___svfprintf_internal_r+0x1580>
10106868:	42000204 	addi	r8,r8,8
1010686c:	d8803817 	ldw	r2,224(sp)
10106870:	d9003417 	ldw	r4,208(sp)
10106874:	8c400044 	addi	r17,r17,1
10106878:	10c7883a 	add	r3,r2,r3
1010687c:	40800115 	stw	r2,4(r8)
10106880:	41000015 	stw	r4,0(r8)
10106884:	d8c02015 	stw	r3,128(sp)
10106888:	dc401f15 	stw	r17,124(sp)
1010688c:	008001c4 	movi	r2,7
10106890:	14417216 	blt	r2,r17,10106e5c <___svfprintf_internal_r+0x15a4>
10106894:	45800204 	addi	r22,r8,8
10106898:	d9003617 	ldw	r4,216(sp)
1010689c:	d9403717 	ldw	r5,220(sp)
101068a0:	000d883a 	mov	r6,zero
101068a4:	000f883a 	mov	r7,zero
101068a8:	d8c03d15 	stw	r3,244(sp)
101068ac:	0112a640 	call	10112a64 <__eqdf2>
101068b0:	d8c03d17 	ldw	r3,244(sp)
101068b4:	1000b326 	beq	r2,zero,10106b84 <___svfprintf_internal_r+0x12cc>
101068b8:	d9403317 	ldw	r5,204(sp)
101068bc:	84000044 	addi	r16,r16,1
101068c0:	8c400044 	addi	r17,r17,1
101068c4:	28bfffc4 	addi	r2,r5,-1
101068c8:	1887883a 	add	r3,r3,r2
101068cc:	b0800115 	stw	r2,4(r22)
101068d0:	b4000015 	stw	r16,0(r22)
101068d4:	d8c02015 	stw	r3,128(sp)
101068d8:	dc401f15 	stw	r17,124(sp)
101068dc:	008001c4 	movi	r2,7
101068e0:	1440d216 	blt	r2,r17,10106c2c <___svfprintf_internal_r+0x1374>
101068e4:	b5800204 	addi	r22,r22,8
101068e8:	d9003b17 	ldw	r4,236(sp)
101068ec:	df0022c4 	addi	fp,sp,139
101068f0:	8c400044 	addi	r17,r17,1
101068f4:	20c7883a 	add	r3,r4,r3
101068f8:	b7000015 	stw	fp,0(r22)
101068fc:	b1000115 	stw	r4,4(r22)
10106900:	d8c02015 	stw	r3,128(sp)
10106904:	dc401f15 	stw	r17,124(sp)
10106908:	008001c4 	movi	r2,7
1010690c:	14400e16 	blt	r2,r17,10106948 <___svfprintf_internal_r+0x1090>
10106910:	b2000204 	addi	r8,r22,8
10106914:	003e3c06 	br	10106208 <_gp+0xfffe4c78>
10106918:	01040474 	movhi	r4,4113
1010691c:	211dee84 	addi	r4,r4,30650
10106920:	d9002b15 	stw	r4,172(sp)
10106924:	d9002b17 	ldw	r4,172(sp)
10106928:	1c07883a 	add	r3,r3,r16
1010692c:	44000115 	stw	r16,4(r8)
10106930:	41000015 	stw	r4,0(r8)
10106934:	10800044 	addi	r2,r2,1
10106938:	d8c02015 	stw	r3,128(sp)
1010693c:	d8801f15 	stw	r2,124(sp)
10106940:	010001c4 	movi	r4,7
10106944:	20be2f0e 	bge	r4,r2,10106204 <_gp+0xfffe4c74>
10106948:	d9402c17 	ldw	r5,176(sp)
1010694c:	d9801e04 	addi	r6,sp,120
10106950:	9809883a 	mov	r4,r19
10106954:	010dd600 	call	1010dd60 <__ssprint_r>
10106958:	103cbc1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
1010695c:	d8c02017 	ldw	r3,128(sp)
10106960:	da000404 	addi	r8,sp,16
10106964:	003e2806 	br	10106208 <_gp+0xfffe4c78>
10106968:	d9402c17 	ldw	r5,176(sp)
1010696c:	d9801e04 	addi	r6,sp,120
10106970:	9809883a 	mov	r4,r19
10106974:	010dd600 	call	1010dd60 <__ssprint_r>
10106978:	103e5f26 	beq	r2,zero,101062f8 <_gp+0xfffe4d68>
1010697c:	003cb306 	br	10105c4c <_gp+0xfffe46bc>
10106980:	d9402c17 	ldw	r5,176(sp)
10106984:	d9801e04 	addi	r6,sp,120
10106988:	9809883a 	mov	r4,r19
1010698c:	010dd600 	call	1010dd60 <__ssprint_r>
10106990:	103cae1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106994:	d8c02017 	ldw	r3,128(sp)
10106998:	da000404 	addi	r8,sp,16
1010699c:	003e0d06 	br	101061d4 <_gp+0xfffe4c44>
101069a0:	d9402c17 	ldw	r5,176(sp)
101069a4:	d9801e04 	addi	r6,sp,120
101069a8:	9809883a 	mov	r4,r19
101069ac:	010dd600 	call	1010dd60 <__ssprint_r>
101069b0:	103ca61e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101069b4:	d8c02017 	ldw	r3,128(sp)
101069b8:	da000404 	addi	r8,sp,16
101069bc:	003dc106 	br	101060c4 <_gp+0xfffe4b34>
101069c0:	d9402c17 	ldw	r5,176(sp)
101069c4:	d9801e04 	addi	r6,sp,120
101069c8:	9809883a 	mov	r4,r19
101069cc:	010dd600 	call	1010dd60 <__ssprint_r>
101069d0:	103c9e1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101069d4:	d8c02017 	ldw	r3,128(sp)
101069d8:	da000404 	addi	r8,sp,16
101069dc:	003dc706 	br	101060fc <_gp+0xfffe4b6c>
101069e0:	d8802917 	ldw	r2,164(sp)
101069e4:	d8002785 	stb	zero,158(sp)
101069e8:	103f0816 	blt	r2,zero,1010660c <_gp+0xfffe507c>
101069ec:	00ffdfc4 	movi	r3,-129
101069f0:	a584b03a 	or	r2,r20,r22
101069f4:	90e4703a 	and	r18,r18,r3
101069f8:	103c8126 	beq	r2,zero,10105c00 <_gp+0xfffe4670>
101069fc:	0039883a 	mov	fp,zero
10106a00:	003e7606 	br	101063dc <_gp+0xfffe4e4c>
10106a04:	9080040c 	andi	r2,r18,16
10106a08:	10013d26 	beq	r2,zero,10106f00 <___svfprintf_internal_r+0x1648>
10106a0c:	d9002d17 	ldw	r4,180(sp)
10106a10:	d9402917 	ldw	r5,164(sp)
10106a14:	d8002785 	stb	zero,158(sp)
10106a18:	20800104 	addi	r2,r4,4
10106a1c:	25000017 	ldw	r20,0(r4)
10106a20:	002d883a 	mov	r22,zero
10106a24:	28013f16 	blt	r5,zero,10106f24 <___svfprintf_internal_r+0x166c>
10106a28:	00ffdfc4 	movi	r3,-129
10106a2c:	d8802d15 	stw	r2,180(sp)
10106a30:	90e4703a 	and	r18,r18,r3
10106a34:	a03d2b26 	beq	r20,zero,10105ee4 <_gp+0xfffe4954>
10106a38:	0039883a 	mov	fp,zero
10106a3c:	003d2e06 	br	10105ef8 <_gp+0xfffe4968>
10106a40:	dc402617 	ldw	r17,152(sp)
10106a44:	0441830e 	bge	zero,r17,10107054 <___svfprintf_internal_r+0x179c>
10106a48:	dc403217 	ldw	r17,200(sp)
10106a4c:	d8803317 	ldw	r2,204(sp)
10106a50:	1440010e 	bge	r2,r17,10106a58 <___svfprintf_internal_r+0x11a0>
10106a54:	1023883a 	mov	r17,r2
10106a58:	04400a0e 	bge	zero,r17,10106a84 <___svfprintf_internal_r+0x11cc>
10106a5c:	d8801f17 	ldw	r2,124(sp)
10106a60:	1c47883a 	add	r3,r3,r17
10106a64:	44000015 	stw	r16,0(r8)
10106a68:	10800044 	addi	r2,r2,1
10106a6c:	44400115 	stw	r17,4(r8)
10106a70:	d8c02015 	stw	r3,128(sp)
10106a74:	d8801f15 	stw	r2,124(sp)
10106a78:	010001c4 	movi	r4,7
10106a7c:	20827516 	blt	r4,r2,10107454 <___svfprintf_internal_r+0x1b9c>
10106a80:	42000204 	addi	r8,r8,8
10106a84:	88027b16 	blt	r17,zero,10107474 <___svfprintf_internal_r+0x1bbc>
10106a88:	d9003217 	ldw	r4,200(sp)
10106a8c:	2463c83a 	sub	r17,r4,r17
10106a90:	0440990e 	bge	zero,r17,10106cf8 <___svfprintf_internal_r+0x1440>
10106a94:	05800404 	movi	r22,16
10106a98:	d8801f17 	ldw	r2,124(sp)
10106a9c:	b441530e 	bge	r22,r17,10106fec <___svfprintf_internal_r+0x1734>
10106aa0:	01040474 	movhi	r4,4113
10106aa4:	211dee84 	addi	r4,r4,30650
10106aa8:	d9002b15 	stw	r4,172(sp)
10106aac:	070001c4 	movi	fp,7
10106ab0:	dd002c17 	ldw	r20,176(sp)
10106ab4:	00000306 	br	10106ac4 <___svfprintf_internal_r+0x120c>
10106ab8:	42000204 	addi	r8,r8,8
10106abc:	8c7ffc04 	addi	r17,r17,-16
10106ac0:	b4414d0e 	bge	r22,r17,10106ff8 <___svfprintf_internal_r+0x1740>
10106ac4:	18c00404 	addi	r3,r3,16
10106ac8:	10800044 	addi	r2,r2,1
10106acc:	45400015 	stw	r21,0(r8)
10106ad0:	45800115 	stw	r22,4(r8)
10106ad4:	d8c02015 	stw	r3,128(sp)
10106ad8:	d8801f15 	stw	r2,124(sp)
10106adc:	e0bff60e 	bge	fp,r2,10106ab8 <_gp+0xfffe5528>
10106ae0:	d9801e04 	addi	r6,sp,120
10106ae4:	a00b883a 	mov	r5,r20
10106ae8:	9809883a 	mov	r4,r19
10106aec:	010dd600 	call	1010dd60 <__ssprint_r>
10106af0:	103c561e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106af4:	d8c02017 	ldw	r3,128(sp)
10106af8:	d8801f17 	ldw	r2,124(sp)
10106afc:	da000404 	addi	r8,sp,16
10106b00:	003fee06 	br	10106abc <_gp+0xfffe552c>
10106b04:	d9402c17 	ldw	r5,176(sp)
10106b08:	d9801e04 	addi	r6,sp,120
10106b0c:	9809883a 	mov	r4,r19
10106b10:	010dd600 	call	1010dd60 <__ssprint_r>
10106b14:	103c4d1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106b18:	d8c02017 	ldw	r3,128(sp)
10106b1c:	df002787 	ldb	fp,158(sp)
10106b20:	da000404 	addi	r8,sp,16
10106b24:	003d5a06 	br	10106090 <_gp+0xfffe4b00>
10106b28:	9080040c 	andi	r2,r18,16
10106b2c:	10005c26 	beq	r2,zero,10106ca0 <___svfprintf_internal_r+0x13e8>
10106b30:	d9402d17 	ldw	r5,180(sp)
10106b34:	d8c02917 	ldw	r3,164(sp)
10106b38:	d8002785 	stb	zero,158(sp)
10106b3c:	28800104 	addi	r2,r5,4
10106b40:	2d000017 	ldw	r20,0(r5)
10106b44:	002d883a 	mov	r22,zero
10106b48:	18005e16 	blt	r3,zero,10106cc4 <___svfprintf_internal_r+0x140c>
10106b4c:	00ffdfc4 	movi	r3,-129
10106b50:	d8802d15 	stw	r2,180(sp)
10106b54:	90e4703a 	and	r18,r18,r3
10106b58:	0039883a 	mov	fp,zero
10106b5c:	a03dfe26 	beq	r20,zero,10106358 <_gp+0xfffe4dc8>
10106b60:	00800244 	movi	r2,9
10106b64:	153cb336 	bltu	r2,r20,10105e34 <_gp+0xfffe48a4>
10106b68:	a5000c04 	addi	r20,r20,48
10106b6c:	dc001dc4 	addi	r16,sp,119
10106b70:	dd001dc5 	stb	r20,119(sp)
10106b74:	d8c02817 	ldw	r3,160(sp)
10106b78:	1c07c83a 	sub	r3,r3,r16
10106b7c:	d8c02e15 	stw	r3,184(sp)
10106b80:	003cf506 	br	10105f58 <_gp+0xfffe49c8>
10106b84:	d8803317 	ldw	r2,204(sp)
10106b88:	143fffc4 	addi	r16,r2,-1
10106b8c:	043f560e 	bge	zero,r16,101068e8 <_gp+0xfffe5358>
10106b90:	07000404 	movi	fp,16
10106b94:	e403530e 	bge	fp,r16,101078e4 <___svfprintf_internal_r+0x202c>
10106b98:	01440474 	movhi	r5,4113
10106b9c:	295dee84 	addi	r5,r5,30650
10106ba0:	d9402b15 	stw	r5,172(sp)
10106ba4:	01c001c4 	movi	r7,7
10106ba8:	dd002c17 	ldw	r20,176(sp)
10106bac:	00000306 	br	10106bbc <___svfprintf_internal_r+0x1304>
10106bb0:	843ffc04 	addi	r16,r16,-16
10106bb4:	b5800204 	addi	r22,r22,8
10106bb8:	e400130e 	bge	fp,r16,10106c08 <___svfprintf_internal_r+0x1350>
10106bbc:	18c00404 	addi	r3,r3,16
10106bc0:	8c400044 	addi	r17,r17,1
10106bc4:	b5400015 	stw	r21,0(r22)
10106bc8:	b7000115 	stw	fp,4(r22)
10106bcc:	d8c02015 	stw	r3,128(sp)
10106bd0:	dc401f15 	stw	r17,124(sp)
10106bd4:	3c7ff60e 	bge	r7,r17,10106bb0 <_gp+0xfffe5620>
10106bd8:	d9801e04 	addi	r6,sp,120
10106bdc:	a00b883a 	mov	r5,r20
10106be0:	9809883a 	mov	r4,r19
10106be4:	d9c03d15 	stw	r7,244(sp)
10106be8:	010dd600 	call	1010dd60 <__ssprint_r>
10106bec:	d9c03d17 	ldw	r7,244(sp)
10106bf0:	103c161e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106bf4:	843ffc04 	addi	r16,r16,-16
10106bf8:	d8c02017 	ldw	r3,128(sp)
10106bfc:	dc401f17 	ldw	r17,124(sp)
10106c00:	dd800404 	addi	r22,sp,16
10106c04:	e43fed16 	blt	fp,r16,10106bbc <_gp+0xfffe562c>
10106c08:	d8802b17 	ldw	r2,172(sp)
10106c0c:	1c07883a 	add	r3,r3,r16
10106c10:	8c400044 	addi	r17,r17,1
10106c14:	b0800015 	stw	r2,0(r22)
10106c18:	b4000115 	stw	r16,4(r22)
10106c1c:	d8c02015 	stw	r3,128(sp)
10106c20:	dc401f15 	stw	r17,124(sp)
10106c24:	008001c4 	movi	r2,7
10106c28:	147f2e0e 	bge	r2,r17,101068e4 <_gp+0xfffe5354>
10106c2c:	d9402c17 	ldw	r5,176(sp)
10106c30:	d9801e04 	addi	r6,sp,120
10106c34:	9809883a 	mov	r4,r19
10106c38:	010dd600 	call	1010dd60 <__ssprint_r>
10106c3c:	103c031e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106c40:	d8c02017 	ldw	r3,128(sp)
10106c44:	dc401f17 	ldw	r17,124(sp)
10106c48:	dd800404 	addi	r22,sp,16
10106c4c:	003f2606 	br	101068e8 <_gp+0xfffe5358>
10106c50:	9080040c 	andi	r2,r18,16
10106c54:	1000c326 	beq	r2,zero,10106f64 <___svfprintf_internal_r+0x16ac>
10106c58:	d8802d17 	ldw	r2,180(sp)
10106c5c:	15000017 	ldw	r20,0(r2)
10106c60:	10800104 	addi	r2,r2,4
10106c64:	d8802d15 	stw	r2,180(sp)
10106c68:	a02dd7fa 	srai	r22,r20,31
10106c6c:	b005883a 	mov	r2,r22
10106c70:	103c680e 	bge	r2,zero,10105e14 <_gp+0xfffe4884>
10106c74:	0529c83a 	sub	r20,zero,r20
10106c78:	a004c03a 	cmpne	r2,r20,zero
10106c7c:	05adc83a 	sub	r22,zero,r22
10106c80:	b0adc83a 	sub	r22,r22,r2
10106c84:	d8802917 	ldw	r2,164(sp)
10106c88:	07000b44 	movi	fp,45
10106c8c:	df002785 	stb	fp,158(sp)
10106c90:	10022e16 	blt	r2,zero,1010754c <___svfprintf_internal_r+0x1c94>
10106c94:	00bfdfc4 	movi	r2,-129
10106c98:	90a4703a 	and	r18,r18,r2
10106c9c:	003c6406 	br	10105e30 <_gp+0xfffe48a0>
10106ca0:	9080100c 	andi	r2,r18,64
10106ca4:	d8002785 	stb	zero,158(sp)
10106ca8:	10012526 	beq	r2,zero,10107140 <___svfprintf_internal_r+0x1888>
10106cac:	d9002d17 	ldw	r4,180(sp)
10106cb0:	d9402917 	ldw	r5,164(sp)
10106cb4:	002d883a 	mov	r22,zero
10106cb8:	20800104 	addi	r2,r4,4
10106cbc:	2500000b 	ldhu	r20,0(r4)
10106cc0:	283fa20e 	bge	r5,zero,10106b4c <_gp+0xfffe55bc>
10106cc4:	d8802d15 	stw	r2,180(sp)
10106cc8:	0039883a 	mov	fp,zero
10106ccc:	a584b03a 	or	r2,r20,r22
10106cd0:	103c571e 	bne	r2,zero,10105e30 <_gp+0xfffe48a0>
10106cd4:	00800044 	movi	r2,1
10106cd8:	003e5006 	br	1010661c <_gp+0xfffe508c>
10106cdc:	d9402c17 	ldw	r5,176(sp)
10106ce0:	d9801e04 	addi	r6,sp,120
10106ce4:	9809883a 	mov	r4,r19
10106ce8:	010dd600 	call	1010dd60 <__ssprint_r>
10106cec:	103bd71e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106cf0:	d8c02017 	ldw	r3,128(sp)
10106cf4:	da000404 	addi	r8,sp,16
10106cf8:	d9003217 	ldw	r4,200(sp)
10106cfc:	d8802617 	ldw	r2,152(sp)
10106d00:	d9403317 	ldw	r5,204(sp)
10106d04:	8123883a 	add	r17,r16,r4
10106d08:	11400216 	blt	r2,r5,10106d14 <___svfprintf_internal_r+0x145c>
10106d0c:	9100004c 	andi	r4,r18,1
10106d10:	20000d26 	beq	r4,zero,10106d48 <___svfprintf_internal_r+0x1490>
10106d14:	d9003817 	ldw	r4,224(sp)
10106d18:	d9403417 	ldw	r5,208(sp)
10106d1c:	1907883a 	add	r3,r3,r4
10106d20:	d9001f17 	ldw	r4,124(sp)
10106d24:	41400015 	stw	r5,0(r8)
10106d28:	d9403817 	ldw	r5,224(sp)
10106d2c:	21000044 	addi	r4,r4,1
10106d30:	d8c02015 	stw	r3,128(sp)
10106d34:	41400115 	stw	r5,4(r8)
10106d38:	d9001f15 	stw	r4,124(sp)
10106d3c:	014001c4 	movi	r5,7
10106d40:	2901dc16 	blt	r5,r4,101074b4 <___svfprintf_internal_r+0x1bfc>
10106d44:	42000204 	addi	r8,r8,8
10106d48:	d9003317 	ldw	r4,204(sp)
10106d4c:	8121883a 	add	r16,r16,r4
10106d50:	2085c83a 	sub	r2,r4,r2
10106d54:	8461c83a 	sub	r16,r16,r17
10106d58:	1400010e 	bge	r2,r16,10106d60 <___svfprintf_internal_r+0x14a8>
10106d5c:	1021883a 	mov	r16,r2
10106d60:	04000a0e 	bge	zero,r16,10106d8c <___svfprintf_internal_r+0x14d4>
10106d64:	d9001f17 	ldw	r4,124(sp)
10106d68:	1c07883a 	add	r3,r3,r16
10106d6c:	44400015 	stw	r17,0(r8)
10106d70:	21000044 	addi	r4,r4,1
10106d74:	44000115 	stw	r16,4(r8)
10106d78:	d8c02015 	stw	r3,128(sp)
10106d7c:	d9001f15 	stw	r4,124(sp)
10106d80:	014001c4 	movi	r5,7
10106d84:	2901e616 	blt	r5,r4,10107520 <___svfprintf_internal_r+0x1c68>
10106d88:	42000204 	addi	r8,r8,8
10106d8c:	8001f616 	blt	r16,zero,10107568 <___svfprintf_internal_r+0x1cb0>
10106d90:	1421c83a 	sub	r16,r2,r16
10106d94:	043d1c0e 	bge	zero,r16,10106208 <_gp+0xfffe4c78>
10106d98:	04400404 	movi	r17,16
10106d9c:	d8801f17 	ldw	r2,124(sp)
10106da0:	8c3edd0e 	bge	r17,r16,10106918 <_gp+0xfffe5388>
10106da4:	01440474 	movhi	r5,4113
10106da8:	295dee84 	addi	r5,r5,30650
10106dac:	d9402b15 	stw	r5,172(sp)
10106db0:	058001c4 	movi	r22,7
10106db4:	dd002c17 	ldw	r20,176(sp)
10106db8:	00000306 	br	10106dc8 <___svfprintf_internal_r+0x1510>
10106dbc:	42000204 	addi	r8,r8,8
10106dc0:	843ffc04 	addi	r16,r16,-16
10106dc4:	8c3ed70e 	bge	r17,r16,10106924 <_gp+0xfffe5394>
10106dc8:	18c00404 	addi	r3,r3,16
10106dcc:	10800044 	addi	r2,r2,1
10106dd0:	45400015 	stw	r21,0(r8)
10106dd4:	44400115 	stw	r17,4(r8)
10106dd8:	d8c02015 	stw	r3,128(sp)
10106ddc:	d8801f15 	stw	r2,124(sp)
10106de0:	b0bff60e 	bge	r22,r2,10106dbc <_gp+0xfffe582c>
10106de4:	d9801e04 	addi	r6,sp,120
10106de8:	a00b883a 	mov	r5,r20
10106dec:	9809883a 	mov	r4,r19
10106df0:	010dd600 	call	1010dd60 <__ssprint_r>
10106df4:	103b951e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106df8:	d8c02017 	ldw	r3,128(sp)
10106dfc:	d8801f17 	ldw	r2,124(sp)
10106e00:	da000404 	addi	r8,sp,16
10106e04:	003fee06 	br	10106dc0 <_gp+0xfffe5830>
10106e08:	9088703a 	and	r4,r18,r2
10106e0c:	203e8d1e 	bne	r4,zero,10106844 <_gp+0xfffe52b4>
10106e10:	dc401f17 	ldw	r17,124(sp)
10106e14:	40800115 	stw	r2,4(r8)
10106e18:	44000015 	stw	r16,0(r8)
10106e1c:	8c400044 	addi	r17,r17,1
10106e20:	d8c02015 	stw	r3,128(sp)
10106e24:	dc401f15 	stw	r17,124(sp)
10106e28:	008001c4 	movi	r2,7
10106e2c:	147f7f16 	blt	r2,r17,10106c2c <_gp+0xfffe569c>
10106e30:	45800204 	addi	r22,r8,8
10106e34:	003eac06 	br	101068e8 <_gp+0xfffe5358>
10106e38:	d9402c17 	ldw	r5,176(sp)
10106e3c:	d9801e04 	addi	r6,sp,120
10106e40:	9809883a 	mov	r4,r19
10106e44:	010dd600 	call	1010dd60 <__ssprint_r>
10106e48:	103b801e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106e4c:	d8c02017 	ldw	r3,128(sp)
10106e50:	dc401f17 	ldw	r17,124(sp)
10106e54:	da000404 	addi	r8,sp,16
10106e58:	003e8406 	br	1010686c <_gp+0xfffe52dc>
10106e5c:	d9402c17 	ldw	r5,176(sp)
10106e60:	d9801e04 	addi	r6,sp,120
10106e64:	9809883a 	mov	r4,r19
10106e68:	010dd600 	call	1010dd60 <__ssprint_r>
10106e6c:	103b771e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106e70:	d8c02017 	ldw	r3,128(sp)
10106e74:	dc401f17 	ldw	r17,124(sp)
10106e78:	dd800404 	addi	r22,sp,16
10106e7c:	003e8606 	br	10106898 <_gp+0xfffe5308>
10106e80:	0029883a 	mov	r20,zero
10106e84:	a5000c04 	addi	r20,r20,48
10106e88:	dc001dc4 	addi	r16,sp,119
10106e8c:	dd001dc5 	stb	r20,119(sp)
10106e90:	003f3806 	br	10106b74 <_gp+0xfffe55e4>
10106e94:	d9402c17 	ldw	r5,176(sp)
10106e98:	d9801e04 	addi	r6,sp,120
10106e9c:	9809883a 	mov	r4,r19
10106ea0:	010dd600 	call	1010dd60 <__ssprint_r>
10106ea4:	103b691e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10106ea8:	d8c02017 	ldw	r3,128(sp)
10106eac:	da000404 	addi	r8,sp,16
10106eb0:	003c9506 	br	10106108 <_gp+0xfffe4b78>
10106eb4:	d9003617 	ldw	r4,216(sp)
10106eb8:	d9403717 	ldw	r5,220(sp)
10106ebc:	da003e15 	stw	r8,248(sp)
10106ec0:	010d90c0 	call	1010d90c <__fpclassifyd>
10106ec4:	da003e17 	ldw	r8,248(sp)
10106ec8:	1000bd1e 	bne	r2,zero,101071c0 <___svfprintf_internal_r+0x1908>
10106ecc:	008011c4 	movi	r2,71
10106ed0:	14411e0e 	bge	r2,r17,1010734c <___svfprintf_internal_r+0x1a94>
10106ed4:	04040474 	movhi	r16,4113
10106ed8:	841de104 	addi	r16,r16,30596
10106edc:	00c000c4 	movi	r3,3
10106ee0:	00bfdfc4 	movi	r2,-129
10106ee4:	d8c02a15 	stw	r3,168(sp)
10106ee8:	90a4703a 	and	r18,r18,r2
10106eec:	df002783 	ldbu	fp,158(sp)
10106ef0:	d8c02e15 	stw	r3,184(sp)
10106ef4:	d8002915 	stw	zero,164(sp)
10106ef8:	d8003215 	stw	zero,200(sp)
10106efc:	003c1c06 	br	10105f70 <_gp+0xfffe49e0>
10106f00:	9080100c 	andi	r2,r18,64
10106f04:	d8002785 	stb	zero,158(sp)
10106f08:	10009426 	beq	r2,zero,1010715c <___svfprintf_internal_r+0x18a4>
10106f0c:	d8c02d17 	ldw	r3,180(sp)
10106f10:	d9002917 	ldw	r4,164(sp)
10106f14:	002d883a 	mov	r22,zero
10106f18:	18800104 	addi	r2,r3,4
10106f1c:	1d00000b 	ldhu	r20,0(r3)
10106f20:	203ec10e 	bge	r4,zero,10106a28 <_gp+0xfffe5498>
10106f24:	a586b03a 	or	r3,r20,r22
10106f28:	d8802d15 	stw	r2,180(sp)
10106f2c:	183ec21e 	bne	r3,zero,10106a38 <_gp+0xfffe54a8>
10106f30:	0039883a 	mov	fp,zero
10106f34:	0005883a 	mov	r2,zero
10106f38:	003db806 	br	1010661c <_gp+0xfffe508c>
10106f3c:	d8802d17 	ldw	r2,180(sp)
10106f40:	d8c02d17 	ldw	r3,180(sp)
10106f44:	d9002d17 	ldw	r4,180(sp)
10106f48:	10800017 	ldw	r2,0(r2)
10106f4c:	18c00117 	ldw	r3,4(r3)
10106f50:	21000204 	addi	r4,r4,8
10106f54:	d8803615 	stw	r2,216(sp)
10106f58:	d8c03715 	stw	r3,220(sp)
10106f5c:	d9002d15 	stw	r4,180(sp)
10106f60:	003b8206 	br	10105d6c <_gp+0xfffe47dc>
10106f64:	9080100c 	andi	r2,r18,64
10106f68:	10010726 	beq	r2,zero,10107388 <___svfprintf_internal_r+0x1ad0>
10106f6c:	d8c02d17 	ldw	r3,180(sp)
10106f70:	1d00000f 	ldh	r20,0(r3)
10106f74:	18c00104 	addi	r3,r3,4
10106f78:	d8c02d15 	stw	r3,180(sp)
10106f7c:	a02dd7fa 	srai	r22,r20,31
10106f80:	b005883a 	mov	r2,r22
10106f84:	003ba206 	br	10105e10 <_gp+0xfffe4880>
10106f88:	9080100c 	andi	r2,r18,64
10106f8c:	10010526 	beq	r2,zero,101073a4 <___svfprintf_internal_r+0x1aec>
10106f90:	d9002d17 	ldw	r4,180(sp)
10106f94:	002d883a 	mov	r22,zero
10106f98:	2500000b 	ldhu	r20,0(r4)
10106f9c:	21000104 	addi	r4,r4,4
10106fa0:	d9002d15 	stw	r4,180(sp)
10106fa4:	003cfe06 	br	101063a0 <_gp+0xfffe4e10>
10106fa8:	bc400007 	ldb	r17,0(r23)
10106fac:	003a9606 	br	10105a08 <_gp+0xfffe4478>
10106fb0:	9080040c 	andi	r2,r18,16
10106fb4:	10010126 	beq	r2,zero,101073bc <___svfprintf_internal_r+0x1b04>
10106fb8:	d9402d17 	ldw	r5,180(sp)
10106fbc:	d8c02f17 	ldw	r3,188(sp)
10106fc0:	28800017 	ldw	r2,0(r5)
10106fc4:	29400104 	addi	r5,r5,4
10106fc8:	d9402d15 	stw	r5,180(sp)
10106fcc:	10c00015 	stw	r3,0(r2)
10106fd0:	003a6406 	br	10105964 <_gp+0xfffe43d4>
10106fd4:	d9002917 	ldw	r4,164(sp)
10106fd8:	d8002785 	stb	zero,158(sp)
10106fdc:	203d8d16 	blt	r4,zero,10106614 <_gp+0xfffe5084>
10106fe0:	00bfdfc4 	movi	r2,-129
10106fe4:	90a4703a 	and	r18,r18,r2
10106fe8:	003b0506 	br	10105c00 <_gp+0xfffe4670>
10106fec:	01440474 	movhi	r5,4113
10106ff0:	295dee84 	addi	r5,r5,30650
10106ff4:	d9402b15 	stw	r5,172(sp)
10106ff8:	d9402b17 	ldw	r5,172(sp)
10106ffc:	1c47883a 	add	r3,r3,r17
10107000:	10800044 	addi	r2,r2,1
10107004:	41400015 	stw	r5,0(r8)
10107008:	44400115 	stw	r17,4(r8)
1010700c:	d8c02015 	stw	r3,128(sp)
10107010:	d8801f15 	stw	r2,124(sp)
10107014:	010001c4 	movi	r4,7
10107018:	20bf3016 	blt	r4,r2,10106cdc <_gp+0xfffe574c>
1010701c:	42000204 	addi	r8,r8,8
10107020:	003f3506 	br	10106cf8 <_gp+0xfffe5768>
10107024:	01040474 	movhi	r4,4113
10107028:	211dee84 	addi	r4,r4,30650
1010702c:	d9002b15 	stw	r4,172(sp)
10107030:	003c5e06 	br	101061ac <_gp+0xfffe4c1c>
10107034:	d9402c17 	ldw	r5,176(sp)
10107038:	d9801e04 	addi	r6,sp,120
1010703c:	9809883a 	mov	r4,r19
10107040:	010dd600 	call	1010dd60 <__ssprint_r>
10107044:	103b011e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10107048:	d8c02017 	ldw	r3,128(sp)
1010704c:	da000404 	addi	r8,sp,16
10107050:	003d9306 	br	101066a0 <_gp+0xfffe5110>
10107054:	d8801f17 	ldw	r2,124(sp)
10107058:	01440474 	movhi	r5,4113
1010705c:	01000044 	movi	r4,1
10107060:	18c00044 	addi	r3,r3,1
10107064:	10800044 	addi	r2,r2,1
10107068:	295dee04 	addi	r5,r5,30648
1010706c:	41000115 	stw	r4,4(r8)
10107070:	41400015 	stw	r5,0(r8)
10107074:	d8c02015 	stw	r3,128(sp)
10107078:	d8801f15 	stw	r2,124(sp)
1010707c:	010001c4 	movi	r4,7
10107080:	2080b516 	blt	r4,r2,10107358 <___svfprintf_internal_r+0x1aa0>
10107084:	42000204 	addi	r8,r8,8
10107088:	8800041e 	bne	r17,zero,1010709c <___svfprintf_internal_r+0x17e4>
1010708c:	d8803317 	ldw	r2,204(sp)
10107090:	1000021e 	bne	r2,zero,1010709c <___svfprintf_internal_r+0x17e4>
10107094:	9080004c 	andi	r2,r18,1
10107098:	103c5b26 	beq	r2,zero,10106208 <_gp+0xfffe4c78>
1010709c:	d9003817 	ldw	r4,224(sp)
101070a0:	d8801f17 	ldw	r2,124(sp)
101070a4:	d9403417 	ldw	r5,208(sp)
101070a8:	20c7883a 	add	r3,r4,r3
101070ac:	10800044 	addi	r2,r2,1
101070b0:	41000115 	stw	r4,4(r8)
101070b4:	41400015 	stw	r5,0(r8)
101070b8:	d8c02015 	stw	r3,128(sp)
101070bc:	d8801f15 	stw	r2,124(sp)
101070c0:	010001c4 	movi	r4,7
101070c4:	20818016 	blt	r4,r2,101076c8 <___svfprintf_internal_r+0x1e10>
101070c8:	42000204 	addi	r8,r8,8
101070cc:	0463c83a 	sub	r17,zero,r17
101070d0:	0440cb0e 	bge	zero,r17,10107400 <___svfprintf_internal_r+0x1b48>
101070d4:	05800404 	movi	r22,16
101070d8:	b440e80e 	bge	r22,r17,1010747c <___svfprintf_internal_r+0x1bc4>
101070dc:	01440474 	movhi	r5,4113
101070e0:	295dee84 	addi	r5,r5,30650
101070e4:	d9402b15 	stw	r5,172(sp)
101070e8:	070001c4 	movi	fp,7
101070ec:	dd002c17 	ldw	r20,176(sp)
101070f0:	00000306 	br	10107100 <___svfprintf_internal_r+0x1848>
101070f4:	42000204 	addi	r8,r8,8
101070f8:	8c7ffc04 	addi	r17,r17,-16
101070fc:	b440e20e 	bge	r22,r17,10107488 <___svfprintf_internal_r+0x1bd0>
10107100:	18c00404 	addi	r3,r3,16
10107104:	10800044 	addi	r2,r2,1
10107108:	45400015 	stw	r21,0(r8)
1010710c:	45800115 	stw	r22,4(r8)
10107110:	d8c02015 	stw	r3,128(sp)
10107114:	d8801f15 	stw	r2,124(sp)
10107118:	e0bff60e 	bge	fp,r2,101070f4 <_gp+0xfffe5b64>
1010711c:	d9801e04 	addi	r6,sp,120
10107120:	a00b883a 	mov	r5,r20
10107124:	9809883a 	mov	r4,r19
10107128:	010dd600 	call	1010dd60 <__ssprint_r>
1010712c:	103ac71e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10107130:	d8c02017 	ldw	r3,128(sp)
10107134:	d8801f17 	ldw	r2,124(sp)
10107138:	da000404 	addi	r8,sp,16
1010713c:	003fee06 	br	101070f8 <_gp+0xfffe5b68>
10107140:	d8c02d17 	ldw	r3,180(sp)
10107144:	d9002917 	ldw	r4,164(sp)
10107148:	002d883a 	mov	r22,zero
1010714c:	18800104 	addi	r2,r3,4
10107150:	1d000017 	ldw	r20,0(r3)
10107154:	203e7d0e 	bge	r4,zero,10106b4c <_gp+0xfffe55bc>
10107158:	003eda06 	br	10106cc4 <_gp+0xfffe5734>
1010715c:	d9402d17 	ldw	r5,180(sp)
10107160:	d8c02917 	ldw	r3,164(sp)
10107164:	002d883a 	mov	r22,zero
10107168:	28800104 	addi	r2,r5,4
1010716c:	2d000017 	ldw	r20,0(r5)
10107170:	183e2d0e 	bge	r3,zero,10106a28 <_gp+0xfffe5498>
10107174:	003f6b06 	br	10106f24 <_gp+0xfffe5994>
10107178:	d8c02d15 	stw	r3,180(sp)
1010717c:	0039883a 	mov	fp,zero
10107180:	003ed206 	br	10106ccc <_gp+0xfffe573c>
10107184:	bc400043 	ldbu	r17,1(r23)
10107188:	94800814 	ori	r18,r18,32
1010718c:	bdc00044 	addi	r23,r23,1
10107190:	8c403fcc 	andi	r17,r17,255
10107194:	8c40201c 	xori	r17,r17,128
10107198:	8c7fe004 	addi	r17,r17,-128
1010719c:	003a1a06 	br	10105a08 <_gp+0xfffe4478>
101071a0:	d9402c17 	ldw	r5,176(sp)
101071a4:	d9801e04 	addi	r6,sp,120
101071a8:	9809883a 	mov	r4,r19
101071ac:	010dd600 	call	1010dd60 <__ssprint_r>
101071b0:	103aa61e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101071b4:	d8c02017 	ldw	r3,128(sp)
101071b8:	da000404 	addi	r8,sp,16
101071bc:	003d4a06 	br	101066e8 <_gp+0xfffe5158>
101071c0:	d9002917 	ldw	r4,164(sp)
101071c4:	05bff7c4 	movi	r22,-33
101071c8:	00bfffc4 	movi	r2,-1
101071cc:	8dac703a 	and	r22,r17,r22
101071d0:	20806a26 	beq	r4,r2,1010737c <___svfprintf_internal_r+0x1ac4>
101071d4:	008011c4 	movi	r2,71
101071d8:	b0813726 	beq	r22,r2,101076b8 <___svfprintf_internal_r+0x1e00>
101071dc:	d9003717 	ldw	r4,220(sp)
101071e0:	90c04014 	ori	r3,r18,256
101071e4:	d8c02b15 	stw	r3,172(sp)
101071e8:	20015d16 	blt	r4,zero,10107760 <___svfprintf_internal_r+0x1ea8>
101071ec:	dd003717 	ldw	r20,220(sp)
101071f0:	d8002a05 	stb	zero,168(sp)
101071f4:	00801984 	movi	r2,102
101071f8:	88814026 	beq	r17,r2,101076fc <___svfprintf_internal_r+0x1e44>
101071fc:	00801184 	movi	r2,70
10107200:	88817126 	beq	r17,r2,101077c8 <___svfprintf_internal_r+0x1f10>
10107204:	00801144 	movi	r2,69
10107208:	b0816226 	beq	r22,r2,10107794 <___svfprintf_internal_r+0x1edc>
1010720c:	d8c02917 	ldw	r3,164(sp)
10107210:	d8802104 	addi	r2,sp,132
10107214:	d8800315 	stw	r2,12(sp)
10107218:	d9403617 	ldw	r5,216(sp)
1010721c:	d8802504 	addi	r2,sp,148
10107220:	d8800215 	stw	r2,8(sp)
10107224:	d8802604 	addi	r2,sp,152
10107228:	d8c00015 	stw	r3,0(sp)
1010722c:	d8800115 	stw	r2,4(sp)
10107230:	01c00084 	movi	r7,2
10107234:	a00d883a 	mov	r6,r20
10107238:	9809883a 	mov	r4,r19
1010723c:	d8c03d15 	stw	r3,244(sp)
10107240:	da003e15 	stw	r8,248(sp)
10107244:	010a1e80 	call	1010a1e8 <_dtoa_r>
10107248:	1021883a 	mov	r16,r2
1010724c:	008019c4 	movi	r2,103
10107250:	d8c03d17 	ldw	r3,244(sp)
10107254:	da003e17 	ldw	r8,248(sp)
10107258:	8880e726 	beq	r17,r2,101075f8 <___svfprintf_internal_r+0x1d40>
1010725c:	008011c4 	movi	r2,71
10107260:	8880d426 	beq	r17,r2,101075b4 <___svfprintf_internal_r+0x1cfc>
10107264:	80f9883a 	add	fp,r16,r3
10107268:	d9003617 	ldw	r4,216(sp)
1010726c:	000d883a 	mov	r6,zero
10107270:	000f883a 	mov	r7,zero
10107274:	a00b883a 	mov	r5,r20
10107278:	da003e15 	stw	r8,248(sp)
1010727c:	0112a640 	call	10112a64 <__eqdf2>
10107280:	da003e17 	ldw	r8,248(sp)
10107284:	1000e426 	beq	r2,zero,10107618 <___svfprintf_internal_r+0x1d60>
10107288:	d8802117 	ldw	r2,132(sp)
1010728c:	1700062e 	bgeu	r2,fp,101072a8 <___svfprintf_internal_r+0x19f0>
10107290:	01000c04 	movi	r4,48
10107294:	10c00044 	addi	r3,r2,1
10107298:	d8c02115 	stw	r3,132(sp)
1010729c:	11000005 	stb	r4,0(r2)
101072a0:	d8802117 	ldw	r2,132(sp)
101072a4:	173ffb36 	bltu	r2,fp,10107294 <_gp+0xfffe5d04>
101072a8:	1405c83a 	sub	r2,r2,r16
101072ac:	d8803315 	stw	r2,204(sp)
101072b0:	008011c4 	movi	r2,71
101072b4:	b080c526 	beq	r22,r2,101075cc <___svfprintf_internal_r+0x1d14>
101072b8:	00801944 	movi	r2,101
101072bc:	1441d90e 	bge	r2,r17,10107a24 <___svfprintf_internal_r+0x216c>
101072c0:	d8c02617 	ldw	r3,152(sp)
101072c4:	00801984 	movi	r2,102
101072c8:	d8c03215 	stw	r3,200(sp)
101072cc:	88813426 	beq	r17,r2,101077a0 <___svfprintf_internal_r+0x1ee8>
101072d0:	d8c03217 	ldw	r3,200(sp)
101072d4:	d9003317 	ldw	r4,204(sp)
101072d8:	19012516 	blt	r3,r4,10107770 <___svfprintf_internal_r+0x1eb8>
101072dc:	9480004c 	andi	r18,r18,1
101072e0:	9001841e 	bne	r18,zero,101078f4 <___svfprintf_internal_r+0x203c>
101072e4:	1805883a 	mov	r2,r3
101072e8:	1801cc16 	blt	r3,zero,10107a1c <___svfprintf_internal_r+0x2164>
101072ec:	d8c03217 	ldw	r3,200(sp)
101072f0:	044019c4 	movi	r17,103
101072f4:	d8c02e15 	stw	r3,184(sp)
101072f8:	df002a07 	ldb	fp,168(sp)
101072fc:	e000a61e 	bne	fp,zero,10107598 <___svfprintf_internal_r+0x1ce0>
10107300:	df002783 	ldbu	fp,158(sp)
10107304:	d8802a15 	stw	r2,168(sp)
10107308:	dc802b17 	ldw	r18,172(sp)
1010730c:	d8002915 	stw	zero,164(sp)
10107310:	003b1706 	br	10105f70 <_gp+0xfffe49e0>
10107314:	04040474 	movhi	r16,4113
10107318:	841dde04 	addi	r16,r16,30584
1010731c:	003aa606 	br	10105db8 <_gp+0xfffe4828>
10107320:	d9003917 	ldw	r4,228(sp)
10107324:	04001004 	movi	r16,64
10107328:	800b883a 	mov	r5,r16
1010732c:	010488c0 	call	1010488c <_malloc_r>
10107330:	d9002c17 	ldw	r4,176(sp)
10107334:	20800015 	stw	r2,0(r4)
10107338:	20800415 	stw	r2,16(r4)
1010733c:	1001cb26 	beq	r2,zero,10107a6c <___svfprintf_internal_r+0x21b4>
10107340:	d8802c17 	ldw	r2,176(sp)
10107344:	14000515 	stw	r16,20(r2)
10107348:	00397606 	br	10105924 <_gp+0xfffe4394>
1010734c:	04040474 	movhi	r16,4113
10107350:	841de004 	addi	r16,r16,30592
10107354:	003ee106 	br	10106edc <_gp+0xfffe594c>
10107358:	d9402c17 	ldw	r5,176(sp)
1010735c:	d9801e04 	addi	r6,sp,120
10107360:	9809883a 	mov	r4,r19
10107364:	010dd600 	call	1010dd60 <__ssprint_r>
10107368:	103a381e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
1010736c:	dc402617 	ldw	r17,152(sp)
10107370:	d8c02017 	ldw	r3,128(sp)
10107374:	da000404 	addi	r8,sp,16
10107378:	003f4306 	br	10107088 <_gp+0xfffe5af8>
1010737c:	01400184 	movi	r5,6
10107380:	d9402915 	stw	r5,164(sp)
10107384:	003f9506 	br	101071dc <_gp+0xfffe5c4c>
10107388:	d9002d17 	ldw	r4,180(sp)
1010738c:	25000017 	ldw	r20,0(r4)
10107390:	21000104 	addi	r4,r4,4
10107394:	d9002d15 	stw	r4,180(sp)
10107398:	a02dd7fa 	srai	r22,r20,31
1010739c:	b005883a 	mov	r2,r22
101073a0:	003a9b06 	br	10105e10 <_gp+0xfffe4880>
101073a4:	d9402d17 	ldw	r5,180(sp)
101073a8:	002d883a 	mov	r22,zero
101073ac:	2d000017 	ldw	r20,0(r5)
101073b0:	29400104 	addi	r5,r5,4
101073b4:	d9402d15 	stw	r5,180(sp)
101073b8:	003bf906 	br	101063a0 <_gp+0xfffe4e10>
101073bc:	9480100c 	andi	r18,r18,64
101073c0:	90006e26 	beq	r18,zero,1010757c <___svfprintf_internal_r+0x1cc4>
101073c4:	d9002d17 	ldw	r4,180(sp)
101073c8:	d9402f17 	ldw	r5,188(sp)
101073cc:	20800017 	ldw	r2,0(r4)
101073d0:	21000104 	addi	r4,r4,4
101073d4:	d9002d15 	stw	r4,180(sp)
101073d8:	1140000d 	sth	r5,0(r2)
101073dc:	00396106 	br	10105964 <_gp+0xfffe43d4>
101073e0:	d9402c17 	ldw	r5,176(sp)
101073e4:	d9801e04 	addi	r6,sp,120
101073e8:	9809883a 	mov	r4,r19
101073ec:	010dd600 	call	1010dd60 <__ssprint_r>
101073f0:	103a161e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101073f4:	d8c02017 	ldw	r3,128(sp)
101073f8:	d8801f17 	ldw	r2,124(sp)
101073fc:	da000404 	addi	r8,sp,16
10107400:	d9403317 	ldw	r5,204(sp)
10107404:	10800044 	addi	r2,r2,1
10107408:	44000015 	stw	r16,0(r8)
1010740c:	28c7883a 	add	r3,r5,r3
10107410:	003b7706 	br	101061f0 <_gp+0xfffe4c60>
10107414:	8009883a 	mov	r4,r16
10107418:	da003e15 	stw	r8,248(sp)
1010741c:	01058200 	call	10105820 <strlen>
10107420:	d8802e15 	stw	r2,184(sp)
10107424:	da003e17 	ldw	r8,248(sp)
10107428:	103c280e 	bge	r2,zero,101064cc <_gp+0xfffe4f3c>
1010742c:	0005883a 	mov	r2,zero
10107430:	003c2606 	br	101064cc <_gp+0xfffe4f3c>
10107434:	00bfffc4 	movi	r2,-1
10107438:	003a0906 	br	10105c60 <_gp+0xfffe46d0>
1010743c:	01040474 	movhi	r4,4113
10107440:	211df284 	addi	r4,r4,30666
10107444:	d9003515 	stw	r4,212(sp)
10107448:	003b0606 	br	10106064 <_gp+0xfffe4ad4>
1010744c:	013fffc4 	movi	r4,-1
10107450:	003a2706 	br	10105cf0 <_gp+0xfffe4760>
10107454:	d9402c17 	ldw	r5,176(sp)
10107458:	d9801e04 	addi	r6,sp,120
1010745c:	9809883a 	mov	r4,r19
10107460:	010dd600 	call	1010dd60 <__ssprint_r>
10107464:	1039f91e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10107468:	d8c02017 	ldw	r3,128(sp)
1010746c:	da000404 	addi	r8,sp,16
10107470:	003d8406 	br	10106a84 <_gp+0xfffe54f4>
10107474:	0023883a 	mov	r17,zero
10107478:	003d8306 	br	10106a88 <_gp+0xfffe54f8>
1010747c:	01040474 	movhi	r4,4113
10107480:	211dee84 	addi	r4,r4,30650
10107484:	d9002b15 	stw	r4,172(sp)
10107488:	d9002b17 	ldw	r4,172(sp)
1010748c:	1c47883a 	add	r3,r3,r17
10107490:	10800044 	addi	r2,r2,1
10107494:	41000015 	stw	r4,0(r8)
10107498:	44400115 	stw	r17,4(r8)
1010749c:	d8c02015 	stw	r3,128(sp)
101074a0:	d8801f15 	stw	r2,124(sp)
101074a4:	010001c4 	movi	r4,7
101074a8:	20bfcd16 	blt	r4,r2,101073e0 <_gp+0xfffe5e50>
101074ac:	42000204 	addi	r8,r8,8
101074b0:	003fd306 	br	10107400 <_gp+0xfffe5e70>
101074b4:	d9402c17 	ldw	r5,176(sp)
101074b8:	d9801e04 	addi	r6,sp,120
101074bc:	9809883a 	mov	r4,r19
101074c0:	010dd600 	call	1010dd60 <__ssprint_r>
101074c4:	1039e11e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101074c8:	d8802617 	ldw	r2,152(sp)
101074cc:	d8c02017 	ldw	r3,128(sp)
101074d0:	da000404 	addi	r8,sp,16
101074d4:	003e1c06 	br	10106d48 <_gp+0xfffe57b8>
101074d8:	d8802917 	ldw	r2,164(sp)
101074dc:	00c00184 	movi	r3,6
101074e0:	1880012e 	bgeu	r3,r2,101074e8 <___svfprintf_internal_r+0x1c30>
101074e4:	1805883a 	mov	r2,r3
101074e8:	d8802e15 	stw	r2,184(sp)
101074ec:	1000f316 	blt	r2,zero,101078bc <___svfprintf_internal_r+0x2004>
101074f0:	04040474 	movhi	r16,4113
101074f4:	d8802a15 	stw	r2,168(sp)
101074f8:	dd002d15 	stw	r20,180(sp)
101074fc:	d8002915 	stw	zero,164(sp)
10107500:	d8003215 	stw	zero,200(sp)
10107504:	841dec04 	addi	r16,r16,30640
10107508:	0039883a 	mov	fp,zero
1010750c:	003a9f06 	br	10105f8c <_gp+0xfffe49fc>
10107510:	01040474 	movhi	r4,4113
10107514:	211df284 	addi	r4,r4,30666
10107518:	d9003515 	stw	r4,212(sp)
1010751c:	003b5f06 	br	1010629c <_gp+0xfffe4d0c>
10107520:	d9402c17 	ldw	r5,176(sp)
10107524:	d9801e04 	addi	r6,sp,120
10107528:	9809883a 	mov	r4,r19
1010752c:	010dd600 	call	1010dd60 <__ssprint_r>
10107530:	1039c61e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
10107534:	d8802617 	ldw	r2,152(sp)
10107538:	d9403317 	ldw	r5,204(sp)
1010753c:	d8c02017 	ldw	r3,128(sp)
10107540:	da000404 	addi	r8,sp,16
10107544:	2885c83a 	sub	r2,r5,r2
10107548:	003e1006 	br	10106d8c <_gp+0xfffe57fc>
1010754c:	00800044 	movi	r2,1
10107550:	10803fcc 	andi	r2,r2,255
10107554:	00c00044 	movi	r3,1
10107558:	10fa3526 	beq	r2,r3,10105e30 <_gp+0xfffe48a0>
1010755c:	00c00084 	movi	r3,2
10107560:	10fb9e26 	beq	r2,r3,101063dc <_gp+0xfffe4e4c>
10107564:	003a6406 	br	10105ef8 <_gp+0xfffe4968>
10107568:	0021883a 	mov	r16,zero
1010756c:	003e0806 	br	10106d90 <_gp+0xfffe5800>
10107570:	07000b44 	movi	fp,45
10107574:	df002785 	stb	fp,158(sp)
10107578:	003a0b06 	br	10105da8 <_gp+0xfffe4818>
1010757c:	d8c02d17 	ldw	r3,180(sp)
10107580:	d9002f17 	ldw	r4,188(sp)
10107584:	18800017 	ldw	r2,0(r3)
10107588:	18c00104 	addi	r3,r3,4
1010758c:	d8c02d15 	stw	r3,180(sp)
10107590:	11000015 	stw	r4,0(r2)
10107594:	0038f306 	br	10105964 <_gp+0xfffe43d4>
10107598:	00c00b44 	movi	r3,45
1010759c:	d8c02785 	stb	r3,158(sp)
101075a0:	d8802a15 	stw	r2,168(sp)
101075a4:	dc802b17 	ldw	r18,172(sp)
101075a8:	d8002915 	stw	zero,164(sp)
101075ac:	07000b44 	movi	fp,45
101075b0:	003a7306 	br	10105f80 <_gp+0xfffe49f0>
101075b4:	9080004c 	andi	r2,r18,1
101075b8:	1000941e 	bne	r2,zero,1010780c <___svfprintf_internal_r+0x1f54>
101075bc:	d8802117 	ldw	r2,132(sp)
101075c0:	1405c83a 	sub	r2,r2,r16
101075c4:	d8803315 	stw	r2,204(sp)
101075c8:	b441161e 	bne	r22,r17,10107a24 <___svfprintf_internal_r+0x216c>
101075cc:	dd802617 	ldw	r22,152(sp)
101075d0:	00bfff44 	movi	r2,-3
101075d4:	b0801a16 	blt	r22,r2,10107640 <___svfprintf_internal_r+0x1d88>
101075d8:	d9402917 	ldw	r5,164(sp)
101075dc:	2d801816 	blt	r5,r22,10107640 <___svfprintf_internal_r+0x1d88>
101075e0:	dd803215 	stw	r22,200(sp)
101075e4:	003f3a06 	br	101072d0 <_gp+0xfffe5d40>
101075e8:	1025883a 	mov	r18,r2
101075ec:	0039883a 	mov	fp,zero
101075f0:	00800084 	movi	r2,2
101075f4:	003fd606 	br	10107550 <_gp+0xfffe5fc0>
101075f8:	9080004c 	andi	r2,r18,1
101075fc:	103f191e 	bne	r2,zero,10107264 <_gp+0xfffe5cd4>
10107600:	d8802117 	ldw	r2,132(sp)
10107604:	003f2806 	br	101072a8 <_gp+0xfffe5d18>
10107608:	01040474 	movhi	r4,4113
1010760c:	211dee84 	addi	r4,r4,30650
10107610:	d9002b15 	stw	r4,172(sp)
10107614:	003c7c06 	br	10106808 <_gp+0xfffe5278>
10107618:	e005883a 	mov	r2,fp
1010761c:	003f2206 	br	101072a8 <_gp+0xfffe5d18>
10107620:	d9402917 	ldw	r5,164(sp)
10107624:	df002783 	ldbu	fp,158(sp)
10107628:	dd002d15 	stw	r20,180(sp)
1010762c:	d9402a15 	stw	r5,168(sp)
10107630:	d9402e15 	stw	r5,184(sp)
10107634:	d8002915 	stw	zero,164(sp)
10107638:	d8003215 	stw	zero,200(sp)
1010763c:	003a4c06 	br	10105f70 <_gp+0xfffe49e0>
10107640:	8c7fff84 	addi	r17,r17,-2
10107644:	b5bfffc4 	addi	r22,r22,-1
10107648:	dd802615 	stw	r22,152(sp)
1010764c:	dc4022c5 	stb	r17,139(sp)
10107650:	b000c316 	blt	r22,zero,10107960 <___svfprintf_internal_r+0x20a8>
10107654:	00800ac4 	movi	r2,43
10107658:	d8802305 	stb	r2,140(sp)
1010765c:	00800244 	movi	r2,9
10107660:	15806e16 	blt	r2,r22,1010781c <___svfprintf_internal_r+0x1f64>
10107664:	00800c04 	movi	r2,48
10107668:	b5800c04 	addi	r22,r22,48
1010766c:	d8802345 	stb	r2,141(sp)
10107670:	dd802385 	stb	r22,142(sp)
10107674:	d88023c4 	addi	r2,sp,143
10107678:	df0022c4 	addi	fp,sp,139
1010767c:	d8c03317 	ldw	r3,204(sp)
10107680:	1739c83a 	sub	fp,r2,fp
10107684:	d9003317 	ldw	r4,204(sp)
10107688:	e0c7883a 	add	r3,fp,r3
1010768c:	df003b15 	stw	fp,236(sp)
10107690:	d8c02e15 	stw	r3,184(sp)
10107694:	00800044 	movi	r2,1
10107698:	1100b70e 	bge	r2,r4,10107978 <___svfprintf_internal_r+0x20c0>
1010769c:	d8c02e17 	ldw	r3,184(sp)
101076a0:	18c00044 	addi	r3,r3,1
101076a4:	d8c02e15 	stw	r3,184(sp)
101076a8:	1805883a 	mov	r2,r3
101076ac:	1800b016 	blt	r3,zero,10107970 <___svfprintf_internal_r+0x20b8>
101076b0:	d8003215 	stw	zero,200(sp)
101076b4:	003f1006 	br	101072f8 <_gp+0xfffe5d68>
101076b8:	d8802917 	ldw	r2,164(sp)
101076bc:	103ec71e 	bne	r2,zero,101071dc <_gp+0xfffe5c4c>
101076c0:	dc002915 	stw	r16,164(sp)
101076c4:	003ec506 	br	101071dc <_gp+0xfffe5c4c>
101076c8:	d9402c17 	ldw	r5,176(sp)
101076cc:	d9801e04 	addi	r6,sp,120
101076d0:	9809883a 	mov	r4,r19
101076d4:	010dd600 	call	1010dd60 <__ssprint_r>
101076d8:	10395c1e 	bne	r2,zero,10105c4c <_gp+0xfffe46bc>
101076dc:	dc402617 	ldw	r17,152(sp)
101076e0:	d8c02017 	ldw	r3,128(sp)
101076e4:	d8801f17 	ldw	r2,124(sp)
101076e8:	da000404 	addi	r8,sp,16
101076ec:	003e7706 	br	101070cc <_gp+0xfffe5b3c>
101076f0:	582f883a 	mov	r23,r11
101076f4:	d8002915 	stw	zero,164(sp)
101076f8:	0038c406 	br	10105a0c <_gp+0xfffe447c>
101076fc:	d8c02917 	ldw	r3,164(sp)
10107700:	d8802104 	addi	r2,sp,132
10107704:	d8800315 	stw	r2,12(sp)
10107708:	d9403617 	ldw	r5,216(sp)
1010770c:	d8802504 	addi	r2,sp,148
10107710:	d8800215 	stw	r2,8(sp)
10107714:	d8802604 	addi	r2,sp,152
10107718:	d8c00015 	stw	r3,0(sp)
1010771c:	9809883a 	mov	r4,r19
10107720:	d8800115 	stw	r2,4(sp)
10107724:	01c000c4 	movi	r7,3
10107728:	a00d883a 	mov	r6,r20
1010772c:	da003e15 	stw	r8,248(sp)
10107730:	010a1e80 	call	1010a1e8 <_dtoa_r>
10107734:	d9002917 	ldw	r4,164(sp)
10107738:	da003e17 	ldw	r8,248(sp)
1010773c:	1021883a 	mov	r16,r2
10107740:	1139883a 	add	fp,r2,r4
10107744:	2007883a 	mov	r3,r4
10107748:	81000007 	ldb	r4,0(r16)
1010774c:	00800c04 	movi	r2,48
10107750:	20806f26 	beq	r4,r2,10107910 <___svfprintf_internal_r+0x2058>
10107754:	d8c02617 	ldw	r3,152(sp)
10107758:	e0f9883a 	add	fp,fp,r3
1010775c:	003ec206 	br	10107268 <_gp+0xfffe5cd8>
10107760:	00c00b44 	movi	r3,45
10107764:	2520003c 	xorhi	r20,r4,32768
10107768:	d8c02a05 	stb	r3,168(sp)
1010776c:	003ea106 	br	101071f4 <_gp+0xfffe5c64>
10107770:	d8c03217 	ldw	r3,200(sp)
10107774:	00c0890e 	bge	zero,r3,1010799c <___svfprintf_internal_r+0x20e4>
10107778:	00800044 	movi	r2,1
1010777c:	d9003317 	ldw	r4,204(sp)
10107780:	1105883a 	add	r2,r2,r4
10107784:	d8802e15 	stw	r2,184(sp)
10107788:	10005f16 	blt	r2,zero,10107908 <___svfprintf_internal_r+0x2050>
1010778c:	044019c4 	movi	r17,103
10107790:	003ed906 	br	101072f8 <_gp+0xfffe5d68>
10107794:	d9002917 	ldw	r4,164(sp)
10107798:	20c00044 	addi	r3,r4,1
1010779c:	003e9c06 	br	10107210 <_gp+0xfffe5c80>
101077a0:	d9002917 	ldw	r4,164(sp)
101077a4:	00c0680e 	bge	zero,r3,10107948 <___svfprintf_internal_r+0x2090>
101077a8:	2000461e 	bne	r4,zero,101078c4 <___svfprintf_internal_r+0x200c>
101077ac:	9480004c 	andi	r18,r18,1
101077b0:	9000441e 	bne	r18,zero,101078c4 <___svfprintf_internal_r+0x200c>
101077b4:	1805883a 	mov	r2,r3
101077b8:	1800a016 	blt	r3,zero,10107a3c <___svfprintf_internal_r+0x2184>
101077bc:	d8c03217 	ldw	r3,200(sp)
101077c0:	d8c02e15 	stw	r3,184(sp)
101077c4:	003ecc06 	br	101072f8 <_gp+0xfffe5d68>
101077c8:	d9402917 	ldw	r5,164(sp)
101077cc:	d8802104 	addi	r2,sp,132
101077d0:	d8800315 	stw	r2,12(sp)
101077d4:	d9400015 	stw	r5,0(sp)
101077d8:	d8802504 	addi	r2,sp,148
101077dc:	d9403617 	ldw	r5,216(sp)
101077e0:	d8800215 	stw	r2,8(sp)
101077e4:	d8802604 	addi	r2,sp,152
101077e8:	d8800115 	stw	r2,4(sp)
101077ec:	01c000c4 	movi	r7,3
101077f0:	a00d883a 	mov	r6,r20
101077f4:	9809883a 	mov	r4,r19
101077f8:	da003e15 	stw	r8,248(sp)
101077fc:	010a1e80 	call	1010a1e8 <_dtoa_r>
10107800:	d8c02917 	ldw	r3,164(sp)
10107804:	da003e17 	ldw	r8,248(sp)
10107808:	1021883a 	mov	r16,r2
1010780c:	00801184 	movi	r2,70
10107810:	80f9883a 	add	fp,r16,r3
10107814:	88bfcc26 	beq	r17,r2,10107748 <_gp+0xfffe61b8>
10107818:	003e9306 	br	10107268 <_gp+0xfffe5cd8>
1010781c:	df0022c4 	addi	fp,sp,139
10107820:	dc002915 	stw	r16,164(sp)
10107824:	9829883a 	mov	r20,r19
10107828:	e021883a 	mov	r16,fp
1010782c:	4027883a 	mov	r19,r8
10107830:	b009883a 	mov	r4,r22
10107834:	01400284 	movi	r5,10
10107838:	010308c0 	call	1010308c <__modsi3>
1010783c:	10800c04 	addi	r2,r2,48
10107840:	843fffc4 	addi	r16,r16,-1
10107844:	b009883a 	mov	r4,r22
10107848:	01400284 	movi	r5,10
1010784c:	80800005 	stb	r2,0(r16)
10107850:	01030080 	call	10103008 <__divsi3>
10107854:	102d883a 	mov	r22,r2
10107858:	00800244 	movi	r2,9
1010785c:	15bff416 	blt	r2,r22,10107830 <_gp+0xfffe62a0>
10107860:	9811883a 	mov	r8,r19
10107864:	b0800c04 	addi	r2,r22,48
10107868:	a027883a 	mov	r19,r20
1010786c:	8029883a 	mov	r20,r16
10107870:	a17fffc4 	addi	r5,r20,-1
10107874:	a0bfffc5 	stb	r2,-1(r20)
10107878:	dc002917 	ldw	r16,164(sp)
1010787c:	2f00752e 	bgeu	r5,fp,10107a54 <___svfprintf_internal_r+0x219c>
10107880:	d9c02384 	addi	r7,sp,142
10107884:	3d0fc83a 	sub	r7,r7,r20
10107888:	d9002344 	addi	r4,sp,141
1010788c:	e1cf883a 	add	r7,fp,r7
10107890:	00000106 	br	10107898 <___svfprintf_internal_r+0x1fe0>
10107894:	28800003 	ldbu	r2,0(r5)
10107898:	20800005 	stb	r2,0(r4)
1010789c:	21000044 	addi	r4,r4,1
101078a0:	29400044 	addi	r5,r5,1
101078a4:	21fffb1e 	bne	r4,r7,10107894 <_gp+0xfffe6304>
101078a8:	d8802304 	addi	r2,sp,140
101078ac:	1505c83a 	sub	r2,r2,r20
101078b0:	d8c02344 	addi	r3,sp,141
101078b4:	1885883a 	add	r2,r3,r2
101078b8:	003f7006 	br	1010767c <_gp+0xfffe60ec>
101078bc:	0005883a 	mov	r2,zero
101078c0:	003f0b06 	br	101074f0 <_gp+0xfffe5f60>
101078c4:	d9002917 	ldw	r4,164(sp)
101078c8:	d8c03217 	ldw	r3,200(sp)
101078cc:	20800044 	addi	r2,r4,1
101078d0:	1885883a 	add	r2,r3,r2
101078d4:	d8802e15 	stw	r2,184(sp)
101078d8:	103e870e 	bge	r2,zero,101072f8 <_gp+0xfffe5d68>
101078dc:	0005883a 	mov	r2,zero
101078e0:	003e8506 	br	101072f8 <_gp+0xfffe5d68>
101078e4:	01040474 	movhi	r4,4113
101078e8:	211dee84 	addi	r4,r4,30650
101078ec:	d9002b15 	stw	r4,172(sp)
101078f0:	003cc506 	br	10106c08 <_gp+0xfffe5678>
101078f4:	d8c03217 	ldw	r3,200(sp)
101078f8:	18c00044 	addi	r3,r3,1
101078fc:	d8c02e15 	stw	r3,184(sp)
10107900:	1805883a 	mov	r2,r3
10107904:	183fa10e 	bge	r3,zero,1010778c <_gp+0xfffe61fc>
10107908:	0005883a 	mov	r2,zero
1010790c:	003f9f06 	br	1010778c <_gp+0xfffe61fc>
10107910:	d9003617 	ldw	r4,216(sp)
10107914:	000d883a 	mov	r6,zero
10107918:	000f883a 	mov	r7,zero
1010791c:	a00b883a 	mov	r5,r20
10107920:	d8c03d15 	stw	r3,244(sp)
10107924:	da003e15 	stw	r8,248(sp)
10107928:	0112a640 	call	10112a64 <__eqdf2>
1010792c:	d8c03d17 	ldw	r3,244(sp)
10107930:	da003e17 	ldw	r8,248(sp)
10107934:	103f8726 	beq	r2,zero,10107754 <_gp+0xfffe61c4>
10107938:	00800044 	movi	r2,1
1010793c:	10c7c83a 	sub	r3,r2,r3
10107940:	d8c02615 	stw	r3,152(sp)
10107944:	003f8406 	br	10107758 <_gp+0xfffe61c8>
10107948:	20000e1e 	bne	r4,zero,10107984 <___svfprintf_internal_r+0x20cc>
1010794c:	9480004c 	andi	r18,r18,1
10107950:	90000c1e 	bne	r18,zero,10107984 <___svfprintf_internal_r+0x20cc>
10107954:	00800044 	movi	r2,1
10107958:	d8802e15 	stw	r2,184(sp)
1010795c:	003e6606 	br	101072f8 <_gp+0xfffe5d68>
10107960:	00800b44 	movi	r2,45
10107964:	05adc83a 	sub	r22,zero,r22
10107968:	d8802305 	stb	r2,140(sp)
1010796c:	003f3b06 	br	1010765c <_gp+0xfffe60cc>
10107970:	0005883a 	mov	r2,zero
10107974:	003f4e06 	br	101076b0 <_gp+0xfffe6120>
10107978:	90a4703a 	and	r18,r18,r2
1010797c:	903f4a26 	beq	r18,zero,101076a8 <_gp+0xfffe6118>
10107980:	003f4606 	br	1010769c <_gp+0xfffe610c>
10107984:	d8c02917 	ldw	r3,164(sp)
10107988:	18c00084 	addi	r3,r3,2
1010798c:	d8c02e15 	stw	r3,184(sp)
10107990:	1805883a 	mov	r2,r3
10107994:	183e580e 	bge	r3,zero,101072f8 <_gp+0xfffe5d68>
10107998:	003fd006 	br	101078dc <_gp+0xfffe634c>
1010799c:	00800084 	movi	r2,2
101079a0:	10c5c83a 	sub	r2,r2,r3
101079a4:	003f7506 	br	1010777c <_gp+0xfffe61ec>
101079a8:	d8802d17 	ldw	r2,180(sp)
101079ac:	d9002d17 	ldw	r4,180(sp)
101079b0:	bc400043 	ldbu	r17,1(r23)
101079b4:	10800017 	ldw	r2,0(r2)
101079b8:	582f883a 	mov	r23,r11
101079bc:	d8802915 	stw	r2,164(sp)
101079c0:	20800104 	addi	r2,r4,4
101079c4:	d9002917 	ldw	r4,164(sp)
101079c8:	d8802d15 	stw	r2,180(sp)
101079cc:	203df00e 	bge	r4,zero,10107190 <_gp+0xfffe5c00>
101079d0:	8c403fcc 	andi	r17,r17,255
101079d4:	00bfffc4 	movi	r2,-1
101079d8:	8c40201c 	xori	r17,r17,128
101079dc:	d8802915 	stw	r2,164(sp)
101079e0:	8c7fe004 	addi	r17,r17,-128
101079e4:	00380806 	br	10105a08 <_gp+0xfffe4478>
101079e8:	9080004c 	andi	r2,r18,1
101079ec:	0039883a 	mov	fp,zero
101079f0:	10000726 	beq	r2,zero,10107a10 <___svfprintf_internal_r+0x2158>
101079f4:	d8c02817 	ldw	r3,160(sp)
101079f8:	dc001dc4 	addi	r16,sp,119
101079fc:	00800c04 	movi	r2,48
10107a00:	1c07c83a 	sub	r3,r3,r16
10107a04:	d8801dc5 	stb	r2,119(sp)
10107a08:	d8c02e15 	stw	r3,184(sp)
10107a0c:	00395206 	br	10105f58 <_gp+0xfffe49c8>
10107a10:	d8002e15 	stw	zero,184(sp)
10107a14:	dc001e04 	addi	r16,sp,120
10107a18:	00394f06 	br	10105f58 <_gp+0xfffe49c8>
10107a1c:	0005883a 	mov	r2,zero
10107a20:	003e3206 	br	101072ec <_gp+0xfffe5d5c>
10107a24:	dd802617 	ldw	r22,152(sp)
10107a28:	003f0606 	br	10107644 <_gp+0xfffe60b4>
10107a2c:	d9c02785 	stb	r7,158(sp)
10107a30:	003a5106 	br	10106378 <_gp+0xfffe4de8>
10107a34:	d9c02785 	stb	r7,158(sp)
10107a38:	003a3706 	br	10106318 <_gp+0xfffe4d88>
10107a3c:	0005883a 	mov	r2,zero
10107a40:	003f5e06 	br	101077bc <_gp+0xfffe622c>
10107a44:	d9c02785 	stb	r7,158(sp)
10107a48:	00391706 	br	10105ea8 <_gp+0xfffe4918>
10107a4c:	d9c02785 	stb	r7,158(sp)
10107a50:	0038e606 	br	10105dec <_gp+0xfffe485c>
10107a54:	d8802344 	addi	r2,sp,141
10107a58:	003f0806 	br	1010767c <_gp+0xfffe60ec>
10107a5c:	d9c02785 	stb	r7,158(sp)
10107a60:	0038b706 	br	10105d40 <_gp+0xfffe47b0>
10107a64:	d9c02785 	stb	r7,158(sp)
10107a68:	003adc06 	br	101065dc <_gp+0xfffe504c>
10107a6c:	d9403917 	ldw	r5,228(sp)
10107a70:	00800304 	movi	r2,12
10107a74:	28800015 	stw	r2,0(r5)
10107a78:	00bfffc4 	movi	r2,-1
10107a7c:	00387806 	br	10105c60 <_gp+0xfffe46d0>
10107a80:	d9c02785 	stb	r7,158(sp)
10107a84:	003abf06 	br	10106584 <_gp+0xfffe4ff4>
10107a88:	d9c02785 	stb	r7,158(sp)
10107a8c:	003a9b06 	br	101064fc <_gp+0xfffe4f6c>

10107a90 <time>:
10107a90:	008404b4 	movhi	r2,4114
10107a94:	defffc04 	addi	sp,sp,-16
10107a98:	10a56504 	addi	r2,r2,-27244
10107a9c:	dc000215 	stw	r16,8(sp)
10107aa0:	2021883a 	mov	r16,r4
10107aa4:	11000017 	ldw	r4,0(r2)
10107aa8:	000d883a 	mov	r6,zero
10107aac:	d80b883a 	mov	r5,sp
10107ab0:	dfc00315 	stw	ra,12(sp)
10107ab4:	010bdd80 	call	1010bdd8 <_gettimeofday_r>
10107ab8:	10000716 	blt	r2,zero,10107ad8 <time+0x48>
10107abc:	d8800017 	ldw	r2,0(sp)
10107ac0:	80000126 	beq	r16,zero,10107ac8 <time+0x38>
10107ac4:	80800015 	stw	r2,0(r16)
10107ac8:	dfc00317 	ldw	ra,12(sp)
10107acc:	dc000217 	ldw	r16,8(sp)
10107ad0:	dec00404 	addi	sp,sp,16
10107ad4:	f800283a 	ret
10107ad8:	00bfffc4 	movi	r2,-1
10107adc:	003ffa06 	br	10107ac8 <_gp+0xfffe6538>

10107ae0 <_vfiprintf_r>:
10107ae0:	deffff04 	addi	sp,sp,-4
10107ae4:	dfc00015 	stw	ra,0(sp)
10107ae8:	010f2800 	call	1010f280 <___vfiprintf_internal_r>
10107aec:	dfc00017 	ldw	ra,0(sp)
10107af0:	dec00104 	addi	sp,sp,4
10107af4:	f800283a 	ret

10107af8 <___vfprintf_internal_r>:
10107af8:	deffb804 	addi	sp,sp,-288
10107afc:	dfc04715 	stw	ra,284(sp)
10107b00:	ddc04515 	stw	r23,276(sp)
10107b04:	dd404315 	stw	r21,268(sp)
10107b08:	d9002c15 	stw	r4,176(sp)
10107b0c:	282f883a 	mov	r23,r5
10107b10:	302b883a 	mov	r21,r6
10107b14:	d9c02d15 	stw	r7,180(sp)
10107b18:	df004615 	stw	fp,280(sp)
10107b1c:	dd804415 	stw	r22,272(sp)
10107b20:	dd004215 	stw	r20,264(sp)
10107b24:	dcc04115 	stw	r19,260(sp)
10107b28:	dc804015 	stw	r18,256(sp)
10107b2c:	dc403f15 	stw	r17,252(sp)
10107b30:	dc003e15 	stw	r16,248(sp)
10107b34:	010bf340 	call	1010bf34 <_localeconv_r>
10107b38:	10800017 	ldw	r2,0(r2)
10107b3c:	1009883a 	mov	r4,r2
10107b40:	d8803415 	stw	r2,208(sp)
10107b44:	01058200 	call	10105820 <strlen>
10107b48:	d8803715 	stw	r2,220(sp)
10107b4c:	d8802c17 	ldw	r2,176(sp)
10107b50:	10000226 	beq	r2,zero,10107b5c <___vfprintf_internal_r+0x64>
10107b54:	10800e17 	ldw	r2,56(r2)
10107b58:	1000f926 	beq	r2,zero,10107f40 <___vfprintf_internal_r+0x448>
10107b5c:	b880030b 	ldhu	r2,12(r23)
10107b60:	10c8000c 	andi	r3,r2,8192
10107b64:	1800061e 	bne	r3,zero,10107b80 <___vfprintf_internal_r+0x88>
10107b68:	b9001917 	ldw	r4,100(r23)
10107b6c:	00f7ffc4 	movi	r3,-8193
10107b70:	10880014 	ori	r2,r2,8192
10107b74:	20c6703a 	and	r3,r4,r3
10107b78:	b880030d 	sth	r2,12(r23)
10107b7c:	b8c01915 	stw	r3,100(r23)
10107b80:	10c0020c 	andi	r3,r2,8
10107b84:	1800c126 	beq	r3,zero,10107e8c <___vfprintf_internal_r+0x394>
10107b88:	b8c00417 	ldw	r3,16(r23)
10107b8c:	1800bf26 	beq	r3,zero,10107e8c <___vfprintf_internal_r+0x394>
10107b90:	1080068c 	andi	r2,r2,26
10107b94:	00c00284 	movi	r3,10
10107b98:	10c0c426 	beq	r2,r3,10107eac <___vfprintf_internal_r+0x3b4>
10107b9c:	d8c00404 	addi	r3,sp,16
10107ba0:	05040474 	movhi	r20,4113
10107ba4:	d9001e04 	addi	r4,sp,120
10107ba8:	a51df684 	addi	r20,r20,30682
10107bac:	d8c01e15 	stw	r3,120(sp)
10107bb0:	d8002015 	stw	zero,128(sp)
10107bb4:	d8001f15 	stw	zero,124(sp)
10107bb8:	d8003315 	stw	zero,204(sp)
10107bbc:	d8003615 	stw	zero,216(sp)
10107bc0:	d8003815 	stw	zero,224(sp)
10107bc4:	1811883a 	mov	r8,r3
10107bc8:	d8003915 	stw	zero,228(sp)
10107bcc:	d8003a15 	stw	zero,232(sp)
10107bd0:	d8002f15 	stw	zero,188(sp)
10107bd4:	d9002815 	stw	r4,160(sp)
10107bd8:	a8800007 	ldb	r2,0(r21)
10107bdc:	10027b26 	beq	r2,zero,101085cc <___vfprintf_internal_r+0xad4>
10107be0:	00c00944 	movi	r3,37
10107be4:	a821883a 	mov	r16,r21
10107be8:	10c0021e 	bne	r2,r3,10107bf4 <___vfprintf_internal_r+0xfc>
10107bec:	00001406 	br	10107c40 <___vfprintf_internal_r+0x148>
10107bf0:	10c00326 	beq	r2,r3,10107c00 <___vfprintf_internal_r+0x108>
10107bf4:	84000044 	addi	r16,r16,1
10107bf8:	80800007 	ldb	r2,0(r16)
10107bfc:	103ffc1e 	bne	r2,zero,10107bf0 <_gp+0xfffe6660>
10107c00:	8563c83a 	sub	r17,r16,r21
10107c04:	88000e26 	beq	r17,zero,10107c40 <___vfprintf_internal_r+0x148>
10107c08:	d8c02017 	ldw	r3,128(sp)
10107c0c:	d8801f17 	ldw	r2,124(sp)
10107c10:	45400015 	stw	r21,0(r8)
10107c14:	1c47883a 	add	r3,r3,r17
10107c18:	10800044 	addi	r2,r2,1
10107c1c:	d8c02015 	stw	r3,128(sp)
10107c20:	44400115 	stw	r17,4(r8)
10107c24:	d8801f15 	stw	r2,124(sp)
10107c28:	00c001c4 	movi	r3,7
10107c2c:	1880a716 	blt	r3,r2,10107ecc <___vfprintf_internal_r+0x3d4>
10107c30:	42000204 	addi	r8,r8,8
10107c34:	d9402f17 	ldw	r5,188(sp)
10107c38:	2c4b883a 	add	r5,r5,r17
10107c3c:	d9402f15 	stw	r5,188(sp)
10107c40:	80800007 	ldb	r2,0(r16)
10107c44:	1000a826 	beq	r2,zero,10107ee8 <___vfprintf_internal_r+0x3f0>
10107c48:	84400047 	ldb	r17,1(r16)
10107c4c:	00bfffc4 	movi	r2,-1
10107c50:	85400044 	addi	r21,r16,1
10107c54:	d8002785 	stb	zero,158(sp)
10107c58:	0007883a 	mov	r3,zero
10107c5c:	000f883a 	mov	r7,zero
10107c60:	d8802915 	stw	r2,164(sp)
10107c64:	d8003115 	stw	zero,196(sp)
10107c68:	0025883a 	mov	r18,zero
10107c6c:	01401604 	movi	r5,88
10107c70:	01800244 	movi	r6,9
10107c74:	02800a84 	movi	r10,42
10107c78:	02401b04 	movi	r9,108
10107c7c:	ad400044 	addi	r21,r21,1
10107c80:	88bff804 	addi	r2,r17,-32
10107c84:	28830436 	bltu	r5,r2,10108898 <___vfprintf_internal_r+0xda0>
10107c88:	100490ba 	slli	r2,r2,2
10107c8c:	01040434 	movhi	r4,4112
10107c90:	211f2804 	addi	r4,r4,31904
10107c94:	1105883a 	add	r2,r2,r4
10107c98:	10800017 	ldw	r2,0(r2)
10107c9c:	1000683a 	jmp	r2
10107ca0:	101087b8 	rdprs	zero,r2,16926
10107ca4:	10108898 	cmpnei	zero,r2,16930
10107ca8:	10108898 	cmpnei	zero,r2,16930
10107cac:	101087d8 	cmpnei	zero,r2,16927
10107cb0:	10108898 	cmpnei	zero,r2,16930
10107cb4:	10108898 	cmpnei	zero,r2,16930
10107cb8:	10108898 	cmpnei	zero,r2,16930
10107cbc:	10108898 	cmpnei	zero,r2,16930
10107cc0:	10108898 	cmpnei	zero,r2,16930
10107cc4:	10108898 	cmpnei	zero,r2,16930
10107cc8:	10107f4c 	andi	zero,r2,16893
10107ccc:	101086f4 	orhi	zero,r2,16923
10107cd0:	10108898 	cmpnei	zero,r2,16930
10107cd4:	10107e14 	ori	zero,r2,16888
10107cd8:	10107f74 	orhi	zero,r2,16893
10107cdc:	10108898 	cmpnei	zero,r2,16930
10107ce0:	10107fb4 	orhi	zero,r2,16894
10107ce4:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107ce8:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107cec:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107cf0:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107cf4:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107cf8:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107cfc:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107d00:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107d04:	10107fc0 	call	110107fc <_gp+0xeef26c>
10107d08:	10108898 	cmpnei	zero,r2,16930
10107d0c:	10108898 	cmpnei	zero,r2,16930
10107d10:	10108898 	cmpnei	zero,r2,16930
10107d14:	10108898 	cmpnei	zero,r2,16930
10107d18:	10108898 	cmpnei	zero,r2,16930
10107d1c:	10108898 	cmpnei	zero,r2,16930
10107d20:	10108898 	cmpnei	zero,r2,16930
10107d24:	10108898 	cmpnei	zero,r2,16930
10107d28:	10108898 	cmpnei	zero,r2,16930
10107d2c:	10108898 	cmpnei	zero,r2,16930
10107d30:	10107ff4 	orhi	zero,r2,16895
10107d34:	101080b0 	cmpltui	zero,r2,16898
10107d38:	10108898 	cmpnei	zero,r2,16930
10107d3c:	101080b0 	cmpltui	zero,r2,16898
10107d40:	10108898 	cmpnei	zero,r2,16930
10107d44:	10108898 	cmpnei	zero,r2,16930
10107d48:	10108898 	cmpnei	zero,r2,16930
10107d4c:	10108898 	cmpnei	zero,r2,16930
10107d50:	10108150 	cmplti	zero,r2,16901
10107d54:	10108898 	cmpnei	zero,r2,16930
10107d58:	10108898 	cmpnei	zero,r2,16930
10107d5c:	1010815c 	xori	zero,r2,16901
10107d60:	10108898 	cmpnei	zero,r2,16930
10107d64:	10108898 	cmpnei	zero,r2,16930
10107d68:	10108898 	cmpnei	zero,r2,16930
10107d6c:	10108898 	cmpnei	zero,r2,16930
10107d70:	10108898 	cmpnei	zero,r2,16930
10107d74:	101085d4 	ori	zero,r2,16919
10107d78:	10108898 	cmpnei	zero,r2,16930
10107d7c:	10108898 	cmpnei	zero,r2,16930
10107d80:	10108634 	orhi	zero,r2,16920
10107d84:	10108898 	cmpnei	zero,r2,16930
10107d88:	10108898 	cmpnei	zero,r2,16930
10107d8c:	10108898 	cmpnei	zero,r2,16930
10107d90:	10108898 	cmpnei	zero,r2,16930
10107d94:	10108898 	cmpnei	zero,r2,16930
10107d98:	10108898 	cmpnei	zero,r2,16930
10107d9c:	10108898 	cmpnei	zero,r2,16930
10107da0:	10108898 	cmpnei	zero,r2,16930
10107da4:	10108898 	cmpnei	zero,r2,16930
10107da8:	10108898 	cmpnei	zero,r2,16930
10107dac:	10108844 	addi	zero,r2,16929
10107db0:	101087e4 	muli	zero,r2,16927
10107db4:	101080b0 	cmpltui	zero,r2,16898
10107db8:	101080b0 	cmpltui	zero,r2,16898
10107dbc:	101080b0 	cmpltui	zero,r2,16898
10107dc0:	101087f4 	orhi	zero,r2,16927
10107dc4:	101087e4 	muli	zero,r2,16927
10107dc8:	10108898 	cmpnei	zero,r2,16930
10107dcc:	10108898 	cmpnei	zero,r2,16930
10107dd0:	10108800 	call	11010880 <_gp+0xeef2f0>
10107dd4:	10108898 	cmpnei	zero,r2,16930
10107dd8:	10108810 	cmplti	zero,r2,16928
10107ddc:	101086e4 	muli	zero,r2,16923
10107de0:	10107e20 	cmpeqi	zero,r2,16888
10107de4:	10108704 	addi	zero,r2,16924
10107de8:	10108898 	cmpnei	zero,r2,16930
10107dec:	10108710 	cmplti	zero,r2,16924
10107df0:	10108898 	cmpnei	zero,r2,16930
10107df4:	1010876c 	andhi	zero,r2,16925
10107df8:	10108898 	cmpnei	zero,r2,16930
10107dfc:	10108898 	cmpnei	zero,r2,16930
10107e00:	1010877c 	xorhi	zero,r2,16925
10107e04:	d9003117 	ldw	r4,196(sp)
10107e08:	d8802d15 	stw	r2,180(sp)
10107e0c:	0109c83a 	sub	r4,zero,r4
10107e10:	d9003115 	stw	r4,196(sp)
10107e14:	94800114 	ori	r18,r18,4
10107e18:	ac400007 	ldb	r17,0(r21)
10107e1c:	003f9706 	br	10107c7c <_gp+0xfffe66ec>
10107e20:	00800c04 	movi	r2,48
10107e24:	d9002d17 	ldw	r4,180(sp)
10107e28:	d9402917 	ldw	r5,164(sp)
10107e2c:	d8802705 	stb	r2,156(sp)
10107e30:	00801e04 	movi	r2,120
10107e34:	d8802745 	stb	r2,157(sp)
10107e38:	d8002785 	stb	zero,158(sp)
10107e3c:	20c00104 	addi	r3,r4,4
10107e40:	24c00017 	ldw	r19,0(r4)
10107e44:	002d883a 	mov	r22,zero
10107e48:	90800094 	ori	r2,r18,2
10107e4c:	28029a16 	blt	r5,zero,101088b8 <___vfprintf_internal_r+0xdc0>
10107e50:	00bfdfc4 	movi	r2,-129
10107e54:	90a4703a 	and	r18,r18,r2
10107e58:	d8c02d15 	stw	r3,180(sp)
10107e5c:	94800094 	ori	r18,r18,2
10107e60:	9802871e 	bne	r19,zero,10108880 <___vfprintf_internal_r+0xd88>
10107e64:	00840474 	movhi	r2,4113
10107e68:	109de704 	addi	r2,r2,30620
10107e6c:	d8803915 	stw	r2,228(sp)
10107e70:	04401e04 	movi	r17,120
10107e74:	d8802917 	ldw	r2,164(sp)
10107e78:	0039883a 	mov	fp,zero
10107e7c:	1001e926 	beq	r2,zero,10108624 <___vfprintf_internal_r+0xb2c>
10107e80:	0027883a 	mov	r19,zero
10107e84:	002d883a 	mov	r22,zero
10107e88:	00020506 	br	101086a0 <___vfprintf_internal_r+0xba8>
10107e8c:	d9002c17 	ldw	r4,176(sp)
10107e90:	b80b883a 	mov	r5,r23
10107e94:	0109e280 	call	10109e28 <__swsetup_r>
10107e98:	1005ac1e 	bne	r2,zero,1010954c <___vfprintf_internal_r+0x1a54>
10107e9c:	b880030b 	ldhu	r2,12(r23)
10107ea0:	00c00284 	movi	r3,10
10107ea4:	1080068c 	andi	r2,r2,26
10107ea8:	10ff3c1e 	bne	r2,r3,10107b9c <_gp+0xfffe660c>
10107eac:	b880038f 	ldh	r2,14(r23)
10107eb0:	103f3a16 	blt	r2,zero,10107b9c <_gp+0xfffe660c>
10107eb4:	d9c02d17 	ldw	r7,180(sp)
10107eb8:	d9002c17 	ldw	r4,176(sp)
10107ebc:	a80d883a 	mov	r6,r21
10107ec0:	b80b883a 	mov	r5,r23
10107ec4:	0109d0c0 	call	10109d0c <__sbprintf>
10107ec8:	00001106 	br	10107f10 <___vfprintf_internal_r+0x418>
10107ecc:	d9002c17 	ldw	r4,176(sp)
10107ed0:	d9801e04 	addi	r6,sp,120
10107ed4:	b80b883a 	mov	r5,r23
10107ed8:	010f2680 	call	1010f268 <__sprint_r>
10107edc:	1000081e 	bne	r2,zero,10107f00 <___vfprintf_internal_r+0x408>
10107ee0:	da000404 	addi	r8,sp,16
10107ee4:	003f5306 	br	10107c34 <_gp+0xfffe66a4>
10107ee8:	d8802017 	ldw	r2,128(sp)
10107eec:	10000426 	beq	r2,zero,10107f00 <___vfprintf_internal_r+0x408>
10107ef0:	d9002c17 	ldw	r4,176(sp)
10107ef4:	d9801e04 	addi	r6,sp,120
10107ef8:	b80b883a 	mov	r5,r23
10107efc:	010f2680 	call	1010f268 <__sprint_r>
10107f00:	b880030b 	ldhu	r2,12(r23)
10107f04:	1080100c 	andi	r2,r2,64
10107f08:	1005901e 	bne	r2,zero,1010954c <___vfprintf_internal_r+0x1a54>
10107f0c:	d8802f17 	ldw	r2,188(sp)
10107f10:	dfc04717 	ldw	ra,284(sp)
10107f14:	df004617 	ldw	fp,280(sp)
10107f18:	ddc04517 	ldw	r23,276(sp)
10107f1c:	dd804417 	ldw	r22,272(sp)
10107f20:	dd404317 	ldw	r21,268(sp)
10107f24:	dd004217 	ldw	r20,264(sp)
10107f28:	dcc04117 	ldw	r19,260(sp)
10107f2c:	dc804017 	ldw	r18,256(sp)
10107f30:	dc403f17 	ldw	r17,252(sp)
10107f34:	dc003e17 	ldw	r16,248(sp)
10107f38:	dec04804 	addi	sp,sp,288
10107f3c:	f800283a 	ret
10107f40:	d9002c17 	ldw	r4,176(sp)
10107f44:	01039340 	call	10103934 <__sinit>
10107f48:	003f0406 	br	10107b5c <_gp+0xfffe65cc>
10107f4c:	d8802d17 	ldw	r2,180(sp)
10107f50:	d9002d17 	ldw	r4,180(sp)
10107f54:	10800017 	ldw	r2,0(r2)
10107f58:	d8803115 	stw	r2,196(sp)
10107f5c:	20800104 	addi	r2,r4,4
10107f60:	d9003117 	ldw	r4,196(sp)
10107f64:	203fa716 	blt	r4,zero,10107e04 <_gp+0xfffe6874>
10107f68:	d8802d15 	stw	r2,180(sp)
10107f6c:	ac400007 	ldb	r17,0(r21)
10107f70:	003f4206 	br	10107c7c <_gp+0xfffe66ec>
10107f74:	ac400007 	ldb	r17,0(r21)
10107f78:	aac00044 	addi	r11,r21,1
10107f7c:	8a872826 	beq	r17,r10,10109c20 <___vfprintf_internal_r+0x2128>
10107f80:	88bff404 	addi	r2,r17,-48
10107f84:	0009883a 	mov	r4,zero
10107f88:	30867d36 	bltu	r6,r2,10109980 <___vfprintf_internal_r+0x1e88>
10107f8c:	5c400007 	ldb	r17,0(r11)
10107f90:	210002a4 	muli	r4,r4,10
10107f94:	5d400044 	addi	r21,r11,1
10107f98:	a817883a 	mov	r11,r21
10107f9c:	2089883a 	add	r4,r4,r2
10107fa0:	88bff404 	addi	r2,r17,-48
10107fa4:	30bff92e 	bgeu	r6,r2,10107f8c <_gp+0xfffe69fc>
10107fa8:	2005c916 	blt	r4,zero,101096d0 <___vfprintf_internal_r+0x1bd8>
10107fac:	d9002915 	stw	r4,164(sp)
10107fb0:	003f3306 	br	10107c80 <_gp+0xfffe66f0>
10107fb4:	94802014 	ori	r18,r18,128
10107fb8:	ac400007 	ldb	r17,0(r21)
10107fbc:	003f2f06 	br	10107c7c <_gp+0xfffe66ec>
10107fc0:	a809883a 	mov	r4,r21
10107fc4:	d8003115 	stw	zero,196(sp)
10107fc8:	88bff404 	addi	r2,r17,-48
10107fcc:	0017883a 	mov	r11,zero
10107fd0:	24400007 	ldb	r17,0(r4)
10107fd4:	5ac002a4 	muli	r11,r11,10
10107fd8:	ad400044 	addi	r21,r21,1
10107fdc:	a809883a 	mov	r4,r21
10107fe0:	12d7883a 	add	r11,r2,r11
10107fe4:	88bff404 	addi	r2,r17,-48
10107fe8:	30bff92e 	bgeu	r6,r2,10107fd0 <_gp+0xfffe6a40>
10107fec:	dac03115 	stw	r11,196(sp)
10107ff0:	003f2306 	br	10107c80 <_gp+0xfffe66f0>
10107ff4:	18c03fcc 	andi	r3,r3,255
10107ff8:	18072b1e 	bne	r3,zero,10109ca8 <___vfprintf_internal_r+0x21b0>
10107ffc:	94800414 	ori	r18,r18,16
10108000:	9080080c 	andi	r2,r18,32
10108004:	10037b26 	beq	r2,zero,10108df4 <___vfprintf_internal_r+0x12fc>
10108008:	d9402d17 	ldw	r5,180(sp)
1010800c:	28800117 	ldw	r2,4(r5)
10108010:	2cc00017 	ldw	r19,0(r5)
10108014:	29400204 	addi	r5,r5,8
10108018:	d9402d15 	stw	r5,180(sp)
1010801c:	102d883a 	mov	r22,r2
10108020:	10044b16 	blt	r2,zero,10109150 <___vfprintf_internal_r+0x1658>
10108024:	d9402917 	ldw	r5,164(sp)
10108028:	df002783 	ldbu	fp,158(sp)
1010802c:	2803bc16 	blt	r5,zero,10108f20 <___vfprintf_internal_r+0x1428>
10108030:	00ffdfc4 	movi	r3,-129
10108034:	9d84b03a 	or	r2,r19,r22
10108038:	90e4703a 	and	r18,r18,r3
1010803c:	10017726 	beq	r2,zero,1010861c <___vfprintf_internal_r+0xb24>
10108040:	b0038326 	beq	r22,zero,10108e50 <___vfprintf_internal_r+0x1358>
10108044:	dc402a15 	stw	r17,168(sp)
10108048:	dc001e04 	addi	r16,sp,120
1010804c:	b023883a 	mov	r17,r22
10108050:	402d883a 	mov	r22,r8
10108054:	9809883a 	mov	r4,r19
10108058:	880b883a 	mov	r5,r17
1010805c:	01800284 	movi	r6,10
10108060:	000f883a 	mov	r7,zero
10108064:	01113980 	call	10111398 <__umoddi3>
10108068:	10800c04 	addi	r2,r2,48
1010806c:	843fffc4 	addi	r16,r16,-1
10108070:	9809883a 	mov	r4,r19
10108074:	880b883a 	mov	r5,r17
10108078:	80800005 	stb	r2,0(r16)
1010807c:	01800284 	movi	r6,10
10108080:	000f883a 	mov	r7,zero
10108084:	0110e200 	call	10110e20 <__udivdi3>
10108088:	1027883a 	mov	r19,r2
1010808c:	10c4b03a 	or	r2,r2,r3
10108090:	1823883a 	mov	r17,r3
10108094:	103fef1e 	bne	r2,zero,10108054 <_gp+0xfffe6ac4>
10108098:	d8c02817 	ldw	r3,160(sp)
1010809c:	dc402a17 	ldw	r17,168(sp)
101080a0:	b011883a 	mov	r8,r22
101080a4:	1c07c83a 	sub	r3,r3,r16
101080a8:	d8c02e15 	stw	r3,184(sp)
101080ac:	00005906 	br	10108214 <___vfprintf_internal_r+0x71c>
101080b0:	18c03fcc 	andi	r3,r3,255
101080b4:	1806fa1e 	bne	r3,zero,10109ca0 <___vfprintf_internal_r+0x21a8>
101080b8:	9080020c 	andi	r2,r18,8
101080bc:	10048a26 	beq	r2,zero,101092e8 <___vfprintf_internal_r+0x17f0>
101080c0:	d8c02d17 	ldw	r3,180(sp)
101080c4:	d9002d17 	ldw	r4,180(sp)
101080c8:	d9402d17 	ldw	r5,180(sp)
101080cc:	18c00017 	ldw	r3,0(r3)
101080d0:	21000117 	ldw	r4,4(r4)
101080d4:	29400204 	addi	r5,r5,8
101080d8:	d8c03615 	stw	r3,216(sp)
101080dc:	d9003815 	stw	r4,224(sp)
101080e0:	d9402d15 	stw	r5,180(sp)
101080e4:	d9003617 	ldw	r4,216(sp)
101080e8:	d9403817 	ldw	r5,224(sp)
101080ec:	da003d15 	stw	r8,244(sp)
101080f0:	04000044 	movi	r16,1
101080f4:	010d90c0 	call	1010d90c <__fpclassifyd>
101080f8:	da003d17 	ldw	r8,244(sp)
101080fc:	14041f1e 	bne	r2,r16,1010917c <___vfprintf_internal_r+0x1684>
10108100:	d9003617 	ldw	r4,216(sp)
10108104:	d9403817 	ldw	r5,224(sp)
10108108:	000d883a 	mov	r6,zero
1010810c:	000f883a 	mov	r7,zero
10108110:	0112bc80 	call	10112bc8 <__ledf2>
10108114:	da003d17 	ldw	r8,244(sp)
10108118:	1005be16 	blt	r2,zero,10109814 <___vfprintf_internal_r+0x1d1c>
1010811c:	df002783 	ldbu	fp,158(sp)
10108120:	008011c4 	movi	r2,71
10108124:	1445330e 	bge	r2,r17,101095f4 <___vfprintf_internal_r+0x1afc>
10108128:	04040474 	movhi	r16,4113
1010812c:	841ddf04 	addi	r16,r16,30588
10108130:	00c000c4 	movi	r3,3
10108134:	00bfdfc4 	movi	r2,-129
10108138:	d8c02a15 	stw	r3,168(sp)
1010813c:	90a4703a 	and	r18,r18,r2
10108140:	d8c02e15 	stw	r3,184(sp)
10108144:	d8002915 	stw	zero,164(sp)
10108148:	d8003215 	stw	zero,200(sp)
1010814c:	00003706 	br	1010822c <___vfprintf_internal_r+0x734>
10108150:	94800214 	ori	r18,r18,8
10108154:	ac400007 	ldb	r17,0(r21)
10108158:	003ec806 	br	10107c7c <_gp+0xfffe66ec>
1010815c:	18c03fcc 	andi	r3,r3,255
10108160:	1806db1e 	bne	r3,zero,10109cd0 <___vfprintf_internal_r+0x21d8>
10108164:	94800414 	ori	r18,r18,16
10108168:	9080080c 	andi	r2,r18,32
1010816c:	1002d826 	beq	r2,zero,10108cd0 <___vfprintf_internal_r+0x11d8>
10108170:	d9402d17 	ldw	r5,180(sp)
10108174:	d8c02917 	ldw	r3,164(sp)
10108178:	d8002785 	stb	zero,158(sp)
1010817c:	28800204 	addi	r2,r5,8
10108180:	2cc00017 	ldw	r19,0(r5)
10108184:	2d800117 	ldw	r22,4(r5)
10108188:	18048f16 	blt	r3,zero,101093c8 <___vfprintf_internal_r+0x18d0>
1010818c:	013fdfc4 	movi	r4,-129
10108190:	9d86b03a 	or	r3,r19,r22
10108194:	d8802d15 	stw	r2,180(sp)
10108198:	9124703a 	and	r18,r18,r4
1010819c:	1802d91e 	bne	r3,zero,10108d04 <___vfprintf_internal_r+0x120c>
101081a0:	d8c02917 	ldw	r3,164(sp)
101081a4:	0039883a 	mov	fp,zero
101081a8:	1805c326 	beq	r3,zero,101098b8 <___vfprintf_internal_r+0x1dc0>
101081ac:	0027883a 	mov	r19,zero
101081b0:	002d883a 	mov	r22,zero
101081b4:	dc001e04 	addi	r16,sp,120
101081b8:	9806d0fa 	srli	r3,r19,3
101081bc:	b008977a 	slli	r4,r22,29
101081c0:	b02cd0fa 	srli	r22,r22,3
101081c4:	9cc001cc 	andi	r19,r19,7
101081c8:	98800c04 	addi	r2,r19,48
101081cc:	843fffc4 	addi	r16,r16,-1
101081d0:	20e6b03a 	or	r19,r4,r3
101081d4:	80800005 	stb	r2,0(r16)
101081d8:	9d86b03a 	or	r3,r19,r22
101081dc:	183ff61e 	bne	r3,zero,101081b8 <_gp+0xfffe6c28>
101081e0:	90c0004c 	andi	r3,r18,1
101081e4:	18013b26 	beq	r3,zero,101086d4 <___vfprintf_internal_r+0xbdc>
101081e8:	10803fcc 	andi	r2,r2,255
101081ec:	1080201c 	xori	r2,r2,128
101081f0:	10bfe004 	addi	r2,r2,-128
101081f4:	00c00c04 	movi	r3,48
101081f8:	10c13626 	beq	r2,r3,101086d4 <___vfprintf_internal_r+0xbdc>
101081fc:	80ffffc5 	stb	r3,-1(r16)
10108200:	d8c02817 	ldw	r3,160(sp)
10108204:	80bfffc4 	addi	r2,r16,-1
10108208:	1021883a 	mov	r16,r2
1010820c:	1887c83a 	sub	r3,r3,r2
10108210:	d8c02e15 	stw	r3,184(sp)
10108214:	d8802e17 	ldw	r2,184(sp)
10108218:	d9002917 	ldw	r4,164(sp)
1010821c:	1100010e 	bge	r2,r4,10108224 <___vfprintf_internal_r+0x72c>
10108220:	2005883a 	mov	r2,r4
10108224:	d8802a15 	stw	r2,168(sp)
10108228:	d8003215 	stw	zero,200(sp)
1010822c:	e7003fcc 	andi	fp,fp,255
10108230:	e700201c 	xori	fp,fp,128
10108234:	e73fe004 	addi	fp,fp,-128
10108238:	e0000326 	beq	fp,zero,10108248 <___vfprintf_internal_r+0x750>
1010823c:	d8c02a17 	ldw	r3,168(sp)
10108240:	18c00044 	addi	r3,r3,1
10108244:	d8c02a15 	stw	r3,168(sp)
10108248:	90c0008c 	andi	r3,r18,2
1010824c:	d8c02b15 	stw	r3,172(sp)
10108250:	18000326 	beq	r3,zero,10108260 <___vfprintf_internal_r+0x768>
10108254:	d8c02a17 	ldw	r3,168(sp)
10108258:	18c00084 	addi	r3,r3,2
1010825c:	d8c02a15 	stw	r3,168(sp)
10108260:	90c0210c 	andi	r3,r18,132
10108264:	d8c03015 	stw	r3,192(sp)
10108268:	1801a31e 	bne	r3,zero,101088f8 <___vfprintf_internal_r+0xe00>
1010826c:	d9003117 	ldw	r4,196(sp)
10108270:	d8c02a17 	ldw	r3,168(sp)
10108274:	20e7c83a 	sub	r19,r4,r3
10108278:	04c19f0e 	bge	zero,r19,101088f8 <___vfprintf_internal_r+0xe00>
1010827c:	02400404 	movi	r9,16
10108280:	d8c02017 	ldw	r3,128(sp)
10108284:	d8801f17 	ldw	r2,124(sp)
10108288:	4cc50d0e 	bge	r9,r19,101096c0 <___vfprintf_internal_r+0x1bc8>
1010828c:	01440474 	movhi	r5,4113
10108290:	295dfa84 	addi	r5,r5,30698
10108294:	dc403b15 	stw	r17,236(sp)
10108298:	d9403515 	stw	r5,212(sp)
1010829c:	9823883a 	mov	r17,r19
101082a0:	482d883a 	mov	r22,r9
101082a4:	9027883a 	mov	r19,r18
101082a8:	070001c4 	movi	fp,7
101082ac:	8025883a 	mov	r18,r16
101082b0:	dc002c17 	ldw	r16,176(sp)
101082b4:	00000306 	br	101082c4 <___vfprintf_internal_r+0x7cc>
101082b8:	8c7ffc04 	addi	r17,r17,-16
101082bc:	42000204 	addi	r8,r8,8
101082c0:	b440130e 	bge	r22,r17,10108310 <___vfprintf_internal_r+0x818>
101082c4:	01040474 	movhi	r4,4113
101082c8:	18c00404 	addi	r3,r3,16
101082cc:	10800044 	addi	r2,r2,1
101082d0:	211dfa84 	addi	r4,r4,30698
101082d4:	41000015 	stw	r4,0(r8)
101082d8:	45800115 	stw	r22,4(r8)
101082dc:	d8c02015 	stw	r3,128(sp)
101082e0:	d8801f15 	stw	r2,124(sp)
101082e4:	e0bff40e 	bge	fp,r2,101082b8 <_gp+0xfffe6d28>
101082e8:	d9801e04 	addi	r6,sp,120
101082ec:	b80b883a 	mov	r5,r23
101082f0:	8009883a 	mov	r4,r16
101082f4:	010f2680 	call	1010f268 <__sprint_r>
101082f8:	103f011e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101082fc:	8c7ffc04 	addi	r17,r17,-16
10108300:	d8c02017 	ldw	r3,128(sp)
10108304:	d8801f17 	ldw	r2,124(sp)
10108308:	da000404 	addi	r8,sp,16
1010830c:	b47fed16 	blt	r22,r17,101082c4 <_gp+0xfffe6d34>
10108310:	9021883a 	mov	r16,r18
10108314:	9825883a 	mov	r18,r19
10108318:	8827883a 	mov	r19,r17
1010831c:	dc403b17 	ldw	r17,236(sp)
10108320:	d9403517 	ldw	r5,212(sp)
10108324:	98c7883a 	add	r3,r19,r3
10108328:	10800044 	addi	r2,r2,1
1010832c:	41400015 	stw	r5,0(r8)
10108330:	44c00115 	stw	r19,4(r8)
10108334:	d8c02015 	stw	r3,128(sp)
10108338:	d8801f15 	stw	r2,124(sp)
1010833c:	010001c4 	movi	r4,7
10108340:	2082a316 	blt	r4,r2,10108dd0 <___vfprintf_internal_r+0x12d8>
10108344:	df002787 	ldb	fp,158(sp)
10108348:	42000204 	addi	r8,r8,8
1010834c:	e0000c26 	beq	fp,zero,10108380 <___vfprintf_internal_r+0x888>
10108350:	d8801f17 	ldw	r2,124(sp)
10108354:	d9002784 	addi	r4,sp,158
10108358:	18c00044 	addi	r3,r3,1
1010835c:	10800044 	addi	r2,r2,1
10108360:	41000015 	stw	r4,0(r8)
10108364:	01000044 	movi	r4,1
10108368:	41000115 	stw	r4,4(r8)
1010836c:	d8c02015 	stw	r3,128(sp)
10108370:	d8801f15 	stw	r2,124(sp)
10108374:	010001c4 	movi	r4,7
10108378:	20823c16 	blt	r4,r2,10108c6c <___vfprintf_internal_r+0x1174>
1010837c:	42000204 	addi	r8,r8,8
10108380:	d8802b17 	ldw	r2,172(sp)
10108384:	10000c26 	beq	r2,zero,101083b8 <___vfprintf_internal_r+0x8c0>
10108388:	d8801f17 	ldw	r2,124(sp)
1010838c:	d9002704 	addi	r4,sp,156
10108390:	18c00084 	addi	r3,r3,2
10108394:	10800044 	addi	r2,r2,1
10108398:	41000015 	stw	r4,0(r8)
1010839c:	01000084 	movi	r4,2
101083a0:	41000115 	stw	r4,4(r8)
101083a4:	d8c02015 	stw	r3,128(sp)
101083a8:	d8801f15 	stw	r2,124(sp)
101083ac:	010001c4 	movi	r4,7
101083b0:	20823616 	blt	r4,r2,10108c8c <___vfprintf_internal_r+0x1194>
101083b4:	42000204 	addi	r8,r8,8
101083b8:	d9003017 	ldw	r4,192(sp)
101083bc:	00802004 	movi	r2,128
101083c0:	20819926 	beq	r4,r2,10108a28 <___vfprintf_internal_r+0xf30>
101083c4:	d9402917 	ldw	r5,164(sp)
101083c8:	d8802e17 	ldw	r2,184(sp)
101083cc:	28adc83a 	sub	r22,r5,r2
101083d0:	0580310e 	bge	zero,r22,10108498 <___vfprintf_internal_r+0x9a0>
101083d4:	07000404 	movi	fp,16
101083d8:	d8801f17 	ldw	r2,124(sp)
101083dc:	e584140e 	bge	fp,r22,10109430 <___vfprintf_internal_r+0x1938>
101083e0:	01440474 	movhi	r5,4113
101083e4:	295df684 	addi	r5,r5,30682
101083e8:	dc402915 	stw	r17,164(sp)
101083ec:	d9402b15 	stw	r5,172(sp)
101083f0:	b023883a 	mov	r17,r22
101083f4:	04c001c4 	movi	r19,7
101083f8:	a82d883a 	mov	r22,r21
101083fc:	902b883a 	mov	r21,r18
10108400:	8025883a 	mov	r18,r16
10108404:	dc002c17 	ldw	r16,176(sp)
10108408:	00000306 	br	10108418 <___vfprintf_internal_r+0x920>
1010840c:	8c7ffc04 	addi	r17,r17,-16
10108410:	42000204 	addi	r8,r8,8
10108414:	e440110e 	bge	fp,r17,1010845c <___vfprintf_internal_r+0x964>
10108418:	18c00404 	addi	r3,r3,16
1010841c:	10800044 	addi	r2,r2,1
10108420:	45000015 	stw	r20,0(r8)
10108424:	47000115 	stw	fp,4(r8)
10108428:	d8c02015 	stw	r3,128(sp)
1010842c:	d8801f15 	stw	r2,124(sp)
10108430:	98bff60e 	bge	r19,r2,1010840c <_gp+0xfffe6e7c>
10108434:	d9801e04 	addi	r6,sp,120
10108438:	b80b883a 	mov	r5,r23
1010843c:	8009883a 	mov	r4,r16
10108440:	010f2680 	call	1010f268 <__sprint_r>
10108444:	103eae1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108448:	8c7ffc04 	addi	r17,r17,-16
1010844c:	d8c02017 	ldw	r3,128(sp)
10108450:	d8801f17 	ldw	r2,124(sp)
10108454:	da000404 	addi	r8,sp,16
10108458:	e47fef16 	blt	fp,r17,10108418 <_gp+0xfffe6e88>
1010845c:	9021883a 	mov	r16,r18
10108460:	a825883a 	mov	r18,r21
10108464:	b02b883a 	mov	r21,r22
10108468:	882d883a 	mov	r22,r17
1010846c:	dc402917 	ldw	r17,164(sp)
10108470:	d9002b17 	ldw	r4,172(sp)
10108474:	1d87883a 	add	r3,r3,r22
10108478:	10800044 	addi	r2,r2,1
1010847c:	41000015 	stw	r4,0(r8)
10108480:	45800115 	stw	r22,4(r8)
10108484:	d8c02015 	stw	r3,128(sp)
10108488:	d8801f15 	stw	r2,124(sp)
1010848c:	010001c4 	movi	r4,7
10108490:	2081ee16 	blt	r4,r2,10108c4c <___vfprintf_internal_r+0x1154>
10108494:	42000204 	addi	r8,r8,8
10108498:	9080400c 	andi	r2,r18,256
1010849c:	1001181e 	bne	r2,zero,10108900 <___vfprintf_internal_r+0xe08>
101084a0:	d9402e17 	ldw	r5,184(sp)
101084a4:	d8801f17 	ldw	r2,124(sp)
101084a8:	44000015 	stw	r16,0(r8)
101084ac:	1947883a 	add	r3,r3,r5
101084b0:	10800044 	addi	r2,r2,1
101084b4:	41400115 	stw	r5,4(r8)
101084b8:	d8c02015 	stw	r3,128(sp)
101084bc:	d8801f15 	stw	r2,124(sp)
101084c0:	010001c4 	movi	r4,7
101084c4:	2081d316 	blt	r4,r2,10108c14 <___vfprintf_internal_r+0x111c>
101084c8:	42000204 	addi	r8,r8,8
101084cc:	9480010c 	andi	r18,r18,4
101084d0:	90003226 	beq	r18,zero,1010859c <___vfprintf_internal_r+0xaa4>
101084d4:	d9403117 	ldw	r5,196(sp)
101084d8:	d8802a17 	ldw	r2,168(sp)
101084dc:	28a1c83a 	sub	r16,r5,r2
101084e0:	04002e0e 	bge	zero,r16,1010859c <___vfprintf_internal_r+0xaa4>
101084e4:	04400404 	movi	r17,16
101084e8:	d8801f17 	ldw	r2,124(sp)
101084ec:	8c04a20e 	bge	r17,r16,10109778 <___vfprintf_internal_r+0x1c80>
101084f0:	01440474 	movhi	r5,4113
101084f4:	295dfa84 	addi	r5,r5,30698
101084f8:	d9403515 	stw	r5,212(sp)
101084fc:	048001c4 	movi	r18,7
10108500:	dcc02c17 	ldw	r19,176(sp)
10108504:	00000306 	br	10108514 <___vfprintf_internal_r+0xa1c>
10108508:	843ffc04 	addi	r16,r16,-16
1010850c:	42000204 	addi	r8,r8,8
10108510:	8c00130e 	bge	r17,r16,10108560 <___vfprintf_internal_r+0xa68>
10108514:	01040474 	movhi	r4,4113
10108518:	18c00404 	addi	r3,r3,16
1010851c:	10800044 	addi	r2,r2,1
10108520:	211dfa84 	addi	r4,r4,30698
10108524:	41000015 	stw	r4,0(r8)
10108528:	44400115 	stw	r17,4(r8)
1010852c:	d8c02015 	stw	r3,128(sp)
10108530:	d8801f15 	stw	r2,124(sp)
10108534:	90bff40e 	bge	r18,r2,10108508 <_gp+0xfffe6f78>
10108538:	d9801e04 	addi	r6,sp,120
1010853c:	b80b883a 	mov	r5,r23
10108540:	9809883a 	mov	r4,r19
10108544:	010f2680 	call	1010f268 <__sprint_r>
10108548:	103e6d1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
1010854c:	843ffc04 	addi	r16,r16,-16
10108550:	d8c02017 	ldw	r3,128(sp)
10108554:	d8801f17 	ldw	r2,124(sp)
10108558:	da000404 	addi	r8,sp,16
1010855c:	8c3fed16 	blt	r17,r16,10108514 <_gp+0xfffe6f84>
10108560:	d9403517 	ldw	r5,212(sp)
10108564:	1c07883a 	add	r3,r3,r16
10108568:	10800044 	addi	r2,r2,1
1010856c:	41400015 	stw	r5,0(r8)
10108570:	44000115 	stw	r16,4(r8)
10108574:	d8c02015 	stw	r3,128(sp)
10108578:	d8801f15 	stw	r2,124(sp)
1010857c:	010001c4 	movi	r4,7
10108580:	2080060e 	bge	r4,r2,1010859c <___vfprintf_internal_r+0xaa4>
10108584:	d9002c17 	ldw	r4,176(sp)
10108588:	d9801e04 	addi	r6,sp,120
1010858c:	b80b883a 	mov	r5,r23
10108590:	010f2680 	call	1010f268 <__sprint_r>
10108594:	103e5a1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108598:	d8c02017 	ldw	r3,128(sp)
1010859c:	d8803117 	ldw	r2,196(sp)
101085a0:	d9002a17 	ldw	r4,168(sp)
101085a4:	1100010e 	bge	r2,r4,101085ac <___vfprintf_internal_r+0xab4>
101085a8:	2005883a 	mov	r2,r4
101085ac:	d9402f17 	ldw	r5,188(sp)
101085b0:	288b883a 	add	r5,r5,r2
101085b4:	d9402f15 	stw	r5,188(sp)
101085b8:	18019e1e 	bne	r3,zero,10108c34 <___vfprintf_internal_r+0x113c>
101085bc:	a8800007 	ldb	r2,0(r21)
101085c0:	d8001f15 	stw	zero,124(sp)
101085c4:	da000404 	addi	r8,sp,16
101085c8:	103d851e 	bne	r2,zero,10107be0 <_gp+0xfffe6650>
101085cc:	a821883a 	mov	r16,r21
101085d0:	003d9b06 	br	10107c40 <_gp+0xfffe66b0>
101085d4:	18c03fcc 	andi	r3,r3,255
101085d8:	1805c11e 	bne	r3,zero,10109ce0 <___vfprintf_internal_r+0x21e8>
101085dc:	94800414 	ori	r18,r18,16
101085e0:	9080080c 	andi	r2,r18,32
101085e4:	10020c26 	beq	r2,zero,10108e18 <___vfprintf_internal_r+0x1320>
101085e8:	d8802d17 	ldw	r2,180(sp)
101085ec:	d9002917 	ldw	r4,164(sp)
101085f0:	d8002785 	stb	zero,158(sp)
101085f4:	10c00204 	addi	r3,r2,8
101085f8:	14c00017 	ldw	r19,0(r2)
101085fc:	15800117 	ldw	r22,4(r2)
10108600:	20040f16 	blt	r4,zero,10109640 <___vfprintf_internal_r+0x1b48>
10108604:	013fdfc4 	movi	r4,-129
10108608:	9d84b03a 	or	r2,r19,r22
1010860c:	d8c02d15 	stw	r3,180(sp)
10108610:	9124703a 	and	r18,r18,r4
10108614:	0039883a 	mov	fp,zero
10108618:	103e891e 	bne	r2,zero,10108040 <_gp+0xfffe6ab0>
1010861c:	d9002917 	ldw	r4,164(sp)
10108620:	2002c11e 	bne	r4,zero,10109128 <___vfprintf_internal_r+0x1630>
10108624:	d8002915 	stw	zero,164(sp)
10108628:	d8002e15 	stw	zero,184(sp)
1010862c:	dc001e04 	addi	r16,sp,120
10108630:	003ef806 	br	10108214 <_gp+0xfffe6c84>
10108634:	18c03fcc 	andi	r3,r3,255
10108638:	18059d1e 	bne	r3,zero,10109cb0 <___vfprintf_internal_r+0x21b8>
1010863c:	01440474 	movhi	r5,4113
10108640:	295de204 	addi	r5,r5,30600
10108644:	d9403915 	stw	r5,228(sp)
10108648:	9080080c 	andi	r2,r18,32
1010864c:	10005226 	beq	r2,zero,10108798 <___vfprintf_internal_r+0xca0>
10108650:	d8802d17 	ldw	r2,180(sp)
10108654:	14c00017 	ldw	r19,0(r2)
10108658:	15800117 	ldw	r22,4(r2)
1010865c:	10800204 	addi	r2,r2,8
10108660:	d8802d15 	stw	r2,180(sp)
10108664:	9080004c 	andi	r2,r18,1
10108668:	10019026 	beq	r2,zero,10108cac <___vfprintf_internal_r+0x11b4>
1010866c:	9d84b03a 	or	r2,r19,r22
10108670:	10036926 	beq	r2,zero,10109418 <___vfprintf_internal_r+0x1920>
10108674:	d8c02917 	ldw	r3,164(sp)
10108678:	00800c04 	movi	r2,48
1010867c:	d8802705 	stb	r2,156(sp)
10108680:	dc402745 	stb	r17,157(sp)
10108684:	d8002785 	stb	zero,158(sp)
10108688:	90800094 	ori	r2,r18,2
1010868c:	18045d16 	blt	r3,zero,10109804 <___vfprintf_internal_r+0x1d0c>
10108690:	00bfdfc4 	movi	r2,-129
10108694:	90a4703a 	and	r18,r18,r2
10108698:	94800094 	ori	r18,r18,2
1010869c:	0039883a 	mov	fp,zero
101086a0:	d9003917 	ldw	r4,228(sp)
101086a4:	dc001e04 	addi	r16,sp,120
101086a8:	988003cc 	andi	r2,r19,15
101086ac:	b006973a 	slli	r3,r22,28
101086b0:	2085883a 	add	r2,r4,r2
101086b4:	9826d13a 	srli	r19,r19,4
101086b8:	10800003 	ldbu	r2,0(r2)
101086bc:	b02cd13a 	srli	r22,r22,4
101086c0:	843fffc4 	addi	r16,r16,-1
101086c4:	1ce6b03a 	or	r19,r3,r19
101086c8:	80800005 	stb	r2,0(r16)
101086cc:	9d84b03a 	or	r2,r19,r22
101086d0:	103ff51e 	bne	r2,zero,101086a8 <_gp+0xfffe7118>
101086d4:	d8c02817 	ldw	r3,160(sp)
101086d8:	1c07c83a 	sub	r3,r3,r16
101086dc:	d8c02e15 	stw	r3,184(sp)
101086e0:	003ecc06 	br	10108214 <_gp+0xfffe6c84>
101086e4:	18c03fcc 	andi	r3,r3,255
101086e8:	183e9f26 	beq	r3,zero,10108168 <_gp+0xfffe6bd8>
101086ec:	d9c02785 	stb	r7,158(sp)
101086f0:	003e9d06 	br	10108168 <_gp+0xfffe6bd8>
101086f4:	00c00044 	movi	r3,1
101086f8:	01c00ac4 	movi	r7,43
101086fc:	ac400007 	ldb	r17,0(r21)
10108700:	003d5e06 	br	10107c7c <_gp+0xfffe66ec>
10108704:	94800814 	ori	r18,r18,32
10108708:	ac400007 	ldb	r17,0(r21)
1010870c:	003d5b06 	br	10107c7c <_gp+0xfffe66ec>
10108710:	d8c02d17 	ldw	r3,180(sp)
10108714:	d8002785 	stb	zero,158(sp)
10108718:	1c000017 	ldw	r16,0(r3)
1010871c:	1cc00104 	addi	r19,r3,4
10108720:	80041926 	beq	r16,zero,10109788 <___vfprintf_internal_r+0x1c90>
10108724:	d9002917 	ldw	r4,164(sp)
10108728:	2003d016 	blt	r4,zero,1010966c <___vfprintf_internal_r+0x1b74>
1010872c:	200d883a 	mov	r6,r4
10108730:	000b883a 	mov	r5,zero
10108734:	8009883a 	mov	r4,r16
10108738:	da003d15 	stw	r8,244(sp)
1010873c:	010bfc40 	call	1010bfc4 <memchr>
10108740:	da003d17 	ldw	r8,244(sp)
10108744:	10045426 	beq	r2,zero,10109898 <___vfprintf_internal_r+0x1da0>
10108748:	1405c83a 	sub	r2,r2,r16
1010874c:	d8802e15 	stw	r2,184(sp)
10108750:	1003cc16 	blt	r2,zero,10109684 <___vfprintf_internal_r+0x1b8c>
10108754:	df002783 	ldbu	fp,158(sp)
10108758:	d8802a15 	stw	r2,168(sp)
1010875c:	dcc02d15 	stw	r19,180(sp)
10108760:	d8002915 	stw	zero,164(sp)
10108764:	d8003215 	stw	zero,200(sp)
10108768:	003eb006 	br	1010822c <_gp+0xfffe6c9c>
1010876c:	18c03fcc 	andi	r3,r3,255
10108770:	183f9b26 	beq	r3,zero,101085e0 <_gp+0xfffe7050>
10108774:	d9c02785 	stb	r7,158(sp)
10108778:	003f9906 	br	101085e0 <_gp+0xfffe7050>
1010877c:	18c03fcc 	andi	r3,r3,255
10108780:	1805551e 	bne	r3,zero,10109cd8 <___vfprintf_internal_r+0x21e0>
10108784:	01440474 	movhi	r5,4113
10108788:	295de704 	addi	r5,r5,30620
1010878c:	d9403915 	stw	r5,228(sp)
10108790:	9080080c 	andi	r2,r18,32
10108794:	103fae1e 	bne	r2,zero,10108650 <_gp+0xfffe70c0>
10108798:	9080040c 	andi	r2,r18,16
1010879c:	1002de26 	beq	r2,zero,10109318 <___vfprintf_internal_r+0x1820>
101087a0:	d8c02d17 	ldw	r3,180(sp)
101087a4:	002d883a 	mov	r22,zero
101087a8:	1cc00017 	ldw	r19,0(r3)
101087ac:	18c00104 	addi	r3,r3,4
101087b0:	d8c02d15 	stw	r3,180(sp)
101087b4:	003fab06 	br	10108664 <_gp+0xfffe70d4>
101087b8:	38803fcc 	andi	r2,r7,255
101087bc:	1080201c 	xori	r2,r2,128
101087c0:	10bfe004 	addi	r2,r2,-128
101087c4:	1002d21e 	bne	r2,zero,10109310 <___vfprintf_internal_r+0x1818>
101087c8:	00c00044 	movi	r3,1
101087cc:	01c00804 	movi	r7,32
101087d0:	ac400007 	ldb	r17,0(r21)
101087d4:	003d2906 	br	10107c7c <_gp+0xfffe66ec>
101087d8:	94800054 	ori	r18,r18,1
101087dc:	ac400007 	ldb	r17,0(r21)
101087e0:	003d2606 	br	10107c7c <_gp+0xfffe66ec>
101087e4:	18c03fcc 	andi	r3,r3,255
101087e8:	183e0526 	beq	r3,zero,10108000 <_gp+0xfffe6a70>
101087ec:	d9c02785 	stb	r7,158(sp)
101087f0:	003e0306 	br	10108000 <_gp+0xfffe6a70>
101087f4:	94801014 	ori	r18,r18,64
101087f8:	ac400007 	ldb	r17,0(r21)
101087fc:	003d1f06 	br	10107c7c <_gp+0xfffe66ec>
10108800:	ac400007 	ldb	r17,0(r21)
10108804:	8a438726 	beq	r17,r9,10109624 <___vfprintf_internal_r+0x1b2c>
10108808:	94800414 	ori	r18,r18,16
1010880c:	003d1b06 	br	10107c7c <_gp+0xfffe66ec>
10108810:	18c03fcc 	andi	r3,r3,255
10108814:	1805341e 	bne	r3,zero,10109ce8 <___vfprintf_internal_r+0x21f0>
10108818:	9080080c 	andi	r2,r18,32
1010881c:	1002cd26 	beq	r2,zero,10109354 <___vfprintf_internal_r+0x185c>
10108820:	d9402d17 	ldw	r5,180(sp)
10108824:	d9002f17 	ldw	r4,188(sp)
10108828:	28800017 	ldw	r2,0(r5)
1010882c:	2007d7fa 	srai	r3,r4,31
10108830:	29400104 	addi	r5,r5,4
10108834:	d9402d15 	stw	r5,180(sp)
10108838:	11000015 	stw	r4,0(r2)
1010883c:	10c00115 	stw	r3,4(r2)
10108840:	003ce506 	br	10107bd8 <_gp+0xfffe6648>
10108844:	d8c02d17 	ldw	r3,180(sp)
10108848:	d9002d17 	ldw	r4,180(sp)
1010884c:	d8002785 	stb	zero,158(sp)
10108850:	18800017 	ldw	r2,0(r3)
10108854:	21000104 	addi	r4,r4,4
10108858:	00c00044 	movi	r3,1
1010885c:	d8c02a15 	stw	r3,168(sp)
10108860:	d8801405 	stb	r2,80(sp)
10108864:	d9002d15 	stw	r4,180(sp)
10108868:	d8c02e15 	stw	r3,184(sp)
1010886c:	d8002915 	stw	zero,164(sp)
10108870:	d8003215 	stw	zero,200(sp)
10108874:	dc001404 	addi	r16,sp,80
10108878:	0039883a 	mov	fp,zero
1010887c:	003e7206 	br	10108248 <_gp+0xfffe6cb8>
10108880:	01040474 	movhi	r4,4113
10108884:	211de704 	addi	r4,r4,30620
10108888:	0039883a 	mov	fp,zero
1010888c:	d9003915 	stw	r4,228(sp)
10108890:	04401e04 	movi	r17,120
10108894:	003f8206 	br	101086a0 <_gp+0xfffe7110>
10108898:	18c03fcc 	andi	r3,r3,255
1010889c:	1805061e 	bne	r3,zero,10109cb8 <___vfprintf_internal_r+0x21c0>
101088a0:	883d9126 	beq	r17,zero,10107ee8 <_gp+0xfffe6958>
101088a4:	00c00044 	movi	r3,1
101088a8:	d8c02a15 	stw	r3,168(sp)
101088ac:	dc401405 	stb	r17,80(sp)
101088b0:	d8002785 	stb	zero,158(sp)
101088b4:	003fec06 	br	10108868 <_gp+0xfffe72d8>
101088b8:	01440474 	movhi	r5,4113
101088bc:	295de704 	addi	r5,r5,30620
101088c0:	d9403915 	stw	r5,228(sp)
101088c4:	d8c02d15 	stw	r3,180(sp)
101088c8:	1025883a 	mov	r18,r2
101088cc:	04401e04 	movi	r17,120
101088d0:	9d84b03a 	or	r2,r19,r22
101088d4:	1000fc1e 	bne	r2,zero,10108cc8 <___vfprintf_internal_r+0x11d0>
101088d8:	0039883a 	mov	fp,zero
101088dc:	00800084 	movi	r2,2
101088e0:	10803fcc 	andi	r2,r2,255
101088e4:	00c00044 	movi	r3,1
101088e8:	10c20f26 	beq	r2,r3,10109128 <___vfprintf_internal_r+0x1630>
101088ec:	00c00084 	movi	r3,2
101088f0:	10fd6326 	beq	r2,r3,10107e80 <_gp+0xfffe68f0>
101088f4:	003e2d06 	br	101081ac <_gp+0xfffe6c1c>
101088f8:	d8c02017 	ldw	r3,128(sp)
101088fc:	003e9306 	br	1010834c <_gp+0xfffe6dbc>
10108900:	00801944 	movi	r2,101
10108904:	14407e0e 	bge	r2,r17,10108b00 <___vfprintf_internal_r+0x1008>
10108908:	d9003617 	ldw	r4,216(sp)
1010890c:	d9403817 	ldw	r5,224(sp)
10108910:	000d883a 	mov	r6,zero
10108914:	000f883a 	mov	r7,zero
10108918:	d8c03c15 	stw	r3,240(sp)
1010891c:	da003d15 	stw	r8,244(sp)
10108920:	0112a640 	call	10112a64 <__eqdf2>
10108924:	d8c03c17 	ldw	r3,240(sp)
10108928:	da003d17 	ldw	r8,244(sp)
1010892c:	1000f71e 	bne	r2,zero,10108d0c <___vfprintf_internal_r+0x1214>
10108930:	d8801f17 	ldw	r2,124(sp)
10108934:	01040474 	movhi	r4,4113
10108938:	211dee04 	addi	r4,r4,30648
1010893c:	18c00044 	addi	r3,r3,1
10108940:	10800044 	addi	r2,r2,1
10108944:	41000015 	stw	r4,0(r8)
10108948:	01000044 	movi	r4,1
1010894c:	41000115 	stw	r4,4(r8)
10108950:	d8c02015 	stw	r3,128(sp)
10108954:	d8801f15 	stw	r2,124(sp)
10108958:	010001c4 	movi	r4,7
1010895c:	2082b816 	blt	r4,r2,10109440 <___vfprintf_internal_r+0x1948>
10108960:	42000204 	addi	r8,r8,8
10108964:	d8802617 	ldw	r2,152(sp)
10108968:	d9403317 	ldw	r5,204(sp)
1010896c:	11400216 	blt	r2,r5,10108978 <___vfprintf_internal_r+0xe80>
10108970:	9080004c 	andi	r2,r18,1
10108974:	103ed526 	beq	r2,zero,101084cc <_gp+0xfffe6f3c>
10108978:	d8803717 	ldw	r2,220(sp)
1010897c:	d9003417 	ldw	r4,208(sp)
10108980:	d9403717 	ldw	r5,220(sp)
10108984:	1887883a 	add	r3,r3,r2
10108988:	d8801f17 	ldw	r2,124(sp)
1010898c:	41000015 	stw	r4,0(r8)
10108990:	41400115 	stw	r5,4(r8)
10108994:	10800044 	addi	r2,r2,1
10108998:	d8c02015 	stw	r3,128(sp)
1010899c:	d8801f15 	stw	r2,124(sp)
101089a0:	010001c4 	movi	r4,7
101089a4:	20832916 	blt	r4,r2,1010964c <___vfprintf_internal_r+0x1b54>
101089a8:	42000204 	addi	r8,r8,8
101089ac:	d8803317 	ldw	r2,204(sp)
101089b0:	143fffc4 	addi	r16,r2,-1
101089b4:	043ec50e 	bge	zero,r16,101084cc <_gp+0xfffe6f3c>
101089b8:	04400404 	movi	r17,16
101089bc:	d8801f17 	ldw	r2,124(sp)
101089c0:	8c00880e 	bge	r17,r16,10108be4 <___vfprintf_internal_r+0x10ec>
101089c4:	01440474 	movhi	r5,4113
101089c8:	295df684 	addi	r5,r5,30682
101089cc:	d9402b15 	stw	r5,172(sp)
101089d0:	058001c4 	movi	r22,7
101089d4:	dcc02c17 	ldw	r19,176(sp)
101089d8:	00000306 	br	101089e8 <___vfprintf_internal_r+0xef0>
101089dc:	42000204 	addi	r8,r8,8
101089e0:	843ffc04 	addi	r16,r16,-16
101089e4:	8c00820e 	bge	r17,r16,10108bf0 <___vfprintf_internal_r+0x10f8>
101089e8:	18c00404 	addi	r3,r3,16
101089ec:	10800044 	addi	r2,r2,1
101089f0:	45000015 	stw	r20,0(r8)
101089f4:	44400115 	stw	r17,4(r8)
101089f8:	d8c02015 	stw	r3,128(sp)
101089fc:	d8801f15 	stw	r2,124(sp)
10108a00:	b0bff60e 	bge	r22,r2,101089dc <_gp+0xfffe744c>
10108a04:	d9801e04 	addi	r6,sp,120
10108a08:	b80b883a 	mov	r5,r23
10108a0c:	9809883a 	mov	r4,r19
10108a10:	010f2680 	call	1010f268 <__sprint_r>
10108a14:	103d3a1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108a18:	d8c02017 	ldw	r3,128(sp)
10108a1c:	d8801f17 	ldw	r2,124(sp)
10108a20:	da000404 	addi	r8,sp,16
10108a24:	003fee06 	br	101089e0 <_gp+0xfffe7450>
10108a28:	d9403117 	ldw	r5,196(sp)
10108a2c:	d8802a17 	ldw	r2,168(sp)
10108a30:	28adc83a 	sub	r22,r5,r2
10108a34:	05be630e 	bge	zero,r22,101083c4 <_gp+0xfffe6e34>
10108a38:	07000404 	movi	fp,16
10108a3c:	d8801f17 	ldw	r2,124(sp)
10108a40:	e5838f0e 	bge	fp,r22,10109880 <___vfprintf_internal_r+0x1d88>
10108a44:	01440474 	movhi	r5,4113
10108a48:	295df684 	addi	r5,r5,30682
10108a4c:	dc403015 	stw	r17,192(sp)
10108a50:	d9402b15 	stw	r5,172(sp)
10108a54:	b023883a 	mov	r17,r22
10108a58:	04c001c4 	movi	r19,7
10108a5c:	a82d883a 	mov	r22,r21
10108a60:	902b883a 	mov	r21,r18
10108a64:	8025883a 	mov	r18,r16
10108a68:	dc002c17 	ldw	r16,176(sp)
10108a6c:	00000306 	br	10108a7c <___vfprintf_internal_r+0xf84>
10108a70:	8c7ffc04 	addi	r17,r17,-16
10108a74:	42000204 	addi	r8,r8,8
10108a78:	e440110e 	bge	fp,r17,10108ac0 <___vfprintf_internal_r+0xfc8>
10108a7c:	18c00404 	addi	r3,r3,16
10108a80:	10800044 	addi	r2,r2,1
10108a84:	45000015 	stw	r20,0(r8)
10108a88:	47000115 	stw	fp,4(r8)
10108a8c:	d8c02015 	stw	r3,128(sp)
10108a90:	d8801f15 	stw	r2,124(sp)
10108a94:	98bff60e 	bge	r19,r2,10108a70 <_gp+0xfffe74e0>
10108a98:	d9801e04 	addi	r6,sp,120
10108a9c:	b80b883a 	mov	r5,r23
10108aa0:	8009883a 	mov	r4,r16
10108aa4:	010f2680 	call	1010f268 <__sprint_r>
10108aa8:	103d151e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108aac:	8c7ffc04 	addi	r17,r17,-16
10108ab0:	d8c02017 	ldw	r3,128(sp)
10108ab4:	d8801f17 	ldw	r2,124(sp)
10108ab8:	da000404 	addi	r8,sp,16
10108abc:	e47fef16 	blt	fp,r17,10108a7c <_gp+0xfffe74ec>
10108ac0:	9021883a 	mov	r16,r18
10108ac4:	a825883a 	mov	r18,r21
10108ac8:	b02b883a 	mov	r21,r22
10108acc:	882d883a 	mov	r22,r17
10108ad0:	dc403017 	ldw	r17,192(sp)
10108ad4:	d9002b17 	ldw	r4,172(sp)
10108ad8:	1d87883a 	add	r3,r3,r22
10108adc:	10800044 	addi	r2,r2,1
10108ae0:	41000015 	stw	r4,0(r8)
10108ae4:	45800115 	stw	r22,4(r8)
10108ae8:	d8c02015 	stw	r3,128(sp)
10108aec:	d8801f15 	stw	r2,124(sp)
10108af0:	010001c4 	movi	r4,7
10108af4:	20818e16 	blt	r4,r2,10109130 <___vfprintf_internal_r+0x1638>
10108af8:	42000204 	addi	r8,r8,8
10108afc:	003e3106 	br	101083c4 <_gp+0xfffe6e34>
10108b00:	d9403317 	ldw	r5,204(sp)
10108b04:	00800044 	movi	r2,1
10108b08:	18c00044 	addi	r3,r3,1
10108b0c:	1141530e 	bge	r2,r5,1010905c <___vfprintf_internal_r+0x1564>
10108b10:	dc401f17 	ldw	r17,124(sp)
10108b14:	00800044 	movi	r2,1
10108b18:	40800115 	stw	r2,4(r8)
10108b1c:	8c400044 	addi	r17,r17,1
10108b20:	44000015 	stw	r16,0(r8)
10108b24:	d8c02015 	stw	r3,128(sp)
10108b28:	dc401f15 	stw	r17,124(sp)
10108b2c:	008001c4 	movi	r2,7
10108b30:	14416b16 	blt	r2,r17,101090e0 <___vfprintf_internal_r+0x15e8>
10108b34:	42000204 	addi	r8,r8,8
10108b38:	d8803717 	ldw	r2,220(sp)
10108b3c:	d9003417 	ldw	r4,208(sp)
10108b40:	8c400044 	addi	r17,r17,1
10108b44:	10c7883a 	add	r3,r2,r3
10108b48:	40800115 	stw	r2,4(r8)
10108b4c:	41000015 	stw	r4,0(r8)
10108b50:	d8c02015 	stw	r3,128(sp)
10108b54:	dc401f15 	stw	r17,124(sp)
10108b58:	008001c4 	movi	r2,7
10108b5c:	14416916 	blt	r2,r17,10109104 <___vfprintf_internal_r+0x160c>
10108b60:	45800204 	addi	r22,r8,8
10108b64:	d9003617 	ldw	r4,216(sp)
10108b68:	d9403817 	ldw	r5,224(sp)
10108b6c:	000d883a 	mov	r6,zero
10108b70:	000f883a 	mov	r7,zero
10108b74:	d8c03c15 	stw	r3,240(sp)
10108b78:	0112a640 	call	10112a64 <__eqdf2>
10108b7c:	d8c03c17 	ldw	r3,240(sp)
10108b80:	1000bc26 	beq	r2,zero,10108e74 <___vfprintf_internal_r+0x137c>
10108b84:	d9403317 	ldw	r5,204(sp)
10108b88:	84000044 	addi	r16,r16,1
10108b8c:	8c400044 	addi	r17,r17,1
10108b90:	28bfffc4 	addi	r2,r5,-1
10108b94:	1887883a 	add	r3,r3,r2
10108b98:	b0800115 	stw	r2,4(r22)
10108b9c:	b4000015 	stw	r16,0(r22)
10108ba0:	d8c02015 	stw	r3,128(sp)
10108ba4:	dc401f15 	stw	r17,124(sp)
10108ba8:	008001c4 	movi	r2,7
10108bac:	14414316 	blt	r2,r17,101090bc <___vfprintf_internal_r+0x15c4>
10108bb0:	b5800204 	addi	r22,r22,8
10108bb4:	d9003a17 	ldw	r4,232(sp)
10108bb8:	df0022c4 	addi	fp,sp,139
10108bbc:	8c400044 	addi	r17,r17,1
10108bc0:	20c7883a 	add	r3,r4,r3
10108bc4:	b7000015 	stw	fp,0(r22)
10108bc8:	b1000115 	stw	r4,4(r22)
10108bcc:	d8c02015 	stw	r3,128(sp)
10108bd0:	dc401f15 	stw	r17,124(sp)
10108bd4:	008001c4 	movi	r2,7
10108bd8:	14400e16 	blt	r2,r17,10108c14 <___vfprintf_internal_r+0x111c>
10108bdc:	b2000204 	addi	r8,r22,8
10108be0:	003e3a06 	br	101084cc <_gp+0xfffe6f3c>
10108be4:	01040474 	movhi	r4,4113
10108be8:	211df684 	addi	r4,r4,30682
10108bec:	d9002b15 	stw	r4,172(sp)
10108bf0:	d9002b17 	ldw	r4,172(sp)
10108bf4:	1c07883a 	add	r3,r3,r16
10108bf8:	44000115 	stw	r16,4(r8)
10108bfc:	41000015 	stw	r4,0(r8)
10108c00:	10800044 	addi	r2,r2,1
10108c04:	d8c02015 	stw	r3,128(sp)
10108c08:	d8801f15 	stw	r2,124(sp)
10108c0c:	010001c4 	movi	r4,7
10108c10:	20be2d0e 	bge	r4,r2,101084c8 <_gp+0xfffe6f38>
10108c14:	d9002c17 	ldw	r4,176(sp)
10108c18:	d9801e04 	addi	r6,sp,120
10108c1c:	b80b883a 	mov	r5,r23
10108c20:	010f2680 	call	1010f268 <__sprint_r>
10108c24:	103cb61e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108c28:	d8c02017 	ldw	r3,128(sp)
10108c2c:	da000404 	addi	r8,sp,16
10108c30:	003e2606 	br	101084cc <_gp+0xfffe6f3c>
10108c34:	d9002c17 	ldw	r4,176(sp)
10108c38:	d9801e04 	addi	r6,sp,120
10108c3c:	b80b883a 	mov	r5,r23
10108c40:	010f2680 	call	1010f268 <__sprint_r>
10108c44:	103e5d26 	beq	r2,zero,101085bc <_gp+0xfffe702c>
10108c48:	003cad06 	br	10107f00 <_gp+0xfffe6970>
10108c4c:	d9002c17 	ldw	r4,176(sp)
10108c50:	d9801e04 	addi	r6,sp,120
10108c54:	b80b883a 	mov	r5,r23
10108c58:	010f2680 	call	1010f268 <__sprint_r>
10108c5c:	103ca81e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108c60:	d8c02017 	ldw	r3,128(sp)
10108c64:	da000404 	addi	r8,sp,16
10108c68:	003e0b06 	br	10108498 <_gp+0xfffe6f08>
10108c6c:	d9002c17 	ldw	r4,176(sp)
10108c70:	d9801e04 	addi	r6,sp,120
10108c74:	b80b883a 	mov	r5,r23
10108c78:	010f2680 	call	1010f268 <__sprint_r>
10108c7c:	103ca01e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108c80:	d8c02017 	ldw	r3,128(sp)
10108c84:	da000404 	addi	r8,sp,16
10108c88:	003dbd06 	br	10108380 <_gp+0xfffe6df0>
10108c8c:	d9002c17 	ldw	r4,176(sp)
10108c90:	d9801e04 	addi	r6,sp,120
10108c94:	b80b883a 	mov	r5,r23
10108c98:	010f2680 	call	1010f268 <__sprint_r>
10108c9c:	103c981e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108ca0:	d8c02017 	ldw	r3,128(sp)
10108ca4:	da000404 	addi	r8,sp,16
10108ca8:	003dc306 	br	101083b8 <_gp+0xfffe6e28>
10108cac:	d8802917 	ldw	r2,164(sp)
10108cb0:	d8002785 	stb	zero,158(sp)
10108cb4:	103f0616 	blt	r2,zero,101088d0 <_gp+0xfffe7340>
10108cb8:	00ffdfc4 	movi	r3,-129
10108cbc:	9d84b03a 	or	r2,r19,r22
10108cc0:	90e4703a 	and	r18,r18,r3
10108cc4:	103c6b26 	beq	r2,zero,10107e74 <_gp+0xfffe68e4>
10108cc8:	0039883a 	mov	fp,zero
10108ccc:	003e7406 	br	101086a0 <_gp+0xfffe7110>
10108cd0:	9080040c 	andi	r2,r18,16
10108cd4:	1001b326 	beq	r2,zero,101093a4 <___vfprintf_internal_r+0x18ac>
10108cd8:	d9002d17 	ldw	r4,180(sp)
10108cdc:	d9402917 	ldw	r5,164(sp)
10108ce0:	d8002785 	stb	zero,158(sp)
10108ce4:	20800104 	addi	r2,r4,4
10108ce8:	24c00017 	ldw	r19,0(r4)
10108cec:	002d883a 	mov	r22,zero
10108cf0:	2801b516 	blt	r5,zero,101093c8 <___vfprintf_internal_r+0x18d0>
10108cf4:	00ffdfc4 	movi	r3,-129
10108cf8:	d8802d15 	stw	r2,180(sp)
10108cfc:	90e4703a 	and	r18,r18,r3
10108d00:	983d2726 	beq	r19,zero,101081a0 <_gp+0xfffe6c10>
10108d04:	0039883a 	mov	fp,zero
10108d08:	003d2a06 	br	101081b4 <_gp+0xfffe6c24>
10108d0c:	dc402617 	ldw	r17,152(sp)
10108d10:	0441d30e 	bge	zero,r17,10109460 <___vfprintf_internal_r+0x1968>
10108d14:	dc403217 	ldw	r17,200(sp)
10108d18:	d8803317 	ldw	r2,204(sp)
10108d1c:	1440010e 	bge	r2,r17,10108d24 <___vfprintf_internal_r+0x122c>
10108d20:	1023883a 	mov	r17,r2
10108d24:	04400a0e 	bge	zero,r17,10108d50 <___vfprintf_internal_r+0x1258>
10108d28:	d8801f17 	ldw	r2,124(sp)
10108d2c:	1c47883a 	add	r3,r3,r17
10108d30:	44000015 	stw	r16,0(r8)
10108d34:	10800044 	addi	r2,r2,1
10108d38:	44400115 	stw	r17,4(r8)
10108d3c:	d8c02015 	stw	r3,128(sp)
10108d40:	d8801f15 	stw	r2,124(sp)
10108d44:	010001c4 	movi	r4,7
10108d48:	20826516 	blt	r4,r2,101096e0 <___vfprintf_internal_r+0x1be8>
10108d4c:	42000204 	addi	r8,r8,8
10108d50:	88026116 	blt	r17,zero,101096d8 <___vfprintf_internal_r+0x1be0>
10108d54:	d9003217 	ldw	r4,200(sp)
10108d58:	2463c83a 	sub	r17,r4,r17
10108d5c:	04407b0e 	bge	zero,r17,10108f4c <___vfprintf_internal_r+0x1454>
10108d60:	05800404 	movi	r22,16
10108d64:	d8801f17 	ldw	r2,124(sp)
10108d68:	b4419d0e 	bge	r22,r17,101093e0 <___vfprintf_internal_r+0x18e8>
10108d6c:	01040474 	movhi	r4,4113
10108d70:	211df684 	addi	r4,r4,30682
10108d74:	d9002b15 	stw	r4,172(sp)
10108d78:	070001c4 	movi	fp,7
10108d7c:	dcc02c17 	ldw	r19,176(sp)
10108d80:	00000306 	br	10108d90 <___vfprintf_internal_r+0x1298>
10108d84:	42000204 	addi	r8,r8,8
10108d88:	8c7ffc04 	addi	r17,r17,-16
10108d8c:	b441970e 	bge	r22,r17,101093ec <___vfprintf_internal_r+0x18f4>
10108d90:	18c00404 	addi	r3,r3,16
10108d94:	10800044 	addi	r2,r2,1
10108d98:	45000015 	stw	r20,0(r8)
10108d9c:	45800115 	stw	r22,4(r8)
10108da0:	d8c02015 	stw	r3,128(sp)
10108da4:	d8801f15 	stw	r2,124(sp)
10108da8:	e0bff60e 	bge	fp,r2,10108d84 <_gp+0xfffe77f4>
10108dac:	d9801e04 	addi	r6,sp,120
10108db0:	b80b883a 	mov	r5,r23
10108db4:	9809883a 	mov	r4,r19
10108db8:	010f2680 	call	1010f268 <__sprint_r>
10108dbc:	103c501e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108dc0:	d8c02017 	ldw	r3,128(sp)
10108dc4:	d8801f17 	ldw	r2,124(sp)
10108dc8:	da000404 	addi	r8,sp,16
10108dcc:	003fee06 	br	10108d88 <_gp+0xfffe77f8>
10108dd0:	d9002c17 	ldw	r4,176(sp)
10108dd4:	d9801e04 	addi	r6,sp,120
10108dd8:	b80b883a 	mov	r5,r23
10108ddc:	010f2680 	call	1010f268 <__sprint_r>
10108de0:	103c471e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108de4:	d8c02017 	ldw	r3,128(sp)
10108de8:	df002787 	ldb	fp,158(sp)
10108dec:	da000404 	addi	r8,sp,16
10108df0:	003d5606 	br	1010834c <_gp+0xfffe6dbc>
10108df4:	9080040c 	andi	r2,r18,16
10108df8:	10016126 	beq	r2,zero,10109380 <___vfprintf_internal_r+0x1888>
10108dfc:	d8802d17 	ldw	r2,180(sp)
10108e00:	14c00017 	ldw	r19,0(r2)
10108e04:	10800104 	addi	r2,r2,4
10108e08:	d8802d15 	stw	r2,180(sp)
10108e0c:	982dd7fa 	srai	r22,r19,31
10108e10:	b005883a 	mov	r2,r22
10108e14:	003c8206 	br	10108020 <_gp+0xfffe6a90>
10108e18:	9080040c 	andi	r2,r18,16
10108e1c:	10003526 	beq	r2,zero,10108ef4 <___vfprintf_internal_r+0x13fc>
10108e20:	d9402d17 	ldw	r5,180(sp)
10108e24:	d8c02917 	ldw	r3,164(sp)
10108e28:	d8002785 	stb	zero,158(sp)
10108e2c:	28800104 	addi	r2,r5,4
10108e30:	2cc00017 	ldw	r19,0(r5)
10108e34:	002d883a 	mov	r22,zero
10108e38:	18003716 	blt	r3,zero,10108f18 <___vfprintf_internal_r+0x1420>
10108e3c:	00ffdfc4 	movi	r3,-129
10108e40:	d8802d15 	stw	r2,180(sp)
10108e44:	90e4703a 	and	r18,r18,r3
10108e48:	0039883a 	mov	fp,zero
10108e4c:	983df326 	beq	r19,zero,1010861c <_gp+0xfffe708c>
10108e50:	00800244 	movi	r2,9
10108e54:	14fc7b36 	bltu	r2,r19,10108044 <_gp+0xfffe6ab4>
10108e58:	d8c02817 	ldw	r3,160(sp)
10108e5c:	dc001dc4 	addi	r16,sp,119
10108e60:	9cc00c04 	addi	r19,r19,48
10108e64:	1c07c83a 	sub	r3,r3,r16
10108e68:	dcc01dc5 	stb	r19,119(sp)
10108e6c:	d8c02e15 	stw	r3,184(sp)
10108e70:	003ce806 	br	10108214 <_gp+0xfffe6c84>
10108e74:	d8803317 	ldw	r2,204(sp)
10108e78:	143fffc4 	addi	r16,r2,-1
10108e7c:	043f4d0e 	bge	zero,r16,10108bb4 <_gp+0xfffe7624>
10108e80:	07000404 	movi	fp,16
10108e84:	e400810e 	bge	fp,r16,1010908c <___vfprintf_internal_r+0x1594>
10108e88:	01440474 	movhi	r5,4113
10108e8c:	295df684 	addi	r5,r5,30682
10108e90:	d9402b15 	stw	r5,172(sp)
10108e94:	01c001c4 	movi	r7,7
10108e98:	dcc02c17 	ldw	r19,176(sp)
10108e9c:	00000306 	br	10108eac <___vfprintf_internal_r+0x13b4>
10108ea0:	b5800204 	addi	r22,r22,8
10108ea4:	843ffc04 	addi	r16,r16,-16
10108ea8:	e4007b0e 	bge	fp,r16,10109098 <___vfprintf_internal_r+0x15a0>
10108eac:	18c00404 	addi	r3,r3,16
10108eb0:	8c400044 	addi	r17,r17,1
10108eb4:	b5000015 	stw	r20,0(r22)
10108eb8:	b7000115 	stw	fp,4(r22)
10108ebc:	d8c02015 	stw	r3,128(sp)
10108ec0:	dc401f15 	stw	r17,124(sp)
10108ec4:	3c7ff60e 	bge	r7,r17,10108ea0 <_gp+0xfffe7910>
10108ec8:	d9801e04 	addi	r6,sp,120
10108ecc:	b80b883a 	mov	r5,r23
10108ed0:	9809883a 	mov	r4,r19
10108ed4:	d9c03c15 	stw	r7,240(sp)
10108ed8:	010f2680 	call	1010f268 <__sprint_r>
10108edc:	d9c03c17 	ldw	r7,240(sp)
10108ee0:	103c071e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108ee4:	d8c02017 	ldw	r3,128(sp)
10108ee8:	dc401f17 	ldw	r17,124(sp)
10108eec:	dd800404 	addi	r22,sp,16
10108ef0:	003fec06 	br	10108ea4 <_gp+0xfffe7914>
10108ef4:	9080100c 	andi	r2,r18,64
10108ef8:	d8002785 	stb	zero,158(sp)
10108efc:	10010e26 	beq	r2,zero,10109338 <___vfprintf_internal_r+0x1840>
10108f00:	d9002d17 	ldw	r4,180(sp)
10108f04:	d9402917 	ldw	r5,164(sp)
10108f08:	002d883a 	mov	r22,zero
10108f0c:	20800104 	addi	r2,r4,4
10108f10:	24c0000b 	ldhu	r19,0(r4)
10108f14:	283fc90e 	bge	r5,zero,10108e3c <_gp+0xfffe78ac>
10108f18:	d8802d15 	stw	r2,180(sp)
10108f1c:	0039883a 	mov	fp,zero
10108f20:	9d84b03a 	or	r2,r19,r22
10108f24:	103c461e 	bne	r2,zero,10108040 <_gp+0xfffe6ab0>
10108f28:	00800044 	movi	r2,1
10108f2c:	003e6c06 	br	101088e0 <_gp+0xfffe7350>
10108f30:	d9002c17 	ldw	r4,176(sp)
10108f34:	d9801e04 	addi	r6,sp,120
10108f38:	b80b883a 	mov	r5,r23
10108f3c:	010f2680 	call	1010f268 <__sprint_r>
10108f40:	103bef1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10108f44:	d8c02017 	ldw	r3,128(sp)
10108f48:	da000404 	addi	r8,sp,16
10108f4c:	d9003217 	ldw	r4,200(sp)
10108f50:	d8802617 	ldw	r2,152(sp)
10108f54:	d9403317 	ldw	r5,204(sp)
10108f58:	8123883a 	add	r17,r16,r4
10108f5c:	11400216 	blt	r2,r5,10108f68 <___vfprintf_internal_r+0x1470>
10108f60:	9100004c 	andi	r4,r18,1
10108f64:	20000d26 	beq	r4,zero,10108f9c <___vfprintf_internal_r+0x14a4>
10108f68:	d9003717 	ldw	r4,220(sp)
10108f6c:	d9403417 	ldw	r5,208(sp)
10108f70:	1907883a 	add	r3,r3,r4
10108f74:	d9001f17 	ldw	r4,124(sp)
10108f78:	41400015 	stw	r5,0(r8)
10108f7c:	d9403717 	ldw	r5,220(sp)
10108f80:	21000044 	addi	r4,r4,1
10108f84:	d8c02015 	stw	r3,128(sp)
10108f88:	41400115 	stw	r5,4(r8)
10108f8c:	d9001f15 	stw	r4,124(sp)
10108f90:	014001c4 	movi	r5,7
10108f94:	2901e816 	blt	r5,r4,10109738 <___vfprintf_internal_r+0x1c40>
10108f98:	42000204 	addi	r8,r8,8
10108f9c:	d9003317 	ldw	r4,204(sp)
10108fa0:	8121883a 	add	r16,r16,r4
10108fa4:	2085c83a 	sub	r2,r4,r2
10108fa8:	8461c83a 	sub	r16,r16,r17
10108fac:	1400010e 	bge	r2,r16,10108fb4 <___vfprintf_internal_r+0x14bc>
10108fb0:	1021883a 	mov	r16,r2
10108fb4:	04000a0e 	bge	zero,r16,10108fe0 <___vfprintf_internal_r+0x14e8>
10108fb8:	d9001f17 	ldw	r4,124(sp)
10108fbc:	1c07883a 	add	r3,r3,r16
10108fc0:	44400015 	stw	r17,0(r8)
10108fc4:	21000044 	addi	r4,r4,1
10108fc8:	44000115 	stw	r16,4(r8)
10108fcc:	d8c02015 	stw	r3,128(sp)
10108fd0:	d9001f15 	stw	r4,124(sp)
10108fd4:	014001c4 	movi	r5,7
10108fd8:	2901fb16 	blt	r5,r4,101097c8 <___vfprintf_internal_r+0x1cd0>
10108fdc:	42000204 	addi	r8,r8,8
10108fe0:	8001f716 	blt	r16,zero,101097c0 <___vfprintf_internal_r+0x1cc8>
10108fe4:	1421c83a 	sub	r16,r2,r16
10108fe8:	043d380e 	bge	zero,r16,101084cc <_gp+0xfffe6f3c>
10108fec:	04400404 	movi	r17,16
10108ff0:	d8801f17 	ldw	r2,124(sp)
10108ff4:	8c3efb0e 	bge	r17,r16,10108be4 <_gp+0xfffe7654>
10108ff8:	01440474 	movhi	r5,4113
10108ffc:	295df684 	addi	r5,r5,30682
10109000:	d9402b15 	stw	r5,172(sp)
10109004:	058001c4 	movi	r22,7
10109008:	dcc02c17 	ldw	r19,176(sp)
1010900c:	00000306 	br	1010901c <___vfprintf_internal_r+0x1524>
10109010:	42000204 	addi	r8,r8,8
10109014:	843ffc04 	addi	r16,r16,-16
10109018:	8c3ef50e 	bge	r17,r16,10108bf0 <_gp+0xfffe7660>
1010901c:	18c00404 	addi	r3,r3,16
10109020:	10800044 	addi	r2,r2,1
10109024:	45000015 	stw	r20,0(r8)
10109028:	44400115 	stw	r17,4(r8)
1010902c:	d8c02015 	stw	r3,128(sp)
10109030:	d8801f15 	stw	r2,124(sp)
10109034:	b0bff60e 	bge	r22,r2,10109010 <_gp+0xfffe7a80>
10109038:	d9801e04 	addi	r6,sp,120
1010903c:	b80b883a 	mov	r5,r23
10109040:	9809883a 	mov	r4,r19
10109044:	010f2680 	call	1010f268 <__sprint_r>
10109048:	103bad1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
1010904c:	d8c02017 	ldw	r3,128(sp)
10109050:	d8801f17 	ldw	r2,124(sp)
10109054:	da000404 	addi	r8,sp,16
10109058:	003fee06 	br	10109014 <_gp+0xfffe7a84>
1010905c:	9088703a 	and	r4,r18,r2
10109060:	203eab1e 	bne	r4,zero,10108b10 <_gp+0xfffe7580>
10109064:	dc401f17 	ldw	r17,124(sp)
10109068:	40800115 	stw	r2,4(r8)
1010906c:	44000015 	stw	r16,0(r8)
10109070:	8c400044 	addi	r17,r17,1
10109074:	d8c02015 	stw	r3,128(sp)
10109078:	dc401f15 	stw	r17,124(sp)
1010907c:	008001c4 	movi	r2,7
10109080:	14400e16 	blt	r2,r17,101090bc <___vfprintf_internal_r+0x15c4>
10109084:	45800204 	addi	r22,r8,8
10109088:	003eca06 	br	10108bb4 <_gp+0xfffe7624>
1010908c:	01040474 	movhi	r4,4113
10109090:	211df684 	addi	r4,r4,30682
10109094:	d9002b15 	stw	r4,172(sp)
10109098:	d8802b17 	ldw	r2,172(sp)
1010909c:	1c07883a 	add	r3,r3,r16
101090a0:	8c400044 	addi	r17,r17,1
101090a4:	b0800015 	stw	r2,0(r22)
101090a8:	b4000115 	stw	r16,4(r22)
101090ac:	d8c02015 	stw	r3,128(sp)
101090b0:	dc401f15 	stw	r17,124(sp)
101090b4:	008001c4 	movi	r2,7
101090b8:	147ebd0e 	bge	r2,r17,10108bb0 <_gp+0xfffe7620>
101090bc:	d9002c17 	ldw	r4,176(sp)
101090c0:	d9801e04 	addi	r6,sp,120
101090c4:	b80b883a 	mov	r5,r23
101090c8:	010f2680 	call	1010f268 <__sprint_r>
101090cc:	103b8c1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101090d0:	d8c02017 	ldw	r3,128(sp)
101090d4:	dc401f17 	ldw	r17,124(sp)
101090d8:	dd800404 	addi	r22,sp,16
101090dc:	003eb506 	br	10108bb4 <_gp+0xfffe7624>
101090e0:	d9002c17 	ldw	r4,176(sp)
101090e4:	d9801e04 	addi	r6,sp,120
101090e8:	b80b883a 	mov	r5,r23
101090ec:	010f2680 	call	1010f268 <__sprint_r>
101090f0:	103b831e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101090f4:	d8c02017 	ldw	r3,128(sp)
101090f8:	dc401f17 	ldw	r17,124(sp)
101090fc:	da000404 	addi	r8,sp,16
10109100:	003e8d06 	br	10108b38 <_gp+0xfffe75a8>
10109104:	d9002c17 	ldw	r4,176(sp)
10109108:	d9801e04 	addi	r6,sp,120
1010910c:	b80b883a 	mov	r5,r23
10109110:	010f2680 	call	1010f268 <__sprint_r>
10109114:	103b7a1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10109118:	d8c02017 	ldw	r3,128(sp)
1010911c:	dc401f17 	ldw	r17,124(sp)
10109120:	dd800404 	addi	r22,sp,16
10109124:	003e8f06 	br	10108b64 <_gp+0xfffe75d4>
10109128:	0027883a 	mov	r19,zero
1010912c:	003f4a06 	br	10108e58 <_gp+0xfffe78c8>
10109130:	d9002c17 	ldw	r4,176(sp)
10109134:	d9801e04 	addi	r6,sp,120
10109138:	b80b883a 	mov	r5,r23
1010913c:	010f2680 	call	1010f268 <__sprint_r>
10109140:	103b6f1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10109144:	d8c02017 	ldw	r3,128(sp)
10109148:	da000404 	addi	r8,sp,16
1010914c:	003c9d06 	br	101083c4 <_gp+0xfffe6e34>
10109150:	04e7c83a 	sub	r19,zero,r19
10109154:	9804c03a 	cmpne	r2,r19,zero
10109158:	05adc83a 	sub	r22,zero,r22
1010915c:	b0adc83a 	sub	r22,r22,r2
10109160:	d8802917 	ldw	r2,164(sp)
10109164:	07000b44 	movi	fp,45
10109168:	df002785 	stb	fp,158(sp)
1010916c:	10017b16 	blt	r2,zero,1010975c <___vfprintf_internal_r+0x1c64>
10109170:	00bfdfc4 	movi	r2,-129
10109174:	90a4703a 	and	r18,r18,r2
10109178:	003bb106 	br	10108040 <_gp+0xfffe6ab0>
1010917c:	d9003617 	ldw	r4,216(sp)
10109180:	d9403817 	ldw	r5,224(sp)
10109184:	da003d15 	stw	r8,244(sp)
10109188:	010d90c0 	call	1010d90c <__fpclassifyd>
1010918c:	da003d17 	ldw	r8,244(sp)
10109190:	1000f026 	beq	r2,zero,10109554 <___vfprintf_internal_r+0x1a5c>
10109194:	d9002917 	ldw	r4,164(sp)
10109198:	05bff7c4 	movi	r22,-33
1010919c:	00bfffc4 	movi	r2,-1
101091a0:	8dac703a 	and	r22,r17,r22
101091a4:	20820026 	beq	r4,r2,101099a8 <___vfprintf_internal_r+0x1eb0>
101091a8:	008011c4 	movi	r2,71
101091ac:	b081f726 	beq	r22,r2,1010998c <___vfprintf_internal_r+0x1e94>
101091b0:	d9003817 	ldw	r4,224(sp)
101091b4:	90c04014 	ori	r3,r18,256
101091b8:	d8c02b15 	stw	r3,172(sp)
101091bc:	20021516 	blt	r4,zero,10109a14 <___vfprintf_internal_r+0x1f1c>
101091c0:	dcc03817 	ldw	r19,224(sp)
101091c4:	d8002a05 	stb	zero,168(sp)
101091c8:	00801984 	movi	r2,102
101091cc:	8881f926 	beq	r17,r2,101099b4 <___vfprintf_internal_r+0x1ebc>
101091d0:	00801184 	movi	r2,70
101091d4:	88821c26 	beq	r17,r2,10109a48 <___vfprintf_internal_r+0x1f50>
101091d8:	00801144 	movi	r2,69
101091dc:	b081ef26 	beq	r22,r2,1010999c <___vfprintf_internal_r+0x1ea4>
101091e0:	d8c02917 	ldw	r3,164(sp)
101091e4:	d8802104 	addi	r2,sp,132
101091e8:	d8800315 	stw	r2,12(sp)
101091ec:	d9403617 	ldw	r5,216(sp)
101091f0:	d8802504 	addi	r2,sp,148
101091f4:	d9002c17 	ldw	r4,176(sp)
101091f8:	d8800215 	stw	r2,8(sp)
101091fc:	d8802604 	addi	r2,sp,152
10109200:	d8c00015 	stw	r3,0(sp)
10109204:	d8800115 	stw	r2,4(sp)
10109208:	01c00084 	movi	r7,2
1010920c:	980d883a 	mov	r6,r19
10109210:	d8c03c15 	stw	r3,240(sp)
10109214:	da003d15 	stw	r8,244(sp)
10109218:	010a1e80 	call	1010a1e8 <_dtoa_r>
1010921c:	1021883a 	mov	r16,r2
10109220:	008019c4 	movi	r2,103
10109224:	d8c03c17 	ldw	r3,240(sp)
10109228:	da003d17 	ldw	r8,244(sp)
1010922c:	88817126 	beq	r17,r2,101097f4 <___vfprintf_internal_r+0x1cfc>
10109230:	008011c4 	movi	r2,71
10109234:	88829226 	beq	r17,r2,10109c80 <___vfprintf_internal_r+0x2188>
10109238:	80f9883a 	add	fp,r16,r3
1010923c:	d9003617 	ldw	r4,216(sp)
10109240:	000d883a 	mov	r6,zero
10109244:	000f883a 	mov	r7,zero
10109248:	980b883a 	mov	r5,r19
1010924c:	da003d15 	stw	r8,244(sp)
10109250:	0112a640 	call	10112a64 <__eqdf2>
10109254:	da003d17 	ldw	r8,244(sp)
10109258:	10018d26 	beq	r2,zero,10109890 <___vfprintf_internal_r+0x1d98>
1010925c:	d8802117 	ldw	r2,132(sp)
10109260:	1700062e 	bgeu	r2,fp,1010927c <___vfprintf_internal_r+0x1784>
10109264:	01000c04 	movi	r4,48
10109268:	10c00044 	addi	r3,r2,1
1010926c:	d8c02115 	stw	r3,132(sp)
10109270:	11000005 	stb	r4,0(r2)
10109274:	d8802117 	ldw	r2,132(sp)
10109278:	173ffb36 	bltu	r2,fp,10109268 <_gp+0xfffe7cd8>
1010927c:	1405c83a 	sub	r2,r2,r16
10109280:	d8803315 	stw	r2,204(sp)
10109284:	008011c4 	movi	r2,71
10109288:	b0817626 	beq	r22,r2,10109864 <___vfprintf_internal_r+0x1d6c>
1010928c:	00801944 	movi	r2,101
10109290:	1442810e 	bge	r2,r17,10109c98 <___vfprintf_internal_r+0x21a0>
10109294:	d8c02617 	ldw	r3,152(sp)
10109298:	00801984 	movi	r2,102
1010929c:	d8c03215 	stw	r3,200(sp)
101092a0:	8881fe26 	beq	r17,r2,10109a9c <___vfprintf_internal_r+0x1fa4>
101092a4:	d8c03217 	ldw	r3,200(sp)
101092a8:	d9003317 	ldw	r4,204(sp)
101092ac:	1901dd16 	blt	r3,r4,10109a24 <___vfprintf_internal_r+0x1f2c>
101092b0:	9480004c 	andi	r18,r18,1
101092b4:	90022b1e 	bne	r18,zero,10109b64 <___vfprintf_internal_r+0x206c>
101092b8:	1805883a 	mov	r2,r3
101092bc:	18028016 	blt	r3,zero,10109cc0 <___vfprintf_internal_r+0x21c8>
101092c0:	d8c03217 	ldw	r3,200(sp)
101092c4:	044019c4 	movi	r17,103
101092c8:	d8c02e15 	stw	r3,184(sp)
101092cc:	df002a07 	ldb	fp,168(sp)
101092d0:	e001531e 	bne	fp,zero,10109820 <___vfprintf_internal_r+0x1d28>
101092d4:	df002783 	ldbu	fp,158(sp)
101092d8:	d8802a15 	stw	r2,168(sp)
101092dc:	dc802b17 	ldw	r18,172(sp)
101092e0:	d8002915 	stw	zero,164(sp)
101092e4:	003bd106 	br	1010822c <_gp+0xfffe6c9c>
101092e8:	d8802d17 	ldw	r2,180(sp)
101092ec:	d8c02d17 	ldw	r3,180(sp)
101092f0:	d9002d17 	ldw	r4,180(sp)
101092f4:	10800017 	ldw	r2,0(r2)
101092f8:	18c00117 	ldw	r3,4(r3)
101092fc:	21000204 	addi	r4,r4,8
10109300:	d8803615 	stw	r2,216(sp)
10109304:	d8c03815 	stw	r3,224(sp)
10109308:	d9002d15 	stw	r4,180(sp)
1010930c:	003b7506 	br	101080e4 <_gp+0xfffe6b54>
10109310:	ac400007 	ldb	r17,0(r21)
10109314:	003a5906 	br	10107c7c <_gp+0xfffe66ec>
10109318:	9080100c 	andi	r2,r18,64
1010931c:	1000a826 	beq	r2,zero,101095c0 <___vfprintf_internal_r+0x1ac8>
10109320:	d9002d17 	ldw	r4,180(sp)
10109324:	002d883a 	mov	r22,zero
10109328:	24c0000b 	ldhu	r19,0(r4)
1010932c:	21000104 	addi	r4,r4,4
10109330:	d9002d15 	stw	r4,180(sp)
10109334:	003ccb06 	br	10108664 <_gp+0xfffe70d4>
10109338:	d8c02d17 	ldw	r3,180(sp)
1010933c:	d9002917 	ldw	r4,164(sp)
10109340:	002d883a 	mov	r22,zero
10109344:	18800104 	addi	r2,r3,4
10109348:	1cc00017 	ldw	r19,0(r3)
1010934c:	203ebb0e 	bge	r4,zero,10108e3c <_gp+0xfffe78ac>
10109350:	003ef106 	br	10108f18 <_gp+0xfffe7988>
10109354:	9080040c 	andi	r2,r18,16
10109358:	1000921e 	bne	r2,zero,101095a4 <___vfprintf_internal_r+0x1aac>
1010935c:	9480100c 	andi	r18,r18,64
10109360:	90013926 	beq	r18,zero,10109848 <___vfprintf_internal_r+0x1d50>
10109364:	d9002d17 	ldw	r4,180(sp)
10109368:	d9402f17 	ldw	r5,188(sp)
1010936c:	20800017 	ldw	r2,0(r4)
10109370:	21000104 	addi	r4,r4,4
10109374:	d9002d15 	stw	r4,180(sp)
10109378:	1140000d 	sth	r5,0(r2)
1010937c:	003a1606 	br	10107bd8 <_gp+0xfffe6648>
10109380:	9080100c 	andi	r2,r18,64
10109384:	10008026 	beq	r2,zero,10109588 <___vfprintf_internal_r+0x1a90>
10109388:	d8c02d17 	ldw	r3,180(sp)
1010938c:	1cc0000f 	ldh	r19,0(r3)
10109390:	18c00104 	addi	r3,r3,4
10109394:	d8c02d15 	stw	r3,180(sp)
10109398:	982dd7fa 	srai	r22,r19,31
1010939c:	b005883a 	mov	r2,r22
101093a0:	003b1f06 	br	10108020 <_gp+0xfffe6a90>
101093a4:	9080100c 	andi	r2,r18,64
101093a8:	d8002785 	stb	zero,158(sp)
101093ac:	10008a1e 	bne	r2,zero,101095d8 <___vfprintf_internal_r+0x1ae0>
101093b0:	d9402d17 	ldw	r5,180(sp)
101093b4:	d8c02917 	ldw	r3,164(sp)
101093b8:	002d883a 	mov	r22,zero
101093bc:	28800104 	addi	r2,r5,4
101093c0:	2cc00017 	ldw	r19,0(r5)
101093c4:	183e4b0e 	bge	r3,zero,10108cf4 <_gp+0xfffe7764>
101093c8:	9d86b03a 	or	r3,r19,r22
101093cc:	d8802d15 	stw	r2,180(sp)
101093d0:	183e4c1e 	bne	r3,zero,10108d04 <_gp+0xfffe7774>
101093d4:	0039883a 	mov	fp,zero
101093d8:	0005883a 	mov	r2,zero
101093dc:	003d4006 	br	101088e0 <_gp+0xfffe7350>
101093e0:	01440474 	movhi	r5,4113
101093e4:	295df684 	addi	r5,r5,30682
101093e8:	d9402b15 	stw	r5,172(sp)
101093ec:	d9402b17 	ldw	r5,172(sp)
101093f0:	1c47883a 	add	r3,r3,r17
101093f4:	10800044 	addi	r2,r2,1
101093f8:	41400015 	stw	r5,0(r8)
101093fc:	44400115 	stw	r17,4(r8)
10109400:	d8c02015 	stw	r3,128(sp)
10109404:	d8801f15 	stw	r2,124(sp)
10109408:	010001c4 	movi	r4,7
1010940c:	20bec816 	blt	r4,r2,10108f30 <_gp+0xfffe79a0>
10109410:	42000204 	addi	r8,r8,8
10109414:	003ecd06 	br	10108f4c <_gp+0xfffe79bc>
10109418:	d9002917 	ldw	r4,164(sp)
1010941c:	d8002785 	stb	zero,158(sp)
10109420:	203d2d16 	blt	r4,zero,101088d8 <_gp+0xfffe7348>
10109424:	00bfdfc4 	movi	r2,-129
10109428:	90a4703a 	and	r18,r18,r2
1010942c:	003a9106 	br	10107e74 <_gp+0xfffe68e4>
10109430:	01040474 	movhi	r4,4113
10109434:	211df684 	addi	r4,r4,30682
10109438:	d9002b15 	stw	r4,172(sp)
1010943c:	003c0c06 	br	10108470 <_gp+0xfffe6ee0>
10109440:	d9002c17 	ldw	r4,176(sp)
10109444:	d9801e04 	addi	r6,sp,120
10109448:	b80b883a 	mov	r5,r23
1010944c:	010f2680 	call	1010f268 <__sprint_r>
10109450:	103aab1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10109454:	d8c02017 	ldw	r3,128(sp)
10109458:	da000404 	addi	r8,sp,16
1010945c:	003d4106 	br	10108964 <_gp+0xfffe73d4>
10109460:	d8801f17 	ldw	r2,124(sp)
10109464:	01440474 	movhi	r5,4113
10109468:	01000044 	movi	r4,1
1010946c:	18c00044 	addi	r3,r3,1
10109470:	10800044 	addi	r2,r2,1
10109474:	295dee04 	addi	r5,r5,30648
10109478:	41000115 	stw	r4,4(r8)
1010947c:	41400015 	stw	r5,0(r8)
10109480:	d8c02015 	stw	r3,128(sp)
10109484:	d8801f15 	stw	r2,124(sp)
10109488:	010001c4 	movi	r4,7
1010948c:	20805c16 	blt	r4,r2,10109600 <___vfprintf_internal_r+0x1b08>
10109490:	42000204 	addi	r8,r8,8
10109494:	8800041e 	bne	r17,zero,101094a8 <___vfprintf_internal_r+0x19b0>
10109498:	d8803317 	ldw	r2,204(sp)
1010949c:	1000021e 	bne	r2,zero,101094a8 <___vfprintf_internal_r+0x19b0>
101094a0:	9080004c 	andi	r2,r18,1
101094a4:	103c0926 	beq	r2,zero,101084cc <_gp+0xfffe6f3c>
101094a8:	d9003717 	ldw	r4,220(sp)
101094ac:	d8801f17 	ldw	r2,124(sp)
101094b0:	d9403417 	ldw	r5,208(sp)
101094b4:	20c7883a 	add	r3,r4,r3
101094b8:	10800044 	addi	r2,r2,1
101094bc:	41000115 	stw	r4,4(r8)
101094c0:	41400015 	stw	r5,0(r8)
101094c4:	d8c02015 	stw	r3,128(sp)
101094c8:	d8801f15 	stw	r2,124(sp)
101094cc:	010001c4 	movi	r4,7
101094d0:	20812116 	blt	r4,r2,10109958 <___vfprintf_internal_r+0x1e60>
101094d4:	42000204 	addi	r8,r8,8
101094d8:	0463c83a 	sub	r17,zero,r17
101094dc:	0440730e 	bge	zero,r17,101096ac <___vfprintf_internal_r+0x1bb4>
101094e0:	05800404 	movi	r22,16
101094e4:	b440860e 	bge	r22,r17,10109700 <___vfprintf_internal_r+0x1c08>
101094e8:	01440474 	movhi	r5,4113
101094ec:	295df684 	addi	r5,r5,30682
101094f0:	d9402b15 	stw	r5,172(sp)
101094f4:	070001c4 	movi	fp,7
101094f8:	dcc02c17 	ldw	r19,176(sp)
101094fc:	00000306 	br	1010950c <___vfprintf_internal_r+0x1a14>
10109500:	42000204 	addi	r8,r8,8
10109504:	8c7ffc04 	addi	r17,r17,-16
10109508:	b440800e 	bge	r22,r17,1010970c <___vfprintf_internal_r+0x1c14>
1010950c:	18c00404 	addi	r3,r3,16
10109510:	10800044 	addi	r2,r2,1
10109514:	45000015 	stw	r20,0(r8)
10109518:	45800115 	stw	r22,4(r8)
1010951c:	d8c02015 	stw	r3,128(sp)
10109520:	d8801f15 	stw	r2,124(sp)
10109524:	e0bff60e 	bge	fp,r2,10109500 <_gp+0xfffe7f70>
10109528:	d9801e04 	addi	r6,sp,120
1010952c:	b80b883a 	mov	r5,r23
10109530:	9809883a 	mov	r4,r19
10109534:	010f2680 	call	1010f268 <__sprint_r>
10109538:	103a711e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
1010953c:	d8c02017 	ldw	r3,128(sp)
10109540:	d8801f17 	ldw	r2,124(sp)
10109544:	da000404 	addi	r8,sp,16
10109548:	003fee06 	br	10109504 <_gp+0xfffe7f74>
1010954c:	00bfffc4 	movi	r2,-1
10109550:	003a6f06 	br	10107f10 <_gp+0xfffe6980>
10109554:	008011c4 	movi	r2,71
10109558:	1440b816 	blt	r2,r17,1010983c <___vfprintf_internal_r+0x1d44>
1010955c:	04040474 	movhi	r16,4113
10109560:	841de004 	addi	r16,r16,30592
10109564:	00c000c4 	movi	r3,3
10109568:	00bfdfc4 	movi	r2,-129
1010956c:	d8c02a15 	stw	r3,168(sp)
10109570:	90a4703a 	and	r18,r18,r2
10109574:	df002783 	ldbu	fp,158(sp)
10109578:	d8c02e15 	stw	r3,184(sp)
1010957c:	d8002915 	stw	zero,164(sp)
10109580:	d8003215 	stw	zero,200(sp)
10109584:	003b2906 	br	1010822c <_gp+0xfffe6c9c>
10109588:	d9002d17 	ldw	r4,180(sp)
1010958c:	24c00017 	ldw	r19,0(r4)
10109590:	21000104 	addi	r4,r4,4
10109594:	d9002d15 	stw	r4,180(sp)
10109598:	982dd7fa 	srai	r22,r19,31
1010959c:	b005883a 	mov	r2,r22
101095a0:	003a9f06 	br	10108020 <_gp+0xfffe6a90>
101095a4:	d9402d17 	ldw	r5,180(sp)
101095a8:	d8c02f17 	ldw	r3,188(sp)
101095ac:	28800017 	ldw	r2,0(r5)
101095b0:	29400104 	addi	r5,r5,4
101095b4:	d9402d15 	stw	r5,180(sp)
101095b8:	10c00015 	stw	r3,0(r2)
101095bc:	00398606 	br	10107bd8 <_gp+0xfffe6648>
101095c0:	d9402d17 	ldw	r5,180(sp)
101095c4:	002d883a 	mov	r22,zero
101095c8:	2cc00017 	ldw	r19,0(r5)
101095cc:	29400104 	addi	r5,r5,4
101095d0:	d9402d15 	stw	r5,180(sp)
101095d4:	003c2306 	br	10108664 <_gp+0xfffe70d4>
101095d8:	d8c02d17 	ldw	r3,180(sp)
101095dc:	d9002917 	ldw	r4,164(sp)
101095e0:	002d883a 	mov	r22,zero
101095e4:	18800104 	addi	r2,r3,4
101095e8:	1cc0000b 	ldhu	r19,0(r3)
101095ec:	203dc10e 	bge	r4,zero,10108cf4 <_gp+0xfffe7764>
101095f0:	003f7506 	br	101093c8 <_gp+0xfffe7e38>
101095f4:	04040474 	movhi	r16,4113
101095f8:	841dde04 	addi	r16,r16,30584
101095fc:	003acc06 	br	10108130 <_gp+0xfffe6ba0>
10109600:	d9002c17 	ldw	r4,176(sp)
10109604:	d9801e04 	addi	r6,sp,120
10109608:	b80b883a 	mov	r5,r23
1010960c:	010f2680 	call	1010f268 <__sprint_r>
10109610:	103a3b1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10109614:	dc402617 	ldw	r17,152(sp)
10109618:	d8c02017 	ldw	r3,128(sp)
1010961c:	da000404 	addi	r8,sp,16
10109620:	003f9c06 	br	10109494 <_gp+0xfffe7f04>
10109624:	ac400043 	ldbu	r17,1(r21)
10109628:	94800814 	ori	r18,r18,32
1010962c:	ad400044 	addi	r21,r21,1
10109630:	8c403fcc 	andi	r17,r17,255
10109634:	8c40201c 	xori	r17,r17,128
10109638:	8c7fe004 	addi	r17,r17,-128
1010963c:	00398f06 	br	10107c7c <_gp+0xfffe66ec>
10109640:	d8c02d15 	stw	r3,180(sp)
10109644:	0039883a 	mov	fp,zero
10109648:	003e3506 	br	10108f20 <_gp+0xfffe7990>
1010964c:	d9002c17 	ldw	r4,176(sp)
10109650:	d9801e04 	addi	r6,sp,120
10109654:	b80b883a 	mov	r5,r23
10109658:	010f2680 	call	1010f268 <__sprint_r>
1010965c:	103a281e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
10109660:	d8c02017 	ldw	r3,128(sp)
10109664:	da000404 	addi	r8,sp,16
10109668:	003cd006 	br	101089ac <_gp+0xfffe741c>
1010966c:	8009883a 	mov	r4,r16
10109670:	da003d15 	stw	r8,244(sp)
10109674:	01058200 	call	10105820 <strlen>
10109678:	d8802e15 	stw	r2,184(sp)
1010967c:	da003d17 	ldw	r8,244(sp)
10109680:	103c340e 	bge	r2,zero,10108754 <_gp+0xfffe71c4>
10109684:	0005883a 	mov	r2,zero
10109688:	003c3206 	br	10108754 <_gp+0xfffe71c4>
1010968c:	d9002c17 	ldw	r4,176(sp)
10109690:	d9801e04 	addi	r6,sp,120
10109694:	b80b883a 	mov	r5,r23
10109698:	010f2680 	call	1010f268 <__sprint_r>
1010969c:	103a181e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101096a0:	d8c02017 	ldw	r3,128(sp)
101096a4:	d8801f17 	ldw	r2,124(sp)
101096a8:	da000404 	addi	r8,sp,16
101096ac:	d9403317 	ldw	r5,204(sp)
101096b0:	10800044 	addi	r2,r2,1
101096b4:	44000015 	stw	r16,0(r8)
101096b8:	28c7883a 	add	r3,r5,r3
101096bc:	003b7d06 	br	101084b4 <_gp+0xfffe6f24>
101096c0:	01040474 	movhi	r4,4113
101096c4:	211dfa84 	addi	r4,r4,30698
101096c8:	d9003515 	stw	r4,212(sp)
101096cc:	003b1406 	br	10108320 <_gp+0xfffe6d90>
101096d0:	013fffc4 	movi	r4,-1
101096d4:	003a3506 	br	10107fac <_gp+0xfffe6a1c>
101096d8:	0023883a 	mov	r17,zero
101096dc:	003d9d06 	br	10108d54 <_gp+0xfffe77c4>
101096e0:	d9002c17 	ldw	r4,176(sp)
101096e4:	d9801e04 	addi	r6,sp,120
101096e8:	b80b883a 	mov	r5,r23
101096ec:	010f2680 	call	1010f268 <__sprint_r>
101096f0:	103a031e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101096f4:	d8c02017 	ldw	r3,128(sp)
101096f8:	da000404 	addi	r8,sp,16
101096fc:	003d9406 	br	10108d50 <_gp+0xfffe77c0>
10109700:	01040474 	movhi	r4,4113
10109704:	211df684 	addi	r4,r4,30682
10109708:	d9002b15 	stw	r4,172(sp)
1010970c:	d9002b17 	ldw	r4,172(sp)
10109710:	1c47883a 	add	r3,r3,r17
10109714:	10800044 	addi	r2,r2,1
10109718:	41000015 	stw	r4,0(r8)
1010971c:	44400115 	stw	r17,4(r8)
10109720:	d8c02015 	stw	r3,128(sp)
10109724:	d8801f15 	stw	r2,124(sp)
10109728:	010001c4 	movi	r4,7
1010972c:	20bfd716 	blt	r4,r2,1010968c <_gp+0xfffe80fc>
10109730:	42000204 	addi	r8,r8,8
10109734:	003fdd06 	br	101096ac <_gp+0xfffe811c>
10109738:	d9002c17 	ldw	r4,176(sp)
1010973c:	d9801e04 	addi	r6,sp,120
10109740:	b80b883a 	mov	r5,r23
10109744:	010f2680 	call	1010f268 <__sprint_r>
10109748:	1039ed1e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
1010974c:	d8802617 	ldw	r2,152(sp)
10109750:	d8c02017 	ldw	r3,128(sp)
10109754:	da000404 	addi	r8,sp,16
10109758:	003e1006 	br	10108f9c <_gp+0xfffe7a0c>
1010975c:	00800044 	movi	r2,1
10109760:	10803fcc 	andi	r2,r2,255
10109764:	00c00044 	movi	r3,1
10109768:	10fa3526 	beq	r2,r3,10108040 <_gp+0xfffe6ab0>
1010976c:	00c00084 	movi	r3,2
10109770:	10fbcb26 	beq	r2,r3,101086a0 <_gp+0xfffe7110>
10109774:	003a8f06 	br	101081b4 <_gp+0xfffe6c24>
10109778:	01040474 	movhi	r4,4113
1010977c:	211dfa84 	addi	r4,r4,30698
10109780:	d9003515 	stw	r4,212(sp)
10109784:	003b7606 	br	10108560 <_gp+0xfffe6fd0>
10109788:	d8802917 	ldw	r2,164(sp)
1010978c:	00c00184 	movi	r3,6
10109790:	1880012e 	bgeu	r3,r2,10109798 <___vfprintf_internal_r+0x1ca0>
10109794:	1805883a 	mov	r2,r3
10109798:	d8802e15 	stw	r2,184(sp)
1010979c:	1000ef16 	blt	r2,zero,10109b5c <___vfprintf_internal_r+0x2064>
101097a0:	04040474 	movhi	r16,4113
101097a4:	d8802a15 	stw	r2,168(sp)
101097a8:	dcc02d15 	stw	r19,180(sp)
101097ac:	d8002915 	stw	zero,164(sp)
101097b0:	d8003215 	stw	zero,200(sp)
101097b4:	841dec04 	addi	r16,r16,30640
101097b8:	0039883a 	mov	fp,zero
101097bc:	003aa206 	br	10108248 <_gp+0xfffe6cb8>
101097c0:	0021883a 	mov	r16,zero
101097c4:	003e0706 	br	10108fe4 <_gp+0xfffe7a54>
101097c8:	d9002c17 	ldw	r4,176(sp)
101097cc:	d9801e04 	addi	r6,sp,120
101097d0:	b80b883a 	mov	r5,r23
101097d4:	010f2680 	call	1010f268 <__sprint_r>
101097d8:	1039c91e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
101097dc:	d8802617 	ldw	r2,152(sp)
101097e0:	d9403317 	ldw	r5,204(sp)
101097e4:	d8c02017 	ldw	r3,128(sp)
101097e8:	da000404 	addi	r8,sp,16
101097ec:	2885c83a 	sub	r2,r5,r2
101097f0:	003dfb06 	br	10108fe0 <_gp+0xfffe7a50>
101097f4:	9080004c 	andi	r2,r18,1
101097f8:	103e8f1e 	bne	r2,zero,10109238 <_gp+0xfffe7ca8>
101097fc:	d8802117 	ldw	r2,132(sp)
10109800:	003e9e06 	br	1010927c <_gp+0xfffe7cec>
10109804:	1025883a 	mov	r18,r2
10109808:	0039883a 	mov	fp,zero
1010980c:	00800084 	movi	r2,2
10109810:	003fd306 	br	10109760 <_gp+0xfffe81d0>
10109814:	07000b44 	movi	fp,45
10109818:	df002785 	stb	fp,158(sp)
1010981c:	003a4006 	br	10108120 <_gp+0xfffe6b90>
10109820:	00c00b44 	movi	r3,45
10109824:	d8c02785 	stb	r3,158(sp)
10109828:	d8802a15 	stw	r2,168(sp)
1010982c:	dc802b17 	ldw	r18,172(sp)
10109830:	d8002915 	stw	zero,164(sp)
10109834:	07000b44 	movi	fp,45
10109838:	003a8006 	br	1010823c <_gp+0xfffe6cac>
1010983c:	04040474 	movhi	r16,4113
10109840:	841de104 	addi	r16,r16,30596
10109844:	003f4706 	br	10109564 <_gp+0xfffe7fd4>
10109848:	d8c02d17 	ldw	r3,180(sp)
1010984c:	d9002f17 	ldw	r4,188(sp)
10109850:	18800017 	ldw	r2,0(r3)
10109854:	18c00104 	addi	r3,r3,4
10109858:	d8c02d15 	stw	r3,180(sp)
1010985c:	11000015 	stw	r4,0(r2)
10109860:	0038dd06 	br	10107bd8 <_gp+0xfffe6648>
10109864:	dd802617 	ldw	r22,152(sp)
10109868:	00bfff44 	movi	r2,-3
1010986c:	b0801c16 	blt	r22,r2,101098e0 <___vfprintf_internal_r+0x1de8>
10109870:	d9402917 	ldw	r5,164(sp)
10109874:	2d801a16 	blt	r5,r22,101098e0 <___vfprintf_internal_r+0x1de8>
10109878:	dd803215 	stw	r22,200(sp)
1010987c:	003e8906 	br	101092a4 <_gp+0xfffe7d14>
10109880:	01040474 	movhi	r4,4113
10109884:	211df684 	addi	r4,r4,30682
10109888:	d9002b15 	stw	r4,172(sp)
1010988c:	003c9106 	br	10108ad4 <_gp+0xfffe7544>
10109890:	e005883a 	mov	r2,fp
10109894:	003e7906 	br	1010927c <_gp+0xfffe7cec>
10109898:	d9402917 	ldw	r5,164(sp)
1010989c:	df002783 	ldbu	fp,158(sp)
101098a0:	dcc02d15 	stw	r19,180(sp)
101098a4:	d9402a15 	stw	r5,168(sp)
101098a8:	d9402e15 	stw	r5,184(sp)
101098ac:	d8002915 	stw	zero,164(sp)
101098b0:	d8003215 	stw	zero,200(sp)
101098b4:	003a5d06 	br	1010822c <_gp+0xfffe6c9c>
101098b8:	9080004c 	andi	r2,r18,1
101098bc:	0039883a 	mov	fp,zero
101098c0:	10000426 	beq	r2,zero,101098d4 <___vfprintf_internal_r+0x1ddc>
101098c4:	00800c04 	movi	r2,48
101098c8:	dc001dc4 	addi	r16,sp,119
101098cc:	d8801dc5 	stb	r2,119(sp)
101098d0:	003b8006 	br	101086d4 <_gp+0xfffe7144>
101098d4:	d8002e15 	stw	zero,184(sp)
101098d8:	dc001e04 	addi	r16,sp,120
101098dc:	003a4d06 	br	10108214 <_gp+0xfffe6c84>
101098e0:	8c7fff84 	addi	r17,r17,-2
101098e4:	b5bfffc4 	addi	r22,r22,-1
101098e8:	dd802615 	stw	r22,152(sp)
101098ec:	dc4022c5 	stb	r17,139(sp)
101098f0:	b000bf16 	blt	r22,zero,10109bf0 <___vfprintf_internal_r+0x20f8>
101098f4:	00800ac4 	movi	r2,43
101098f8:	d8802305 	stb	r2,140(sp)
101098fc:	00800244 	movi	r2,9
10109900:	15807016 	blt	r2,r22,10109ac4 <___vfprintf_internal_r+0x1fcc>
10109904:	00800c04 	movi	r2,48
10109908:	b5800c04 	addi	r22,r22,48
1010990c:	d8802345 	stb	r2,141(sp)
10109910:	dd802385 	stb	r22,142(sp)
10109914:	d88023c4 	addi	r2,sp,143
10109918:	df0022c4 	addi	fp,sp,139
1010991c:	d8c03317 	ldw	r3,204(sp)
10109920:	1739c83a 	sub	fp,r2,fp
10109924:	d9003317 	ldw	r4,204(sp)
10109928:	e0c7883a 	add	r3,fp,r3
1010992c:	df003a15 	stw	fp,232(sp)
10109930:	d8c02e15 	stw	r3,184(sp)
10109934:	00800044 	movi	r2,1
10109938:	1100b30e 	bge	r2,r4,10109c08 <___vfprintf_internal_r+0x2110>
1010993c:	d8c02e17 	ldw	r3,184(sp)
10109940:	18c00044 	addi	r3,r3,1
10109944:	d8c02e15 	stw	r3,184(sp)
10109948:	1805883a 	mov	r2,r3
1010994c:	1800ac16 	blt	r3,zero,10109c00 <___vfprintf_internal_r+0x2108>
10109950:	d8003215 	stw	zero,200(sp)
10109954:	003e5d06 	br	101092cc <_gp+0xfffe7d3c>
10109958:	d9002c17 	ldw	r4,176(sp)
1010995c:	d9801e04 	addi	r6,sp,120
10109960:	b80b883a 	mov	r5,r23
10109964:	010f2680 	call	1010f268 <__sprint_r>
10109968:	1039651e 	bne	r2,zero,10107f00 <_gp+0xfffe6970>
1010996c:	dc402617 	ldw	r17,152(sp)
10109970:	d8c02017 	ldw	r3,128(sp)
10109974:	d8801f17 	ldw	r2,124(sp)
10109978:	da000404 	addi	r8,sp,16
1010997c:	003ed606 	br	101094d8 <_gp+0xfffe7f48>
10109980:	582b883a 	mov	r21,r11
10109984:	d8002915 	stw	zero,164(sp)
10109988:	0038bd06 	br	10107c80 <_gp+0xfffe66f0>
1010998c:	d8802917 	ldw	r2,164(sp)
10109990:	103e071e 	bne	r2,zero,101091b0 <_gp+0xfffe7c20>
10109994:	dc002915 	stw	r16,164(sp)
10109998:	003e0506 	br	101091b0 <_gp+0xfffe7c20>
1010999c:	d9002917 	ldw	r4,164(sp)
101099a0:	20c00044 	addi	r3,r4,1
101099a4:	003e0f06 	br	101091e4 <_gp+0xfffe7c54>
101099a8:	01400184 	movi	r5,6
101099ac:	d9402915 	stw	r5,164(sp)
101099b0:	003dff06 	br	101091b0 <_gp+0xfffe7c20>
101099b4:	d8802104 	addi	r2,sp,132
101099b8:	d8800315 	stw	r2,12(sp)
101099bc:	d8802504 	addi	r2,sp,148
101099c0:	d8800215 	stw	r2,8(sp)
101099c4:	d8802604 	addi	r2,sp,152
101099c8:	d8800115 	stw	r2,4(sp)
101099cc:	d8802917 	ldw	r2,164(sp)
101099d0:	d9403617 	ldw	r5,216(sp)
101099d4:	d9002c17 	ldw	r4,176(sp)
101099d8:	d8800015 	stw	r2,0(sp)
101099dc:	01c000c4 	movi	r7,3
101099e0:	980d883a 	mov	r6,r19
101099e4:	da003d15 	stw	r8,244(sp)
101099e8:	010a1e80 	call	1010a1e8 <_dtoa_r>
101099ec:	d8c02917 	ldw	r3,164(sp)
101099f0:	da003d17 	ldw	r8,244(sp)
101099f4:	1021883a 	mov	r16,r2
101099f8:	10f9883a 	add	fp,r2,r3
101099fc:	81000007 	ldb	r4,0(r16)
10109a00:	00800c04 	movi	r2,48
10109a04:	20805e26 	beq	r4,r2,10109b80 <___vfprintf_internal_r+0x2088>
10109a08:	d8c02617 	ldw	r3,152(sp)
10109a0c:	e0f9883a 	add	fp,fp,r3
10109a10:	003e0a06 	br	1010923c <_gp+0xfffe7cac>
10109a14:	00c00b44 	movi	r3,45
10109a18:	24e0003c 	xorhi	r19,r4,32768
10109a1c:	d8c02a05 	stb	r3,168(sp)
10109a20:	003de906 	br	101091c8 <_gp+0xfffe7c38>
10109a24:	d8c03217 	ldw	r3,200(sp)
10109a28:	00c07a0e 	bge	zero,r3,10109c14 <___vfprintf_internal_r+0x211c>
10109a2c:	00800044 	movi	r2,1
10109a30:	d9003317 	ldw	r4,204(sp)
10109a34:	1105883a 	add	r2,r2,r4
10109a38:	d8802e15 	stw	r2,184(sp)
10109a3c:	10004e16 	blt	r2,zero,10109b78 <___vfprintf_internal_r+0x2080>
10109a40:	044019c4 	movi	r17,103
10109a44:	003e2106 	br	101092cc <_gp+0xfffe7d3c>
10109a48:	d9002917 	ldw	r4,164(sp)
10109a4c:	d8802104 	addi	r2,sp,132
10109a50:	d8800315 	stw	r2,12(sp)
10109a54:	d9000015 	stw	r4,0(sp)
10109a58:	d8802504 	addi	r2,sp,148
10109a5c:	d9403617 	ldw	r5,216(sp)
10109a60:	d9002c17 	ldw	r4,176(sp)
10109a64:	d8800215 	stw	r2,8(sp)
10109a68:	d8802604 	addi	r2,sp,152
10109a6c:	d8800115 	stw	r2,4(sp)
10109a70:	01c000c4 	movi	r7,3
10109a74:	980d883a 	mov	r6,r19
10109a78:	da003d15 	stw	r8,244(sp)
10109a7c:	010a1e80 	call	1010a1e8 <_dtoa_r>
10109a80:	d8c02917 	ldw	r3,164(sp)
10109a84:	da003d17 	ldw	r8,244(sp)
10109a88:	1021883a 	mov	r16,r2
10109a8c:	00801184 	movi	r2,70
10109a90:	80f9883a 	add	fp,r16,r3
10109a94:	88bfd926 	beq	r17,r2,101099fc <_gp+0xfffe846c>
10109a98:	003de806 	br	1010923c <_gp+0xfffe7cac>
10109a9c:	d9002917 	ldw	r4,164(sp)
10109aa0:	00c04d0e 	bge	zero,r3,10109bd8 <___vfprintf_internal_r+0x20e0>
10109aa4:	2000441e 	bne	r4,zero,10109bb8 <___vfprintf_internal_r+0x20c0>
10109aa8:	9480004c 	andi	r18,r18,1
10109aac:	9000421e 	bne	r18,zero,10109bb8 <___vfprintf_internal_r+0x20c0>
10109ab0:	1805883a 	mov	r2,r3
10109ab4:	18007016 	blt	r3,zero,10109c78 <___vfprintf_internal_r+0x2180>
10109ab8:	d8c03217 	ldw	r3,200(sp)
10109abc:	d8c02e15 	stw	r3,184(sp)
10109ac0:	003e0206 	br	101092cc <_gp+0xfffe7d3c>
10109ac4:	df0022c4 	addi	fp,sp,139
10109ac8:	dc002915 	stw	r16,164(sp)
10109acc:	4027883a 	mov	r19,r8
10109ad0:	e021883a 	mov	r16,fp
10109ad4:	b009883a 	mov	r4,r22
10109ad8:	01400284 	movi	r5,10
10109adc:	010308c0 	call	1010308c <__modsi3>
10109ae0:	10800c04 	addi	r2,r2,48
10109ae4:	843fffc4 	addi	r16,r16,-1
10109ae8:	b009883a 	mov	r4,r22
10109aec:	01400284 	movi	r5,10
10109af0:	80800005 	stb	r2,0(r16)
10109af4:	01030080 	call	10103008 <__divsi3>
10109af8:	102d883a 	mov	r22,r2
10109afc:	00800244 	movi	r2,9
10109b00:	15bff416 	blt	r2,r22,10109ad4 <_gp+0xfffe8544>
10109b04:	9811883a 	mov	r8,r19
10109b08:	b0800c04 	addi	r2,r22,48
10109b0c:	8027883a 	mov	r19,r16
10109b10:	997fffc4 	addi	r5,r19,-1
10109b14:	98bfffc5 	stb	r2,-1(r19)
10109b18:	dc002917 	ldw	r16,164(sp)
10109b1c:	2f006a2e 	bgeu	r5,fp,10109cc8 <___vfprintf_internal_r+0x21d0>
10109b20:	d9c02384 	addi	r7,sp,142
10109b24:	3ccfc83a 	sub	r7,r7,r19
10109b28:	d9002344 	addi	r4,sp,141
10109b2c:	e1cf883a 	add	r7,fp,r7
10109b30:	00000106 	br	10109b38 <___vfprintf_internal_r+0x2040>
10109b34:	28800003 	ldbu	r2,0(r5)
10109b38:	20800005 	stb	r2,0(r4)
10109b3c:	21000044 	addi	r4,r4,1
10109b40:	29400044 	addi	r5,r5,1
10109b44:	393ffb1e 	bne	r7,r4,10109b34 <_gp+0xfffe85a4>
10109b48:	d8802304 	addi	r2,sp,140
10109b4c:	14c5c83a 	sub	r2,r2,r19
10109b50:	d8c02344 	addi	r3,sp,141
10109b54:	1885883a 	add	r2,r3,r2
10109b58:	003f7006 	br	1010991c <_gp+0xfffe838c>
10109b5c:	0005883a 	mov	r2,zero
10109b60:	003f0f06 	br	101097a0 <_gp+0xfffe8210>
10109b64:	d8c03217 	ldw	r3,200(sp)
10109b68:	18c00044 	addi	r3,r3,1
10109b6c:	d8c02e15 	stw	r3,184(sp)
10109b70:	1805883a 	mov	r2,r3
10109b74:	183fb20e 	bge	r3,zero,10109a40 <_gp+0xfffe84b0>
10109b78:	0005883a 	mov	r2,zero
10109b7c:	003fb006 	br	10109a40 <_gp+0xfffe84b0>
10109b80:	d9003617 	ldw	r4,216(sp)
10109b84:	000d883a 	mov	r6,zero
10109b88:	000f883a 	mov	r7,zero
10109b8c:	980b883a 	mov	r5,r19
10109b90:	d8c03c15 	stw	r3,240(sp)
10109b94:	da003d15 	stw	r8,244(sp)
10109b98:	0112a640 	call	10112a64 <__eqdf2>
10109b9c:	d8c03c17 	ldw	r3,240(sp)
10109ba0:	da003d17 	ldw	r8,244(sp)
10109ba4:	103f9826 	beq	r2,zero,10109a08 <_gp+0xfffe8478>
10109ba8:	00800044 	movi	r2,1
10109bac:	10c7c83a 	sub	r3,r2,r3
10109bb0:	d8c02615 	stw	r3,152(sp)
10109bb4:	003f9506 	br	10109a0c <_gp+0xfffe847c>
10109bb8:	d9002917 	ldw	r4,164(sp)
10109bbc:	d8c03217 	ldw	r3,200(sp)
10109bc0:	20800044 	addi	r2,r4,1
10109bc4:	1885883a 	add	r2,r3,r2
10109bc8:	d8802e15 	stw	r2,184(sp)
10109bcc:	103dbf0e 	bge	r2,zero,101092cc <_gp+0xfffe7d3c>
10109bd0:	0005883a 	mov	r2,zero
10109bd4:	003dbd06 	br	101092cc <_gp+0xfffe7d3c>
10109bd8:	2000211e 	bne	r4,zero,10109c60 <___vfprintf_internal_r+0x2168>
10109bdc:	9480004c 	andi	r18,r18,1
10109be0:	90001f1e 	bne	r18,zero,10109c60 <___vfprintf_internal_r+0x2168>
10109be4:	00800044 	movi	r2,1
10109be8:	d8802e15 	stw	r2,184(sp)
10109bec:	003db706 	br	101092cc <_gp+0xfffe7d3c>
10109bf0:	00800b44 	movi	r2,45
10109bf4:	05adc83a 	sub	r22,zero,r22
10109bf8:	d8802305 	stb	r2,140(sp)
10109bfc:	003f3f06 	br	101098fc <_gp+0xfffe836c>
10109c00:	0005883a 	mov	r2,zero
10109c04:	003f5206 	br	10109950 <_gp+0xfffe83c0>
10109c08:	90a4703a 	and	r18,r18,r2
10109c0c:	903f4e26 	beq	r18,zero,10109948 <_gp+0xfffe83b8>
10109c10:	003f4a06 	br	1010993c <_gp+0xfffe83ac>
10109c14:	00800084 	movi	r2,2
10109c18:	10c5c83a 	sub	r2,r2,r3
10109c1c:	003f8406 	br	10109a30 <_gp+0xfffe84a0>
10109c20:	d8802d17 	ldw	r2,180(sp)
10109c24:	d9002d17 	ldw	r4,180(sp)
10109c28:	ac400043 	ldbu	r17,1(r21)
10109c2c:	10800017 	ldw	r2,0(r2)
10109c30:	582b883a 	mov	r21,r11
10109c34:	d8802915 	stw	r2,164(sp)
10109c38:	20800104 	addi	r2,r4,4
10109c3c:	d9002917 	ldw	r4,164(sp)
10109c40:	d8802d15 	stw	r2,180(sp)
10109c44:	203e7a0e 	bge	r4,zero,10109630 <_gp+0xfffe80a0>
10109c48:	8c403fcc 	andi	r17,r17,255
10109c4c:	00bfffc4 	movi	r2,-1
10109c50:	8c40201c 	xori	r17,r17,128
10109c54:	d8802915 	stw	r2,164(sp)
10109c58:	8c7fe004 	addi	r17,r17,-128
10109c5c:	00380706 	br	10107c7c <_gp+0xfffe66ec>
10109c60:	d8c02917 	ldw	r3,164(sp)
10109c64:	18c00084 	addi	r3,r3,2
10109c68:	d8c02e15 	stw	r3,184(sp)
10109c6c:	1805883a 	mov	r2,r3
10109c70:	183d960e 	bge	r3,zero,101092cc <_gp+0xfffe7d3c>
10109c74:	003fd606 	br	10109bd0 <_gp+0xfffe8640>
10109c78:	0005883a 	mov	r2,zero
10109c7c:	003f8e06 	br	10109ab8 <_gp+0xfffe8528>
10109c80:	9080004c 	andi	r2,r18,1
10109c84:	103f811e 	bne	r2,zero,10109a8c <_gp+0xfffe84fc>
10109c88:	d8802117 	ldw	r2,132(sp)
10109c8c:	1405c83a 	sub	r2,r2,r16
10109c90:	d8803315 	stw	r2,204(sp)
10109c94:	b47ef326 	beq	r22,r17,10109864 <_gp+0xfffe82d4>
10109c98:	dd802617 	ldw	r22,152(sp)
10109c9c:	003f1106 	br	101098e4 <_gp+0xfffe8354>
10109ca0:	d9c02785 	stb	r7,158(sp)
10109ca4:	00390406 	br	101080b8 <_gp+0xfffe6b28>
10109ca8:	d9c02785 	stb	r7,158(sp)
10109cac:	0038d306 	br	10107ffc <_gp+0xfffe6a6c>
10109cb0:	d9c02785 	stb	r7,158(sp)
10109cb4:	003a6106 	br	1010863c <_gp+0xfffe70ac>
10109cb8:	d9c02785 	stb	r7,158(sp)
10109cbc:	003af806 	br	101088a0 <_gp+0xfffe7310>
10109cc0:	0005883a 	mov	r2,zero
10109cc4:	003d7e06 	br	101092c0 <_gp+0xfffe7d30>
10109cc8:	d8802344 	addi	r2,sp,141
10109ccc:	003f1306 	br	1010991c <_gp+0xfffe838c>
10109cd0:	d9c02785 	stb	r7,158(sp)
10109cd4:	00392306 	br	10108164 <_gp+0xfffe6bd4>
10109cd8:	d9c02785 	stb	r7,158(sp)
10109cdc:	003aa906 	br	10108784 <_gp+0xfffe71f4>
10109ce0:	d9c02785 	stb	r7,158(sp)
10109ce4:	003a3d06 	br	101085dc <_gp+0xfffe704c>
10109ce8:	d9c02785 	stb	r7,158(sp)
10109cec:	003aca06 	br	10108818 <_gp+0xfffe7288>

10109cf0 <__vfprintf_internal>:
10109cf0:	008404b4 	movhi	r2,4114
10109cf4:	10a56504 	addi	r2,r2,-27244
10109cf8:	300f883a 	mov	r7,r6
10109cfc:	280d883a 	mov	r6,r5
10109d00:	200b883a 	mov	r5,r4
10109d04:	11000017 	ldw	r4,0(r2)
10109d08:	0107af81 	jmpi	10107af8 <___vfprintf_internal_r>

10109d0c <__sbprintf>:
10109d0c:	2880030b 	ldhu	r2,12(r5)
10109d10:	2ac01917 	ldw	r11,100(r5)
10109d14:	2a80038b 	ldhu	r10,14(r5)
10109d18:	2a400717 	ldw	r9,28(r5)
10109d1c:	2a000917 	ldw	r8,36(r5)
10109d20:	defee204 	addi	sp,sp,-1144
10109d24:	00c10004 	movi	r3,1024
10109d28:	dc011a15 	stw	r16,1128(sp)
10109d2c:	10bfff4c 	andi	r2,r2,65533
10109d30:	2821883a 	mov	r16,r5
10109d34:	d8cb883a 	add	r5,sp,r3
10109d38:	dc811c15 	stw	r18,1136(sp)
10109d3c:	dc411b15 	stw	r17,1132(sp)
10109d40:	dfc11d15 	stw	ra,1140(sp)
10109d44:	2025883a 	mov	r18,r4
10109d48:	d881030d 	sth	r2,1036(sp)
10109d4c:	dac11915 	stw	r11,1124(sp)
10109d50:	da81038d 	sth	r10,1038(sp)
10109d54:	da410715 	stw	r9,1052(sp)
10109d58:	da010915 	stw	r8,1060(sp)
10109d5c:	dec10015 	stw	sp,1024(sp)
10109d60:	dec10415 	stw	sp,1040(sp)
10109d64:	d8c10215 	stw	r3,1032(sp)
10109d68:	d8c10515 	stw	r3,1044(sp)
10109d6c:	d8010615 	stw	zero,1048(sp)
10109d70:	0107af80 	call	10107af8 <___vfprintf_internal_r>
10109d74:	1023883a 	mov	r17,r2
10109d78:	10000416 	blt	r2,zero,10109d8c <__sbprintf+0x80>
10109d7c:	d9410004 	addi	r5,sp,1024
10109d80:	9009883a 	mov	r4,r18
10109d84:	01035580 	call	10103558 <_fflush_r>
10109d88:	10000d1e 	bne	r2,zero,10109dc0 <__sbprintf+0xb4>
10109d8c:	d881030b 	ldhu	r2,1036(sp)
10109d90:	1080100c 	andi	r2,r2,64
10109d94:	10000326 	beq	r2,zero,10109da4 <__sbprintf+0x98>
10109d98:	8080030b 	ldhu	r2,12(r16)
10109d9c:	10801014 	ori	r2,r2,64
10109da0:	8080030d 	sth	r2,12(r16)
10109da4:	8805883a 	mov	r2,r17
10109da8:	dfc11d17 	ldw	ra,1140(sp)
10109dac:	dc811c17 	ldw	r18,1136(sp)
10109db0:	dc411b17 	ldw	r17,1132(sp)
10109db4:	dc011a17 	ldw	r16,1128(sp)
10109db8:	dec11e04 	addi	sp,sp,1144
10109dbc:	f800283a 	ret
10109dc0:	047fffc4 	movi	r17,-1
10109dc4:	003ff106 	br	10109d8c <_gp+0xfffe87fc>

10109dc8 <_write_r>:
10109dc8:	defffd04 	addi	sp,sp,-12
10109dcc:	2805883a 	mov	r2,r5
10109dd0:	dc000015 	stw	r16,0(sp)
10109dd4:	040404b4 	movhi	r16,4114
10109dd8:	dc400115 	stw	r17,4(sp)
10109ddc:	300b883a 	mov	r5,r6
10109de0:	842c5e04 	addi	r16,r16,-20104
10109de4:	2023883a 	mov	r17,r4
10109de8:	380d883a 	mov	r6,r7
10109dec:	1009883a 	mov	r4,r2
10109df0:	dfc00215 	stw	ra,8(sp)
10109df4:	80000015 	stw	zero,0(r16)
10109df8:	01151c80 	call	101151c8 <write>
10109dfc:	00ffffc4 	movi	r3,-1
10109e00:	10c00526 	beq	r2,r3,10109e18 <_write_r+0x50>
10109e04:	dfc00217 	ldw	ra,8(sp)
10109e08:	dc400117 	ldw	r17,4(sp)
10109e0c:	dc000017 	ldw	r16,0(sp)
10109e10:	dec00304 	addi	sp,sp,12
10109e14:	f800283a 	ret
10109e18:	80c00017 	ldw	r3,0(r16)
10109e1c:	183ff926 	beq	r3,zero,10109e04 <_gp+0xfffe8874>
10109e20:	88c00015 	stw	r3,0(r17)
10109e24:	003ff706 	br	10109e04 <_gp+0xfffe8874>

10109e28 <__swsetup_r>:
10109e28:	008404b4 	movhi	r2,4114
10109e2c:	defffd04 	addi	sp,sp,-12
10109e30:	10a56504 	addi	r2,r2,-27244
10109e34:	dc400115 	stw	r17,4(sp)
10109e38:	2023883a 	mov	r17,r4
10109e3c:	11000017 	ldw	r4,0(r2)
10109e40:	dc000015 	stw	r16,0(sp)
10109e44:	dfc00215 	stw	ra,8(sp)
10109e48:	2821883a 	mov	r16,r5
10109e4c:	20000226 	beq	r4,zero,10109e58 <__swsetup_r+0x30>
10109e50:	20800e17 	ldw	r2,56(r4)
10109e54:	10003126 	beq	r2,zero,10109f1c <__swsetup_r+0xf4>
10109e58:	8080030b 	ldhu	r2,12(r16)
10109e5c:	10c0020c 	andi	r3,r2,8
10109e60:	1009883a 	mov	r4,r2
10109e64:	18000f26 	beq	r3,zero,10109ea4 <__swsetup_r+0x7c>
10109e68:	80c00417 	ldw	r3,16(r16)
10109e6c:	18001526 	beq	r3,zero,10109ec4 <__swsetup_r+0x9c>
10109e70:	1100004c 	andi	r4,r2,1
10109e74:	20001c1e 	bne	r4,zero,10109ee8 <__swsetup_r+0xc0>
10109e78:	1080008c 	andi	r2,r2,2
10109e7c:	1000291e 	bne	r2,zero,10109f24 <__swsetup_r+0xfc>
10109e80:	80800517 	ldw	r2,20(r16)
10109e84:	80800215 	stw	r2,8(r16)
10109e88:	18001c26 	beq	r3,zero,10109efc <__swsetup_r+0xd4>
10109e8c:	0005883a 	mov	r2,zero
10109e90:	dfc00217 	ldw	ra,8(sp)
10109e94:	dc400117 	ldw	r17,4(sp)
10109e98:	dc000017 	ldw	r16,0(sp)
10109e9c:	dec00304 	addi	sp,sp,12
10109ea0:	f800283a 	ret
10109ea4:	2080040c 	andi	r2,r4,16
10109ea8:	10002e26 	beq	r2,zero,10109f64 <__swsetup_r+0x13c>
10109eac:	2080010c 	andi	r2,r4,4
10109eb0:	10001e1e 	bne	r2,zero,10109f2c <__swsetup_r+0x104>
10109eb4:	80c00417 	ldw	r3,16(r16)
10109eb8:	20800214 	ori	r2,r4,8
10109ebc:	8080030d 	sth	r2,12(r16)
10109ec0:	183feb1e 	bne	r3,zero,10109e70 <_gp+0xfffe88e0>
10109ec4:	1100a00c 	andi	r4,r2,640
10109ec8:	01408004 	movi	r5,512
10109ecc:	217fe826 	beq	r4,r5,10109e70 <_gp+0xfffe88e0>
10109ed0:	800b883a 	mov	r5,r16
10109ed4:	8809883a 	mov	r4,r17
10109ed8:	01046d00 	call	101046d0 <__smakebuf_r>
10109edc:	8080030b 	ldhu	r2,12(r16)
10109ee0:	80c00417 	ldw	r3,16(r16)
10109ee4:	003fe206 	br	10109e70 <_gp+0xfffe88e0>
10109ee8:	80800517 	ldw	r2,20(r16)
10109eec:	80000215 	stw	zero,8(r16)
10109ef0:	0085c83a 	sub	r2,zero,r2
10109ef4:	80800615 	stw	r2,24(r16)
10109ef8:	183fe41e 	bne	r3,zero,10109e8c <_gp+0xfffe88fc>
10109efc:	80c0030b 	ldhu	r3,12(r16)
10109f00:	0005883a 	mov	r2,zero
10109f04:	1900200c 	andi	r4,r3,128
10109f08:	203fe126 	beq	r4,zero,10109e90 <_gp+0xfffe8900>
10109f0c:	18c01014 	ori	r3,r3,64
10109f10:	80c0030d 	sth	r3,12(r16)
10109f14:	00bfffc4 	movi	r2,-1
10109f18:	003fdd06 	br	10109e90 <_gp+0xfffe8900>
10109f1c:	01039340 	call	10103934 <__sinit>
10109f20:	003fcd06 	br	10109e58 <_gp+0xfffe88c8>
10109f24:	0005883a 	mov	r2,zero
10109f28:	003fd606 	br	10109e84 <_gp+0xfffe88f4>
10109f2c:	81400c17 	ldw	r5,48(r16)
10109f30:	28000626 	beq	r5,zero,10109f4c <__swsetup_r+0x124>
10109f34:	80801004 	addi	r2,r16,64
10109f38:	28800326 	beq	r5,r2,10109f48 <__swsetup_r+0x120>
10109f3c:	8809883a 	mov	r4,r17
10109f40:	0103c5c0 	call	10103c5c <_free_r>
10109f44:	8100030b 	ldhu	r4,12(r16)
10109f48:	80000c15 	stw	zero,48(r16)
10109f4c:	80c00417 	ldw	r3,16(r16)
10109f50:	00bff6c4 	movi	r2,-37
10109f54:	1108703a 	and	r4,r2,r4
10109f58:	80000115 	stw	zero,4(r16)
10109f5c:	80c00015 	stw	r3,0(r16)
10109f60:	003fd506 	br	10109eb8 <_gp+0xfffe8928>
10109f64:	00800244 	movi	r2,9
10109f68:	88800015 	stw	r2,0(r17)
10109f6c:	20801014 	ori	r2,r4,64
10109f70:	8080030d 	sth	r2,12(r16)
10109f74:	00bfffc4 	movi	r2,-1
10109f78:	003fc506 	br	10109e90 <_gp+0xfffe8900>

10109f7c <_close_r>:
10109f7c:	defffd04 	addi	sp,sp,-12
10109f80:	dc000015 	stw	r16,0(sp)
10109f84:	040404b4 	movhi	r16,4114
10109f88:	dc400115 	stw	r17,4(sp)
10109f8c:	842c5e04 	addi	r16,r16,-20104
10109f90:	2023883a 	mov	r17,r4
10109f94:	2809883a 	mov	r4,r5
10109f98:	dfc00215 	stw	ra,8(sp)
10109f9c:	80000015 	stw	zero,0(r16)
10109fa0:	0113f740 	call	10113f74 <close>
10109fa4:	00ffffc4 	movi	r3,-1
10109fa8:	10c00526 	beq	r2,r3,10109fc0 <_close_r+0x44>
10109fac:	dfc00217 	ldw	ra,8(sp)
10109fb0:	dc400117 	ldw	r17,4(sp)
10109fb4:	dc000017 	ldw	r16,0(sp)
10109fb8:	dec00304 	addi	sp,sp,12
10109fbc:	f800283a 	ret
10109fc0:	80c00017 	ldw	r3,0(r16)
10109fc4:	183ff926 	beq	r3,zero,10109fac <_gp+0xfffe8a1c>
10109fc8:	88c00015 	stw	r3,0(r17)
10109fcc:	003ff706 	br	10109fac <_gp+0xfffe8a1c>

10109fd0 <abort>:
10109fd0:	deffff04 	addi	sp,sp,-4
10109fd4:	01000184 	movi	r4,6
10109fd8:	dfc00015 	stw	ra,0(sp)
10109fdc:	010dbd40 	call	1010dbd4 <raise>
10109fe0:	01000044 	movi	r4,1
10109fe4:	01140700 	call	10114070 <_exit>

10109fe8 <quorem>:
10109fe8:	defff704 	addi	sp,sp,-36
10109fec:	dc800215 	stw	r18,8(sp)
10109ff0:	20800417 	ldw	r2,16(r4)
10109ff4:	2c800417 	ldw	r18,16(r5)
10109ff8:	dfc00815 	stw	ra,32(sp)
10109ffc:	ddc00715 	stw	r23,28(sp)
1010a000:	dd800615 	stw	r22,24(sp)
1010a004:	dd400515 	stw	r21,20(sp)
1010a008:	dd000415 	stw	r20,16(sp)
1010a00c:	dcc00315 	stw	r19,12(sp)
1010a010:	dc400115 	stw	r17,4(sp)
1010a014:	dc000015 	stw	r16,0(sp)
1010a018:	14807116 	blt	r2,r18,1010a1e0 <quorem+0x1f8>
1010a01c:	94bfffc4 	addi	r18,r18,-1
1010a020:	94ad883a 	add	r22,r18,r18
1010a024:	b5ad883a 	add	r22,r22,r22
1010a028:	2c400504 	addi	r17,r5,20
1010a02c:	8da9883a 	add	r20,r17,r22
1010a030:	25400504 	addi	r21,r4,20
1010a034:	282f883a 	mov	r23,r5
1010a038:	adad883a 	add	r22,r21,r22
1010a03c:	a1400017 	ldw	r5,0(r20)
1010a040:	2021883a 	mov	r16,r4
1010a044:	b1000017 	ldw	r4,0(r22)
1010a048:	29400044 	addi	r5,r5,1
1010a04c:	01031000 	call	10103100 <__udivsi3>
1010a050:	1027883a 	mov	r19,r2
1010a054:	10002c26 	beq	r2,zero,1010a108 <quorem+0x120>
1010a058:	a813883a 	mov	r9,r21
1010a05c:	880b883a 	mov	r5,r17
1010a060:	0009883a 	mov	r4,zero
1010a064:	000d883a 	mov	r6,zero
1010a068:	2a000017 	ldw	r8,0(r5)
1010a06c:	49c00017 	ldw	r7,0(r9)
1010a070:	29400104 	addi	r5,r5,4
1010a074:	40bfffcc 	andi	r2,r8,65535
1010a078:	14c5383a 	mul	r2,r2,r19
1010a07c:	4010d43a 	srli	r8,r8,16
1010a080:	38ffffcc 	andi	r3,r7,65535
1010a084:	1105883a 	add	r2,r2,r4
1010a088:	1008d43a 	srli	r4,r2,16
1010a08c:	44d1383a 	mul	r8,r8,r19
1010a090:	198d883a 	add	r6,r3,r6
1010a094:	10ffffcc 	andi	r3,r2,65535
1010a098:	30c7c83a 	sub	r3,r6,r3
1010a09c:	380ed43a 	srli	r7,r7,16
1010a0a0:	4105883a 	add	r2,r8,r4
1010a0a4:	180dd43a 	srai	r6,r3,16
1010a0a8:	113fffcc 	andi	r4,r2,65535
1010a0ac:	390fc83a 	sub	r7,r7,r4
1010a0b0:	398d883a 	add	r6,r7,r6
1010a0b4:	300e943a 	slli	r7,r6,16
1010a0b8:	18ffffcc 	andi	r3,r3,65535
1010a0bc:	1008d43a 	srli	r4,r2,16
1010a0c0:	38ceb03a 	or	r7,r7,r3
1010a0c4:	49c00015 	stw	r7,0(r9)
1010a0c8:	300dd43a 	srai	r6,r6,16
1010a0cc:	4a400104 	addi	r9,r9,4
1010a0d0:	a17fe52e 	bgeu	r20,r5,1010a068 <_gp+0xfffe8ad8>
1010a0d4:	b0800017 	ldw	r2,0(r22)
1010a0d8:	10000b1e 	bne	r2,zero,1010a108 <quorem+0x120>
1010a0dc:	b0bfff04 	addi	r2,r22,-4
1010a0e0:	a880082e 	bgeu	r21,r2,1010a104 <quorem+0x11c>
1010a0e4:	b0ffff17 	ldw	r3,-4(r22)
1010a0e8:	18000326 	beq	r3,zero,1010a0f8 <quorem+0x110>
1010a0ec:	00000506 	br	1010a104 <quorem+0x11c>
1010a0f0:	10c00017 	ldw	r3,0(r2)
1010a0f4:	1800031e 	bne	r3,zero,1010a104 <quorem+0x11c>
1010a0f8:	10bfff04 	addi	r2,r2,-4
1010a0fc:	94bfffc4 	addi	r18,r18,-1
1010a100:	a8bffb36 	bltu	r21,r2,1010a0f0 <_gp+0xfffe8b60>
1010a104:	84800415 	stw	r18,16(r16)
1010a108:	b80b883a 	mov	r5,r23
1010a10c:	8009883a 	mov	r4,r16
1010a110:	010cc140 	call	1010cc14 <__mcmp>
1010a114:	10002616 	blt	r2,zero,1010a1b0 <quorem+0x1c8>
1010a118:	9cc00044 	addi	r19,r19,1
1010a11c:	a805883a 	mov	r2,r21
1010a120:	000b883a 	mov	r5,zero
1010a124:	11000017 	ldw	r4,0(r2)
1010a128:	89800017 	ldw	r6,0(r17)
1010a12c:	10800104 	addi	r2,r2,4
1010a130:	20ffffcc 	andi	r3,r4,65535
1010a134:	194b883a 	add	r5,r3,r5
1010a138:	30ffffcc 	andi	r3,r6,65535
1010a13c:	28c7c83a 	sub	r3,r5,r3
1010a140:	300cd43a 	srli	r6,r6,16
1010a144:	2008d43a 	srli	r4,r4,16
1010a148:	180bd43a 	srai	r5,r3,16
1010a14c:	18ffffcc 	andi	r3,r3,65535
1010a150:	2189c83a 	sub	r4,r4,r6
1010a154:	2149883a 	add	r4,r4,r5
1010a158:	200c943a 	slli	r6,r4,16
1010a15c:	8c400104 	addi	r17,r17,4
1010a160:	200bd43a 	srai	r5,r4,16
1010a164:	30c6b03a 	or	r3,r6,r3
1010a168:	10ffff15 	stw	r3,-4(r2)
1010a16c:	a47fed2e 	bgeu	r20,r17,1010a124 <_gp+0xfffe8b94>
1010a170:	9485883a 	add	r2,r18,r18
1010a174:	1085883a 	add	r2,r2,r2
1010a178:	a887883a 	add	r3,r21,r2
1010a17c:	18800017 	ldw	r2,0(r3)
1010a180:	10000b1e 	bne	r2,zero,1010a1b0 <quorem+0x1c8>
1010a184:	18bfff04 	addi	r2,r3,-4
1010a188:	a880082e 	bgeu	r21,r2,1010a1ac <quorem+0x1c4>
1010a18c:	18ffff17 	ldw	r3,-4(r3)
1010a190:	18000326 	beq	r3,zero,1010a1a0 <quorem+0x1b8>
1010a194:	00000506 	br	1010a1ac <quorem+0x1c4>
1010a198:	10c00017 	ldw	r3,0(r2)
1010a19c:	1800031e 	bne	r3,zero,1010a1ac <quorem+0x1c4>
1010a1a0:	10bfff04 	addi	r2,r2,-4
1010a1a4:	94bfffc4 	addi	r18,r18,-1
1010a1a8:	a8bffb36 	bltu	r21,r2,1010a198 <_gp+0xfffe8c08>
1010a1ac:	84800415 	stw	r18,16(r16)
1010a1b0:	9805883a 	mov	r2,r19
1010a1b4:	dfc00817 	ldw	ra,32(sp)
1010a1b8:	ddc00717 	ldw	r23,28(sp)
1010a1bc:	dd800617 	ldw	r22,24(sp)
1010a1c0:	dd400517 	ldw	r21,20(sp)
1010a1c4:	dd000417 	ldw	r20,16(sp)
1010a1c8:	dcc00317 	ldw	r19,12(sp)
1010a1cc:	dc800217 	ldw	r18,8(sp)
1010a1d0:	dc400117 	ldw	r17,4(sp)
1010a1d4:	dc000017 	ldw	r16,0(sp)
1010a1d8:	dec00904 	addi	sp,sp,36
1010a1dc:	f800283a 	ret
1010a1e0:	0005883a 	mov	r2,zero
1010a1e4:	003ff306 	br	1010a1b4 <_gp+0xfffe8c24>

1010a1e8 <_dtoa_r>:
1010a1e8:	20801017 	ldw	r2,64(r4)
1010a1ec:	deffde04 	addi	sp,sp,-136
1010a1f0:	df002015 	stw	fp,128(sp)
1010a1f4:	dcc01b15 	stw	r19,108(sp)
1010a1f8:	dc801a15 	stw	r18,104(sp)
1010a1fc:	dc401915 	stw	r17,100(sp)
1010a200:	dc001815 	stw	r16,96(sp)
1010a204:	dfc02115 	stw	ra,132(sp)
1010a208:	ddc01f15 	stw	r23,124(sp)
1010a20c:	dd801e15 	stw	r22,120(sp)
1010a210:	dd401d15 	stw	r21,116(sp)
1010a214:	dd001c15 	stw	r20,112(sp)
1010a218:	d9c00315 	stw	r7,12(sp)
1010a21c:	2039883a 	mov	fp,r4
1010a220:	3023883a 	mov	r17,r6
1010a224:	2825883a 	mov	r18,r5
1010a228:	dc002417 	ldw	r16,144(sp)
1010a22c:	3027883a 	mov	r19,r6
1010a230:	10000826 	beq	r2,zero,1010a254 <_dtoa_r+0x6c>
1010a234:	21801117 	ldw	r6,68(r4)
1010a238:	00c00044 	movi	r3,1
1010a23c:	100b883a 	mov	r5,r2
1010a240:	1986983a 	sll	r3,r3,r6
1010a244:	11800115 	stw	r6,4(r2)
1010a248:	10c00215 	stw	r3,8(r2)
1010a24c:	010c3f40 	call	1010c3f4 <_Bfree>
1010a250:	e0001015 	stw	zero,64(fp)
1010a254:	88002e16 	blt	r17,zero,1010a310 <_dtoa_r+0x128>
1010a258:	80000015 	stw	zero,0(r16)
1010a25c:	889ffc2c 	andhi	r2,r17,32752
1010a260:	00dffc34 	movhi	r3,32752
1010a264:	10c01c26 	beq	r2,r3,1010a2d8 <_dtoa_r+0xf0>
1010a268:	000d883a 	mov	r6,zero
1010a26c:	000f883a 	mov	r7,zero
1010a270:	9009883a 	mov	r4,r18
1010a274:	980b883a 	mov	r5,r19
1010a278:	0112a640 	call	10112a64 <__eqdf2>
1010a27c:	10002b1e 	bne	r2,zero,1010a32c <_dtoa_r+0x144>
1010a280:	d9c02317 	ldw	r7,140(sp)
1010a284:	00800044 	movi	r2,1
1010a288:	38800015 	stw	r2,0(r7)
1010a28c:	d8802517 	ldw	r2,148(sp)
1010a290:	10019e26 	beq	r2,zero,1010a90c <_dtoa_r+0x724>
1010a294:	d8c02517 	ldw	r3,148(sp)
1010a298:	00840474 	movhi	r2,4113
1010a29c:	109dee44 	addi	r2,r2,30649
1010a2a0:	18800015 	stw	r2,0(r3)
1010a2a4:	10bfffc4 	addi	r2,r2,-1
1010a2a8:	dfc02117 	ldw	ra,132(sp)
1010a2ac:	df002017 	ldw	fp,128(sp)
1010a2b0:	ddc01f17 	ldw	r23,124(sp)
1010a2b4:	dd801e17 	ldw	r22,120(sp)
1010a2b8:	dd401d17 	ldw	r21,116(sp)
1010a2bc:	dd001c17 	ldw	r20,112(sp)
1010a2c0:	dcc01b17 	ldw	r19,108(sp)
1010a2c4:	dc801a17 	ldw	r18,104(sp)
1010a2c8:	dc401917 	ldw	r17,100(sp)
1010a2cc:	dc001817 	ldw	r16,96(sp)
1010a2d0:	dec02204 	addi	sp,sp,136
1010a2d4:	f800283a 	ret
1010a2d8:	d8c02317 	ldw	r3,140(sp)
1010a2dc:	0089c3c4 	movi	r2,9999
1010a2e0:	18800015 	stw	r2,0(r3)
1010a2e4:	90017726 	beq	r18,zero,1010a8c4 <_dtoa_r+0x6dc>
1010a2e8:	00840474 	movhi	r2,4113
1010a2ec:	109e0204 	addi	r2,r2,30728
1010a2f0:	d9002517 	ldw	r4,148(sp)
1010a2f4:	203fec26 	beq	r4,zero,1010a2a8 <_gp+0xfffe8d18>
1010a2f8:	10c000c7 	ldb	r3,3(r2)
1010a2fc:	1801781e 	bne	r3,zero,1010a8e0 <_dtoa_r+0x6f8>
1010a300:	10c000c4 	addi	r3,r2,3
1010a304:	d9802517 	ldw	r6,148(sp)
1010a308:	30c00015 	stw	r3,0(r6)
1010a30c:	003fe606 	br	1010a2a8 <_gp+0xfffe8d18>
1010a310:	04e00034 	movhi	r19,32768
1010a314:	9cffffc4 	addi	r19,r19,-1
1010a318:	00800044 	movi	r2,1
1010a31c:	8ce6703a 	and	r19,r17,r19
1010a320:	80800015 	stw	r2,0(r16)
1010a324:	9823883a 	mov	r17,r19
1010a328:	003fcc06 	br	1010a25c <_gp+0xfffe8ccc>
1010a32c:	d8800204 	addi	r2,sp,8
1010a330:	d8800015 	stw	r2,0(sp)
1010a334:	d9c00104 	addi	r7,sp,4
1010a338:	900b883a 	mov	r5,r18
1010a33c:	980d883a 	mov	r6,r19
1010a340:	e009883a 	mov	r4,fp
1010a344:	8820d53a 	srli	r16,r17,20
1010a348:	010cfe00 	call	1010cfe0 <__d2b>
1010a34c:	d8800915 	stw	r2,36(sp)
1010a350:	8001651e 	bne	r16,zero,1010a8e8 <_dtoa_r+0x700>
1010a354:	dd800217 	ldw	r22,8(sp)
1010a358:	dc000117 	ldw	r16,4(sp)
1010a35c:	00800804 	movi	r2,32
1010a360:	b421883a 	add	r16,r22,r16
1010a364:	80c10c84 	addi	r3,r16,1074
1010a368:	10c2d10e 	bge	r2,r3,1010aeb0 <_dtoa_r+0xcc8>
1010a36c:	00801004 	movi	r2,64
1010a370:	81010484 	addi	r4,r16,1042
1010a374:	10c7c83a 	sub	r3,r2,r3
1010a378:	9108d83a 	srl	r4,r18,r4
1010a37c:	88e2983a 	sll	r17,r17,r3
1010a380:	2448b03a 	or	r4,r4,r17
1010a384:	0113e2c0 	call	10113e2c <__floatunsidf>
1010a388:	017f8434 	movhi	r5,65040
1010a38c:	01800044 	movi	r6,1
1010a390:	1009883a 	mov	r4,r2
1010a394:	194b883a 	add	r5,r3,r5
1010a398:	843fffc4 	addi	r16,r16,-1
1010a39c:	d9801115 	stw	r6,68(sp)
1010a3a0:	000d883a 	mov	r6,zero
1010a3a4:	01cffe34 	movhi	r7,16376
1010a3a8:	01133d40 	call	101133d4 <__subdf3>
1010a3ac:	0198dbf4 	movhi	r6,25455
1010a3b0:	01cff4f4 	movhi	r7,16339
1010a3b4:	3190d844 	addi	r6,r6,17249
1010a3b8:	39e1e9c4 	addi	r7,r7,-30809
1010a3bc:	1009883a 	mov	r4,r2
1010a3c0:	180b883a 	mov	r5,r3
1010a3c4:	0112cbc0 	call	10112cbc <__muldf3>
1010a3c8:	01a2d874 	movhi	r6,35681
1010a3cc:	01cff1f4 	movhi	r7,16327
1010a3d0:	31b22cc4 	addi	r6,r6,-14157
1010a3d4:	39e28a04 	addi	r7,r7,-30168
1010a3d8:	180b883a 	mov	r5,r3
1010a3dc:	1009883a 	mov	r4,r2
1010a3e0:	01118d00 	call	101118d0 <__adddf3>
1010a3e4:	8009883a 	mov	r4,r16
1010a3e8:	1029883a 	mov	r20,r2
1010a3ec:	1823883a 	mov	r17,r3
1010a3f0:	0113d500 	call	10113d50 <__floatsidf>
1010a3f4:	019427f4 	movhi	r6,20639
1010a3f8:	01cff4f4 	movhi	r7,16339
1010a3fc:	319e7ec4 	addi	r6,r6,31227
1010a400:	39d104c4 	addi	r7,r7,17427
1010a404:	1009883a 	mov	r4,r2
1010a408:	180b883a 	mov	r5,r3
1010a40c:	0112cbc0 	call	10112cbc <__muldf3>
1010a410:	100d883a 	mov	r6,r2
1010a414:	180f883a 	mov	r7,r3
1010a418:	a009883a 	mov	r4,r20
1010a41c:	880b883a 	mov	r5,r17
1010a420:	01118d00 	call	101118d0 <__adddf3>
1010a424:	1009883a 	mov	r4,r2
1010a428:	180b883a 	mov	r5,r3
1010a42c:	1029883a 	mov	r20,r2
1010a430:	1823883a 	mov	r17,r3
1010a434:	0113cd00 	call	10113cd0 <__fixdfsi>
1010a438:	000d883a 	mov	r6,zero
1010a43c:	000f883a 	mov	r7,zero
1010a440:	a009883a 	mov	r4,r20
1010a444:	880b883a 	mov	r5,r17
1010a448:	d8800515 	stw	r2,20(sp)
1010a44c:	0112bc80 	call	10112bc8 <__ledf2>
1010a450:	10028716 	blt	r2,zero,1010ae70 <_dtoa_r+0xc88>
1010a454:	d8c00517 	ldw	r3,20(sp)
1010a458:	00800584 	movi	r2,22
1010a45c:	10c27536 	bltu	r2,r3,1010ae34 <_dtoa_r+0xc4c>
1010a460:	180490fa 	slli	r2,r3,3
1010a464:	00c40474 	movhi	r3,4113
1010a468:	18de1d04 	addi	r3,r3,30836
1010a46c:	1885883a 	add	r2,r3,r2
1010a470:	11000017 	ldw	r4,0(r2)
1010a474:	11400117 	ldw	r5,4(r2)
1010a478:	900d883a 	mov	r6,r18
1010a47c:	980f883a 	mov	r7,r19
1010a480:	0112aec0 	call	10112aec <__gedf2>
1010a484:	00828d0e 	bge	zero,r2,1010aebc <_dtoa_r+0xcd4>
1010a488:	d9000517 	ldw	r4,20(sp)
1010a48c:	d8000e15 	stw	zero,56(sp)
1010a490:	213fffc4 	addi	r4,r4,-1
1010a494:	d9000515 	stw	r4,20(sp)
1010a498:	b42dc83a 	sub	r22,r22,r16
1010a49c:	b5bfffc4 	addi	r22,r22,-1
1010a4a0:	b0026f16 	blt	r22,zero,1010ae60 <_dtoa_r+0xc78>
1010a4a4:	d8000815 	stw	zero,32(sp)
1010a4a8:	d9c00517 	ldw	r7,20(sp)
1010a4ac:	38026416 	blt	r7,zero,1010ae40 <_dtoa_r+0xc58>
1010a4b0:	b1ed883a 	add	r22,r22,r7
1010a4b4:	d9c00d15 	stw	r7,52(sp)
1010a4b8:	d8000a15 	stw	zero,40(sp)
1010a4bc:	d9800317 	ldw	r6,12(sp)
1010a4c0:	00800244 	movi	r2,9
1010a4c4:	11811436 	bltu	r2,r6,1010a918 <_dtoa_r+0x730>
1010a4c8:	00800144 	movi	r2,5
1010a4cc:	1184e10e 	bge	r2,r6,1010b854 <_dtoa_r+0x166c>
1010a4d0:	31bfff04 	addi	r6,r6,-4
1010a4d4:	d9800315 	stw	r6,12(sp)
1010a4d8:	0023883a 	mov	r17,zero
1010a4dc:	d9800317 	ldw	r6,12(sp)
1010a4e0:	008000c4 	movi	r2,3
1010a4e4:	30836726 	beq	r6,r2,1010b284 <_dtoa_r+0x109c>
1010a4e8:	1183410e 	bge	r2,r6,1010b1f0 <_dtoa_r+0x1008>
1010a4ec:	d9c00317 	ldw	r7,12(sp)
1010a4f0:	00800104 	movi	r2,4
1010a4f4:	38827c26 	beq	r7,r2,1010aee8 <_dtoa_r+0xd00>
1010a4f8:	00800144 	movi	r2,5
1010a4fc:	3884c41e 	bne	r7,r2,1010b810 <_dtoa_r+0x1628>
1010a500:	00800044 	movi	r2,1
1010a504:	d8800b15 	stw	r2,44(sp)
1010a508:	d8c00517 	ldw	r3,20(sp)
1010a50c:	d9002217 	ldw	r4,136(sp)
1010a510:	1907883a 	add	r3,r3,r4
1010a514:	19800044 	addi	r6,r3,1
1010a518:	d8c00c15 	stw	r3,48(sp)
1010a51c:	d9800615 	stw	r6,24(sp)
1010a520:	0183a40e 	bge	zero,r6,1010b3b4 <_dtoa_r+0x11cc>
1010a524:	d9800617 	ldw	r6,24(sp)
1010a528:	3021883a 	mov	r16,r6
1010a52c:	e0001115 	stw	zero,68(fp)
1010a530:	008005c4 	movi	r2,23
1010a534:	1184c92e 	bgeu	r2,r6,1010b85c <_dtoa_r+0x1674>
1010a538:	00c00044 	movi	r3,1
1010a53c:	00800104 	movi	r2,4
1010a540:	1085883a 	add	r2,r2,r2
1010a544:	11000504 	addi	r4,r2,20
1010a548:	180b883a 	mov	r5,r3
1010a54c:	18c00044 	addi	r3,r3,1
1010a550:	313ffb2e 	bgeu	r6,r4,1010a540 <_gp+0xfffe8fb0>
1010a554:	e1401115 	stw	r5,68(fp)
1010a558:	e009883a 	mov	r4,fp
1010a55c:	010c34c0 	call	1010c34c <_Balloc>
1010a560:	d8800715 	stw	r2,28(sp)
1010a564:	e0801015 	stw	r2,64(fp)
1010a568:	00800384 	movi	r2,14
1010a56c:	1400f736 	bltu	r2,r16,1010a94c <_dtoa_r+0x764>
1010a570:	8800f626 	beq	r17,zero,1010a94c <_dtoa_r+0x764>
1010a574:	d9c00517 	ldw	r7,20(sp)
1010a578:	01c39a0e 	bge	zero,r7,1010b3e4 <_dtoa_r+0x11fc>
1010a57c:	388003cc 	andi	r2,r7,15
1010a580:	100490fa 	slli	r2,r2,3
1010a584:	382bd13a 	srai	r21,r7,4
1010a588:	00c40474 	movhi	r3,4113
1010a58c:	18de1d04 	addi	r3,r3,30836
1010a590:	1885883a 	add	r2,r3,r2
1010a594:	a8c0040c 	andi	r3,r21,16
1010a598:	12400017 	ldw	r9,0(r2)
1010a59c:	12000117 	ldw	r8,4(r2)
1010a5a0:	18037926 	beq	r3,zero,1010b388 <_dtoa_r+0x11a0>
1010a5a4:	00840474 	movhi	r2,4113
1010a5a8:	109e1304 	addi	r2,r2,30796
1010a5ac:	11800817 	ldw	r6,32(r2)
1010a5b0:	11c00917 	ldw	r7,36(r2)
1010a5b4:	9009883a 	mov	r4,r18
1010a5b8:	980b883a 	mov	r5,r19
1010a5bc:	da001715 	stw	r8,92(sp)
1010a5c0:	da401615 	stw	r9,88(sp)
1010a5c4:	011217c0 	call	1011217c <__divdf3>
1010a5c8:	da001717 	ldw	r8,92(sp)
1010a5cc:	da401617 	ldw	r9,88(sp)
1010a5d0:	ad4003cc 	andi	r21,r21,15
1010a5d4:	040000c4 	movi	r16,3
1010a5d8:	1023883a 	mov	r17,r2
1010a5dc:	1829883a 	mov	r20,r3
1010a5e0:	a8001126 	beq	r21,zero,1010a628 <_dtoa_r+0x440>
1010a5e4:	05c40474 	movhi	r23,4113
1010a5e8:	bdde1304 	addi	r23,r23,30796
1010a5ec:	4805883a 	mov	r2,r9
1010a5f0:	4007883a 	mov	r3,r8
1010a5f4:	a980004c 	andi	r6,r21,1
1010a5f8:	1009883a 	mov	r4,r2
1010a5fc:	a82bd07a 	srai	r21,r21,1
1010a600:	180b883a 	mov	r5,r3
1010a604:	30000426 	beq	r6,zero,1010a618 <_dtoa_r+0x430>
1010a608:	b9800017 	ldw	r6,0(r23)
1010a60c:	b9c00117 	ldw	r7,4(r23)
1010a610:	84000044 	addi	r16,r16,1
1010a614:	0112cbc0 	call	10112cbc <__muldf3>
1010a618:	bdc00204 	addi	r23,r23,8
1010a61c:	a83ff51e 	bne	r21,zero,1010a5f4 <_gp+0xfffe9064>
1010a620:	1013883a 	mov	r9,r2
1010a624:	1811883a 	mov	r8,r3
1010a628:	480d883a 	mov	r6,r9
1010a62c:	400f883a 	mov	r7,r8
1010a630:	8809883a 	mov	r4,r17
1010a634:	a00b883a 	mov	r5,r20
1010a638:	011217c0 	call	1011217c <__divdf3>
1010a63c:	d8800f15 	stw	r2,60(sp)
1010a640:	d8c01015 	stw	r3,64(sp)
1010a644:	d8c00e17 	ldw	r3,56(sp)
1010a648:	18000626 	beq	r3,zero,1010a664 <_dtoa_r+0x47c>
1010a64c:	d9000f17 	ldw	r4,60(sp)
1010a650:	d9401017 	ldw	r5,64(sp)
1010a654:	000d883a 	mov	r6,zero
1010a658:	01cffc34 	movhi	r7,16368
1010a65c:	0112bc80 	call	10112bc8 <__ledf2>
1010a660:	10040b16 	blt	r2,zero,1010b690 <_dtoa_r+0x14a8>
1010a664:	8009883a 	mov	r4,r16
1010a668:	0113d500 	call	10113d50 <__floatsidf>
1010a66c:	d9800f17 	ldw	r6,60(sp)
1010a670:	d9c01017 	ldw	r7,64(sp)
1010a674:	1009883a 	mov	r4,r2
1010a678:	180b883a 	mov	r5,r3
1010a67c:	0112cbc0 	call	10112cbc <__muldf3>
1010a680:	000d883a 	mov	r6,zero
1010a684:	01d00734 	movhi	r7,16412
1010a688:	1009883a 	mov	r4,r2
1010a68c:	180b883a 	mov	r5,r3
1010a690:	01118d00 	call	101118d0 <__adddf3>
1010a694:	1021883a 	mov	r16,r2
1010a698:	d8800617 	ldw	r2,24(sp)
1010a69c:	047f3034 	movhi	r17,64704
1010a6a0:	1c63883a 	add	r17,r3,r17
1010a6a4:	10031826 	beq	r2,zero,1010b308 <_dtoa_r+0x1120>
1010a6a8:	d8c00517 	ldw	r3,20(sp)
1010a6ac:	db000617 	ldw	r12,24(sp)
1010a6b0:	d8c01315 	stw	r3,76(sp)
1010a6b4:	d9000b17 	ldw	r4,44(sp)
1010a6b8:	20038f26 	beq	r4,zero,1010b4f8 <_dtoa_r+0x1310>
1010a6bc:	60bfffc4 	addi	r2,r12,-1
1010a6c0:	100490fa 	slli	r2,r2,3
1010a6c4:	00c40474 	movhi	r3,4113
1010a6c8:	18de1d04 	addi	r3,r3,30836
1010a6cc:	1885883a 	add	r2,r3,r2
1010a6d0:	11800017 	ldw	r6,0(r2)
1010a6d4:	11c00117 	ldw	r7,4(r2)
1010a6d8:	d8800717 	ldw	r2,28(sp)
1010a6dc:	0009883a 	mov	r4,zero
1010a6e0:	014ff834 	movhi	r5,16352
1010a6e4:	db001615 	stw	r12,88(sp)
1010a6e8:	15c00044 	addi	r23,r2,1
1010a6ec:	011217c0 	call	1011217c <__divdf3>
1010a6f0:	800d883a 	mov	r6,r16
1010a6f4:	880f883a 	mov	r7,r17
1010a6f8:	1009883a 	mov	r4,r2
1010a6fc:	180b883a 	mov	r5,r3
1010a700:	01133d40 	call	101133d4 <__subdf3>
1010a704:	d9401017 	ldw	r5,64(sp)
1010a708:	d9000f17 	ldw	r4,60(sp)
1010a70c:	102b883a 	mov	r21,r2
1010a710:	d8c01215 	stw	r3,72(sp)
1010a714:	0113cd00 	call	10113cd0 <__fixdfsi>
1010a718:	1009883a 	mov	r4,r2
1010a71c:	1029883a 	mov	r20,r2
1010a720:	0113d500 	call	10113d50 <__floatsidf>
1010a724:	d9000f17 	ldw	r4,60(sp)
1010a728:	d9401017 	ldw	r5,64(sp)
1010a72c:	100d883a 	mov	r6,r2
1010a730:	180f883a 	mov	r7,r3
1010a734:	01133d40 	call	101133d4 <__subdf3>
1010a738:	1823883a 	mov	r17,r3
1010a73c:	d8c00717 	ldw	r3,28(sp)
1010a740:	d9401217 	ldw	r5,72(sp)
1010a744:	a2000c04 	addi	r8,r20,48
1010a748:	1021883a 	mov	r16,r2
1010a74c:	1a000005 	stb	r8,0(r3)
1010a750:	800d883a 	mov	r6,r16
1010a754:	880f883a 	mov	r7,r17
1010a758:	a809883a 	mov	r4,r21
1010a75c:	4029883a 	mov	r20,r8
1010a760:	0112aec0 	call	10112aec <__gedf2>
1010a764:	00841d16 	blt	zero,r2,1010b7dc <_dtoa_r+0x15f4>
1010a768:	800d883a 	mov	r6,r16
1010a76c:	880f883a 	mov	r7,r17
1010a770:	0009883a 	mov	r4,zero
1010a774:	014ffc34 	movhi	r5,16368
1010a778:	01133d40 	call	101133d4 <__subdf3>
1010a77c:	d9401217 	ldw	r5,72(sp)
1010a780:	100d883a 	mov	r6,r2
1010a784:	180f883a 	mov	r7,r3
1010a788:	a809883a 	mov	r4,r21
1010a78c:	0112aec0 	call	10112aec <__gedf2>
1010a790:	db001617 	ldw	r12,88(sp)
1010a794:	00840e16 	blt	zero,r2,1010b7d0 <_dtoa_r+0x15e8>
1010a798:	00800044 	movi	r2,1
1010a79c:	13006b0e 	bge	r2,r12,1010a94c <_dtoa_r+0x764>
1010a7a0:	d9000717 	ldw	r4,28(sp)
1010a7a4:	dd800f15 	stw	r22,60(sp)
1010a7a8:	dcc01015 	stw	r19,64(sp)
1010a7ac:	2319883a 	add	r12,r4,r12
1010a7b0:	dcc01217 	ldw	r19,72(sp)
1010a7b4:	602d883a 	mov	r22,r12
1010a7b8:	dc801215 	stw	r18,72(sp)
1010a7bc:	b825883a 	mov	r18,r23
1010a7c0:	00000906 	br	1010a7e8 <_dtoa_r+0x600>
1010a7c4:	01133d40 	call	101133d4 <__subdf3>
1010a7c8:	a80d883a 	mov	r6,r21
1010a7cc:	980f883a 	mov	r7,r19
1010a7d0:	1009883a 	mov	r4,r2
1010a7d4:	180b883a 	mov	r5,r3
1010a7d8:	0112bc80 	call	10112bc8 <__ledf2>
1010a7dc:	1003e816 	blt	r2,zero,1010b780 <_dtoa_r+0x1598>
1010a7e0:	b825883a 	mov	r18,r23
1010a7e4:	bd83e926 	beq	r23,r22,1010b78c <_dtoa_r+0x15a4>
1010a7e8:	a809883a 	mov	r4,r21
1010a7ec:	980b883a 	mov	r5,r19
1010a7f0:	000d883a 	mov	r6,zero
1010a7f4:	01d00934 	movhi	r7,16420
1010a7f8:	0112cbc0 	call	10112cbc <__muldf3>
1010a7fc:	000d883a 	mov	r6,zero
1010a800:	01d00934 	movhi	r7,16420
1010a804:	8009883a 	mov	r4,r16
1010a808:	880b883a 	mov	r5,r17
1010a80c:	102b883a 	mov	r21,r2
1010a810:	1827883a 	mov	r19,r3
1010a814:	0112cbc0 	call	10112cbc <__muldf3>
1010a818:	180b883a 	mov	r5,r3
1010a81c:	1009883a 	mov	r4,r2
1010a820:	1821883a 	mov	r16,r3
1010a824:	1023883a 	mov	r17,r2
1010a828:	0113cd00 	call	10113cd0 <__fixdfsi>
1010a82c:	1009883a 	mov	r4,r2
1010a830:	1029883a 	mov	r20,r2
1010a834:	0113d500 	call	10113d50 <__floatsidf>
1010a838:	8809883a 	mov	r4,r17
1010a83c:	800b883a 	mov	r5,r16
1010a840:	100d883a 	mov	r6,r2
1010a844:	180f883a 	mov	r7,r3
1010a848:	01133d40 	call	101133d4 <__subdf3>
1010a84c:	a5000c04 	addi	r20,r20,48
1010a850:	a80d883a 	mov	r6,r21
1010a854:	980f883a 	mov	r7,r19
1010a858:	1009883a 	mov	r4,r2
1010a85c:	180b883a 	mov	r5,r3
1010a860:	95000005 	stb	r20,0(r18)
1010a864:	1021883a 	mov	r16,r2
1010a868:	1823883a 	mov	r17,r3
1010a86c:	0112bc80 	call	10112bc8 <__ledf2>
1010a870:	bdc00044 	addi	r23,r23,1
1010a874:	800d883a 	mov	r6,r16
1010a878:	880f883a 	mov	r7,r17
1010a87c:	0009883a 	mov	r4,zero
1010a880:	014ffc34 	movhi	r5,16368
1010a884:	103fcf0e 	bge	r2,zero,1010a7c4 <_gp+0xfffe9234>
1010a888:	d8c01317 	ldw	r3,76(sp)
1010a88c:	d8c00515 	stw	r3,20(sp)
1010a890:	d9400917 	ldw	r5,36(sp)
1010a894:	e009883a 	mov	r4,fp
1010a898:	010c3f40 	call	1010c3f4 <_Bfree>
1010a89c:	d9000517 	ldw	r4,20(sp)
1010a8a0:	d9802317 	ldw	r6,140(sp)
1010a8a4:	d9c02517 	ldw	r7,148(sp)
1010a8a8:	b8000005 	stb	zero,0(r23)
1010a8ac:	20800044 	addi	r2,r4,1
1010a8b0:	30800015 	stw	r2,0(r6)
1010a8b4:	3802aa26 	beq	r7,zero,1010b360 <_dtoa_r+0x1178>
1010a8b8:	3dc00015 	stw	r23,0(r7)
1010a8bc:	d8800717 	ldw	r2,28(sp)
1010a8c0:	003e7906 	br	1010a2a8 <_gp+0xfffe8d18>
1010a8c4:	00800434 	movhi	r2,16
1010a8c8:	10bfffc4 	addi	r2,r2,-1
1010a8cc:	88a2703a 	and	r17,r17,r2
1010a8d0:	883e851e 	bne	r17,zero,1010a2e8 <_gp+0xfffe8d58>
1010a8d4:	00840474 	movhi	r2,4113
1010a8d8:	109dff04 	addi	r2,r2,30716
1010a8dc:	003e8406 	br	1010a2f0 <_gp+0xfffe8d60>
1010a8e0:	10c00204 	addi	r3,r2,8
1010a8e4:	003e8706 	br	1010a304 <_gp+0xfffe8d74>
1010a8e8:	01400434 	movhi	r5,16
1010a8ec:	297fffc4 	addi	r5,r5,-1
1010a8f0:	994a703a 	and	r5,r19,r5
1010a8f4:	9009883a 	mov	r4,r18
1010a8f8:	843f0044 	addi	r16,r16,-1023
1010a8fc:	294ffc34 	orhi	r5,r5,16368
1010a900:	dd800217 	ldw	r22,8(sp)
1010a904:	d8001115 	stw	zero,68(sp)
1010a908:	003ea506 	br	1010a3a0 <_gp+0xfffe8e10>
1010a90c:	00840474 	movhi	r2,4113
1010a910:	109dee04 	addi	r2,r2,30648
1010a914:	003e6406 	br	1010a2a8 <_gp+0xfffe8d18>
1010a918:	e0001115 	stw	zero,68(fp)
1010a91c:	000b883a 	mov	r5,zero
1010a920:	e009883a 	mov	r4,fp
1010a924:	010c34c0 	call	1010c34c <_Balloc>
1010a928:	01bfffc4 	movi	r6,-1
1010a92c:	01c00044 	movi	r7,1
1010a930:	d8800715 	stw	r2,28(sp)
1010a934:	d9800c15 	stw	r6,48(sp)
1010a938:	e0801015 	stw	r2,64(fp)
1010a93c:	d8000315 	stw	zero,12(sp)
1010a940:	d9c00b15 	stw	r7,44(sp)
1010a944:	d9800615 	stw	r6,24(sp)
1010a948:	d8002215 	stw	zero,136(sp)
1010a94c:	d8800117 	ldw	r2,4(sp)
1010a950:	10008916 	blt	r2,zero,1010ab78 <_dtoa_r+0x990>
1010a954:	d9000517 	ldw	r4,20(sp)
1010a958:	00c00384 	movi	r3,14
1010a95c:	19008616 	blt	r3,r4,1010ab78 <_dtoa_r+0x990>
1010a960:	200490fa 	slli	r2,r4,3
1010a964:	00c40474 	movhi	r3,4113
1010a968:	d9802217 	ldw	r6,136(sp)
1010a96c:	18de1d04 	addi	r3,r3,30836
1010a970:	1885883a 	add	r2,r3,r2
1010a974:	14000017 	ldw	r16,0(r2)
1010a978:	14400117 	ldw	r17,4(r2)
1010a97c:	30016316 	blt	r6,zero,1010af0c <_dtoa_r+0xd24>
1010a980:	800d883a 	mov	r6,r16
1010a984:	880f883a 	mov	r7,r17
1010a988:	9009883a 	mov	r4,r18
1010a98c:	980b883a 	mov	r5,r19
1010a990:	011217c0 	call	1011217c <__divdf3>
1010a994:	180b883a 	mov	r5,r3
1010a998:	1009883a 	mov	r4,r2
1010a99c:	0113cd00 	call	10113cd0 <__fixdfsi>
1010a9a0:	1009883a 	mov	r4,r2
1010a9a4:	102b883a 	mov	r21,r2
1010a9a8:	0113d500 	call	10113d50 <__floatsidf>
1010a9ac:	800d883a 	mov	r6,r16
1010a9b0:	880f883a 	mov	r7,r17
1010a9b4:	1009883a 	mov	r4,r2
1010a9b8:	180b883a 	mov	r5,r3
1010a9bc:	0112cbc0 	call	10112cbc <__muldf3>
1010a9c0:	100d883a 	mov	r6,r2
1010a9c4:	180f883a 	mov	r7,r3
1010a9c8:	9009883a 	mov	r4,r18
1010a9cc:	980b883a 	mov	r5,r19
1010a9d0:	01133d40 	call	101133d4 <__subdf3>
1010a9d4:	d9c00717 	ldw	r7,28(sp)
1010a9d8:	1009883a 	mov	r4,r2
1010a9dc:	a8800c04 	addi	r2,r21,48
1010a9e0:	38800005 	stb	r2,0(r7)
1010a9e4:	3dc00044 	addi	r23,r7,1
1010a9e8:	d9c00617 	ldw	r7,24(sp)
1010a9ec:	01800044 	movi	r6,1
1010a9f0:	180b883a 	mov	r5,r3
1010a9f4:	2005883a 	mov	r2,r4
1010a9f8:	39803826 	beq	r7,r6,1010aadc <_dtoa_r+0x8f4>
1010a9fc:	000d883a 	mov	r6,zero
1010aa00:	01d00934 	movhi	r7,16420
1010aa04:	0112cbc0 	call	10112cbc <__muldf3>
1010aa08:	000d883a 	mov	r6,zero
1010aa0c:	000f883a 	mov	r7,zero
1010aa10:	1009883a 	mov	r4,r2
1010aa14:	180b883a 	mov	r5,r3
1010aa18:	1025883a 	mov	r18,r2
1010aa1c:	1827883a 	mov	r19,r3
1010aa20:	0112a640 	call	10112a64 <__eqdf2>
1010aa24:	103f9a26 	beq	r2,zero,1010a890 <_gp+0xfffe9300>
1010aa28:	d9c00617 	ldw	r7,24(sp)
1010aa2c:	d8c00717 	ldw	r3,28(sp)
1010aa30:	b829883a 	mov	r20,r23
1010aa34:	38bfffc4 	addi	r2,r7,-1
1010aa38:	18ad883a 	add	r22,r3,r2
1010aa3c:	00000a06 	br	1010aa68 <_dtoa_r+0x880>
1010aa40:	0112cbc0 	call	10112cbc <__muldf3>
1010aa44:	000d883a 	mov	r6,zero
1010aa48:	000f883a 	mov	r7,zero
1010aa4c:	1009883a 	mov	r4,r2
1010aa50:	180b883a 	mov	r5,r3
1010aa54:	1025883a 	mov	r18,r2
1010aa58:	1827883a 	mov	r19,r3
1010aa5c:	b829883a 	mov	r20,r23
1010aa60:	0112a640 	call	10112a64 <__eqdf2>
1010aa64:	103f8a26 	beq	r2,zero,1010a890 <_gp+0xfffe9300>
1010aa68:	800d883a 	mov	r6,r16
1010aa6c:	880f883a 	mov	r7,r17
1010aa70:	9009883a 	mov	r4,r18
1010aa74:	980b883a 	mov	r5,r19
1010aa78:	011217c0 	call	1011217c <__divdf3>
1010aa7c:	180b883a 	mov	r5,r3
1010aa80:	1009883a 	mov	r4,r2
1010aa84:	0113cd00 	call	10113cd0 <__fixdfsi>
1010aa88:	1009883a 	mov	r4,r2
1010aa8c:	102b883a 	mov	r21,r2
1010aa90:	0113d500 	call	10113d50 <__floatsidf>
1010aa94:	800d883a 	mov	r6,r16
1010aa98:	880f883a 	mov	r7,r17
1010aa9c:	1009883a 	mov	r4,r2
1010aaa0:	180b883a 	mov	r5,r3
1010aaa4:	0112cbc0 	call	10112cbc <__muldf3>
1010aaa8:	100d883a 	mov	r6,r2
1010aaac:	180f883a 	mov	r7,r3
1010aab0:	9009883a 	mov	r4,r18
1010aab4:	980b883a 	mov	r5,r19
1010aab8:	01133d40 	call	101133d4 <__subdf3>
1010aabc:	aa000c04 	addi	r8,r21,48
1010aac0:	a2000005 	stb	r8,0(r20)
1010aac4:	000d883a 	mov	r6,zero
1010aac8:	01d00934 	movhi	r7,16420
1010aacc:	1009883a 	mov	r4,r2
1010aad0:	180b883a 	mov	r5,r3
1010aad4:	a5c00044 	addi	r23,r20,1
1010aad8:	b53fd91e 	bne	r22,r20,1010aa40 <_gp+0xfffe94b0>
1010aadc:	100d883a 	mov	r6,r2
1010aae0:	180f883a 	mov	r7,r3
1010aae4:	1009883a 	mov	r4,r2
1010aae8:	180b883a 	mov	r5,r3
1010aaec:	01118d00 	call	101118d0 <__adddf3>
1010aaf0:	100d883a 	mov	r6,r2
1010aaf4:	180f883a 	mov	r7,r3
1010aaf8:	8009883a 	mov	r4,r16
1010aafc:	880b883a 	mov	r5,r17
1010ab00:	1027883a 	mov	r19,r2
1010ab04:	1825883a 	mov	r18,r3
1010ab08:	0112bc80 	call	10112bc8 <__ledf2>
1010ab0c:	10000816 	blt	r2,zero,1010ab30 <_dtoa_r+0x948>
1010ab10:	980d883a 	mov	r6,r19
1010ab14:	900f883a 	mov	r7,r18
1010ab18:	8009883a 	mov	r4,r16
1010ab1c:	880b883a 	mov	r5,r17
1010ab20:	0112a640 	call	10112a64 <__eqdf2>
1010ab24:	103f5a1e 	bne	r2,zero,1010a890 <_gp+0xfffe9300>
1010ab28:	ad40004c 	andi	r21,r21,1
1010ab2c:	a83f5826 	beq	r21,zero,1010a890 <_gp+0xfffe9300>
1010ab30:	bd3fffc3 	ldbu	r20,-1(r23)
1010ab34:	b8bfffc4 	addi	r2,r23,-1
1010ab38:	1007883a 	mov	r3,r2
1010ab3c:	01400e44 	movi	r5,57
1010ab40:	d9800717 	ldw	r6,28(sp)
1010ab44:	00000506 	br	1010ab5c <_dtoa_r+0x974>
1010ab48:	18ffffc4 	addi	r3,r3,-1
1010ab4c:	11824726 	beq	r2,r6,1010b46c <_dtoa_r+0x1284>
1010ab50:	1d000003 	ldbu	r20,0(r3)
1010ab54:	102f883a 	mov	r23,r2
1010ab58:	10bfffc4 	addi	r2,r2,-1
1010ab5c:	a1003fcc 	andi	r4,r20,255
1010ab60:	2100201c 	xori	r4,r4,128
1010ab64:	213fe004 	addi	r4,r4,-128
1010ab68:	217ff726 	beq	r4,r5,1010ab48 <_gp+0xfffe95b8>
1010ab6c:	a2000044 	addi	r8,r20,1
1010ab70:	12000005 	stb	r8,0(r2)
1010ab74:	003f4606 	br	1010a890 <_gp+0xfffe9300>
1010ab78:	d9000b17 	ldw	r4,44(sp)
1010ab7c:	2000c826 	beq	r4,zero,1010aea0 <_dtoa_r+0xcb8>
1010ab80:	d9800317 	ldw	r6,12(sp)
1010ab84:	00c00044 	movi	r3,1
1010ab88:	1980f90e 	bge	r3,r6,1010af70 <_dtoa_r+0xd88>
1010ab8c:	d8800617 	ldw	r2,24(sp)
1010ab90:	d8c00a17 	ldw	r3,40(sp)
1010ab94:	157fffc4 	addi	r21,r2,-1
1010ab98:	1d41f316 	blt	r3,r21,1010b368 <_dtoa_r+0x1180>
1010ab9c:	1d6bc83a 	sub	r21,r3,r21
1010aba0:	d9c00617 	ldw	r7,24(sp)
1010aba4:	3802aa16 	blt	r7,zero,1010b650 <_dtoa_r+0x1468>
1010aba8:	dd000817 	ldw	r20,32(sp)
1010abac:	d8800617 	ldw	r2,24(sp)
1010abb0:	d8c00817 	ldw	r3,32(sp)
1010abb4:	01400044 	movi	r5,1
1010abb8:	e009883a 	mov	r4,fp
1010abbc:	1887883a 	add	r3,r3,r2
1010abc0:	d8c00815 	stw	r3,32(sp)
1010abc4:	b0ad883a 	add	r22,r22,r2
1010abc8:	010c7580 	call	1010c758 <__i2b>
1010abcc:	1023883a 	mov	r17,r2
1010abd0:	a0000826 	beq	r20,zero,1010abf4 <_dtoa_r+0xa0c>
1010abd4:	0580070e 	bge	zero,r22,1010abf4 <_dtoa_r+0xa0c>
1010abd8:	a005883a 	mov	r2,r20
1010abdc:	b500b916 	blt	r22,r20,1010aec4 <_dtoa_r+0xcdc>
1010abe0:	d9000817 	ldw	r4,32(sp)
1010abe4:	a0a9c83a 	sub	r20,r20,r2
1010abe8:	b0adc83a 	sub	r22,r22,r2
1010abec:	2089c83a 	sub	r4,r4,r2
1010abf0:	d9000815 	stw	r4,32(sp)
1010abf4:	d9800a17 	ldw	r6,40(sp)
1010abf8:	0181810e 	bge	zero,r6,1010b200 <_dtoa_r+0x1018>
1010abfc:	d9c00b17 	ldw	r7,44(sp)
1010ac00:	3800b326 	beq	r7,zero,1010aed0 <_dtoa_r+0xce8>
1010ac04:	a800b226 	beq	r21,zero,1010aed0 <_dtoa_r+0xce8>
1010ac08:	880b883a 	mov	r5,r17
1010ac0c:	a80d883a 	mov	r6,r21
1010ac10:	e009883a 	mov	r4,fp
1010ac14:	010c98c0 	call	1010c98c <__pow5mult>
1010ac18:	d9800917 	ldw	r6,36(sp)
1010ac1c:	100b883a 	mov	r5,r2
1010ac20:	e009883a 	mov	r4,fp
1010ac24:	1023883a 	mov	r17,r2
1010ac28:	010c7940 	call	1010c794 <__multiply>
1010ac2c:	1021883a 	mov	r16,r2
1010ac30:	d8800a17 	ldw	r2,40(sp)
1010ac34:	d9400917 	ldw	r5,36(sp)
1010ac38:	e009883a 	mov	r4,fp
1010ac3c:	1545c83a 	sub	r2,r2,r21
1010ac40:	d8800a15 	stw	r2,40(sp)
1010ac44:	010c3f40 	call	1010c3f4 <_Bfree>
1010ac48:	d8c00a17 	ldw	r3,40(sp)
1010ac4c:	18009f1e 	bne	r3,zero,1010aecc <_dtoa_r+0xce4>
1010ac50:	05c00044 	movi	r23,1
1010ac54:	e009883a 	mov	r4,fp
1010ac58:	b80b883a 	mov	r5,r23
1010ac5c:	010c7580 	call	1010c758 <__i2b>
1010ac60:	d9000d17 	ldw	r4,52(sp)
1010ac64:	102b883a 	mov	r21,r2
1010ac68:	2000ce26 	beq	r4,zero,1010afa4 <_dtoa_r+0xdbc>
1010ac6c:	200d883a 	mov	r6,r4
1010ac70:	100b883a 	mov	r5,r2
1010ac74:	e009883a 	mov	r4,fp
1010ac78:	010c98c0 	call	1010c98c <__pow5mult>
1010ac7c:	d9800317 	ldw	r6,12(sp)
1010ac80:	102b883a 	mov	r21,r2
1010ac84:	b981810e 	bge	r23,r6,1010b28c <_dtoa_r+0x10a4>
1010ac88:	0027883a 	mov	r19,zero
1010ac8c:	a8800417 	ldw	r2,16(r21)
1010ac90:	05c00804 	movi	r23,32
1010ac94:	10800104 	addi	r2,r2,4
1010ac98:	1085883a 	add	r2,r2,r2
1010ac9c:	1085883a 	add	r2,r2,r2
1010aca0:	a885883a 	add	r2,r21,r2
1010aca4:	11000017 	ldw	r4,0(r2)
1010aca8:	010c6400 	call	1010c640 <__hi0bits>
1010acac:	b885c83a 	sub	r2,r23,r2
1010acb0:	1585883a 	add	r2,r2,r22
1010acb4:	108007cc 	andi	r2,r2,31
1010acb8:	1000b326 	beq	r2,zero,1010af88 <_dtoa_r+0xda0>
1010acbc:	00c00804 	movi	r3,32
1010acc0:	1887c83a 	sub	r3,r3,r2
1010acc4:	01000104 	movi	r4,4
1010acc8:	20c2cd0e 	bge	r4,r3,1010b800 <_dtoa_r+0x1618>
1010accc:	00c00704 	movi	r3,28
1010acd0:	1885c83a 	sub	r2,r3,r2
1010acd4:	d8c00817 	ldw	r3,32(sp)
1010acd8:	a0a9883a 	add	r20,r20,r2
1010acdc:	b0ad883a 	add	r22,r22,r2
1010ace0:	1887883a 	add	r3,r3,r2
1010ace4:	d8c00815 	stw	r3,32(sp)
1010ace8:	d9800817 	ldw	r6,32(sp)
1010acec:	0180040e 	bge	zero,r6,1010ad00 <_dtoa_r+0xb18>
1010acf0:	800b883a 	mov	r5,r16
1010acf4:	e009883a 	mov	r4,fp
1010acf8:	010cacc0 	call	1010cacc <__lshift>
1010acfc:	1021883a 	mov	r16,r2
1010ad00:	0580050e 	bge	zero,r22,1010ad18 <_dtoa_r+0xb30>
1010ad04:	a80b883a 	mov	r5,r21
1010ad08:	b00d883a 	mov	r6,r22
1010ad0c:	e009883a 	mov	r4,fp
1010ad10:	010cacc0 	call	1010cacc <__lshift>
1010ad14:	102b883a 	mov	r21,r2
1010ad18:	d9c00e17 	ldw	r7,56(sp)
1010ad1c:	3801211e 	bne	r7,zero,1010b1a4 <_dtoa_r+0xfbc>
1010ad20:	d9800617 	ldw	r6,24(sp)
1010ad24:	0181380e 	bge	zero,r6,1010b208 <_dtoa_r+0x1020>
1010ad28:	d8c00b17 	ldw	r3,44(sp)
1010ad2c:	1800ab1e 	bne	r3,zero,1010afdc <_dtoa_r+0xdf4>
1010ad30:	dc800717 	ldw	r18,28(sp)
1010ad34:	dcc00617 	ldw	r19,24(sp)
1010ad38:	9029883a 	mov	r20,r18
1010ad3c:	00000206 	br	1010ad48 <_dtoa_r+0xb60>
1010ad40:	010c41c0 	call	1010c41c <__multadd>
1010ad44:	1021883a 	mov	r16,r2
1010ad48:	a80b883a 	mov	r5,r21
1010ad4c:	8009883a 	mov	r4,r16
1010ad50:	0109fe80 	call	10109fe8 <quorem>
1010ad54:	10800c04 	addi	r2,r2,48
1010ad58:	90800005 	stb	r2,0(r18)
1010ad5c:	94800044 	addi	r18,r18,1
1010ad60:	9507c83a 	sub	r3,r18,r20
1010ad64:	000f883a 	mov	r7,zero
1010ad68:	01800284 	movi	r6,10
1010ad6c:	800b883a 	mov	r5,r16
1010ad70:	e009883a 	mov	r4,fp
1010ad74:	1cfff216 	blt	r3,r19,1010ad40 <_gp+0xfffe97b0>
1010ad78:	1011883a 	mov	r8,r2
1010ad7c:	d8800617 	ldw	r2,24(sp)
1010ad80:	0082370e 	bge	zero,r2,1010b660 <_dtoa_r+0x1478>
1010ad84:	d9000717 	ldw	r4,28(sp)
1010ad88:	0025883a 	mov	r18,zero
1010ad8c:	20af883a 	add	r23,r4,r2
1010ad90:	01800044 	movi	r6,1
1010ad94:	800b883a 	mov	r5,r16
1010ad98:	e009883a 	mov	r4,fp
1010ad9c:	da001715 	stw	r8,92(sp)
1010ada0:	010cacc0 	call	1010cacc <__lshift>
1010ada4:	a80b883a 	mov	r5,r21
1010ada8:	1009883a 	mov	r4,r2
1010adac:	d8800915 	stw	r2,36(sp)
1010adb0:	010cc140 	call	1010cc14 <__mcmp>
1010adb4:	da001717 	ldw	r8,92(sp)
1010adb8:	0081800e 	bge	zero,r2,1010b3bc <_dtoa_r+0x11d4>
1010adbc:	b93fffc3 	ldbu	r4,-1(r23)
1010adc0:	b8bfffc4 	addi	r2,r23,-1
1010adc4:	1007883a 	mov	r3,r2
1010adc8:	01800e44 	movi	r6,57
1010adcc:	d9c00717 	ldw	r7,28(sp)
1010add0:	00000506 	br	1010ade8 <_dtoa_r+0xc00>
1010add4:	18ffffc4 	addi	r3,r3,-1
1010add8:	11c12326 	beq	r2,r7,1010b268 <_dtoa_r+0x1080>
1010addc:	19000003 	ldbu	r4,0(r3)
1010ade0:	102f883a 	mov	r23,r2
1010ade4:	10bfffc4 	addi	r2,r2,-1
1010ade8:	21403fcc 	andi	r5,r4,255
1010adec:	2940201c 	xori	r5,r5,128
1010adf0:	297fe004 	addi	r5,r5,-128
1010adf4:	29bff726 	beq	r5,r6,1010add4 <_gp+0xfffe9844>
1010adf8:	21000044 	addi	r4,r4,1
1010adfc:	11000005 	stb	r4,0(r2)
1010ae00:	a80b883a 	mov	r5,r21
1010ae04:	e009883a 	mov	r4,fp
1010ae08:	010c3f40 	call	1010c3f4 <_Bfree>
1010ae0c:	883ea026 	beq	r17,zero,1010a890 <_gp+0xfffe9300>
1010ae10:	90000426 	beq	r18,zero,1010ae24 <_dtoa_r+0xc3c>
1010ae14:	94400326 	beq	r18,r17,1010ae24 <_dtoa_r+0xc3c>
1010ae18:	900b883a 	mov	r5,r18
1010ae1c:	e009883a 	mov	r4,fp
1010ae20:	010c3f40 	call	1010c3f4 <_Bfree>
1010ae24:	880b883a 	mov	r5,r17
1010ae28:	e009883a 	mov	r4,fp
1010ae2c:	010c3f40 	call	1010c3f4 <_Bfree>
1010ae30:	003e9706 	br	1010a890 <_gp+0xfffe9300>
1010ae34:	01800044 	movi	r6,1
1010ae38:	d9800e15 	stw	r6,56(sp)
1010ae3c:	003d9606 	br	1010a498 <_gp+0xfffe8f08>
1010ae40:	d8800817 	ldw	r2,32(sp)
1010ae44:	d8c00517 	ldw	r3,20(sp)
1010ae48:	d8000d15 	stw	zero,52(sp)
1010ae4c:	10c5c83a 	sub	r2,r2,r3
1010ae50:	00c9c83a 	sub	r4,zero,r3
1010ae54:	d8800815 	stw	r2,32(sp)
1010ae58:	d9000a15 	stw	r4,40(sp)
1010ae5c:	003d9706 	br	1010a4bc <_gp+0xfffe8f2c>
1010ae60:	05adc83a 	sub	r22,zero,r22
1010ae64:	dd800815 	stw	r22,32(sp)
1010ae68:	002d883a 	mov	r22,zero
1010ae6c:	003d8e06 	br	1010a4a8 <_gp+0xfffe8f18>
1010ae70:	d9000517 	ldw	r4,20(sp)
1010ae74:	0113d500 	call	10113d50 <__floatsidf>
1010ae78:	100d883a 	mov	r6,r2
1010ae7c:	180f883a 	mov	r7,r3
1010ae80:	a009883a 	mov	r4,r20
1010ae84:	880b883a 	mov	r5,r17
1010ae88:	0112a640 	call	10112a64 <__eqdf2>
1010ae8c:	103d7126 	beq	r2,zero,1010a454 <_gp+0xfffe8ec4>
1010ae90:	d9c00517 	ldw	r7,20(sp)
1010ae94:	39ffffc4 	addi	r7,r7,-1
1010ae98:	d9c00515 	stw	r7,20(sp)
1010ae9c:	003d6d06 	br	1010a454 <_gp+0xfffe8ec4>
1010aea0:	dd400a17 	ldw	r21,40(sp)
1010aea4:	dd000817 	ldw	r20,32(sp)
1010aea8:	0023883a 	mov	r17,zero
1010aeac:	003f4806 	br	1010abd0 <_gp+0xfffe9640>
1010aeb0:	10e3c83a 	sub	r17,r2,r3
1010aeb4:	9448983a 	sll	r4,r18,r17
1010aeb8:	003d3206 	br	1010a384 <_gp+0xfffe8df4>
1010aebc:	d8000e15 	stw	zero,56(sp)
1010aec0:	003d7506 	br	1010a498 <_gp+0xfffe8f08>
1010aec4:	b005883a 	mov	r2,r22
1010aec8:	003f4506 	br	1010abe0 <_gp+0xfffe9650>
1010aecc:	dc000915 	stw	r16,36(sp)
1010aed0:	d9800a17 	ldw	r6,40(sp)
1010aed4:	d9400917 	ldw	r5,36(sp)
1010aed8:	e009883a 	mov	r4,fp
1010aedc:	010c98c0 	call	1010c98c <__pow5mult>
1010aee0:	1021883a 	mov	r16,r2
1010aee4:	003f5a06 	br	1010ac50 <_gp+0xfffe96c0>
1010aee8:	01c00044 	movi	r7,1
1010aeec:	d9c00b15 	stw	r7,44(sp)
1010aef0:	d8802217 	ldw	r2,136(sp)
1010aef4:	0081280e 	bge	zero,r2,1010b398 <_dtoa_r+0x11b0>
1010aef8:	100d883a 	mov	r6,r2
1010aefc:	1021883a 	mov	r16,r2
1010af00:	d8800c15 	stw	r2,48(sp)
1010af04:	d8800615 	stw	r2,24(sp)
1010af08:	003d8806 	br	1010a52c <_gp+0xfffe8f9c>
1010af0c:	d8800617 	ldw	r2,24(sp)
1010af10:	00be9b16 	blt	zero,r2,1010a980 <_gp+0xfffe93f0>
1010af14:	10010f1e 	bne	r2,zero,1010b354 <_dtoa_r+0x116c>
1010af18:	880b883a 	mov	r5,r17
1010af1c:	000d883a 	mov	r6,zero
1010af20:	01d00534 	movhi	r7,16404
1010af24:	8009883a 	mov	r4,r16
1010af28:	0112cbc0 	call	10112cbc <__muldf3>
1010af2c:	900d883a 	mov	r6,r18
1010af30:	980f883a 	mov	r7,r19
1010af34:	1009883a 	mov	r4,r2
1010af38:	180b883a 	mov	r5,r3
1010af3c:	0112aec0 	call	10112aec <__gedf2>
1010af40:	002b883a 	mov	r21,zero
1010af44:	0023883a 	mov	r17,zero
1010af48:	1000bf16 	blt	r2,zero,1010b248 <_dtoa_r+0x1060>
1010af4c:	d9802217 	ldw	r6,136(sp)
1010af50:	ddc00717 	ldw	r23,28(sp)
1010af54:	018c303a 	nor	r6,zero,r6
1010af58:	d9800515 	stw	r6,20(sp)
1010af5c:	a80b883a 	mov	r5,r21
1010af60:	e009883a 	mov	r4,fp
1010af64:	010c3f40 	call	1010c3f4 <_Bfree>
1010af68:	883e4926 	beq	r17,zero,1010a890 <_gp+0xfffe9300>
1010af6c:	003fad06 	br	1010ae24 <_gp+0xfffe9894>
1010af70:	d9c01117 	ldw	r7,68(sp)
1010af74:	3801bc26 	beq	r7,zero,1010b668 <_dtoa_r+0x1480>
1010af78:	10810cc4 	addi	r2,r2,1075
1010af7c:	dd400a17 	ldw	r21,40(sp)
1010af80:	dd000817 	ldw	r20,32(sp)
1010af84:	003f0a06 	br	1010abb0 <_gp+0xfffe9620>
1010af88:	00800704 	movi	r2,28
1010af8c:	d9000817 	ldw	r4,32(sp)
1010af90:	a0a9883a 	add	r20,r20,r2
1010af94:	b0ad883a 	add	r22,r22,r2
1010af98:	2089883a 	add	r4,r4,r2
1010af9c:	d9000815 	stw	r4,32(sp)
1010afa0:	003f5106 	br	1010ace8 <_gp+0xfffe9758>
1010afa4:	d8c00317 	ldw	r3,12(sp)
1010afa8:	b8c1fc0e 	bge	r23,r3,1010b79c <_dtoa_r+0x15b4>
1010afac:	0027883a 	mov	r19,zero
1010afb0:	b805883a 	mov	r2,r23
1010afb4:	003f3e06 	br	1010acb0 <_gp+0xfffe9720>
1010afb8:	880b883a 	mov	r5,r17
1010afbc:	e009883a 	mov	r4,fp
1010afc0:	000f883a 	mov	r7,zero
1010afc4:	01800284 	movi	r6,10
1010afc8:	010c41c0 	call	1010c41c <__multadd>
1010afcc:	d9000c17 	ldw	r4,48(sp)
1010afd0:	1023883a 	mov	r17,r2
1010afd4:	0102040e 	bge	zero,r4,1010b7e8 <_dtoa_r+0x1600>
1010afd8:	d9000615 	stw	r4,24(sp)
1010afdc:	0500050e 	bge	zero,r20,1010aff4 <_dtoa_r+0xe0c>
1010afe0:	880b883a 	mov	r5,r17
1010afe4:	a00d883a 	mov	r6,r20
1010afe8:	e009883a 	mov	r4,fp
1010afec:	010cacc0 	call	1010cacc <__lshift>
1010aff0:	1023883a 	mov	r17,r2
1010aff4:	9801241e 	bne	r19,zero,1010b488 <_dtoa_r+0x12a0>
1010aff8:	8829883a 	mov	r20,r17
1010affc:	d9000617 	ldw	r4,24(sp)
1010b000:	dcc00717 	ldw	r19,28(sp)
1010b004:	9480004c 	andi	r18,r18,1
1010b008:	20bfffc4 	addi	r2,r4,-1
1010b00c:	9885883a 	add	r2,r19,r2
1010b010:	d8800415 	stw	r2,16(sp)
1010b014:	dc800615 	stw	r18,24(sp)
1010b018:	a80b883a 	mov	r5,r21
1010b01c:	8009883a 	mov	r4,r16
1010b020:	0109fe80 	call	10109fe8 <quorem>
1010b024:	880b883a 	mov	r5,r17
1010b028:	8009883a 	mov	r4,r16
1010b02c:	102f883a 	mov	r23,r2
1010b030:	010cc140 	call	1010cc14 <__mcmp>
1010b034:	a80b883a 	mov	r5,r21
1010b038:	a00d883a 	mov	r6,r20
1010b03c:	e009883a 	mov	r4,fp
1010b040:	102d883a 	mov	r22,r2
1010b044:	010cc740 	call	1010cc74 <__mdiff>
1010b048:	1007883a 	mov	r3,r2
1010b04c:	10800317 	ldw	r2,12(r2)
1010b050:	bc800c04 	addi	r18,r23,48
1010b054:	180b883a 	mov	r5,r3
1010b058:	10004e1e 	bne	r2,zero,1010b194 <_dtoa_r+0xfac>
1010b05c:	8009883a 	mov	r4,r16
1010b060:	d8c01615 	stw	r3,88(sp)
1010b064:	010cc140 	call	1010cc14 <__mcmp>
1010b068:	d8c01617 	ldw	r3,88(sp)
1010b06c:	e009883a 	mov	r4,fp
1010b070:	d8801615 	stw	r2,88(sp)
1010b074:	180b883a 	mov	r5,r3
1010b078:	010c3f40 	call	1010c3f4 <_Bfree>
1010b07c:	d8801617 	ldw	r2,88(sp)
1010b080:	1000041e 	bne	r2,zero,1010b094 <_dtoa_r+0xeac>
1010b084:	d9800317 	ldw	r6,12(sp)
1010b088:	3000021e 	bne	r6,zero,1010b094 <_dtoa_r+0xeac>
1010b08c:	d8c00617 	ldw	r3,24(sp)
1010b090:	18003726 	beq	r3,zero,1010b170 <_dtoa_r+0xf88>
1010b094:	b0002016 	blt	r22,zero,1010b118 <_dtoa_r+0xf30>
1010b098:	b000041e 	bne	r22,zero,1010b0ac <_dtoa_r+0xec4>
1010b09c:	d9000317 	ldw	r4,12(sp)
1010b0a0:	2000021e 	bne	r4,zero,1010b0ac <_dtoa_r+0xec4>
1010b0a4:	d8c00617 	ldw	r3,24(sp)
1010b0a8:	18001b26 	beq	r3,zero,1010b118 <_dtoa_r+0xf30>
1010b0ac:	00810716 	blt	zero,r2,1010b4cc <_dtoa_r+0x12e4>
1010b0b0:	d8c00417 	ldw	r3,16(sp)
1010b0b4:	9d800044 	addi	r22,r19,1
1010b0b8:	9c800005 	stb	r18,0(r19)
1010b0bc:	b02f883a 	mov	r23,r22
1010b0c0:	98c10626 	beq	r19,r3,1010b4dc <_dtoa_r+0x12f4>
1010b0c4:	800b883a 	mov	r5,r16
1010b0c8:	000f883a 	mov	r7,zero
1010b0cc:	01800284 	movi	r6,10
1010b0d0:	e009883a 	mov	r4,fp
1010b0d4:	010c41c0 	call	1010c41c <__multadd>
1010b0d8:	1021883a 	mov	r16,r2
1010b0dc:	000f883a 	mov	r7,zero
1010b0e0:	01800284 	movi	r6,10
1010b0e4:	880b883a 	mov	r5,r17
1010b0e8:	e009883a 	mov	r4,fp
1010b0ec:	8d002526 	beq	r17,r20,1010b184 <_dtoa_r+0xf9c>
1010b0f0:	010c41c0 	call	1010c41c <__multadd>
1010b0f4:	a00b883a 	mov	r5,r20
1010b0f8:	000f883a 	mov	r7,zero
1010b0fc:	01800284 	movi	r6,10
1010b100:	e009883a 	mov	r4,fp
1010b104:	1023883a 	mov	r17,r2
1010b108:	010c41c0 	call	1010c41c <__multadd>
1010b10c:	1029883a 	mov	r20,r2
1010b110:	b027883a 	mov	r19,r22
1010b114:	003fc006 	br	1010b018 <_gp+0xfffe9a88>
1010b118:	9011883a 	mov	r8,r18
1010b11c:	00800e0e 	bge	zero,r2,1010b158 <_dtoa_r+0xf70>
1010b120:	800b883a 	mov	r5,r16
1010b124:	01800044 	movi	r6,1
1010b128:	e009883a 	mov	r4,fp
1010b12c:	da001715 	stw	r8,92(sp)
1010b130:	010cacc0 	call	1010cacc <__lshift>
1010b134:	a80b883a 	mov	r5,r21
1010b138:	1009883a 	mov	r4,r2
1010b13c:	1021883a 	mov	r16,r2
1010b140:	010cc140 	call	1010cc14 <__mcmp>
1010b144:	da001717 	ldw	r8,92(sp)
1010b148:	0081960e 	bge	zero,r2,1010b7a4 <_dtoa_r+0x15bc>
1010b14c:	00800e44 	movi	r2,57
1010b150:	40817026 	beq	r8,r2,1010b714 <_dtoa_r+0x152c>
1010b154:	ba000c44 	addi	r8,r23,49
1010b158:	8825883a 	mov	r18,r17
1010b15c:	9dc00044 	addi	r23,r19,1
1010b160:	9a000005 	stb	r8,0(r19)
1010b164:	a023883a 	mov	r17,r20
1010b168:	dc000915 	stw	r16,36(sp)
1010b16c:	003f2406 	br	1010ae00 <_gp+0xfffe9870>
1010b170:	00800e44 	movi	r2,57
1010b174:	9011883a 	mov	r8,r18
1010b178:	90816626 	beq	r18,r2,1010b714 <_dtoa_r+0x152c>
1010b17c:	05bff516 	blt	zero,r22,1010b154 <_gp+0xfffe9bc4>
1010b180:	003ff506 	br	1010b158 <_gp+0xfffe9bc8>
1010b184:	010c41c0 	call	1010c41c <__multadd>
1010b188:	1023883a 	mov	r17,r2
1010b18c:	1029883a 	mov	r20,r2
1010b190:	003fdf06 	br	1010b110 <_gp+0xfffe9b80>
1010b194:	e009883a 	mov	r4,fp
1010b198:	010c3f40 	call	1010c3f4 <_Bfree>
1010b19c:	00800044 	movi	r2,1
1010b1a0:	003fbc06 	br	1010b094 <_gp+0xfffe9b04>
1010b1a4:	a80b883a 	mov	r5,r21
1010b1a8:	8009883a 	mov	r4,r16
1010b1ac:	010cc140 	call	1010cc14 <__mcmp>
1010b1b0:	103edb0e 	bge	r2,zero,1010ad20 <_gp+0xfffe9790>
1010b1b4:	800b883a 	mov	r5,r16
1010b1b8:	000f883a 	mov	r7,zero
1010b1bc:	01800284 	movi	r6,10
1010b1c0:	e009883a 	mov	r4,fp
1010b1c4:	010c41c0 	call	1010c41c <__multadd>
1010b1c8:	1021883a 	mov	r16,r2
1010b1cc:	d8800517 	ldw	r2,20(sp)
1010b1d0:	d8c00b17 	ldw	r3,44(sp)
1010b1d4:	10bfffc4 	addi	r2,r2,-1
1010b1d8:	d8800515 	stw	r2,20(sp)
1010b1dc:	183f761e 	bne	r3,zero,1010afb8 <_gp+0xfffe9a28>
1010b1e0:	d9000c17 	ldw	r4,48(sp)
1010b1e4:	0101730e 	bge	zero,r4,1010b7b4 <_dtoa_r+0x15cc>
1010b1e8:	d9000615 	stw	r4,24(sp)
1010b1ec:	003ed006 	br	1010ad30 <_gp+0xfffe97a0>
1010b1f0:	00800084 	movi	r2,2
1010b1f4:	3081861e 	bne	r6,r2,1010b810 <_dtoa_r+0x1628>
1010b1f8:	d8000b15 	stw	zero,44(sp)
1010b1fc:	003f3c06 	br	1010aef0 <_gp+0xfffe9960>
1010b200:	dc000917 	ldw	r16,36(sp)
1010b204:	003e9206 	br	1010ac50 <_gp+0xfffe96c0>
1010b208:	d9c00317 	ldw	r7,12(sp)
1010b20c:	00800084 	movi	r2,2
1010b210:	11fec50e 	bge	r2,r7,1010ad28 <_gp+0xfffe9798>
1010b214:	d9000617 	ldw	r4,24(sp)
1010b218:	20013c1e 	bne	r4,zero,1010b70c <_dtoa_r+0x1524>
1010b21c:	a80b883a 	mov	r5,r21
1010b220:	000f883a 	mov	r7,zero
1010b224:	01800144 	movi	r6,5
1010b228:	e009883a 	mov	r4,fp
1010b22c:	010c41c0 	call	1010c41c <__multadd>
1010b230:	100b883a 	mov	r5,r2
1010b234:	8009883a 	mov	r4,r16
1010b238:	102b883a 	mov	r21,r2
1010b23c:	010cc140 	call	1010cc14 <__mcmp>
1010b240:	dc000915 	stw	r16,36(sp)
1010b244:	00bf410e 	bge	zero,r2,1010af4c <_gp+0xfffe99bc>
1010b248:	d9c00717 	ldw	r7,28(sp)
1010b24c:	00800c44 	movi	r2,49
1010b250:	38800005 	stb	r2,0(r7)
1010b254:	d8800517 	ldw	r2,20(sp)
1010b258:	3dc00044 	addi	r23,r7,1
1010b25c:	10800044 	addi	r2,r2,1
1010b260:	d8800515 	stw	r2,20(sp)
1010b264:	003f3d06 	br	1010af5c <_gp+0xfffe99cc>
1010b268:	d9800517 	ldw	r6,20(sp)
1010b26c:	d9c00717 	ldw	r7,28(sp)
1010b270:	00800c44 	movi	r2,49
1010b274:	31800044 	addi	r6,r6,1
1010b278:	d9800515 	stw	r6,20(sp)
1010b27c:	38800005 	stb	r2,0(r7)
1010b280:	003edf06 	br	1010ae00 <_gp+0xfffe9870>
1010b284:	d8000b15 	stw	zero,44(sp)
1010b288:	003c9f06 	br	1010a508 <_gp+0xfffe8f78>
1010b28c:	903e7e1e 	bne	r18,zero,1010ac88 <_gp+0xfffe96f8>
1010b290:	00800434 	movhi	r2,16
1010b294:	10bfffc4 	addi	r2,r2,-1
1010b298:	9884703a 	and	r2,r19,r2
1010b29c:	1000ea1e 	bne	r2,zero,1010b648 <_dtoa_r+0x1460>
1010b2a0:	9cdffc2c 	andhi	r19,r19,32752
1010b2a4:	9800e826 	beq	r19,zero,1010b648 <_dtoa_r+0x1460>
1010b2a8:	d9c00817 	ldw	r7,32(sp)
1010b2ac:	b5800044 	addi	r22,r22,1
1010b2b0:	04c00044 	movi	r19,1
1010b2b4:	39c00044 	addi	r7,r7,1
1010b2b8:	d9c00815 	stw	r7,32(sp)
1010b2bc:	d8800d17 	ldw	r2,52(sp)
1010b2c0:	103e721e 	bne	r2,zero,1010ac8c <_gp+0xfffe96fc>
1010b2c4:	00800044 	movi	r2,1
1010b2c8:	003e7906 	br	1010acb0 <_gp+0xfffe9720>
1010b2cc:	8009883a 	mov	r4,r16
1010b2d0:	0113d500 	call	10113d50 <__floatsidf>
1010b2d4:	d9800f17 	ldw	r6,60(sp)
1010b2d8:	d9c01017 	ldw	r7,64(sp)
1010b2dc:	1009883a 	mov	r4,r2
1010b2e0:	180b883a 	mov	r5,r3
1010b2e4:	0112cbc0 	call	10112cbc <__muldf3>
1010b2e8:	000d883a 	mov	r6,zero
1010b2ec:	01d00734 	movhi	r7,16412
1010b2f0:	1009883a 	mov	r4,r2
1010b2f4:	180b883a 	mov	r5,r3
1010b2f8:	01118d00 	call	101118d0 <__adddf3>
1010b2fc:	047f3034 	movhi	r17,64704
1010b300:	1021883a 	mov	r16,r2
1010b304:	1c63883a 	add	r17,r3,r17
1010b308:	d9000f17 	ldw	r4,60(sp)
1010b30c:	d9401017 	ldw	r5,64(sp)
1010b310:	000d883a 	mov	r6,zero
1010b314:	01d00534 	movhi	r7,16404
1010b318:	01133d40 	call	101133d4 <__subdf3>
1010b31c:	800d883a 	mov	r6,r16
1010b320:	880f883a 	mov	r7,r17
1010b324:	1009883a 	mov	r4,r2
1010b328:	180b883a 	mov	r5,r3
1010b32c:	102b883a 	mov	r21,r2
1010b330:	1829883a 	mov	r20,r3
1010b334:	0112aec0 	call	10112aec <__gedf2>
1010b338:	00806c16 	blt	zero,r2,1010b4ec <_dtoa_r+0x1304>
1010b33c:	89e0003c 	xorhi	r7,r17,32768
1010b340:	800d883a 	mov	r6,r16
1010b344:	a809883a 	mov	r4,r21
1010b348:	a00b883a 	mov	r5,r20
1010b34c:	0112bc80 	call	10112bc8 <__ledf2>
1010b350:	103d7e0e 	bge	r2,zero,1010a94c <_gp+0xfffe93bc>
1010b354:	002b883a 	mov	r21,zero
1010b358:	0023883a 	mov	r17,zero
1010b35c:	003efb06 	br	1010af4c <_gp+0xfffe99bc>
1010b360:	d8800717 	ldw	r2,28(sp)
1010b364:	003bd006 	br	1010a2a8 <_gp+0xfffe8d18>
1010b368:	d9000a17 	ldw	r4,40(sp)
1010b36c:	d9800d17 	ldw	r6,52(sp)
1010b370:	dd400a15 	stw	r21,40(sp)
1010b374:	a905c83a 	sub	r2,r21,r4
1010b378:	308d883a 	add	r6,r6,r2
1010b37c:	d9800d15 	stw	r6,52(sp)
1010b380:	002b883a 	mov	r21,zero
1010b384:	003e0606 	br	1010aba0 <_gp+0xfffe9610>
1010b388:	9023883a 	mov	r17,r18
1010b38c:	9829883a 	mov	r20,r19
1010b390:	04000084 	movi	r16,2
1010b394:	003c9206 	br	1010a5e0 <_gp+0xfffe9050>
1010b398:	04000044 	movi	r16,1
1010b39c:	dc000c15 	stw	r16,48(sp)
1010b3a0:	dc000615 	stw	r16,24(sp)
1010b3a4:	dc002215 	stw	r16,136(sp)
1010b3a8:	e0001115 	stw	zero,68(fp)
1010b3ac:	000b883a 	mov	r5,zero
1010b3b0:	003c6906 	br	1010a558 <_gp+0xfffe8fc8>
1010b3b4:	3021883a 	mov	r16,r6
1010b3b8:	003ffb06 	br	1010b3a8 <_gp+0xfffe9e18>
1010b3bc:	1000021e 	bne	r2,zero,1010b3c8 <_dtoa_r+0x11e0>
1010b3c0:	4200004c 	andi	r8,r8,1
1010b3c4:	403e7d1e 	bne	r8,zero,1010adbc <_gp+0xfffe982c>
1010b3c8:	01000c04 	movi	r4,48
1010b3cc:	00000106 	br	1010b3d4 <_dtoa_r+0x11ec>
1010b3d0:	102f883a 	mov	r23,r2
1010b3d4:	b8bfffc4 	addi	r2,r23,-1
1010b3d8:	10c00007 	ldb	r3,0(r2)
1010b3dc:	193ffc26 	beq	r3,r4,1010b3d0 <_gp+0xfffe9e40>
1010b3e0:	003e8706 	br	1010ae00 <_gp+0xfffe9870>
1010b3e4:	d8800517 	ldw	r2,20(sp)
1010b3e8:	00a3c83a 	sub	r17,zero,r2
1010b3ec:	8800a426 	beq	r17,zero,1010b680 <_dtoa_r+0x1498>
1010b3f0:	888003cc 	andi	r2,r17,15
1010b3f4:	100490fa 	slli	r2,r2,3
1010b3f8:	00c40474 	movhi	r3,4113
1010b3fc:	18de1d04 	addi	r3,r3,30836
1010b400:	1885883a 	add	r2,r3,r2
1010b404:	11800017 	ldw	r6,0(r2)
1010b408:	11c00117 	ldw	r7,4(r2)
1010b40c:	9009883a 	mov	r4,r18
1010b410:	980b883a 	mov	r5,r19
1010b414:	8823d13a 	srai	r17,r17,4
1010b418:	0112cbc0 	call	10112cbc <__muldf3>
1010b41c:	d8800f15 	stw	r2,60(sp)
1010b420:	d8c01015 	stw	r3,64(sp)
1010b424:	8800e826 	beq	r17,zero,1010b7c8 <_dtoa_r+0x15e0>
1010b428:	05040474 	movhi	r20,4113
1010b42c:	a51e1304 	addi	r20,r20,30796
1010b430:	04000084 	movi	r16,2
1010b434:	8980004c 	andi	r6,r17,1
1010b438:	1009883a 	mov	r4,r2
1010b43c:	8823d07a 	srai	r17,r17,1
1010b440:	180b883a 	mov	r5,r3
1010b444:	30000426 	beq	r6,zero,1010b458 <_dtoa_r+0x1270>
1010b448:	a1800017 	ldw	r6,0(r20)
1010b44c:	a1c00117 	ldw	r7,4(r20)
1010b450:	84000044 	addi	r16,r16,1
1010b454:	0112cbc0 	call	10112cbc <__muldf3>
1010b458:	a5000204 	addi	r20,r20,8
1010b45c:	883ff51e 	bne	r17,zero,1010b434 <_gp+0xfffe9ea4>
1010b460:	d8800f15 	stw	r2,60(sp)
1010b464:	d8c01015 	stw	r3,64(sp)
1010b468:	003c7606 	br	1010a644 <_gp+0xfffe90b4>
1010b46c:	00c00c04 	movi	r3,48
1010b470:	10c00005 	stb	r3,0(r2)
1010b474:	d8c00517 	ldw	r3,20(sp)
1010b478:	bd3fffc3 	ldbu	r20,-1(r23)
1010b47c:	18c00044 	addi	r3,r3,1
1010b480:	d8c00515 	stw	r3,20(sp)
1010b484:	003db906 	br	1010ab6c <_gp+0xfffe95dc>
1010b488:	89400117 	ldw	r5,4(r17)
1010b48c:	e009883a 	mov	r4,fp
1010b490:	010c34c0 	call	1010c34c <_Balloc>
1010b494:	89800417 	ldw	r6,16(r17)
1010b498:	89400304 	addi	r5,r17,12
1010b49c:	11000304 	addi	r4,r2,12
1010b4a0:	31800084 	addi	r6,r6,2
1010b4a4:	318d883a 	add	r6,r6,r6
1010b4a8:	318d883a 	add	r6,r6,r6
1010b4ac:	1027883a 	mov	r19,r2
1010b4b0:	010c0a80 	call	1010c0a8 <memcpy>
1010b4b4:	01800044 	movi	r6,1
1010b4b8:	980b883a 	mov	r5,r19
1010b4bc:	e009883a 	mov	r4,fp
1010b4c0:	010cacc0 	call	1010cacc <__lshift>
1010b4c4:	1029883a 	mov	r20,r2
1010b4c8:	003ecc06 	br	1010affc <_gp+0xfffe9a6c>
1010b4cc:	00800e44 	movi	r2,57
1010b4d0:	90809026 	beq	r18,r2,1010b714 <_dtoa_r+0x152c>
1010b4d4:	92000044 	addi	r8,r18,1
1010b4d8:	003f1f06 	br	1010b158 <_gp+0xfffe9bc8>
1010b4dc:	9011883a 	mov	r8,r18
1010b4e0:	8825883a 	mov	r18,r17
1010b4e4:	a023883a 	mov	r17,r20
1010b4e8:	003e2906 	br	1010ad90 <_gp+0xfffe9800>
1010b4ec:	002b883a 	mov	r21,zero
1010b4f0:	0023883a 	mov	r17,zero
1010b4f4:	003f5406 	br	1010b248 <_gp+0xfffe9cb8>
1010b4f8:	61bfffc4 	addi	r6,r12,-1
1010b4fc:	300490fa 	slli	r2,r6,3
1010b500:	00c40474 	movhi	r3,4113
1010b504:	18de1d04 	addi	r3,r3,30836
1010b508:	1885883a 	add	r2,r3,r2
1010b50c:	11000017 	ldw	r4,0(r2)
1010b510:	11400117 	ldw	r5,4(r2)
1010b514:	d8800717 	ldw	r2,28(sp)
1010b518:	880f883a 	mov	r7,r17
1010b51c:	d9801215 	stw	r6,72(sp)
1010b520:	800d883a 	mov	r6,r16
1010b524:	db001615 	stw	r12,88(sp)
1010b528:	15c00044 	addi	r23,r2,1
1010b52c:	0112cbc0 	call	10112cbc <__muldf3>
1010b530:	d9401017 	ldw	r5,64(sp)
1010b534:	d9000f17 	ldw	r4,60(sp)
1010b538:	d8c01515 	stw	r3,84(sp)
1010b53c:	d8801415 	stw	r2,80(sp)
1010b540:	0113cd00 	call	10113cd0 <__fixdfsi>
1010b544:	1009883a 	mov	r4,r2
1010b548:	1021883a 	mov	r16,r2
1010b54c:	0113d500 	call	10113d50 <__floatsidf>
1010b550:	d9000f17 	ldw	r4,60(sp)
1010b554:	d9401017 	ldw	r5,64(sp)
1010b558:	100d883a 	mov	r6,r2
1010b55c:	180f883a 	mov	r7,r3
1010b560:	01133d40 	call	101133d4 <__subdf3>
1010b564:	1829883a 	mov	r20,r3
1010b568:	d8c00717 	ldw	r3,28(sp)
1010b56c:	84000c04 	addi	r16,r16,48
1010b570:	1023883a 	mov	r17,r2
1010b574:	1c000005 	stb	r16,0(r3)
1010b578:	db001617 	ldw	r12,88(sp)
1010b57c:	00800044 	movi	r2,1
1010b580:	60802226 	beq	r12,r2,1010b60c <_dtoa_r+0x1424>
1010b584:	d9c00717 	ldw	r7,28(sp)
1010b588:	8805883a 	mov	r2,r17
1010b58c:	b82b883a 	mov	r21,r23
1010b590:	3b19883a 	add	r12,r7,r12
1010b594:	6023883a 	mov	r17,r12
1010b598:	a007883a 	mov	r3,r20
1010b59c:	dc800f15 	stw	r18,60(sp)
1010b5a0:	000d883a 	mov	r6,zero
1010b5a4:	01d00934 	movhi	r7,16420
1010b5a8:	1009883a 	mov	r4,r2
1010b5ac:	180b883a 	mov	r5,r3
1010b5b0:	0112cbc0 	call	10112cbc <__muldf3>
1010b5b4:	180b883a 	mov	r5,r3
1010b5b8:	1009883a 	mov	r4,r2
1010b5bc:	1829883a 	mov	r20,r3
1010b5c0:	1025883a 	mov	r18,r2
1010b5c4:	0113cd00 	call	10113cd0 <__fixdfsi>
1010b5c8:	1009883a 	mov	r4,r2
1010b5cc:	1021883a 	mov	r16,r2
1010b5d0:	0113d500 	call	10113d50 <__floatsidf>
1010b5d4:	100d883a 	mov	r6,r2
1010b5d8:	180f883a 	mov	r7,r3
1010b5dc:	9009883a 	mov	r4,r18
1010b5e0:	a00b883a 	mov	r5,r20
1010b5e4:	84000c04 	addi	r16,r16,48
1010b5e8:	01133d40 	call	101133d4 <__subdf3>
1010b5ec:	ad400044 	addi	r21,r21,1
1010b5f0:	ac3fffc5 	stb	r16,-1(r21)
1010b5f4:	ac7fea1e 	bne	r21,r17,1010b5a0 <_gp+0xfffea010>
1010b5f8:	1023883a 	mov	r17,r2
1010b5fc:	d8801217 	ldw	r2,72(sp)
1010b600:	dc800f17 	ldw	r18,60(sp)
1010b604:	1829883a 	mov	r20,r3
1010b608:	b8af883a 	add	r23,r23,r2
1010b60c:	d9001417 	ldw	r4,80(sp)
1010b610:	d9401517 	ldw	r5,84(sp)
1010b614:	000d883a 	mov	r6,zero
1010b618:	01cff834 	movhi	r7,16352
1010b61c:	01118d00 	call	101118d0 <__adddf3>
1010b620:	880d883a 	mov	r6,r17
1010b624:	a00f883a 	mov	r7,r20
1010b628:	1009883a 	mov	r4,r2
1010b62c:	180b883a 	mov	r5,r3
1010b630:	0112bc80 	call	10112bc8 <__ledf2>
1010b634:	10003e0e 	bge	r2,zero,1010b730 <_dtoa_r+0x1548>
1010b638:	d9001317 	ldw	r4,76(sp)
1010b63c:	bd3fffc3 	ldbu	r20,-1(r23)
1010b640:	d9000515 	stw	r4,20(sp)
1010b644:	003d3b06 	br	1010ab34 <_gp+0xfffe95a4>
1010b648:	0027883a 	mov	r19,zero
1010b64c:	003f1b06 	br	1010b2bc <_gp+0xfffe9d2c>
1010b650:	d8800817 	ldw	r2,32(sp)
1010b654:	11e9c83a 	sub	r20,r2,r7
1010b658:	0005883a 	mov	r2,zero
1010b65c:	003d5406 	br	1010abb0 <_gp+0xfffe9620>
1010b660:	00800044 	movi	r2,1
1010b664:	003dc706 	br	1010ad84 <_gp+0xfffe97f4>
1010b668:	d8c00217 	ldw	r3,8(sp)
1010b66c:	00800d84 	movi	r2,54
1010b670:	dd400a17 	ldw	r21,40(sp)
1010b674:	10c5c83a 	sub	r2,r2,r3
1010b678:	dd000817 	ldw	r20,32(sp)
1010b67c:	003d4c06 	br	1010abb0 <_gp+0xfffe9620>
1010b680:	dc800f15 	stw	r18,60(sp)
1010b684:	dcc01015 	stw	r19,64(sp)
1010b688:	04000084 	movi	r16,2
1010b68c:	003bed06 	br	1010a644 <_gp+0xfffe90b4>
1010b690:	d9000617 	ldw	r4,24(sp)
1010b694:	203f0d26 	beq	r4,zero,1010b2cc <_gp+0xfffe9d3c>
1010b698:	d9800c17 	ldw	r6,48(sp)
1010b69c:	01bcab0e 	bge	zero,r6,1010a94c <_gp+0xfffe93bc>
1010b6a0:	d9401017 	ldw	r5,64(sp)
1010b6a4:	d9000f17 	ldw	r4,60(sp)
1010b6a8:	000d883a 	mov	r6,zero
1010b6ac:	01d00934 	movhi	r7,16420
1010b6b0:	0112cbc0 	call	10112cbc <__muldf3>
1010b6b4:	81000044 	addi	r4,r16,1
1010b6b8:	d8800f15 	stw	r2,60(sp)
1010b6bc:	d8c01015 	stw	r3,64(sp)
1010b6c0:	0113d500 	call	10113d50 <__floatsidf>
1010b6c4:	d9800f17 	ldw	r6,60(sp)
1010b6c8:	d9c01017 	ldw	r7,64(sp)
1010b6cc:	1009883a 	mov	r4,r2
1010b6d0:	180b883a 	mov	r5,r3
1010b6d4:	0112cbc0 	call	10112cbc <__muldf3>
1010b6d8:	01d00734 	movhi	r7,16412
1010b6dc:	000d883a 	mov	r6,zero
1010b6e0:	1009883a 	mov	r4,r2
1010b6e4:	180b883a 	mov	r5,r3
1010b6e8:	01118d00 	call	101118d0 <__adddf3>
1010b6ec:	d9c00517 	ldw	r7,20(sp)
1010b6f0:	047f3034 	movhi	r17,64704
1010b6f4:	1021883a 	mov	r16,r2
1010b6f8:	39ffffc4 	addi	r7,r7,-1
1010b6fc:	d9c01315 	stw	r7,76(sp)
1010b700:	1c63883a 	add	r17,r3,r17
1010b704:	db000c17 	ldw	r12,48(sp)
1010b708:	003bea06 	br	1010a6b4 <_gp+0xfffe9124>
1010b70c:	dc000915 	stw	r16,36(sp)
1010b710:	003e0e06 	br	1010af4c <_gp+0xfffe99bc>
1010b714:	01000e44 	movi	r4,57
1010b718:	8825883a 	mov	r18,r17
1010b71c:	9dc00044 	addi	r23,r19,1
1010b720:	99000005 	stb	r4,0(r19)
1010b724:	a023883a 	mov	r17,r20
1010b728:	dc000915 	stw	r16,36(sp)
1010b72c:	003da406 	br	1010adc0 <_gp+0xfffe9830>
1010b730:	d9801417 	ldw	r6,80(sp)
1010b734:	d9c01517 	ldw	r7,84(sp)
1010b738:	0009883a 	mov	r4,zero
1010b73c:	014ff834 	movhi	r5,16352
1010b740:	01133d40 	call	101133d4 <__subdf3>
1010b744:	880d883a 	mov	r6,r17
1010b748:	a00f883a 	mov	r7,r20
1010b74c:	1009883a 	mov	r4,r2
1010b750:	180b883a 	mov	r5,r3
1010b754:	0112aec0 	call	10112aec <__gedf2>
1010b758:	00bc7c0e 	bge	zero,r2,1010a94c <_gp+0xfffe93bc>
1010b75c:	01000c04 	movi	r4,48
1010b760:	00000106 	br	1010b768 <_dtoa_r+0x1580>
1010b764:	102f883a 	mov	r23,r2
1010b768:	b8bfffc4 	addi	r2,r23,-1
1010b76c:	10c00007 	ldb	r3,0(r2)
1010b770:	193ffc26 	beq	r3,r4,1010b764 <_gp+0xfffea1d4>
1010b774:	d9801317 	ldw	r6,76(sp)
1010b778:	d9800515 	stw	r6,20(sp)
1010b77c:	003c4406 	br	1010a890 <_gp+0xfffe9300>
1010b780:	d9801317 	ldw	r6,76(sp)
1010b784:	d9800515 	stw	r6,20(sp)
1010b788:	003cea06 	br	1010ab34 <_gp+0xfffe95a4>
1010b78c:	dd800f17 	ldw	r22,60(sp)
1010b790:	dcc01017 	ldw	r19,64(sp)
1010b794:	dc801217 	ldw	r18,72(sp)
1010b798:	003c6c06 	br	1010a94c <_gp+0xfffe93bc>
1010b79c:	903e031e 	bne	r18,zero,1010afac <_gp+0xfffe9a1c>
1010b7a0:	003ebb06 	br	1010b290 <_gp+0xfffe9d00>
1010b7a4:	103e6c1e 	bne	r2,zero,1010b158 <_gp+0xfffe9bc8>
1010b7a8:	4080004c 	andi	r2,r8,1
1010b7ac:	103e6a26 	beq	r2,zero,1010b158 <_gp+0xfffe9bc8>
1010b7b0:	003e6606 	br	1010b14c <_gp+0xfffe9bbc>
1010b7b4:	d8c00317 	ldw	r3,12(sp)
1010b7b8:	00800084 	movi	r2,2
1010b7bc:	10c02916 	blt	r2,r3,1010b864 <_dtoa_r+0x167c>
1010b7c0:	d9000c17 	ldw	r4,48(sp)
1010b7c4:	003e8806 	br	1010b1e8 <_gp+0xfffe9c58>
1010b7c8:	04000084 	movi	r16,2
1010b7cc:	003b9d06 	br	1010a644 <_gp+0xfffe90b4>
1010b7d0:	d9001317 	ldw	r4,76(sp)
1010b7d4:	d9000515 	stw	r4,20(sp)
1010b7d8:	003cd606 	br	1010ab34 <_gp+0xfffe95a4>
1010b7dc:	d8801317 	ldw	r2,76(sp)
1010b7e0:	d8800515 	stw	r2,20(sp)
1010b7e4:	003c2a06 	br	1010a890 <_gp+0xfffe9300>
1010b7e8:	d9800317 	ldw	r6,12(sp)
1010b7ec:	00800084 	movi	r2,2
1010b7f0:	11801516 	blt	r2,r6,1010b848 <_dtoa_r+0x1660>
1010b7f4:	d9c00c17 	ldw	r7,48(sp)
1010b7f8:	d9c00615 	stw	r7,24(sp)
1010b7fc:	003df706 	br	1010afdc <_gp+0xfffe9a4c>
1010b800:	193d3926 	beq	r3,r4,1010ace8 <_gp+0xfffe9758>
1010b804:	00c00f04 	movi	r3,60
1010b808:	1885c83a 	sub	r2,r3,r2
1010b80c:	003ddf06 	br	1010af8c <_gp+0xfffe99fc>
1010b810:	e009883a 	mov	r4,fp
1010b814:	e0001115 	stw	zero,68(fp)
1010b818:	000b883a 	mov	r5,zero
1010b81c:	010c34c0 	call	1010c34c <_Balloc>
1010b820:	d8800715 	stw	r2,28(sp)
1010b824:	d8c00717 	ldw	r3,28(sp)
1010b828:	00bfffc4 	movi	r2,-1
1010b82c:	01000044 	movi	r4,1
1010b830:	d8800c15 	stw	r2,48(sp)
1010b834:	e0c01015 	stw	r3,64(fp)
1010b838:	d9000b15 	stw	r4,44(sp)
1010b83c:	d8800615 	stw	r2,24(sp)
1010b840:	d8002215 	stw	zero,136(sp)
1010b844:	003c4106 	br	1010a94c <_gp+0xfffe93bc>
1010b848:	d8c00c17 	ldw	r3,48(sp)
1010b84c:	d8c00615 	stw	r3,24(sp)
1010b850:	003e7006 	br	1010b214 <_gp+0xfffe9c84>
1010b854:	04400044 	movi	r17,1
1010b858:	003b2006 	br	1010a4dc <_gp+0xfffe8f4c>
1010b85c:	000b883a 	mov	r5,zero
1010b860:	003b3d06 	br	1010a558 <_gp+0xfffe8fc8>
1010b864:	d8800c17 	ldw	r2,48(sp)
1010b868:	d8800615 	stw	r2,24(sp)
1010b86c:	003e6906 	br	1010b214 <_gp+0xfffe9c84>

1010b870 <__sflags>:
1010b870:	28800007 	ldb	r2,0(r5)
1010b874:	00c01c84 	movi	r3,114
1010b878:	10c02426 	beq	r2,r3,1010b90c <__sflags+0x9c>
1010b87c:	00c01dc4 	movi	r3,119
1010b880:	10c01e26 	beq	r2,r3,1010b8fc <__sflags+0x8c>
1010b884:	00c01844 	movi	r3,97
1010b888:	10c00426 	beq	r2,r3,1010b89c <__sflags+0x2c>
1010b88c:	00800584 	movi	r2,22
1010b890:	20800015 	stw	r2,0(r4)
1010b894:	0005883a 	mov	r2,zero
1010b898:	f800283a 	ret
1010b89c:	02c08204 	movi	r11,520
1010b8a0:	01000044 	movi	r4,1
1010b8a4:	00804204 	movi	r2,264
1010b8a8:	01c00ac4 	movi	r7,43
1010b8ac:	02bff8c4 	movi	r10,-29
1010b8b0:	027fff04 	movi	r9,-4
1010b8b4:	02001e04 	movi	r8,120
1010b8b8:	29400044 	addi	r5,r5,1
1010b8bc:	28c00007 	ldb	r3,0(r5)
1010b8c0:	18000626 	beq	r3,zero,1010b8dc <__sflags+0x6c>
1010b8c4:	19c00826 	beq	r3,r7,1010b8e8 <__sflags+0x78>
1010b8c8:	1a3ffb1e 	bne	r3,r8,1010b8b8 <_gp+0xfffea328>
1010b8cc:	29400044 	addi	r5,r5,1
1010b8d0:	28c00007 	ldb	r3,0(r5)
1010b8d4:	21020014 	ori	r4,r4,2048
1010b8d8:	183ffa1e 	bne	r3,zero,1010b8c4 <_gp+0xfffea334>
1010b8dc:	22c8b03a 	or	r4,r4,r11
1010b8e0:	31000015 	stw	r4,0(r6)
1010b8e4:	f800283a 	ret
1010b8e8:	1284703a 	and	r2,r2,r10
1010b8ec:	2248703a 	and	r4,r4,r9
1010b8f0:	10800414 	ori	r2,r2,16
1010b8f4:	21000094 	ori	r4,r4,2
1010b8f8:	003fef06 	br	1010b8b8 <_gp+0xfffea328>
1010b8fc:	02c18004 	movi	r11,1536
1010b900:	01000044 	movi	r4,1
1010b904:	00800204 	movi	r2,8
1010b908:	003fe706 	br	1010b8a8 <_gp+0xfffea318>
1010b90c:	0017883a 	mov	r11,zero
1010b910:	0009883a 	mov	r4,zero
1010b914:	00800104 	movi	r2,4
1010b918:	003fe306 	br	1010b8a8 <_gp+0xfffea318>

1010b91c <__sfvwrite_r>:
1010b91c:	30800217 	ldw	r2,8(r6)
1010b920:	10006726 	beq	r2,zero,1010bac0 <__sfvwrite_r+0x1a4>
1010b924:	28c0030b 	ldhu	r3,12(r5)
1010b928:	defff404 	addi	sp,sp,-48
1010b92c:	dd400715 	stw	r21,28(sp)
1010b930:	dd000615 	stw	r20,24(sp)
1010b934:	dc000215 	stw	r16,8(sp)
1010b938:	dfc00b15 	stw	ra,44(sp)
1010b93c:	df000a15 	stw	fp,40(sp)
1010b940:	ddc00915 	stw	r23,36(sp)
1010b944:	dd800815 	stw	r22,32(sp)
1010b948:	dcc00515 	stw	r19,20(sp)
1010b94c:	dc800415 	stw	r18,16(sp)
1010b950:	dc400315 	stw	r17,12(sp)
1010b954:	1880020c 	andi	r2,r3,8
1010b958:	2821883a 	mov	r16,r5
1010b95c:	202b883a 	mov	r21,r4
1010b960:	3029883a 	mov	r20,r6
1010b964:	10002726 	beq	r2,zero,1010ba04 <__sfvwrite_r+0xe8>
1010b968:	28800417 	ldw	r2,16(r5)
1010b96c:	10002526 	beq	r2,zero,1010ba04 <__sfvwrite_r+0xe8>
1010b970:	1880008c 	andi	r2,r3,2
1010b974:	a4400017 	ldw	r17,0(r20)
1010b978:	10002a26 	beq	r2,zero,1010ba24 <__sfvwrite_r+0x108>
1010b97c:	05a00034 	movhi	r22,32768
1010b980:	0027883a 	mov	r19,zero
1010b984:	0025883a 	mov	r18,zero
1010b988:	b5bf0004 	addi	r22,r22,-1024
1010b98c:	980d883a 	mov	r6,r19
1010b990:	a809883a 	mov	r4,r21
1010b994:	90004626 	beq	r18,zero,1010bab0 <__sfvwrite_r+0x194>
1010b998:	900f883a 	mov	r7,r18
1010b99c:	b480022e 	bgeu	r22,r18,1010b9a8 <__sfvwrite_r+0x8c>
1010b9a0:	01e00034 	movhi	r7,32768
1010b9a4:	39ff0004 	addi	r7,r7,-1024
1010b9a8:	80800917 	ldw	r2,36(r16)
1010b9ac:	81400717 	ldw	r5,28(r16)
1010b9b0:	103ee83a 	callr	r2
1010b9b4:	0080570e 	bge	zero,r2,1010bb14 <__sfvwrite_r+0x1f8>
1010b9b8:	a0c00217 	ldw	r3,8(r20)
1010b9bc:	98a7883a 	add	r19,r19,r2
1010b9c0:	90a5c83a 	sub	r18,r18,r2
1010b9c4:	1885c83a 	sub	r2,r3,r2
1010b9c8:	a0800215 	stw	r2,8(r20)
1010b9cc:	103fef1e 	bne	r2,zero,1010b98c <_gp+0xfffea3fc>
1010b9d0:	0005883a 	mov	r2,zero
1010b9d4:	dfc00b17 	ldw	ra,44(sp)
1010b9d8:	df000a17 	ldw	fp,40(sp)
1010b9dc:	ddc00917 	ldw	r23,36(sp)
1010b9e0:	dd800817 	ldw	r22,32(sp)
1010b9e4:	dd400717 	ldw	r21,28(sp)
1010b9e8:	dd000617 	ldw	r20,24(sp)
1010b9ec:	dcc00517 	ldw	r19,20(sp)
1010b9f0:	dc800417 	ldw	r18,16(sp)
1010b9f4:	dc400317 	ldw	r17,12(sp)
1010b9f8:	dc000217 	ldw	r16,8(sp)
1010b9fc:	dec00c04 	addi	sp,sp,48
1010ba00:	f800283a 	ret
1010ba04:	800b883a 	mov	r5,r16
1010ba08:	a809883a 	mov	r4,r21
1010ba0c:	0109e280 	call	10109e28 <__swsetup_r>
1010ba10:	1000eb1e 	bne	r2,zero,1010bdc0 <__sfvwrite_r+0x4a4>
1010ba14:	80c0030b 	ldhu	r3,12(r16)
1010ba18:	a4400017 	ldw	r17,0(r20)
1010ba1c:	1880008c 	andi	r2,r3,2
1010ba20:	103fd61e 	bne	r2,zero,1010b97c <_gp+0xfffea3ec>
1010ba24:	1880004c 	andi	r2,r3,1
1010ba28:	10003f1e 	bne	r2,zero,1010bb28 <__sfvwrite_r+0x20c>
1010ba2c:	0039883a 	mov	fp,zero
1010ba30:	0025883a 	mov	r18,zero
1010ba34:	90001a26 	beq	r18,zero,1010baa0 <__sfvwrite_r+0x184>
1010ba38:	1880800c 	andi	r2,r3,512
1010ba3c:	84c00217 	ldw	r19,8(r16)
1010ba40:	10002126 	beq	r2,zero,1010bac8 <__sfvwrite_r+0x1ac>
1010ba44:	982f883a 	mov	r23,r19
1010ba48:	94c09336 	bltu	r18,r19,1010bc98 <__sfvwrite_r+0x37c>
1010ba4c:	1881200c 	andi	r2,r3,1152
1010ba50:	10009e1e 	bne	r2,zero,1010bccc <__sfvwrite_r+0x3b0>
1010ba54:	81000017 	ldw	r4,0(r16)
1010ba58:	b80d883a 	mov	r6,r23
1010ba5c:	e00b883a 	mov	r5,fp
1010ba60:	010c1f00 	call	1010c1f0 <memmove>
1010ba64:	80c00217 	ldw	r3,8(r16)
1010ba68:	81000017 	ldw	r4,0(r16)
1010ba6c:	9005883a 	mov	r2,r18
1010ba70:	1ce7c83a 	sub	r19,r3,r19
1010ba74:	25cf883a 	add	r7,r4,r23
1010ba78:	84c00215 	stw	r19,8(r16)
1010ba7c:	81c00015 	stw	r7,0(r16)
1010ba80:	a0c00217 	ldw	r3,8(r20)
1010ba84:	e0b9883a 	add	fp,fp,r2
1010ba88:	90a5c83a 	sub	r18,r18,r2
1010ba8c:	18a7c83a 	sub	r19,r3,r2
1010ba90:	a4c00215 	stw	r19,8(r20)
1010ba94:	983fce26 	beq	r19,zero,1010b9d0 <_gp+0xfffea440>
1010ba98:	80c0030b 	ldhu	r3,12(r16)
1010ba9c:	903fe61e 	bne	r18,zero,1010ba38 <_gp+0xfffea4a8>
1010baa0:	8f000017 	ldw	fp,0(r17)
1010baa4:	8c800117 	ldw	r18,4(r17)
1010baa8:	8c400204 	addi	r17,r17,8
1010baac:	003fe106 	br	1010ba34 <_gp+0xfffea4a4>
1010bab0:	8cc00017 	ldw	r19,0(r17)
1010bab4:	8c800117 	ldw	r18,4(r17)
1010bab8:	8c400204 	addi	r17,r17,8
1010babc:	003fb306 	br	1010b98c <_gp+0xfffea3fc>
1010bac0:	0005883a 	mov	r2,zero
1010bac4:	f800283a 	ret
1010bac8:	81000017 	ldw	r4,0(r16)
1010bacc:	80800417 	ldw	r2,16(r16)
1010bad0:	11005736 	bltu	r2,r4,1010bc30 <__sfvwrite_r+0x314>
1010bad4:	85c00517 	ldw	r23,20(r16)
1010bad8:	95c05536 	bltu	r18,r23,1010bc30 <__sfvwrite_r+0x314>
1010badc:	00a00034 	movhi	r2,32768
1010bae0:	10bfffc4 	addi	r2,r2,-1
1010bae4:	9009883a 	mov	r4,r18
1010bae8:	1480012e 	bgeu	r2,r18,1010baf0 <__sfvwrite_r+0x1d4>
1010baec:	1009883a 	mov	r4,r2
1010baf0:	b80b883a 	mov	r5,r23
1010baf4:	01030080 	call	10103008 <__divsi3>
1010baf8:	15cf383a 	mul	r7,r2,r23
1010bafc:	81400717 	ldw	r5,28(r16)
1010bb00:	80800917 	ldw	r2,36(r16)
1010bb04:	e00d883a 	mov	r6,fp
1010bb08:	a809883a 	mov	r4,r21
1010bb0c:	103ee83a 	callr	r2
1010bb10:	00bfdb16 	blt	zero,r2,1010ba80 <_gp+0xfffea4f0>
1010bb14:	8080030b 	ldhu	r2,12(r16)
1010bb18:	10801014 	ori	r2,r2,64
1010bb1c:	8080030d 	sth	r2,12(r16)
1010bb20:	00bfffc4 	movi	r2,-1
1010bb24:	003fab06 	br	1010b9d4 <_gp+0xfffea444>
1010bb28:	0027883a 	mov	r19,zero
1010bb2c:	0011883a 	mov	r8,zero
1010bb30:	0039883a 	mov	fp,zero
1010bb34:	0025883a 	mov	r18,zero
1010bb38:	90001f26 	beq	r18,zero,1010bbb8 <__sfvwrite_r+0x29c>
1010bb3c:	40005a26 	beq	r8,zero,1010bca8 <__sfvwrite_r+0x38c>
1010bb40:	982d883a 	mov	r22,r19
1010bb44:	94c0012e 	bgeu	r18,r19,1010bb4c <__sfvwrite_r+0x230>
1010bb48:	902d883a 	mov	r22,r18
1010bb4c:	81000017 	ldw	r4,0(r16)
1010bb50:	80800417 	ldw	r2,16(r16)
1010bb54:	b02f883a 	mov	r23,r22
1010bb58:	81c00517 	ldw	r7,20(r16)
1010bb5c:	1100032e 	bgeu	r2,r4,1010bb6c <__sfvwrite_r+0x250>
1010bb60:	80c00217 	ldw	r3,8(r16)
1010bb64:	38c7883a 	add	r3,r7,r3
1010bb68:	1d801816 	blt	r3,r22,1010bbcc <__sfvwrite_r+0x2b0>
1010bb6c:	b1c03e16 	blt	r22,r7,1010bc68 <__sfvwrite_r+0x34c>
1010bb70:	80800917 	ldw	r2,36(r16)
1010bb74:	81400717 	ldw	r5,28(r16)
1010bb78:	e00d883a 	mov	r6,fp
1010bb7c:	da000115 	stw	r8,4(sp)
1010bb80:	a809883a 	mov	r4,r21
1010bb84:	103ee83a 	callr	r2
1010bb88:	102f883a 	mov	r23,r2
1010bb8c:	da000117 	ldw	r8,4(sp)
1010bb90:	00bfe00e 	bge	zero,r2,1010bb14 <_gp+0xfffea584>
1010bb94:	9de7c83a 	sub	r19,r19,r23
1010bb98:	98001f26 	beq	r19,zero,1010bc18 <__sfvwrite_r+0x2fc>
1010bb9c:	a0800217 	ldw	r2,8(r20)
1010bba0:	e5f9883a 	add	fp,fp,r23
1010bba4:	95e5c83a 	sub	r18,r18,r23
1010bba8:	15efc83a 	sub	r23,r2,r23
1010bbac:	a5c00215 	stw	r23,8(r20)
1010bbb0:	b83f8726 	beq	r23,zero,1010b9d0 <_gp+0xfffea440>
1010bbb4:	903fe11e 	bne	r18,zero,1010bb3c <_gp+0xfffea5ac>
1010bbb8:	8f000017 	ldw	fp,0(r17)
1010bbbc:	8c800117 	ldw	r18,4(r17)
1010bbc0:	0011883a 	mov	r8,zero
1010bbc4:	8c400204 	addi	r17,r17,8
1010bbc8:	003fdb06 	br	1010bb38 <_gp+0xfffea5a8>
1010bbcc:	180d883a 	mov	r6,r3
1010bbd0:	e00b883a 	mov	r5,fp
1010bbd4:	da000115 	stw	r8,4(sp)
1010bbd8:	d8c00015 	stw	r3,0(sp)
1010bbdc:	010c1f00 	call	1010c1f0 <memmove>
1010bbe0:	d8c00017 	ldw	r3,0(sp)
1010bbe4:	80800017 	ldw	r2,0(r16)
1010bbe8:	800b883a 	mov	r5,r16
1010bbec:	a809883a 	mov	r4,r21
1010bbf0:	10c5883a 	add	r2,r2,r3
1010bbf4:	80800015 	stw	r2,0(r16)
1010bbf8:	d8c00015 	stw	r3,0(sp)
1010bbfc:	01035580 	call	10103558 <_fflush_r>
1010bc00:	d8c00017 	ldw	r3,0(sp)
1010bc04:	da000117 	ldw	r8,4(sp)
1010bc08:	103fc21e 	bne	r2,zero,1010bb14 <_gp+0xfffea584>
1010bc0c:	182f883a 	mov	r23,r3
1010bc10:	9de7c83a 	sub	r19,r19,r23
1010bc14:	983fe11e 	bne	r19,zero,1010bb9c <_gp+0xfffea60c>
1010bc18:	800b883a 	mov	r5,r16
1010bc1c:	a809883a 	mov	r4,r21
1010bc20:	01035580 	call	10103558 <_fflush_r>
1010bc24:	103fbb1e 	bne	r2,zero,1010bb14 <_gp+0xfffea584>
1010bc28:	0011883a 	mov	r8,zero
1010bc2c:	003fdb06 	br	1010bb9c <_gp+0xfffea60c>
1010bc30:	94c0012e 	bgeu	r18,r19,1010bc38 <__sfvwrite_r+0x31c>
1010bc34:	9027883a 	mov	r19,r18
1010bc38:	980d883a 	mov	r6,r19
1010bc3c:	e00b883a 	mov	r5,fp
1010bc40:	010c1f00 	call	1010c1f0 <memmove>
1010bc44:	80800217 	ldw	r2,8(r16)
1010bc48:	80c00017 	ldw	r3,0(r16)
1010bc4c:	14c5c83a 	sub	r2,r2,r19
1010bc50:	1cc7883a 	add	r3,r3,r19
1010bc54:	80800215 	stw	r2,8(r16)
1010bc58:	80c00015 	stw	r3,0(r16)
1010bc5c:	10004326 	beq	r2,zero,1010bd6c <__sfvwrite_r+0x450>
1010bc60:	9805883a 	mov	r2,r19
1010bc64:	003f8606 	br	1010ba80 <_gp+0xfffea4f0>
1010bc68:	b00d883a 	mov	r6,r22
1010bc6c:	e00b883a 	mov	r5,fp
1010bc70:	da000115 	stw	r8,4(sp)
1010bc74:	010c1f00 	call	1010c1f0 <memmove>
1010bc78:	80800217 	ldw	r2,8(r16)
1010bc7c:	80c00017 	ldw	r3,0(r16)
1010bc80:	da000117 	ldw	r8,4(sp)
1010bc84:	1585c83a 	sub	r2,r2,r22
1010bc88:	1dad883a 	add	r22,r3,r22
1010bc8c:	80800215 	stw	r2,8(r16)
1010bc90:	85800015 	stw	r22,0(r16)
1010bc94:	003fbf06 	br	1010bb94 <_gp+0xfffea604>
1010bc98:	81000017 	ldw	r4,0(r16)
1010bc9c:	9027883a 	mov	r19,r18
1010bca0:	902f883a 	mov	r23,r18
1010bca4:	003f6c06 	br	1010ba58 <_gp+0xfffea4c8>
1010bca8:	900d883a 	mov	r6,r18
1010bcac:	01400284 	movi	r5,10
1010bcb0:	e009883a 	mov	r4,fp
1010bcb4:	010bfc40 	call	1010bfc4 <memchr>
1010bcb8:	10003e26 	beq	r2,zero,1010bdb4 <__sfvwrite_r+0x498>
1010bcbc:	10800044 	addi	r2,r2,1
1010bcc0:	1727c83a 	sub	r19,r2,fp
1010bcc4:	02000044 	movi	r8,1
1010bcc8:	003f9d06 	br	1010bb40 <_gp+0xfffea5b0>
1010bccc:	80800517 	ldw	r2,20(r16)
1010bcd0:	81400417 	ldw	r5,16(r16)
1010bcd4:	81c00017 	ldw	r7,0(r16)
1010bcd8:	10a7883a 	add	r19,r2,r2
1010bcdc:	9885883a 	add	r2,r19,r2
1010bce0:	1026d7fa 	srli	r19,r2,31
1010bce4:	396dc83a 	sub	r22,r7,r5
1010bce8:	b1000044 	addi	r4,r22,1
1010bcec:	9885883a 	add	r2,r19,r2
1010bcf0:	1027d07a 	srai	r19,r2,1
1010bcf4:	2485883a 	add	r2,r4,r18
1010bcf8:	980d883a 	mov	r6,r19
1010bcfc:	9880022e 	bgeu	r19,r2,1010bd08 <__sfvwrite_r+0x3ec>
1010bd00:	1027883a 	mov	r19,r2
1010bd04:	100d883a 	mov	r6,r2
1010bd08:	18c1000c 	andi	r3,r3,1024
1010bd0c:	18001c26 	beq	r3,zero,1010bd80 <__sfvwrite_r+0x464>
1010bd10:	300b883a 	mov	r5,r6
1010bd14:	a809883a 	mov	r4,r21
1010bd18:	010488c0 	call	1010488c <_malloc_r>
1010bd1c:	102f883a 	mov	r23,r2
1010bd20:	10002926 	beq	r2,zero,1010bdc8 <__sfvwrite_r+0x4ac>
1010bd24:	81400417 	ldw	r5,16(r16)
1010bd28:	b00d883a 	mov	r6,r22
1010bd2c:	1009883a 	mov	r4,r2
1010bd30:	010c0a80 	call	1010c0a8 <memcpy>
1010bd34:	8080030b 	ldhu	r2,12(r16)
1010bd38:	00fedfc4 	movi	r3,-1153
1010bd3c:	10c4703a 	and	r2,r2,r3
1010bd40:	10802014 	ori	r2,r2,128
1010bd44:	8080030d 	sth	r2,12(r16)
1010bd48:	bd89883a 	add	r4,r23,r22
1010bd4c:	9d8fc83a 	sub	r7,r19,r22
1010bd50:	85c00415 	stw	r23,16(r16)
1010bd54:	84c00515 	stw	r19,20(r16)
1010bd58:	81000015 	stw	r4,0(r16)
1010bd5c:	9027883a 	mov	r19,r18
1010bd60:	81c00215 	stw	r7,8(r16)
1010bd64:	902f883a 	mov	r23,r18
1010bd68:	003f3b06 	br	1010ba58 <_gp+0xfffea4c8>
1010bd6c:	800b883a 	mov	r5,r16
1010bd70:	a809883a 	mov	r4,r21
1010bd74:	01035580 	call	10103558 <_fflush_r>
1010bd78:	103fb926 	beq	r2,zero,1010bc60 <_gp+0xfffea6d0>
1010bd7c:	003f6506 	br	1010bb14 <_gp+0xfffea584>
1010bd80:	a809883a 	mov	r4,r21
1010bd84:	010d3a80 	call	1010d3a8 <_realloc_r>
1010bd88:	102f883a 	mov	r23,r2
1010bd8c:	103fee1e 	bne	r2,zero,1010bd48 <_gp+0xfffea7b8>
1010bd90:	81400417 	ldw	r5,16(r16)
1010bd94:	a809883a 	mov	r4,r21
1010bd98:	0103c5c0 	call	10103c5c <_free_r>
1010bd9c:	8080030b 	ldhu	r2,12(r16)
1010bda0:	00ffdfc4 	movi	r3,-129
1010bda4:	1884703a 	and	r2,r3,r2
1010bda8:	00c00304 	movi	r3,12
1010bdac:	a8c00015 	stw	r3,0(r21)
1010bdb0:	003f5906 	br	1010bb18 <_gp+0xfffea588>
1010bdb4:	94c00044 	addi	r19,r18,1
1010bdb8:	02000044 	movi	r8,1
1010bdbc:	003f6006 	br	1010bb40 <_gp+0xfffea5b0>
1010bdc0:	00bfffc4 	movi	r2,-1
1010bdc4:	003f0306 	br	1010b9d4 <_gp+0xfffea444>
1010bdc8:	00800304 	movi	r2,12
1010bdcc:	a8800015 	stw	r2,0(r21)
1010bdd0:	8080030b 	ldhu	r2,12(r16)
1010bdd4:	003f5006 	br	1010bb18 <_gp+0xfffea588>

1010bdd8 <_gettimeofday_r>:
1010bdd8:	defffd04 	addi	sp,sp,-12
1010bddc:	2805883a 	mov	r2,r5
1010bde0:	dc000015 	stw	r16,0(sp)
1010bde4:	040404b4 	movhi	r16,4114
1010bde8:	dc400115 	stw	r17,4(sp)
1010bdec:	842c5e04 	addi	r16,r16,-20104
1010bdf0:	2023883a 	mov	r17,r4
1010bdf4:	300b883a 	mov	r5,r6
1010bdf8:	1009883a 	mov	r4,r2
1010bdfc:	dfc00215 	stw	ra,8(sp)
1010be00:	80000015 	stw	zero,0(r16)
1010be04:	01141b00 	call	101141b0 <gettimeofday>
1010be08:	00ffffc4 	movi	r3,-1
1010be0c:	10c00526 	beq	r2,r3,1010be24 <_gettimeofday_r+0x4c>
1010be10:	dfc00217 	ldw	ra,8(sp)
1010be14:	dc400117 	ldw	r17,4(sp)
1010be18:	dc000017 	ldw	r16,0(sp)
1010be1c:	dec00304 	addi	sp,sp,12
1010be20:	f800283a 	ret
1010be24:	80c00017 	ldw	r3,0(r16)
1010be28:	183ff926 	beq	r3,zero,1010be10 <_gp+0xfffea880>
1010be2c:	88c00015 	stw	r3,0(r17)
1010be30:	003ff706 	br	1010be10 <_gp+0xfffea880>

1010be34 <_isatty_r>:
1010be34:	defffd04 	addi	sp,sp,-12
1010be38:	dc000015 	stw	r16,0(sp)
1010be3c:	040404b4 	movhi	r16,4114
1010be40:	dc400115 	stw	r17,4(sp)
1010be44:	842c5e04 	addi	r16,r16,-20104
1010be48:	2023883a 	mov	r17,r4
1010be4c:	2809883a 	mov	r4,r5
1010be50:	dfc00215 	stw	ra,8(sp)
1010be54:	80000015 	stw	zero,0(r16)
1010be58:	01143e00 	call	101143e0 <isatty>
1010be5c:	00ffffc4 	movi	r3,-1
1010be60:	10c00526 	beq	r2,r3,1010be78 <_isatty_r+0x44>
1010be64:	dfc00217 	ldw	ra,8(sp)
1010be68:	dc400117 	ldw	r17,4(sp)
1010be6c:	dc000017 	ldw	r16,0(sp)
1010be70:	dec00304 	addi	sp,sp,12
1010be74:	f800283a 	ret
1010be78:	80c00017 	ldw	r3,0(r16)
1010be7c:	183ff926 	beq	r3,zero,1010be64 <_gp+0xfffea8d4>
1010be80:	88c00015 	stw	r3,0(r17)
1010be84:	003ff706 	br	1010be64 <_gp+0xfffea8d4>

1010be88 <_setlocale_r>:
1010be88:	30001b26 	beq	r6,zero,1010bef8 <_setlocale_r+0x70>
1010be8c:	01440474 	movhi	r5,4113
1010be90:	defffe04 	addi	sp,sp,-8
1010be94:	295e0304 	addi	r5,r5,30732
1010be98:	3009883a 	mov	r4,r6
1010be9c:	dc000015 	stw	r16,0(sp)
1010bea0:	dfc00115 	stw	ra,4(sp)
1010bea4:	3021883a 	mov	r16,r6
1010bea8:	010dc840 	call	1010dc84 <strcmp>
1010beac:	1000061e 	bne	r2,zero,1010bec8 <_setlocale_r+0x40>
1010beb0:	00840474 	movhi	r2,4113
1010beb4:	109ddc04 	addi	r2,r2,30576
1010beb8:	dfc00117 	ldw	ra,4(sp)
1010bebc:	dc000017 	ldw	r16,0(sp)
1010bec0:	dec00204 	addi	sp,sp,8
1010bec4:	f800283a 	ret
1010bec8:	01440474 	movhi	r5,4113
1010becc:	295ddc04 	addi	r5,r5,30576
1010bed0:	8009883a 	mov	r4,r16
1010bed4:	010dc840 	call	1010dc84 <strcmp>
1010bed8:	103ff526 	beq	r2,zero,1010beb0 <_gp+0xfffea920>
1010bedc:	01440474 	movhi	r5,4113
1010bee0:	295dcf04 	addi	r5,r5,30524
1010bee4:	8009883a 	mov	r4,r16
1010bee8:	010dc840 	call	1010dc84 <strcmp>
1010beec:	103ff026 	beq	r2,zero,1010beb0 <_gp+0xfffea920>
1010bef0:	0005883a 	mov	r2,zero
1010bef4:	003ff006 	br	1010beb8 <_gp+0xfffea928>
1010bef8:	00840474 	movhi	r2,4113
1010befc:	109ddc04 	addi	r2,r2,30576
1010bf00:	f800283a 	ret

1010bf04 <__locale_charset>:
1010bf04:	008404b4 	movhi	r2,4114
1010bf08:	10a0c204 	addi	r2,r2,-31992
1010bf0c:	f800283a 	ret

1010bf10 <__locale_mb_cur_max>:
1010bf10:	008404b4 	movhi	r2,4114
1010bf14:	10a56804 	addi	r2,r2,-27232
1010bf18:	10800017 	ldw	r2,0(r2)
1010bf1c:	f800283a 	ret

1010bf20 <__locale_msgcharset>:
1010bf20:	008404b4 	movhi	r2,4114
1010bf24:	10a0ba04 	addi	r2,r2,-32024
1010bf28:	f800283a 	ret

1010bf2c <__locale_cjk_lang>:
1010bf2c:	0005883a 	mov	r2,zero
1010bf30:	f800283a 	ret

1010bf34 <_localeconv_r>:
1010bf34:	008404b4 	movhi	r2,4114
1010bf38:	10a0ca04 	addi	r2,r2,-31960
1010bf3c:	f800283a 	ret

1010bf40 <setlocale>:
1010bf40:	008404b4 	movhi	r2,4114
1010bf44:	10a56504 	addi	r2,r2,-27244
1010bf48:	280d883a 	mov	r6,r5
1010bf4c:	200b883a 	mov	r5,r4
1010bf50:	11000017 	ldw	r4,0(r2)
1010bf54:	010be881 	jmpi	1010be88 <_setlocale_r>

1010bf58 <localeconv>:
1010bf58:	008404b4 	movhi	r2,4114
1010bf5c:	10a0ca04 	addi	r2,r2,-31960
1010bf60:	f800283a 	ret

1010bf64 <_lseek_r>:
1010bf64:	defffd04 	addi	sp,sp,-12
1010bf68:	2805883a 	mov	r2,r5
1010bf6c:	dc000015 	stw	r16,0(sp)
1010bf70:	040404b4 	movhi	r16,4114
1010bf74:	dc400115 	stw	r17,4(sp)
1010bf78:	300b883a 	mov	r5,r6
1010bf7c:	842c5e04 	addi	r16,r16,-20104
1010bf80:	2023883a 	mov	r17,r4
1010bf84:	380d883a 	mov	r6,r7
1010bf88:	1009883a 	mov	r4,r2
1010bf8c:	dfc00215 	stw	ra,8(sp)
1010bf90:	80000015 	stw	zero,0(r16)
1010bf94:	01147180 	call	10114718 <lseek>
1010bf98:	00ffffc4 	movi	r3,-1
1010bf9c:	10c00526 	beq	r2,r3,1010bfb4 <_lseek_r+0x50>
1010bfa0:	dfc00217 	ldw	ra,8(sp)
1010bfa4:	dc400117 	ldw	r17,4(sp)
1010bfa8:	dc000017 	ldw	r16,0(sp)
1010bfac:	dec00304 	addi	sp,sp,12
1010bfb0:	f800283a 	ret
1010bfb4:	80c00017 	ldw	r3,0(r16)
1010bfb8:	183ff926 	beq	r3,zero,1010bfa0 <_gp+0xfffeaa10>
1010bfbc:	88c00015 	stw	r3,0(r17)
1010bfc0:	003ff706 	br	1010bfa0 <_gp+0xfffeaa10>

1010bfc4 <memchr>:
1010bfc4:	208000cc 	andi	r2,r4,3
1010bfc8:	280f883a 	mov	r7,r5
1010bfcc:	10003426 	beq	r2,zero,1010c0a0 <memchr+0xdc>
1010bfd0:	30bfffc4 	addi	r2,r6,-1
1010bfd4:	30001a26 	beq	r6,zero,1010c040 <memchr+0x7c>
1010bfd8:	20c00003 	ldbu	r3,0(r4)
1010bfdc:	29803fcc 	andi	r6,r5,255
1010bfe0:	30c0051e 	bne	r6,r3,1010bff8 <memchr+0x34>
1010bfe4:	00001806 	br	1010c048 <memchr+0x84>
1010bfe8:	10001526 	beq	r2,zero,1010c040 <memchr+0x7c>
1010bfec:	20c00003 	ldbu	r3,0(r4)
1010bff0:	10bfffc4 	addi	r2,r2,-1
1010bff4:	30c01426 	beq	r6,r3,1010c048 <memchr+0x84>
1010bff8:	21000044 	addi	r4,r4,1
1010bffc:	20c000cc 	andi	r3,r4,3
1010c000:	183ff91e 	bne	r3,zero,1010bfe8 <_gp+0xfffeaa58>
1010c004:	020000c4 	movi	r8,3
1010c008:	40801136 	bltu	r8,r2,1010c050 <memchr+0x8c>
1010c00c:	10000c26 	beq	r2,zero,1010c040 <memchr+0x7c>
1010c010:	20c00003 	ldbu	r3,0(r4)
1010c014:	29403fcc 	andi	r5,r5,255
1010c018:	28c00b26 	beq	r5,r3,1010c048 <memchr+0x84>
1010c01c:	20c00044 	addi	r3,r4,1
1010c020:	39803fcc 	andi	r6,r7,255
1010c024:	2089883a 	add	r4,r4,r2
1010c028:	00000306 	br	1010c038 <memchr+0x74>
1010c02c:	18c00044 	addi	r3,r3,1
1010c030:	197fffc3 	ldbu	r5,-1(r3)
1010c034:	31400526 	beq	r6,r5,1010c04c <memchr+0x88>
1010c038:	1805883a 	mov	r2,r3
1010c03c:	20fffb1e 	bne	r4,r3,1010c02c <_gp+0xfffeaa9c>
1010c040:	0005883a 	mov	r2,zero
1010c044:	f800283a 	ret
1010c048:	2005883a 	mov	r2,r4
1010c04c:	f800283a 	ret
1010c050:	28c03fcc 	andi	r3,r5,255
1010c054:	1812923a 	slli	r9,r3,8
1010c058:	02ffbff4 	movhi	r11,65279
1010c05c:	02a02074 	movhi	r10,32897
1010c060:	48d2b03a 	or	r9,r9,r3
1010c064:	4806943a 	slli	r3,r9,16
1010c068:	5affbfc4 	addi	r11,r11,-257
1010c06c:	52a02004 	addi	r10,r10,-32640
1010c070:	48d2b03a 	or	r9,r9,r3
1010c074:	20c00017 	ldw	r3,0(r4)
1010c078:	48c6f03a 	xor	r3,r9,r3
1010c07c:	1acd883a 	add	r6,r3,r11
1010c080:	00c6303a 	nor	r3,zero,r3
1010c084:	30c6703a 	and	r3,r6,r3
1010c088:	1a86703a 	and	r3,r3,r10
1010c08c:	183fe01e 	bne	r3,zero,1010c010 <_gp+0xfffeaa80>
1010c090:	10bfff04 	addi	r2,r2,-4
1010c094:	21000104 	addi	r4,r4,4
1010c098:	40bff636 	bltu	r8,r2,1010c074 <_gp+0xfffeaae4>
1010c09c:	003fdb06 	br	1010c00c <_gp+0xfffeaa7c>
1010c0a0:	3005883a 	mov	r2,r6
1010c0a4:	003fd706 	br	1010c004 <_gp+0xfffeaa74>

1010c0a8 <memcpy>:
1010c0a8:	defffd04 	addi	sp,sp,-12
1010c0ac:	dfc00215 	stw	ra,8(sp)
1010c0b0:	dc400115 	stw	r17,4(sp)
1010c0b4:	dc000015 	stw	r16,0(sp)
1010c0b8:	00c003c4 	movi	r3,15
1010c0bc:	2005883a 	mov	r2,r4
1010c0c0:	1980452e 	bgeu	r3,r6,1010c1d8 <memcpy+0x130>
1010c0c4:	2906b03a 	or	r3,r5,r4
1010c0c8:	18c000cc 	andi	r3,r3,3
1010c0cc:	1800441e 	bne	r3,zero,1010c1e0 <memcpy+0x138>
1010c0d0:	347ffc04 	addi	r17,r6,-16
1010c0d4:	8822d13a 	srli	r17,r17,4
1010c0d8:	28c00104 	addi	r3,r5,4
1010c0dc:	23400104 	addi	r13,r4,4
1010c0e0:	8820913a 	slli	r16,r17,4
1010c0e4:	2b000204 	addi	r12,r5,8
1010c0e8:	22c00204 	addi	r11,r4,8
1010c0ec:	84000504 	addi	r16,r16,20
1010c0f0:	2a800304 	addi	r10,r5,12
1010c0f4:	22400304 	addi	r9,r4,12
1010c0f8:	2c21883a 	add	r16,r5,r16
1010c0fc:	2811883a 	mov	r8,r5
1010c100:	200f883a 	mov	r7,r4
1010c104:	41000017 	ldw	r4,0(r8)
1010c108:	1fc00017 	ldw	ra,0(r3)
1010c10c:	63c00017 	ldw	r15,0(r12)
1010c110:	39000015 	stw	r4,0(r7)
1010c114:	53800017 	ldw	r14,0(r10)
1010c118:	6fc00015 	stw	ra,0(r13)
1010c11c:	5bc00015 	stw	r15,0(r11)
1010c120:	4b800015 	stw	r14,0(r9)
1010c124:	18c00404 	addi	r3,r3,16
1010c128:	39c00404 	addi	r7,r7,16
1010c12c:	42000404 	addi	r8,r8,16
1010c130:	6b400404 	addi	r13,r13,16
1010c134:	63000404 	addi	r12,r12,16
1010c138:	5ac00404 	addi	r11,r11,16
1010c13c:	52800404 	addi	r10,r10,16
1010c140:	4a400404 	addi	r9,r9,16
1010c144:	1c3fef1e 	bne	r3,r16,1010c104 <_gp+0xfffeab74>
1010c148:	89c00044 	addi	r7,r17,1
1010c14c:	380e913a 	slli	r7,r7,4
1010c150:	310003cc 	andi	r4,r6,15
1010c154:	02c000c4 	movi	r11,3
1010c158:	11c7883a 	add	r3,r2,r7
1010c15c:	29cb883a 	add	r5,r5,r7
1010c160:	5900212e 	bgeu	r11,r4,1010c1e8 <memcpy+0x140>
1010c164:	1813883a 	mov	r9,r3
1010c168:	2811883a 	mov	r8,r5
1010c16c:	200f883a 	mov	r7,r4
1010c170:	42800017 	ldw	r10,0(r8)
1010c174:	4a400104 	addi	r9,r9,4
1010c178:	39ffff04 	addi	r7,r7,-4
1010c17c:	4abfff15 	stw	r10,-4(r9)
1010c180:	42000104 	addi	r8,r8,4
1010c184:	59fffa36 	bltu	r11,r7,1010c170 <_gp+0xfffeabe0>
1010c188:	213fff04 	addi	r4,r4,-4
1010c18c:	2008d0ba 	srli	r4,r4,2
1010c190:	318000cc 	andi	r6,r6,3
1010c194:	21000044 	addi	r4,r4,1
1010c198:	2109883a 	add	r4,r4,r4
1010c19c:	2109883a 	add	r4,r4,r4
1010c1a0:	1907883a 	add	r3,r3,r4
1010c1a4:	290b883a 	add	r5,r5,r4
1010c1a8:	30000626 	beq	r6,zero,1010c1c4 <memcpy+0x11c>
1010c1ac:	198d883a 	add	r6,r3,r6
1010c1b0:	29c00003 	ldbu	r7,0(r5)
1010c1b4:	18c00044 	addi	r3,r3,1
1010c1b8:	29400044 	addi	r5,r5,1
1010c1bc:	19ffffc5 	stb	r7,-1(r3)
1010c1c0:	19bffb1e 	bne	r3,r6,1010c1b0 <_gp+0xfffeac20>
1010c1c4:	dfc00217 	ldw	ra,8(sp)
1010c1c8:	dc400117 	ldw	r17,4(sp)
1010c1cc:	dc000017 	ldw	r16,0(sp)
1010c1d0:	dec00304 	addi	sp,sp,12
1010c1d4:	f800283a 	ret
1010c1d8:	2007883a 	mov	r3,r4
1010c1dc:	003ff206 	br	1010c1a8 <_gp+0xfffeac18>
1010c1e0:	2007883a 	mov	r3,r4
1010c1e4:	003ff106 	br	1010c1ac <_gp+0xfffeac1c>
1010c1e8:	200d883a 	mov	r6,r4
1010c1ec:	003fee06 	br	1010c1a8 <_gp+0xfffeac18>

1010c1f0 <memmove>:
1010c1f0:	2005883a 	mov	r2,r4
1010c1f4:	29000b2e 	bgeu	r5,r4,1010c224 <memmove+0x34>
1010c1f8:	298f883a 	add	r7,r5,r6
1010c1fc:	21c0092e 	bgeu	r4,r7,1010c224 <memmove+0x34>
1010c200:	2187883a 	add	r3,r4,r6
1010c204:	198bc83a 	sub	r5,r3,r6
1010c208:	30004826 	beq	r6,zero,1010c32c <memmove+0x13c>
1010c20c:	39ffffc4 	addi	r7,r7,-1
1010c210:	39000003 	ldbu	r4,0(r7)
1010c214:	18ffffc4 	addi	r3,r3,-1
1010c218:	19000005 	stb	r4,0(r3)
1010c21c:	28fffb1e 	bne	r5,r3,1010c20c <_gp+0xfffeac7c>
1010c220:	f800283a 	ret
1010c224:	00c003c4 	movi	r3,15
1010c228:	1980412e 	bgeu	r3,r6,1010c330 <memmove+0x140>
1010c22c:	2886b03a 	or	r3,r5,r2
1010c230:	18c000cc 	andi	r3,r3,3
1010c234:	1800401e 	bne	r3,zero,1010c338 <memmove+0x148>
1010c238:	33fffc04 	addi	r15,r6,-16
1010c23c:	781ed13a 	srli	r15,r15,4
1010c240:	28c00104 	addi	r3,r5,4
1010c244:	13400104 	addi	r13,r2,4
1010c248:	781c913a 	slli	r14,r15,4
1010c24c:	2b000204 	addi	r12,r5,8
1010c250:	12c00204 	addi	r11,r2,8
1010c254:	73800504 	addi	r14,r14,20
1010c258:	2a800304 	addi	r10,r5,12
1010c25c:	12400304 	addi	r9,r2,12
1010c260:	2b9d883a 	add	r14,r5,r14
1010c264:	2811883a 	mov	r8,r5
1010c268:	100f883a 	mov	r7,r2
1010c26c:	41000017 	ldw	r4,0(r8)
1010c270:	39c00404 	addi	r7,r7,16
1010c274:	18c00404 	addi	r3,r3,16
1010c278:	393ffc15 	stw	r4,-16(r7)
1010c27c:	193ffc17 	ldw	r4,-16(r3)
1010c280:	6b400404 	addi	r13,r13,16
1010c284:	5ac00404 	addi	r11,r11,16
1010c288:	693ffc15 	stw	r4,-16(r13)
1010c28c:	61000017 	ldw	r4,0(r12)
1010c290:	4a400404 	addi	r9,r9,16
1010c294:	42000404 	addi	r8,r8,16
1010c298:	593ffc15 	stw	r4,-16(r11)
1010c29c:	51000017 	ldw	r4,0(r10)
1010c2a0:	63000404 	addi	r12,r12,16
1010c2a4:	52800404 	addi	r10,r10,16
1010c2a8:	493ffc15 	stw	r4,-16(r9)
1010c2ac:	1bbfef1e 	bne	r3,r14,1010c26c <_gp+0xfffeacdc>
1010c2b0:	79000044 	addi	r4,r15,1
1010c2b4:	2008913a 	slli	r4,r4,4
1010c2b8:	328003cc 	andi	r10,r6,15
1010c2bc:	02c000c4 	movi	r11,3
1010c2c0:	1107883a 	add	r3,r2,r4
1010c2c4:	290b883a 	add	r5,r5,r4
1010c2c8:	5a801e2e 	bgeu	r11,r10,1010c344 <memmove+0x154>
1010c2cc:	1813883a 	mov	r9,r3
1010c2d0:	2811883a 	mov	r8,r5
1010c2d4:	500f883a 	mov	r7,r10
1010c2d8:	41000017 	ldw	r4,0(r8)
1010c2dc:	4a400104 	addi	r9,r9,4
1010c2e0:	39ffff04 	addi	r7,r7,-4
1010c2e4:	493fff15 	stw	r4,-4(r9)
1010c2e8:	42000104 	addi	r8,r8,4
1010c2ec:	59fffa36 	bltu	r11,r7,1010c2d8 <_gp+0xfffead48>
1010c2f0:	513fff04 	addi	r4,r10,-4
1010c2f4:	2008d0ba 	srli	r4,r4,2
1010c2f8:	318000cc 	andi	r6,r6,3
1010c2fc:	21000044 	addi	r4,r4,1
1010c300:	2109883a 	add	r4,r4,r4
1010c304:	2109883a 	add	r4,r4,r4
1010c308:	1907883a 	add	r3,r3,r4
1010c30c:	290b883a 	add	r5,r5,r4
1010c310:	30000b26 	beq	r6,zero,1010c340 <memmove+0x150>
1010c314:	198d883a 	add	r6,r3,r6
1010c318:	29c00003 	ldbu	r7,0(r5)
1010c31c:	18c00044 	addi	r3,r3,1
1010c320:	29400044 	addi	r5,r5,1
1010c324:	19ffffc5 	stb	r7,-1(r3)
1010c328:	19bffb1e 	bne	r3,r6,1010c318 <_gp+0xfffead88>
1010c32c:	f800283a 	ret
1010c330:	1007883a 	mov	r3,r2
1010c334:	003ff606 	br	1010c310 <_gp+0xfffead80>
1010c338:	1007883a 	mov	r3,r2
1010c33c:	003ff506 	br	1010c314 <_gp+0xfffead84>
1010c340:	f800283a 	ret
1010c344:	500d883a 	mov	r6,r10
1010c348:	003ff106 	br	1010c310 <_gp+0xfffead80>

1010c34c <_Balloc>:
1010c34c:	20801317 	ldw	r2,76(r4)
1010c350:	defffc04 	addi	sp,sp,-16
1010c354:	dc400115 	stw	r17,4(sp)
1010c358:	dc000015 	stw	r16,0(sp)
1010c35c:	dfc00315 	stw	ra,12(sp)
1010c360:	dc800215 	stw	r18,8(sp)
1010c364:	2023883a 	mov	r17,r4
1010c368:	2821883a 	mov	r16,r5
1010c36c:	10000f26 	beq	r2,zero,1010c3ac <_Balloc+0x60>
1010c370:	8407883a 	add	r3,r16,r16
1010c374:	18c7883a 	add	r3,r3,r3
1010c378:	10c7883a 	add	r3,r2,r3
1010c37c:	18800017 	ldw	r2,0(r3)
1010c380:	10001126 	beq	r2,zero,1010c3c8 <_Balloc+0x7c>
1010c384:	11000017 	ldw	r4,0(r2)
1010c388:	19000015 	stw	r4,0(r3)
1010c38c:	10000415 	stw	zero,16(r2)
1010c390:	10000315 	stw	zero,12(r2)
1010c394:	dfc00317 	ldw	ra,12(sp)
1010c398:	dc800217 	ldw	r18,8(sp)
1010c39c:	dc400117 	ldw	r17,4(sp)
1010c3a0:	dc000017 	ldw	r16,0(sp)
1010c3a4:	dec00404 	addi	sp,sp,16
1010c3a8:	f800283a 	ret
1010c3ac:	01800844 	movi	r6,33
1010c3b0:	01400104 	movi	r5,4
1010c3b4:	01107b40 	call	101107b4 <_calloc_r>
1010c3b8:	88801315 	stw	r2,76(r17)
1010c3bc:	103fec1e 	bne	r2,zero,1010c370 <_gp+0xfffeade0>
1010c3c0:	0005883a 	mov	r2,zero
1010c3c4:	003ff306 	br	1010c394 <_gp+0xfffeae04>
1010c3c8:	01400044 	movi	r5,1
1010c3cc:	2c24983a 	sll	r18,r5,r16
1010c3d0:	8809883a 	mov	r4,r17
1010c3d4:	91800144 	addi	r6,r18,5
1010c3d8:	318d883a 	add	r6,r6,r6
1010c3dc:	318d883a 	add	r6,r6,r6
1010c3e0:	01107b40 	call	101107b4 <_calloc_r>
1010c3e4:	103ff626 	beq	r2,zero,1010c3c0 <_gp+0xfffeae30>
1010c3e8:	14000115 	stw	r16,4(r2)
1010c3ec:	14800215 	stw	r18,8(r2)
1010c3f0:	003fe606 	br	1010c38c <_gp+0xfffeadfc>

1010c3f4 <_Bfree>:
1010c3f4:	28000826 	beq	r5,zero,1010c418 <_Bfree+0x24>
1010c3f8:	28c00117 	ldw	r3,4(r5)
1010c3fc:	20801317 	ldw	r2,76(r4)
1010c400:	18c7883a 	add	r3,r3,r3
1010c404:	18c7883a 	add	r3,r3,r3
1010c408:	10c5883a 	add	r2,r2,r3
1010c40c:	10c00017 	ldw	r3,0(r2)
1010c410:	28c00015 	stw	r3,0(r5)
1010c414:	11400015 	stw	r5,0(r2)
1010c418:	f800283a 	ret

1010c41c <__multadd>:
1010c41c:	defffa04 	addi	sp,sp,-24
1010c420:	dc800315 	stw	r18,12(sp)
1010c424:	dc400215 	stw	r17,8(sp)
1010c428:	dc000115 	stw	r16,4(sp)
1010c42c:	2823883a 	mov	r17,r5
1010c430:	2c000417 	ldw	r16,16(r5)
1010c434:	dfc00515 	stw	ra,20(sp)
1010c438:	dcc00415 	stw	r19,16(sp)
1010c43c:	2025883a 	mov	r18,r4
1010c440:	29400504 	addi	r5,r5,20
1010c444:	0011883a 	mov	r8,zero
1010c448:	28c00017 	ldw	r3,0(r5)
1010c44c:	29400104 	addi	r5,r5,4
1010c450:	42000044 	addi	r8,r8,1
1010c454:	18bfffcc 	andi	r2,r3,65535
1010c458:	1185383a 	mul	r2,r2,r6
1010c45c:	1806d43a 	srli	r3,r3,16
1010c460:	11cf883a 	add	r7,r2,r7
1010c464:	3808d43a 	srli	r4,r7,16
1010c468:	1987383a 	mul	r3,r3,r6
1010c46c:	38bfffcc 	andi	r2,r7,65535
1010c470:	1907883a 	add	r3,r3,r4
1010c474:	1808943a 	slli	r4,r3,16
1010c478:	180ed43a 	srli	r7,r3,16
1010c47c:	2085883a 	add	r2,r4,r2
1010c480:	28bfff15 	stw	r2,-4(r5)
1010c484:	443ff016 	blt	r8,r16,1010c448 <_gp+0xfffeaeb8>
1010c488:	38000926 	beq	r7,zero,1010c4b0 <__multadd+0x94>
1010c48c:	88800217 	ldw	r2,8(r17)
1010c490:	80800f0e 	bge	r16,r2,1010c4d0 <__multadd+0xb4>
1010c494:	80800144 	addi	r2,r16,5
1010c498:	1085883a 	add	r2,r2,r2
1010c49c:	1085883a 	add	r2,r2,r2
1010c4a0:	8885883a 	add	r2,r17,r2
1010c4a4:	11c00015 	stw	r7,0(r2)
1010c4a8:	84000044 	addi	r16,r16,1
1010c4ac:	8c000415 	stw	r16,16(r17)
1010c4b0:	8805883a 	mov	r2,r17
1010c4b4:	dfc00517 	ldw	ra,20(sp)
1010c4b8:	dcc00417 	ldw	r19,16(sp)
1010c4bc:	dc800317 	ldw	r18,12(sp)
1010c4c0:	dc400217 	ldw	r17,8(sp)
1010c4c4:	dc000117 	ldw	r16,4(sp)
1010c4c8:	dec00604 	addi	sp,sp,24
1010c4cc:	f800283a 	ret
1010c4d0:	89400117 	ldw	r5,4(r17)
1010c4d4:	9009883a 	mov	r4,r18
1010c4d8:	d9c00015 	stw	r7,0(sp)
1010c4dc:	29400044 	addi	r5,r5,1
1010c4e0:	010c34c0 	call	1010c34c <_Balloc>
1010c4e4:	89800417 	ldw	r6,16(r17)
1010c4e8:	89400304 	addi	r5,r17,12
1010c4ec:	11000304 	addi	r4,r2,12
1010c4f0:	31800084 	addi	r6,r6,2
1010c4f4:	318d883a 	add	r6,r6,r6
1010c4f8:	318d883a 	add	r6,r6,r6
1010c4fc:	1027883a 	mov	r19,r2
1010c500:	010c0a80 	call	1010c0a8 <memcpy>
1010c504:	d9c00017 	ldw	r7,0(sp)
1010c508:	88000a26 	beq	r17,zero,1010c534 <__multadd+0x118>
1010c50c:	88c00117 	ldw	r3,4(r17)
1010c510:	90801317 	ldw	r2,76(r18)
1010c514:	18c7883a 	add	r3,r3,r3
1010c518:	18c7883a 	add	r3,r3,r3
1010c51c:	10c5883a 	add	r2,r2,r3
1010c520:	10c00017 	ldw	r3,0(r2)
1010c524:	88c00015 	stw	r3,0(r17)
1010c528:	14400015 	stw	r17,0(r2)
1010c52c:	9823883a 	mov	r17,r19
1010c530:	003fd806 	br	1010c494 <_gp+0xfffeaf04>
1010c534:	9823883a 	mov	r17,r19
1010c538:	003fd606 	br	1010c494 <_gp+0xfffeaf04>

1010c53c <__s2b>:
1010c53c:	defff904 	addi	sp,sp,-28
1010c540:	dc400115 	stw	r17,4(sp)
1010c544:	dc000015 	stw	r16,0(sp)
1010c548:	2023883a 	mov	r17,r4
1010c54c:	2821883a 	mov	r16,r5
1010c550:	39000204 	addi	r4,r7,8
1010c554:	01400244 	movi	r5,9
1010c558:	dcc00315 	stw	r19,12(sp)
1010c55c:	dc800215 	stw	r18,8(sp)
1010c560:	dfc00615 	stw	ra,24(sp)
1010c564:	dd400515 	stw	r21,20(sp)
1010c568:	dd000415 	stw	r20,16(sp)
1010c56c:	3825883a 	mov	r18,r7
1010c570:	3027883a 	mov	r19,r6
1010c574:	01030080 	call	10103008 <__divsi3>
1010c578:	00c00044 	movi	r3,1
1010c57c:	000b883a 	mov	r5,zero
1010c580:	1880030e 	bge	r3,r2,1010c590 <__s2b+0x54>
1010c584:	18c7883a 	add	r3,r3,r3
1010c588:	29400044 	addi	r5,r5,1
1010c58c:	18bffd16 	blt	r3,r2,1010c584 <_gp+0xfffeaff4>
1010c590:	8809883a 	mov	r4,r17
1010c594:	010c34c0 	call	1010c34c <_Balloc>
1010c598:	d8c00717 	ldw	r3,28(sp)
1010c59c:	10c00515 	stw	r3,20(r2)
1010c5a0:	00c00044 	movi	r3,1
1010c5a4:	10c00415 	stw	r3,16(r2)
1010c5a8:	00c00244 	movi	r3,9
1010c5ac:	1cc0210e 	bge	r3,r19,1010c634 <__s2b+0xf8>
1010c5b0:	80eb883a 	add	r21,r16,r3
1010c5b4:	a829883a 	mov	r20,r21
1010c5b8:	84e1883a 	add	r16,r16,r19
1010c5bc:	a1c00007 	ldb	r7,0(r20)
1010c5c0:	01800284 	movi	r6,10
1010c5c4:	a5000044 	addi	r20,r20,1
1010c5c8:	100b883a 	mov	r5,r2
1010c5cc:	39fff404 	addi	r7,r7,-48
1010c5d0:	8809883a 	mov	r4,r17
1010c5d4:	010c41c0 	call	1010c41c <__multadd>
1010c5d8:	a43ff81e 	bne	r20,r16,1010c5bc <_gp+0xfffeb02c>
1010c5dc:	ace1883a 	add	r16,r21,r19
1010c5e0:	843ffe04 	addi	r16,r16,-8
1010c5e4:	9c800a0e 	bge	r19,r18,1010c610 <__s2b+0xd4>
1010c5e8:	94e5c83a 	sub	r18,r18,r19
1010c5ec:	84a5883a 	add	r18,r16,r18
1010c5f0:	81c00007 	ldb	r7,0(r16)
1010c5f4:	01800284 	movi	r6,10
1010c5f8:	84000044 	addi	r16,r16,1
1010c5fc:	100b883a 	mov	r5,r2
1010c600:	39fff404 	addi	r7,r7,-48
1010c604:	8809883a 	mov	r4,r17
1010c608:	010c41c0 	call	1010c41c <__multadd>
1010c60c:	84bff81e 	bne	r16,r18,1010c5f0 <_gp+0xfffeb060>
1010c610:	dfc00617 	ldw	ra,24(sp)
1010c614:	dd400517 	ldw	r21,20(sp)
1010c618:	dd000417 	ldw	r20,16(sp)
1010c61c:	dcc00317 	ldw	r19,12(sp)
1010c620:	dc800217 	ldw	r18,8(sp)
1010c624:	dc400117 	ldw	r17,4(sp)
1010c628:	dc000017 	ldw	r16,0(sp)
1010c62c:	dec00704 	addi	sp,sp,28
1010c630:	f800283a 	ret
1010c634:	84000284 	addi	r16,r16,10
1010c638:	1827883a 	mov	r19,r3
1010c63c:	003fe906 	br	1010c5e4 <_gp+0xfffeb054>

1010c640 <__hi0bits>:
1010c640:	20bfffec 	andhi	r2,r4,65535
1010c644:	1000141e 	bne	r2,zero,1010c698 <__hi0bits+0x58>
1010c648:	2008943a 	slli	r4,r4,16
1010c64c:	00800404 	movi	r2,16
1010c650:	20ffc02c 	andhi	r3,r4,65280
1010c654:	1800021e 	bne	r3,zero,1010c660 <__hi0bits+0x20>
1010c658:	2008923a 	slli	r4,r4,8
1010c65c:	10800204 	addi	r2,r2,8
1010c660:	20fc002c 	andhi	r3,r4,61440
1010c664:	1800021e 	bne	r3,zero,1010c670 <__hi0bits+0x30>
1010c668:	2008913a 	slli	r4,r4,4
1010c66c:	10800104 	addi	r2,r2,4
1010c670:	20f0002c 	andhi	r3,r4,49152
1010c674:	1800031e 	bne	r3,zero,1010c684 <__hi0bits+0x44>
1010c678:	2109883a 	add	r4,r4,r4
1010c67c:	10800084 	addi	r2,r2,2
1010c680:	2109883a 	add	r4,r4,r4
1010c684:	20000316 	blt	r4,zero,1010c694 <__hi0bits+0x54>
1010c688:	2110002c 	andhi	r4,r4,16384
1010c68c:	2000041e 	bne	r4,zero,1010c6a0 <__hi0bits+0x60>
1010c690:	00800804 	movi	r2,32
1010c694:	f800283a 	ret
1010c698:	0005883a 	mov	r2,zero
1010c69c:	003fec06 	br	1010c650 <_gp+0xfffeb0c0>
1010c6a0:	10800044 	addi	r2,r2,1
1010c6a4:	f800283a 	ret

1010c6a8 <__lo0bits>:
1010c6a8:	20c00017 	ldw	r3,0(r4)
1010c6ac:	188001cc 	andi	r2,r3,7
1010c6b0:	10000826 	beq	r2,zero,1010c6d4 <__lo0bits+0x2c>
1010c6b4:	1880004c 	andi	r2,r3,1
1010c6b8:	1000211e 	bne	r2,zero,1010c740 <__lo0bits+0x98>
1010c6bc:	1880008c 	andi	r2,r3,2
1010c6c0:	1000211e 	bne	r2,zero,1010c748 <__lo0bits+0xa0>
1010c6c4:	1806d0ba 	srli	r3,r3,2
1010c6c8:	00800084 	movi	r2,2
1010c6cc:	20c00015 	stw	r3,0(r4)
1010c6d0:	f800283a 	ret
1010c6d4:	18bfffcc 	andi	r2,r3,65535
1010c6d8:	10001326 	beq	r2,zero,1010c728 <__lo0bits+0x80>
1010c6dc:	0005883a 	mov	r2,zero
1010c6e0:	19403fcc 	andi	r5,r3,255
1010c6e4:	2800021e 	bne	r5,zero,1010c6f0 <__lo0bits+0x48>
1010c6e8:	1806d23a 	srli	r3,r3,8
1010c6ec:	10800204 	addi	r2,r2,8
1010c6f0:	194003cc 	andi	r5,r3,15
1010c6f4:	2800021e 	bne	r5,zero,1010c700 <__lo0bits+0x58>
1010c6f8:	1806d13a 	srli	r3,r3,4
1010c6fc:	10800104 	addi	r2,r2,4
1010c700:	194000cc 	andi	r5,r3,3
1010c704:	2800021e 	bne	r5,zero,1010c710 <__lo0bits+0x68>
1010c708:	1806d0ba 	srli	r3,r3,2
1010c70c:	10800084 	addi	r2,r2,2
1010c710:	1940004c 	andi	r5,r3,1
1010c714:	2800081e 	bne	r5,zero,1010c738 <__lo0bits+0x90>
1010c718:	1806d07a 	srli	r3,r3,1
1010c71c:	1800051e 	bne	r3,zero,1010c734 <__lo0bits+0x8c>
1010c720:	00800804 	movi	r2,32
1010c724:	f800283a 	ret
1010c728:	1806d43a 	srli	r3,r3,16
1010c72c:	00800404 	movi	r2,16
1010c730:	003feb06 	br	1010c6e0 <_gp+0xfffeb150>
1010c734:	10800044 	addi	r2,r2,1
1010c738:	20c00015 	stw	r3,0(r4)
1010c73c:	f800283a 	ret
1010c740:	0005883a 	mov	r2,zero
1010c744:	f800283a 	ret
1010c748:	1806d07a 	srli	r3,r3,1
1010c74c:	00800044 	movi	r2,1
1010c750:	20c00015 	stw	r3,0(r4)
1010c754:	f800283a 	ret

1010c758 <__i2b>:
1010c758:	defffd04 	addi	sp,sp,-12
1010c75c:	dc000015 	stw	r16,0(sp)
1010c760:	04000044 	movi	r16,1
1010c764:	dc400115 	stw	r17,4(sp)
1010c768:	2823883a 	mov	r17,r5
1010c76c:	800b883a 	mov	r5,r16
1010c770:	dfc00215 	stw	ra,8(sp)
1010c774:	010c34c0 	call	1010c34c <_Balloc>
1010c778:	14400515 	stw	r17,20(r2)
1010c77c:	14000415 	stw	r16,16(r2)
1010c780:	dfc00217 	ldw	ra,8(sp)
1010c784:	dc400117 	ldw	r17,4(sp)
1010c788:	dc000017 	ldw	r16,0(sp)
1010c78c:	dec00304 	addi	sp,sp,12
1010c790:	f800283a 	ret

1010c794 <__multiply>:
1010c794:	defffa04 	addi	sp,sp,-24
1010c798:	dcc00315 	stw	r19,12(sp)
1010c79c:	dc800215 	stw	r18,8(sp)
1010c7a0:	34c00417 	ldw	r19,16(r6)
1010c7a4:	2c800417 	ldw	r18,16(r5)
1010c7a8:	dd000415 	stw	r20,16(sp)
1010c7ac:	dc400115 	stw	r17,4(sp)
1010c7b0:	dfc00515 	stw	ra,20(sp)
1010c7b4:	dc000015 	stw	r16,0(sp)
1010c7b8:	2829883a 	mov	r20,r5
1010c7bc:	3023883a 	mov	r17,r6
1010c7c0:	94c0050e 	bge	r18,r19,1010c7d8 <__multiply+0x44>
1010c7c4:	9007883a 	mov	r3,r18
1010c7c8:	3029883a 	mov	r20,r6
1010c7cc:	9825883a 	mov	r18,r19
1010c7d0:	2823883a 	mov	r17,r5
1010c7d4:	1827883a 	mov	r19,r3
1010c7d8:	a0800217 	ldw	r2,8(r20)
1010c7dc:	94e1883a 	add	r16,r18,r19
1010c7e0:	a1400117 	ldw	r5,4(r20)
1010c7e4:	1400010e 	bge	r2,r16,1010c7ec <__multiply+0x58>
1010c7e8:	29400044 	addi	r5,r5,1
1010c7ec:	010c34c0 	call	1010c34c <_Balloc>
1010c7f0:	8415883a 	add	r10,r16,r16
1010c7f4:	12c00504 	addi	r11,r2,20
1010c7f8:	5295883a 	add	r10,r10,r10
1010c7fc:	5a95883a 	add	r10,r11,r10
1010c800:	5807883a 	mov	r3,r11
1010c804:	5a80032e 	bgeu	r11,r10,1010c814 <__multiply+0x80>
1010c808:	18000015 	stw	zero,0(r3)
1010c80c:	18c00104 	addi	r3,r3,4
1010c810:	1abffd36 	bltu	r3,r10,1010c808 <_gp+0xfffeb278>
1010c814:	9ce7883a 	add	r19,r19,r19
1010c818:	94a5883a 	add	r18,r18,r18
1010c81c:	89800504 	addi	r6,r17,20
1010c820:	9ce7883a 	add	r19,r19,r19
1010c824:	a3400504 	addi	r13,r20,20
1010c828:	94a5883a 	add	r18,r18,r18
1010c82c:	34d9883a 	add	r12,r6,r19
1010c830:	6c93883a 	add	r9,r13,r18
1010c834:	3300422e 	bgeu	r6,r12,1010c940 <__multiply+0x1ac>
1010c838:	37c00017 	ldw	ra,0(r6)
1010c83c:	fbffffcc 	andi	r15,ra,65535
1010c840:	78001b26 	beq	r15,zero,1010c8b0 <__multiply+0x11c>
1010c844:	5811883a 	mov	r8,r11
1010c848:	681d883a 	mov	r14,r13
1010c84c:	000f883a 	mov	r7,zero
1010c850:	71000017 	ldw	r4,0(r14)
1010c854:	40c00017 	ldw	r3,0(r8)
1010c858:	73800104 	addi	r14,r14,4
1010c85c:	217fffcc 	andi	r5,r4,65535
1010c860:	2bcb383a 	mul	r5,r5,r15
1010c864:	2008d43a 	srli	r4,r4,16
1010c868:	1c7fffcc 	andi	r17,r3,65535
1010c86c:	2c4b883a 	add	r5,r5,r17
1010c870:	29cb883a 	add	r5,r5,r7
1010c874:	23c9383a 	mul	r4,r4,r15
1010c878:	1806d43a 	srli	r3,r3,16
1010c87c:	280ed43a 	srli	r7,r5,16
1010c880:	297fffcc 	andi	r5,r5,65535
1010c884:	20c7883a 	add	r3,r4,r3
1010c888:	19c7883a 	add	r3,r3,r7
1010c88c:	1808943a 	slli	r4,r3,16
1010c890:	4023883a 	mov	r17,r8
1010c894:	180ed43a 	srli	r7,r3,16
1010c898:	214ab03a 	or	r5,r4,r5
1010c89c:	41400015 	stw	r5,0(r8)
1010c8a0:	42000104 	addi	r8,r8,4
1010c8a4:	727fea36 	bltu	r14,r9,1010c850 <_gp+0xfffeb2c0>
1010c8a8:	89c00115 	stw	r7,4(r17)
1010c8ac:	37c00017 	ldw	ra,0(r6)
1010c8b0:	f83ed43a 	srli	ra,ra,16
1010c8b4:	f8001f26 	beq	ra,zero,1010c934 <__multiply+0x1a0>
1010c8b8:	58c00017 	ldw	r3,0(r11)
1010c8bc:	681d883a 	mov	r14,r13
1010c8c0:	581f883a 	mov	r15,r11
1010c8c4:	1811883a 	mov	r8,r3
1010c8c8:	5825883a 	mov	r18,r11
1010c8cc:	000f883a 	mov	r7,zero
1010c8d0:	00000106 	br	1010c8d8 <__multiply+0x144>
1010c8d4:	8825883a 	mov	r18,r17
1010c8d8:	7140000b 	ldhu	r5,0(r14)
1010c8dc:	4010d43a 	srli	r8,r8,16
1010c8e0:	193fffcc 	andi	r4,r3,65535
1010c8e4:	2fcb383a 	mul	r5,r5,ra
1010c8e8:	7bc00104 	addi	r15,r15,4
1010c8ec:	73800104 	addi	r14,r14,4
1010c8f0:	2a0b883a 	add	r5,r5,r8
1010c8f4:	29cb883a 	add	r5,r5,r7
1010c8f8:	2806943a 	slli	r3,r5,16
1010c8fc:	94400104 	addi	r17,r18,4
1010c900:	280ad43a 	srli	r5,r5,16
1010c904:	1908b03a 	or	r4,r3,r4
1010c908:	793fff15 	stw	r4,-4(r15)
1010c90c:	70ffff17 	ldw	r3,-4(r14)
1010c910:	8a000017 	ldw	r8,0(r17)
1010c914:	1806d43a 	srli	r3,r3,16
1010c918:	413fffcc 	andi	r4,r8,65535
1010c91c:	1fc7383a 	mul	r3,r3,ra
1010c920:	1907883a 	add	r3,r3,r4
1010c924:	1947883a 	add	r3,r3,r5
1010c928:	180ed43a 	srli	r7,r3,16
1010c92c:	727fe936 	bltu	r14,r9,1010c8d4 <_gp+0xfffeb344>
1010c930:	90c00115 	stw	r3,4(r18)
1010c934:	31800104 	addi	r6,r6,4
1010c938:	5ac00104 	addi	r11,r11,4
1010c93c:	333fbe36 	bltu	r6,r12,1010c838 <_gp+0xfffeb2a8>
1010c940:	0400090e 	bge	zero,r16,1010c968 <__multiply+0x1d4>
1010c944:	50ffff17 	ldw	r3,-4(r10)
1010c948:	52bfff04 	addi	r10,r10,-4
1010c94c:	18000326 	beq	r3,zero,1010c95c <__multiply+0x1c8>
1010c950:	00000506 	br	1010c968 <__multiply+0x1d4>
1010c954:	50c00017 	ldw	r3,0(r10)
1010c958:	1800031e 	bne	r3,zero,1010c968 <__multiply+0x1d4>
1010c95c:	843fffc4 	addi	r16,r16,-1
1010c960:	52bfff04 	addi	r10,r10,-4
1010c964:	803ffb1e 	bne	r16,zero,1010c954 <_gp+0xfffeb3c4>
1010c968:	14000415 	stw	r16,16(r2)
1010c96c:	dfc00517 	ldw	ra,20(sp)
1010c970:	dd000417 	ldw	r20,16(sp)
1010c974:	dcc00317 	ldw	r19,12(sp)
1010c978:	dc800217 	ldw	r18,8(sp)
1010c97c:	dc400117 	ldw	r17,4(sp)
1010c980:	dc000017 	ldw	r16,0(sp)
1010c984:	dec00604 	addi	sp,sp,24
1010c988:	f800283a 	ret

1010c98c <__pow5mult>:
1010c98c:	defffa04 	addi	sp,sp,-24
1010c990:	dcc00315 	stw	r19,12(sp)
1010c994:	dc000015 	stw	r16,0(sp)
1010c998:	dfc00515 	stw	ra,20(sp)
1010c99c:	dd000415 	stw	r20,16(sp)
1010c9a0:	dc800215 	stw	r18,8(sp)
1010c9a4:	dc400115 	stw	r17,4(sp)
1010c9a8:	308000cc 	andi	r2,r6,3
1010c9ac:	3021883a 	mov	r16,r6
1010c9b0:	2027883a 	mov	r19,r4
1010c9b4:	10002f1e 	bne	r2,zero,1010ca74 <__pow5mult+0xe8>
1010c9b8:	2825883a 	mov	r18,r5
1010c9bc:	8021d0ba 	srai	r16,r16,2
1010c9c0:	80001a26 	beq	r16,zero,1010ca2c <__pow5mult+0xa0>
1010c9c4:	9c401217 	ldw	r17,72(r19)
1010c9c8:	8800061e 	bne	r17,zero,1010c9e4 <__pow5mult+0x58>
1010c9cc:	00003406 	br	1010caa0 <__pow5mult+0x114>
1010c9d0:	8021d07a 	srai	r16,r16,1
1010c9d4:	80001526 	beq	r16,zero,1010ca2c <__pow5mult+0xa0>
1010c9d8:	88800017 	ldw	r2,0(r17)
1010c9dc:	10001c26 	beq	r2,zero,1010ca50 <__pow5mult+0xc4>
1010c9e0:	1023883a 	mov	r17,r2
1010c9e4:	8080004c 	andi	r2,r16,1
1010c9e8:	103ff926 	beq	r2,zero,1010c9d0 <_gp+0xfffeb440>
1010c9ec:	880d883a 	mov	r6,r17
1010c9f0:	900b883a 	mov	r5,r18
1010c9f4:	9809883a 	mov	r4,r19
1010c9f8:	010c7940 	call	1010c794 <__multiply>
1010c9fc:	90001b26 	beq	r18,zero,1010ca6c <__pow5mult+0xe0>
1010ca00:	91000117 	ldw	r4,4(r18)
1010ca04:	98c01317 	ldw	r3,76(r19)
1010ca08:	8021d07a 	srai	r16,r16,1
1010ca0c:	2109883a 	add	r4,r4,r4
1010ca10:	2109883a 	add	r4,r4,r4
1010ca14:	1907883a 	add	r3,r3,r4
1010ca18:	19000017 	ldw	r4,0(r3)
1010ca1c:	91000015 	stw	r4,0(r18)
1010ca20:	1c800015 	stw	r18,0(r3)
1010ca24:	1025883a 	mov	r18,r2
1010ca28:	803feb1e 	bne	r16,zero,1010c9d8 <_gp+0xfffeb448>
1010ca2c:	9005883a 	mov	r2,r18
1010ca30:	dfc00517 	ldw	ra,20(sp)
1010ca34:	dd000417 	ldw	r20,16(sp)
1010ca38:	dcc00317 	ldw	r19,12(sp)
1010ca3c:	dc800217 	ldw	r18,8(sp)
1010ca40:	dc400117 	ldw	r17,4(sp)
1010ca44:	dc000017 	ldw	r16,0(sp)
1010ca48:	dec00604 	addi	sp,sp,24
1010ca4c:	f800283a 	ret
1010ca50:	880d883a 	mov	r6,r17
1010ca54:	880b883a 	mov	r5,r17
1010ca58:	9809883a 	mov	r4,r19
1010ca5c:	010c7940 	call	1010c794 <__multiply>
1010ca60:	88800015 	stw	r2,0(r17)
1010ca64:	10000015 	stw	zero,0(r2)
1010ca68:	003fdd06 	br	1010c9e0 <_gp+0xfffeb450>
1010ca6c:	1025883a 	mov	r18,r2
1010ca70:	003fd706 	br	1010c9d0 <_gp+0xfffeb440>
1010ca74:	10bfffc4 	addi	r2,r2,-1
1010ca78:	1085883a 	add	r2,r2,r2
1010ca7c:	00c40474 	movhi	r3,4113
1010ca80:	18de0604 	addi	r3,r3,30744
1010ca84:	1085883a 	add	r2,r2,r2
1010ca88:	1885883a 	add	r2,r3,r2
1010ca8c:	11800017 	ldw	r6,0(r2)
1010ca90:	000f883a 	mov	r7,zero
1010ca94:	010c41c0 	call	1010c41c <__multadd>
1010ca98:	1025883a 	mov	r18,r2
1010ca9c:	003fc706 	br	1010c9bc <_gp+0xfffeb42c>
1010caa0:	05000044 	movi	r20,1
1010caa4:	a00b883a 	mov	r5,r20
1010caa8:	9809883a 	mov	r4,r19
1010caac:	010c34c0 	call	1010c34c <_Balloc>
1010cab0:	1023883a 	mov	r17,r2
1010cab4:	00809c44 	movi	r2,625
1010cab8:	88800515 	stw	r2,20(r17)
1010cabc:	8d000415 	stw	r20,16(r17)
1010cac0:	9c401215 	stw	r17,72(r19)
1010cac4:	88000015 	stw	zero,0(r17)
1010cac8:	003fc606 	br	1010c9e4 <_gp+0xfffeb454>

1010cacc <__lshift>:
1010cacc:	defff904 	addi	sp,sp,-28
1010cad0:	dd400515 	stw	r21,20(sp)
1010cad4:	dcc00315 	stw	r19,12(sp)
1010cad8:	302bd17a 	srai	r21,r6,5
1010cadc:	2cc00417 	ldw	r19,16(r5)
1010cae0:	28800217 	ldw	r2,8(r5)
1010cae4:	dd000415 	stw	r20,16(sp)
1010cae8:	ace7883a 	add	r19,r21,r19
1010caec:	dc800215 	stw	r18,8(sp)
1010caf0:	dc400115 	stw	r17,4(sp)
1010caf4:	dc000015 	stw	r16,0(sp)
1010caf8:	dfc00615 	stw	ra,24(sp)
1010cafc:	9c000044 	addi	r16,r19,1
1010cb00:	2823883a 	mov	r17,r5
1010cb04:	3029883a 	mov	r20,r6
1010cb08:	2025883a 	mov	r18,r4
1010cb0c:	29400117 	ldw	r5,4(r5)
1010cb10:	1400030e 	bge	r2,r16,1010cb20 <__lshift+0x54>
1010cb14:	1085883a 	add	r2,r2,r2
1010cb18:	29400044 	addi	r5,r5,1
1010cb1c:	143ffd16 	blt	r2,r16,1010cb14 <_gp+0xfffeb584>
1010cb20:	9009883a 	mov	r4,r18
1010cb24:	010c34c0 	call	1010c34c <_Balloc>
1010cb28:	10c00504 	addi	r3,r2,20
1010cb2c:	0540070e 	bge	zero,r21,1010cb4c <__lshift+0x80>
1010cb30:	ad6b883a 	add	r21,r21,r21
1010cb34:	ad6b883a 	add	r21,r21,r21
1010cb38:	1809883a 	mov	r4,r3
1010cb3c:	1d47883a 	add	r3,r3,r21
1010cb40:	20000015 	stw	zero,0(r4)
1010cb44:	21000104 	addi	r4,r4,4
1010cb48:	193ffd1e 	bne	r3,r4,1010cb40 <_gp+0xfffeb5b0>
1010cb4c:	8a000417 	ldw	r8,16(r17)
1010cb50:	89000504 	addi	r4,r17,20
1010cb54:	a18007cc 	andi	r6,r20,31
1010cb58:	4211883a 	add	r8,r8,r8
1010cb5c:	4211883a 	add	r8,r8,r8
1010cb60:	2211883a 	add	r8,r4,r8
1010cb64:	30002326 	beq	r6,zero,1010cbf4 <__lshift+0x128>
1010cb68:	02400804 	movi	r9,32
1010cb6c:	4993c83a 	sub	r9,r9,r6
1010cb70:	000b883a 	mov	r5,zero
1010cb74:	21c00017 	ldw	r7,0(r4)
1010cb78:	1815883a 	mov	r10,r3
1010cb7c:	18c00104 	addi	r3,r3,4
1010cb80:	398e983a 	sll	r7,r7,r6
1010cb84:	21000104 	addi	r4,r4,4
1010cb88:	394ab03a 	or	r5,r7,r5
1010cb8c:	197fff15 	stw	r5,-4(r3)
1010cb90:	217fff17 	ldw	r5,-4(r4)
1010cb94:	2a4ad83a 	srl	r5,r5,r9
1010cb98:	223ff636 	bltu	r4,r8,1010cb74 <_gp+0xfffeb5e4>
1010cb9c:	51400115 	stw	r5,4(r10)
1010cba0:	28001a1e 	bne	r5,zero,1010cc0c <__lshift+0x140>
1010cba4:	843fffc4 	addi	r16,r16,-1
1010cba8:	14000415 	stw	r16,16(r2)
1010cbac:	88000826 	beq	r17,zero,1010cbd0 <__lshift+0x104>
1010cbb0:	89000117 	ldw	r4,4(r17)
1010cbb4:	90c01317 	ldw	r3,76(r18)
1010cbb8:	2109883a 	add	r4,r4,r4
1010cbbc:	2109883a 	add	r4,r4,r4
1010cbc0:	1907883a 	add	r3,r3,r4
1010cbc4:	19000017 	ldw	r4,0(r3)
1010cbc8:	89000015 	stw	r4,0(r17)
1010cbcc:	1c400015 	stw	r17,0(r3)
1010cbd0:	dfc00617 	ldw	ra,24(sp)
1010cbd4:	dd400517 	ldw	r21,20(sp)
1010cbd8:	dd000417 	ldw	r20,16(sp)
1010cbdc:	dcc00317 	ldw	r19,12(sp)
1010cbe0:	dc800217 	ldw	r18,8(sp)
1010cbe4:	dc400117 	ldw	r17,4(sp)
1010cbe8:	dc000017 	ldw	r16,0(sp)
1010cbec:	dec00704 	addi	sp,sp,28
1010cbf0:	f800283a 	ret
1010cbf4:	21400017 	ldw	r5,0(r4)
1010cbf8:	18c00104 	addi	r3,r3,4
1010cbfc:	21000104 	addi	r4,r4,4
1010cc00:	197fff15 	stw	r5,-4(r3)
1010cc04:	223ffb36 	bltu	r4,r8,1010cbf4 <_gp+0xfffeb664>
1010cc08:	003fe606 	br	1010cba4 <_gp+0xfffeb614>
1010cc0c:	9c000084 	addi	r16,r19,2
1010cc10:	003fe406 	br	1010cba4 <_gp+0xfffeb614>

1010cc14 <__mcmp>:
1010cc14:	20800417 	ldw	r2,16(r4)
1010cc18:	28c00417 	ldw	r3,16(r5)
1010cc1c:	10c5c83a 	sub	r2,r2,r3
1010cc20:	1000111e 	bne	r2,zero,1010cc68 <__mcmp+0x54>
1010cc24:	18c7883a 	add	r3,r3,r3
1010cc28:	18c7883a 	add	r3,r3,r3
1010cc2c:	21000504 	addi	r4,r4,20
1010cc30:	29400504 	addi	r5,r5,20
1010cc34:	20c5883a 	add	r2,r4,r3
1010cc38:	28cb883a 	add	r5,r5,r3
1010cc3c:	00000106 	br	1010cc44 <__mcmp+0x30>
1010cc40:	20800a2e 	bgeu	r4,r2,1010cc6c <__mcmp+0x58>
1010cc44:	10bfff04 	addi	r2,r2,-4
1010cc48:	297fff04 	addi	r5,r5,-4
1010cc4c:	11800017 	ldw	r6,0(r2)
1010cc50:	28c00017 	ldw	r3,0(r5)
1010cc54:	30fffa26 	beq	r6,r3,1010cc40 <_gp+0xfffeb6b0>
1010cc58:	30c00236 	bltu	r6,r3,1010cc64 <__mcmp+0x50>
1010cc5c:	00800044 	movi	r2,1
1010cc60:	f800283a 	ret
1010cc64:	00bfffc4 	movi	r2,-1
1010cc68:	f800283a 	ret
1010cc6c:	0005883a 	mov	r2,zero
1010cc70:	f800283a 	ret

1010cc74 <__mdiff>:
1010cc74:	28c00417 	ldw	r3,16(r5)
1010cc78:	30800417 	ldw	r2,16(r6)
1010cc7c:	defffa04 	addi	sp,sp,-24
1010cc80:	dcc00315 	stw	r19,12(sp)
1010cc84:	dc800215 	stw	r18,8(sp)
1010cc88:	dfc00515 	stw	ra,20(sp)
1010cc8c:	dd000415 	stw	r20,16(sp)
1010cc90:	dc400115 	stw	r17,4(sp)
1010cc94:	dc000015 	stw	r16,0(sp)
1010cc98:	1887c83a 	sub	r3,r3,r2
1010cc9c:	2825883a 	mov	r18,r5
1010cca0:	3027883a 	mov	r19,r6
1010cca4:	1800141e 	bne	r3,zero,1010ccf8 <__mdiff+0x84>
1010cca8:	1085883a 	add	r2,r2,r2
1010ccac:	1085883a 	add	r2,r2,r2
1010ccb0:	2a000504 	addi	r8,r5,20
1010ccb4:	34000504 	addi	r16,r6,20
1010ccb8:	4087883a 	add	r3,r8,r2
1010ccbc:	8085883a 	add	r2,r16,r2
1010ccc0:	00000106 	br	1010ccc8 <__mdiff+0x54>
1010ccc4:	40c0592e 	bgeu	r8,r3,1010ce2c <__mdiff+0x1b8>
1010ccc8:	18ffff04 	addi	r3,r3,-4
1010cccc:	10bfff04 	addi	r2,r2,-4
1010ccd0:	19c00017 	ldw	r7,0(r3)
1010ccd4:	11400017 	ldw	r5,0(r2)
1010ccd8:	397ffa26 	beq	r7,r5,1010ccc4 <_gp+0xfffeb734>
1010ccdc:	3940592e 	bgeu	r7,r5,1010ce44 <__mdiff+0x1d0>
1010cce0:	9005883a 	mov	r2,r18
1010cce4:	4023883a 	mov	r17,r8
1010cce8:	9825883a 	mov	r18,r19
1010ccec:	05000044 	movi	r20,1
1010ccf0:	1027883a 	mov	r19,r2
1010ccf4:	00000406 	br	1010cd08 <__mdiff+0x94>
1010ccf8:	18005616 	blt	r3,zero,1010ce54 <__mdiff+0x1e0>
1010ccfc:	34400504 	addi	r17,r6,20
1010cd00:	2c000504 	addi	r16,r5,20
1010cd04:	0029883a 	mov	r20,zero
1010cd08:	91400117 	ldw	r5,4(r18)
1010cd0c:	010c34c0 	call	1010c34c <_Balloc>
1010cd10:	92400417 	ldw	r9,16(r18)
1010cd14:	9b000417 	ldw	r12,16(r19)
1010cd18:	12c00504 	addi	r11,r2,20
1010cd1c:	4a51883a 	add	r8,r9,r9
1010cd20:	6319883a 	add	r12,r12,r12
1010cd24:	4211883a 	add	r8,r8,r8
1010cd28:	6319883a 	add	r12,r12,r12
1010cd2c:	15000315 	stw	r20,12(r2)
1010cd30:	8211883a 	add	r8,r16,r8
1010cd34:	8b19883a 	add	r12,r17,r12
1010cd38:	0007883a 	mov	r3,zero
1010cd3c:	81400017 	ldw	r5,0(r16)
1010cd40:	89c00017 	ldw	r7,0(r17)
1010cd44:	59800104 	addi	r6,r11,4
1010cd48:	293fffcc 	andi	r4,r5,65535
1010cd4c:	20c7883a 	add	r3,r4,r3
1010cd50:	393fffcc 	andi	r4,r7,65535
1010cd54:	1909c83a 	sub	r4,r3,r4
1010cd58:	280ad43a 	srli	r5,r5,16
1010cd5c:	380ed43a 	srli	r7,r7,16
1010cd60:	2007d43a 	srai	r3,r4,16
1010cd64:	213fffcc 	andi	r4,r4,65535
1010cd68:	29cbc83a 	sub	r5,r5,r7
1010cd6c:	28c7883a 	add	r3,r5,r3
1010cd70:	180a943a 	slli	r5,r3,16
1010cd74:	8c400104 	addi	r17,r17,4
1010cd78:	84000104 	addi	r16,r16,4
1010cd7c:	2908b03a 	or	r4,r5,r4
1010cd80:	59000015 	stw	r4,0(r11)
1010cd84:	1807d43a 	srai	r3,r3,16
1010cd88:	3015883a 	mov	r10,r6
1010cd8c:	3017883a 	mov	r11,r6
1010cd90:	8b3fea36 	bltu	r17,r12,1010cd3c <_gp+0xfffeb7ac>
1010cd94:	8200162e 	bgeu	r16,r8,1010cdf0 <__mdiff+0x17c>
1010cd98:	8017883a 	mov	r11,r16
1010cd9c:	59400017 	ldw	r5,0(r11)
1010cda0:	31800104 	addi	r6,r6,4
1010cda4:	5ac00104 	addi	r11,r11,4
1010cda8:	293fffcc 	andi	r4,r5,65535
1010cdac:	20c7883a 	add	r3,r4,r3
1010cdb0:	280ed43a 	srli	r7,r5,16
1010cdb4:	180bd43a 	srai	r5,r3,16
1010cdb8:	193fffcc 	andi	r4,r3,65535
1010cdbc:	3947883a 	add	r3,r7,r5
1010cdc0:	180a943a 	slli	r5,r3,16
1010cdc4:	1807d43a 	srai	r3,r3,16
1010cdc8:	2908b03a 	or	r4,r5,r4
1010cdcc:	313fff15 	stw	r4,-4(r6)
1010cdd0:	5a3ff236 	bltu	r11,r8,1010cd9c <_gp+0xfffeb80c>
1010cdd4:	0406303a 	nor	r3,zero,r16
1010cdd8:	1a07883a 	add	r3,r3,r8
1010cddc:	1806d0ba 	srli	r3,r3,2
1010cde0:	18c00044 	addi	r3,r3,1
1010cde4:	18c7883a 	add	r3,r3,r3
1010cde8:	18c7883a 	add	r3,r3,r3
1010cdec:	50d5883a 	add	r10,r10,r3
1010cdf0:	50ffff04 	addi	r3,r10,-4
1010cdf4:	2000041e 	bne	r4,zero,1010ce08 <__mdiff+0x194>
1010cdf8:	18ffff04 	addi	r3,r3,-4
1010cdfc:	19000017 	ldw	r4,0(r3)
1010ce00:	4a7fffc4 	addi	r9,r9,-1
1010ce04:	203ffc26 	beq	r4,zero,1010cdf8 <_gp+0xfffeb868>
1010ce08:	12400415 	stw	r9,16(r2)
1010ce0c:	dfc00517 	ldw	ra,20(sp)
1010ce10:	dd000417 	ldw	r20,16(sp)
1010ce14:	dcc00317 	ldw	r19,12(sp)
1010ce18:	dc800217 	ldw	r18,8(sp)
1010ce1c:	dc400117 	ldw	r17,4(sp)
1010ce20:	dc000017 	ldw	r16,0(sp)
1010ce24:	dec00604 	addi	sp,sp,24
1010ce28:	f800283a 	ret
1010ce2c:	000b883a 	mov	r5,zero
1010ce30:	010c34c0 	call	1010c34c <_Balloc>
1010ce34:	00c00044 	movi	r3,1
1010ce38:	10c00415 	stw	r3,16(r2)
1010ce3c:	10000515 	stw	zero,20(r2)
1010ce40:	003ff206 	br	1010ce0c <_gp+0xfffeb87c>
1010ce44:	8023883a 	mov	r17,r16
1010ce48:	0029883a 	mov	r20,zero
1010ce4c:	4021883a 	mov	r16,r8
1010ce50:	003fad06 	br	1010cd08 <_gp+0xfffeb778>
1010ce54:	9005883a 	mov	r2,r18
1010ce58:	94400504 	addi	r17,r18,20
1010ce5c:	9c000504 	addi	r16,r19,20
1010ce60:	9825883a 	mov	r18,r19
1010ce64:	05000044 	movi	r20,1
1010ce68:	1027883a 	mov	r19,r2
1010ce6c:	003fa606 	br	1010cd08 <_gp+0xfffeb778>

1010ce70 <__ulp>:
1010ce70:	295ffc2c 	andhi	r5,r5,32752
1010ce74:	00bf3034 	movhi	r2,64704
1010ce78:	2887883a 	add	r3,r5,r2
1010ce7c:	00c0020e 	bge	zero,r3,1010ce88 <__ulp+0x18>
1010ce80:	0005883a 	mov	r2,zero
1010ce84:	f800283a 	ret
1010ce88:	00c7c83a 	sub	r3,zero,r3
1010ce8c:	1807d53a 	srai	r3,r3,20
1010ce90:	008004c4 	movi	r2,19
1010ce94:	10c00b0e 	bge	r2,r3,1010cec4 <__ulp+0x54>
1010ce98:	18bffb04 	addi	r2,r3,-20
1010ce9c:	01000784 	movi	r4,30
1010cea0:	0007883a 	mov	r3,zero
1010cea4:	20800516 	blt	r4,r2,1010cebc <__ulp+0x4c>
1010cea8:	010007c4 	movi	r4,31
1010ceac:	2089c83a 	sub	r4,r4,r2
1010ceb0:	00800044 	movi	r2,1
1010ceb4:	1104983a 	sll	r2,r2,r4
1010ceb8:	f800283a 	ret
1010cebc:	00800044 	movi	r2,1
1010cec0:	f800283a 	ret
1010cec4:	01400234 	movhi	r5,8
1010cec8:	28c7d83a 	sra	r3,r5,r3
1010cecc:	0005883a 	mov	r2,zero
1010ced0:	f800283a 	ret

1010ced4 <__b2d>:
1010ced4:	defffa04 	addi	sp,sp,-24
1010ced8:	dc000015 	stw	r16,0(sp)
1010cedc:	24000417 	ldw	r16,16(r4)
1010cee0:	dc400115 	stw	r17,4(sp)
1010cee4:	24400504 	addi	r17,r4,20
1010cee8:	8421883a 	add	r16,r16,r16
1010ceec:	8421883a 	add	r16,r16,r16
1010cef0:	8c21883a 	add	r16,r17,r16
1010cef4:	dc800215 	stw	r18,8(sp)
1010cef8:	84bfff17 	ldw	r18,-4(r16)
1010cefc:	dd000415 	stw	r20,16(sp)
1010cf00:	dcc00315 	stw	r19,12(sp)
1010cf04:	9009883a 	mov	r4,r18
1010cf08:	2829883a 	mov	r20,r5
1010cf0c:	dfc00515 	stw	ra,20(sp)
1010cf10:	010c6400 	call	1010c640 <__hi0bits>
1010cf14:	00c00804 	movi	r3,32
1010cf18:	1889c83a 	sub	r4,r3,r2
1010cf1c:	a1000015 	stw	r4,0(r20)
1010cf20:	01000284 	movi	r4,10
1010cf24:	84ffff04 	addi	r19,r16,-4
1010cf28:	20801216 	blt	r4,r2,1010cf74 <__b2d+0xa0>
1010cf2c:	018002c4 	movi	r6,11
1010cf30:	308dc83a 	sub	r6,r6,r2
1010cf34:	9186d83a 	srl	r3,r18,r6
1010cf38:	18cffc34 	orhi	r3,r3,16368
1010cf3c:	8cc0212e 	bgeu	r17,r19,1010cfc4 <__b2d+0xf0>
1010cf40:	813ffe17 	ldw	r4,-8(r16)
1010cf44:	218cd83a 	srl	r6,r4,r6
1010cf48:	10800544 	addi	r2,r2,21
1010cf4c:	9084983a 	sll	r2,r18,r2
1010cf50:	1184b03a 	or	r2,r2,r6
1010cf54:	dfc00517 	ldw	ra,20(sp)
1010cf58:	dd000417 	ldw	r20,16(sp)
1010cf5c:	dcc00317 	ldw	r19,12(sp)
1010cf60:	dc800217 	ldw	r18,8(sp)
1010cf64:	dc400117 	ldw	r17,4(sp)
1010cf68:	dc000017 	ldw	r16,0(sp)
1010cf6c:	dec00604 	addi	sp,sp,24
1010cf70:	f800283a 	ret
1010cf74:	8cc00f2e 	bgeu	r17,r19,1010cfb4 <__b2d+0xe0>
1010cf78:	117ffd44 	addi	r5,r2,-11
1010cf7c:	80bffe17 	ldw	r2,-8(r16)
1010cf80:	28000e26 	beq	r5,zero,1010cfbc <__b2d+0xe8>
1010cf84:	1949c83a 	sub	r4,r3,r5
1010cf88:	9164983a 	sll	r18,r18,r5
1010cf8c:	1106d83a 	srl	r3,r2,r4
1010cf90:	81bffe04 	addi	r6,r16,-8
1010cf94:	948ffc34 	orhi	r18,r18,16368
1010cf98:	90c6b03a 	or	r3,r18,r3
1010cf9c:	89800e2e 	bgeu	r17,r6,1010cfd8 <__b2d+0x104>
1010cfa0:	81bffd17 	ldw	r6,-12(r16)
1010cfa4:	1144983a 	sll	r2,r2,r5
1010cfa8:	310ad83a 	srl	r5,r6,r4
1010cfac:	2884b03a 	or	r2,r5,r2
1010cfb0:	003fe806 	br	1010cf54 <_gp+0xfffeb9c4>
1010cfb4:	10bffd44 	addi	r2,r2,-11
1010cfb8:	1000041e 	bne	r2,zero,1010cfcc <__b2d+0xf8>
1010cfbc:	90cffc34 	orhi	r3,r18,16368
1010cfc0:	003fe406 	br	1010cf54 <_gp+0xfffeb9c4>
1010cfc4:	000d883a 	mov	r6,zero
1010cfc8:	003fdf06 	br	1010cf48 <_gp+0xfffeb9b8>
1010cfcc:	90a4983a 	sll	r18,r18,r2
1010cfd0:	0005883a 	mov	r2,zero
1010cfd4:	003ff906 	br	1010cfbc <_gp+0xfffeba2c>
1010cfd8:	1144983a 	sll	r2,r2,r5
1010cfdc:	003fdd06 	br	1010cf54 <_gp+0xfffeb9c4>

1010cfe0 <__d2b>:
1010cfe0:	defff804 	addi	sp,sp,-32
1010cfe4:	dc000215 	stw	r16,8(sp)
1010cfe8:	3021883a 	mov	r16,r6
1010cfec:	dc400315 	stw	r17,12(sp)
1010cff0:	8022907a 	slli	r17,r16,1
1010cff4:	dd000615 	stw	r20,24(sp)
1010cff8:	2829883a 	mov	r20,r5
1010cffc:	01400044 	movi	r5,1
1010d000:	dcc00515 	stw	r19,20(sp)
1010d004:	dc800415 	stw	r18,16(sp)
1010d008:	dfc00715 	stw	ra,28(sp)
1010d00c:	3825883a 	mov	r18,r7
1010d010:	8822d57a 	srli	r17,r17,21
1010d014:	010c34c0 	call	1010c34c <_Balloc>
1010d018:	1027883a 	mov	r19,r2
1010d01c:	00800434 	movhi	r2,16
1010d020:	10bfffc4 	addi	r2,r2,-1
1010d024:	808c703a 	and	r6,r16,r2
1010d028:	88000126 	beq	r17,zero,1010d030 <__d2b+0x50>
1010d02c:	31800434 	orhi	r6,r6,16
1010d030:	d9800015 	stw	r6,0(sp)
1010d034:	a0002426 	beq	r20,zero,1010d0c8 <__d2b+0xe8>
1010d038:	d9000104 	addi	r4,sp,4
1010d03c:	dd000115 	stw	r20,4(sp)
1010d040:	010c6a80 	call	1010c6a8 <__lo0bits>
1010d044:	d8c00017 	ldw	r3,0(sp)
1010d048:	10002f1e 	bne	r2,zero,1010d108 <__d2b+0x128>
1010d04c:	d9000117 	ldw	r4,4(sp)
1010d050:	99000515 	stw	r4,20(r19)
1010d054:	1821003a 	cmpeq	r16,r3,zero
1010d058:	01000084 	movi	r4,2
1010d05c:	2421c83a 	sub	r16,r4,r16
1010d060:	98c00615 	stw	r3,24(r19)
1010d064:	9c000415 	stw	r16,16(r19)
1010d068:	88001f1e 	bne	r17,zero,1010d0e8 <__d2b+0x108>
1010d06c:	10bef384 	addi	r2,r2,-1074
1010d070:	90800015 	stw	r2,0(r18)
1010d074:	00900034 	movhi	r2,16384
1010d078:	10bfffc4 	addi	r2,r2,-1
1010d07c:	8085883a 	add	r2,r16,r2
1010d080:	1085883a 	add	r2,r2,r2
1010d084:	1085883a 	add	r2,r2,r2
1010d088:	9885883a 	add	r2,r19,r2
1010d08c:	11000517 	ldw	r4,20(r2)
1010d090:	8020917a 	slli	r16,r16,5
1010d094:	010c6400 	call	1010c640 <__hi0bits>
1010d098:	d8c00817 	ldw	r3,32(sp)
1010d09c:	8085c83a 	sub	r2,r16,r2
1010d0a0:	18800015 	stw	r2,0(r3)
1010d0a4:	9805883a 	mov	r2,r19
1010d0a8:	dfc00717 	ldw	ra,28(sp)
1010d0ac:	dd000617 	ldw	r20,24(sp)
1010d0b0:	dcc00517 	ldw	r19,20(sp)
1010d0b4:	dc800417 	ldw	r18,16(sp)
1010d0b8:	dc400317 	ldw	r17,12(sp)
1010d0bc:	dc000217 	ldw	r16,8(sp)
1010d0c0:	dec00804 	addi	sp,sp,32
1010d0c4:	f800283a 	ret
1010d0c8:	d809883a 	mov	r4,sp
1010d0cc:	010c6a80 	call	1010c6a8 <__lo0bits>
1010d0d0:	d8c00017 	ldw	r3,0(sp)
1010d0d4:	04000044 	movi	r16,1
1010d0d8:	9c000415 	stw	r16,16(r19)
1010d0dc:	98c00515 	stw	r3,20(r19)
1010d0e0:	10800804 	addi	r2,r2,32
1010d0e4:	883fe126 	beq	r17,zero,1010d06c <_gp+0xfffebadc>
1010d0e8:	00c00d44 	movi	r3,53
1010d0ec:	8c7ef344 	addi	r17,r17,-1075
1010d0f0:	88a3883a 	add	r17,r17,r2
1010d0f4:	1885c83a 	sub	r2,r3,r2
1010d0f8:	d8c00817 	ldw	r3,32(sp)
1010d0fc:	94400015 	stw	r17,0(r18)
1010d100:	18800015 	stw	r2,0(r3)
1010d104:	003fe706 	br	1010d0a4 <_gp+0xfffebb14>
1010d108:	01000804 	movi	r4,32
1010d10c:	2089c83a 	sub	r4,r4,r2
1010d110:	1908983a 	sll	r4,r3,r4
1010d114:	d9400117 	ldw	r5,4(sp)
1010d118:	1886d83a 	srl	r3,r3,r2
1010d11c:	2148b03a 	or	r4,r4,r5
1010d120:	99000515 	stw	r4,20(r19)
1010d124:	d8c00015 	stw	r3,0(sp)
1010d128:	003fca06 	br	1010d054 <_gp+0xfffebac4>

1010d12c <__ratio>:
1010d12c:	defff904 	addi	sp,sp,-28
1010d130:	dc400315 	stw	r17,12(sp)
1010d134:	2823883a 	mov	r17,r5
1010d138:	d9400104 	addi	r5,sp,4
1010d13c:	dfc00615 	stw	ra,24(sp)
1010d140:	dcc00515 	stw	r19,20(sp)
1010d144:	dc800415 	stw	r18,16(sp)
1010d148:	2027883a 	mov	r19,r4
1010d14c:	dc000215 	stw	r16,8(sp)
1010d150:	010ced40 	call	1010ced4 <__b2d>
1010d154:	d80b883a 	mov	r5,sp
1010d158:	8809883a 	mov	r4,r17
1010d15c:	1025883a 	mov	r18,r2
1010d160:	1821883a 	mov	r16,r3
1010d164:	010ced40 	call	1010ced4 <__b2d>
1010d168:	8a000417 	ldw	r8,16(r17)
1010d16c:	99000417 	ldw	r4,16(r19)
1010d170:	d9400117 	ldw	r5,4(sp)
1010d174:	2209c83a 	sub	r4,r4,r8
1010d178:	2010917a 	slli	r8,r4,5
1010d17c:	d9000017 	ldw	r4,0(sp)
1010d180:	2909c83a 	sub	r4,r5,r4
1010d184:	4109883a 	add	r4,r8,r4
1010d188:	01000e0e 	bge	zero,r4,1010d1c4 <__ratio+0x98>
1010d18c:	2008953a 	slli	r4,r4,20
1010d190:	2421883a 	add	r16,r4,r16
1010d194:	100d883a 	mov	r6,r2
1010d198:	180f883a 	mov	r7,r3
1010d19c:	9009883a 	mov	r4,r18
1010d1a0:	800b883a 	mov	r5,r16
1010d1a4:	011217c0 	call	1011217c <__divdf3>
1010d1a8:	dfc00617 	ldw	ra,24(sp)
1010d1ac:	dcc00517 	ldw	r19,20(sp)
1010d1b0:	dc800417 	ldw	r18,16(sp)
1010d1b4:	dc400317 	ldw	r17,12(sp)
1010d1b8:	dc000217 	ldw	r16,8(sp)
1010d1bc:	dec00704 	addi	sp,sp,28
1010d1c0:	f800283a 	ret
1010d1c4:	2008953a 	slli	r4,r4,20
1010d1c8:	1907c83a 	sub	r3,r3,r4
1010d1cc:	003ff106 	br	1010d194 <_gp+0xfffebc04>

1010d1d0 <_mprec_log10>:
1010d1d0:	defffe04 	addi	sp,sp,-8
1010d1d4:	dc000015 	stw	r16,0(sp)
1010d1d8:	dfc00115 	stw	ra,4(sp)
1010d1dc:	008005c4 	movi	r2,23
1010d1e0:	2021883a 	mov	r16,r4
1010d1e4:	11000d0e 	bge	r2,r4,1010d21c <_mprec_log10+0x4c>
1010d1e8:	0005883a 	mov	r2,zero
1010d1ec:	00cffc34 	movhi	r3,16368
1010d1f0:	843fffc4 	addi	r16,r16,-1
1010d1f4:	000d883a 	mov	r6,zero
1010d1f8:	01d00934 	movhi	r7,16420
1010d1fc:	1009883a 	mov	r4,r2
1010d200:	180b883a 	mov	r5,r3
1010d204:	0112cbc0 	call	10112cbc <__muldf3>
1010d208:	803ff91e 	bne	r16,zero,1010d1f0 <_gp+0xfffebc60>
1010d20c:	dfc00117 	ldw	ra,4(sp)
1010d210:	dc000017 	ldw	r16,0(sp)
1010d214:	dec00204 	addi	sp,sp,8
1010d218:	f800283a 	ret
1010d21c:	202090fa 	slli	r16,r4,3
1010d220:	00840474 	movhi	r2,4113
1010d224:	109e1d04 	addi	r2,r2,30836
1010d228:	1421883a 	add	r16,r2,r16
1010d22c:	80800017 	ldw	r2,0(r16)
1010d230:	80c00117 	ldw	r3,4(r16)
1010d234:	dfc00117 	ldw	ra,4(sp)
1010d238:	dc000017 	ldw	r16,0(sp)
1010d23c:	dec00204 	addi	sp,sp,8
1010d240:	f800283a 	ret

1010d244 <__copybits>:
1010d244:	297fffc4 	addi	r5,r5,-1
1010d248:	280fd17a 	srai	r7,r5,5
1010d24c:	30c00417 	ldw	r3,16(r6)
1010d250:	30800504 	addi	r2,r6,20
1010d254:	39c00044 	addi	r7,r7,1
1010d258:	18c7883a 	add	r3,r3,r3
1010d25c:	39cf883a 	add	r7,r7,r7
1010d260:	18c7883a 	add	r3,r3,r3
1010d264:	39cf883a 	add	r7,r7,r7
1010d268:	10c7883a 	add	r3,r2,r3
1010d26c:	21cf883a 	add	r7,r4,r7
1010d270:	10c00d2e 	bgeu	r2,r3,1010d2a8 <__copybits+0x64>
1010d274:	200b883a 	mov	r5,r4
1010d278:	12000017 	ldw	r8,0(r2)
1010d27c:	29400104 	addi	r5,r5,4
1010d280:	10800104 	addi	r2,r2,4
1010d284:	2a3fff15 	stw	r8,-4(r5)
1010d288:	10fffb36 	bltu	r2,r3,1010d278 <_gp+0xfffebce8>
1010d28c:	1985c83a 	sub	r2,r3,r6
1010d290:	10bffac4 	addi	r2,r2,-21
1010d294:	1004d0ba 	srli	r2,r2,2
1010d298:	10800044 	addi	r2,r2,1
1010d29c:	1085883a 	add	r2,r2,r2
1010d2a0:	1085883a 	add	r2,r2,r2
1010d2a4:	2089883a 	add	r4,r4,r2
1010d2a8:	21c0032e 	bgeu	r4,r7,1010d2b8 <__copybits+0x74>
1010d2ac:	20000015 	stw	zero,0(r4)
1010d2b0:	21000104 	addi	r4,r4,4
1010d2b4:	21fffd36 	bltu	r4,r7,1010d2ac <_gp+0xfffebd1c>
1010d2b8:	f800283a 	ret

1010d2bc <__any_on>:
1010d2bc:	20c00417 	ldw	r3,16(r4)
1010d2c0:	2805d17a 	srai	r2,r5,5
1010d2c4:	21000504 	addi	r4,r4,20
1010d2c8:	18800d0e 	bge	r3,r2,1010d300 <__any_on+0x44>
1010d2cc:	18c7883a 	add	r3,r3,r3
1010d2d0:	18c7883a 	add	r3,r3,r3
1010d2d4:	20c7883a 	add	r3,r4,r3
1010d2d8:	20c0192e 	bgeu	r4,r3,1010d340 <__any_on+0x84>
1010d2dc:	18bfff17 	ldw	r2,-4(r3)
1010d2e0:	18ffff04 	addi	r3,r3,-4
1010d2e4:	1000041e 	bne	r2,zero,1010d2f8 <__any_on+0x3c>
1010d2e8:	20c0142e 	bgeu	r4,r3,1010d33c <__any_on+0x80>
1010d2ec:	18ffff04 	addi	r3,r3,-4
1010d2f0:	19400017 	ldw	r5,0(r3)
1010d2f4:	283ffc26 	beq	r5,zero,1010d2e8 <_gp+0xfffebd58>
1010d2f8:	00800044 	movi	r2,1
1010d2fc:	f800283a 	ret
1010d300:	10c00a0e 	bge	r2,r3,1010d32c <__any_on+0x70>
1010d304:	1085883a 	add	r2,r2,r2
1010d308:	1085883a 	add	r2,r2,r2
1010d30c:	294007cc 	andi	r5,r5,31
1010d310:	2087883a 	add	r3,r4,r2
1010d314:	283ff026 	beq	r5,zero,1010d2d8 <_gp+0xfffebd48>
1010d318:	19800017 	ldw	r6,0(r3)
1010d31c:	3144d83a 	srl	r2,r6,r5
1010d320:	114a983a 	sll	r5,r2,r5
1010d324:	317ff41e 	bne	r6,r5,1010d2f8 <_gp+0xfffebd68>
1010d328:	003feb06 	br	1010d2d8 <_gp+0xfffebd48>
1010d32c:	1085883a 	add	r2,r2,r2
1010d330:	1085883a 	add	r2,r2,r2
1010d334:	2087883a 	add	r3,r4,r2
1010d338:	003fe706 	br	1010d2d8 <_gp+0xfffebd48>
1010d33c:	f800283a 	ret
1010d340:	0005883a 	mov	r2,zero
1010d344:	f800283a 	ret

1010d348 <_read_r>:
1010d348:	defffd04 	addi	sp,sp,-12
1010d34c:	2805883a 	mov	r2,r5
1010d350:	dc000015 	stw	r16,0(sp)
1010d354:	040404b4 	movhi	r16,4114
1010d358:	dc400115 	stw	r17,4(sp)
1010d35c:	300b883a 	mov	r5,r6
1010d360:	842c5e04 	addi	r16,r16,-20104
1010d364:	2023883a 	mov	r17,r4
1010d368:	380d883a 	mov	r6,r7
1010d36c:	1009883a 	mov	r4,r2
1010d370:	dfc00215 	stw	ra,8(sp)
1010d374:	80000015 	stw	zero,0(r16)
1010d378:	0114da80 	call	10114da8 <read>
1010d37c:	00ffffc4 	movi	r3,-1
1010d380:	10c00526 	beq	r2,r3,1010d398 <_read_r+0x50>
1010d384:	dfc00217 	ldw	ra,8(sp)
1010d388:	dc400117 	ldw	r17,4(sp)
1010d38c:	dc000017 	ldw	r16,0(sp)
1010d390:	dec00304 	addi	sp,sp,12
1010d394:	f800283a 	ret
1010d398:	80c00017 	ldw	r3,0(r16)
1010d39c:	183ff926 	beq	r3,zero,1010d384 <_gp+0xfffebdf4>
1010d3a0:	88c00015 	stw	r3,0(r17)
1010d3a4:	003ff706 	br	1010d384 <_gp+0xfffebdf4>

1010d3a8 <_realloc_r>:
1010d3a8:	defff604 	addi	sp,sp,-40
1010d3ac:	dc800215 	stw	r18,8(sp)
1010d3b0:	dfc00915 	stw	ra,36(sp)
1010d3b4:	df000815 	stw	fp,32(sp)
1010d3b8:	ddc00715 	stw	r23,28(sp)
1010d3bc:	dd800615 	stw	r22,24(sp)
1010d3c0:	dd400515 	stw	r21,20(sp)
1010d3c4:	dd000415 	stw	r20,16(sp)
1010d3c8:	dcc00315 	stw	r19,12(sp)
1010d3cc:	dc400115 	stw	r17,4(sp)
1010d3d0:	dc000015 	stw	r16,0(sp)
1010d3d4:	3025883a 	mov	r18,r6
1010d3d8:	2800b726 	beq	r5,zero,1010d6b8 <_realloc_r+0x310>
1010d3dc:	282b883a 	mov	r21,r5
1010d3e0:	2029883a 	mov	r20,r4
1010d3e4:	01148680 	call	10114868 <__malloc_lock>
1010d3e8:	a8bfff17 	ldw	r2,-4(r21)
1010d3ec:	043fff04 	movi	r16,-4
1010d3f0:	90c002c4 	addi	r3,r18,11
1010d3f4:	01000584 	movi	r4,22
1010d3f8:	acfffe04 	addi	r19,r21,-8
1010d3fc:	1420703a 	and	r16,r2,r16
1010d400:	20c0332e 	bgeu	r4,r3,1010d4d0 <_realloc_r+0x128>
1010d404:	047ffe04 	movi	r17,-8
1010d408:	1c62703a 	and	r17,r3,r17
1010d40c:	8807883a 	mov	r3,r17
1010d410:	88005816 	blt	r17,zero,1010d574 <_realloc_r+0x1cc>
1010d414:	8c805736 	bltu	r17,r18,1010d574 <_realloc_r+0x1cc>
1010d418:	80c0300e 	bge	r16,r3,1010d4dc <_realloc_r+0x134>
1010d41c:	07040474 	movhi	fp,4113
1010d420:	e71fb804 	addi	fp,fp,32480
1010d424:	e1c00217 	ldw	r7,8(fp)
1010d428:	9c09883a 	add	r4,r19,r16
1010d42c:	22000117 	ldw	r8,4(r4)
1010d430:	21c06326 	beq	r4,r7,1010d5c0 <_realloc_r+0x218>
1010d434:	017fff84 	movi	r5,-2
1010d438:	414a703a 	and	r5,r8,r5
1010d43c:	214b883a 	add	r5,r4,r5
1010d440:	29800117 	ldw	r6,4(r5)
1010d444:	3180004c 	andi	r6,r6,1
1010d448:	30003f26 	beq	r6,zero,1010d548 <_realloc_r+0x1a0>
1010d44c:	1080004c 	andi	r2,r2,1
1010d450:	10008326 	beq	r2,zero,1010d660 <_realloc_r+0x2b8>
1010d454:	900b883a 	mov	r5,r18
1010d458:	a009883a 	mov	r4,r20
1010d45c:	010488c0 	call	1010488c <_malloc_r>
1010d460:	1025883a 	mov	r18,r2
1010d464:	10011e26 	beq	r2,zero,1010d8e0 <_realloc_r+0x538>
1010d468:	a93fff17 	ldw	r4,-4(r21)
1010d46c:	10fffe04 	addi	r3,r2,-8
1010d470:	00bfff84 	movi	r2,-2
1010d474:	2084703a 	and	r2,r4,r2
1010d478:	9885883a 	add	r2,r19,r2
1010d47c:	1880ee26 	beq	r3,r2,1010d838 <_realloc_r+0x490>
1010d480:	81bfff04 	addi	r6,r16,-4
1010d484:	00800904 	movi	r2,36
1010d488:	1180b836 	bltu	r2,r6,1010d76c <_realloc_r+0x3c4>
1010d48c:	00c004c4 	movi	r3,19
1010d490:	19809636 	bltu	r3,r6,1010d6ec <_realloc_r+0x344>
1010d494:	9005883a 	mov	r2,r18
1010d498:	a807883a 	mov	r3,r21
1010d49c:	19000017 	ldw	r4,0(r3)
1010d4a0:	11000015 	stw	r4,0(r2)
1010d4a4:	19000117 	ldw	r4,4(r3)
1010d4a8:	11000115 	stw	r4,4(r2)
1010d4ac:	18c00217 	ldw	r3,8(r3)
1010d4b0:	10c00215 	stw	r3,8(r2)
1010d4b4:	a80b883a 	mov	r5,r21
1010d4b8:	a009883a 	mov	r4,r20
1010d4bc:	0103c5c0 	call	10103c5c <_free_r>
1010d4c0:	a009883a 	mov	r4,r20
1010d4c4:	011488c0 	call	1011488c <__malloc_unlock>
1010d4c8:	9005883a 	mov	r2,r18
1010d4cc:	00001206 	br	1010d518 <_realloc_r+0x170>
1010d4d0:	00c00404 	movi	r3,16
1010d4d4:	1823883a 	mov	r17,r3
1010d4d8:	003fce06 	br	1010d414 <_gp+0xfffebe84>
1010d4dc:	a825883a 	mov	r18,r21
1010d4e0:	8445c83a 	sub	r2,r16,r17
1010d4e4:	00c003c4 	movi	r3,15
1010d4e8:	18802636 	bltu	r3,r2,1010d584 <_realloc_r+0x1dc>
1010d4ec:	99800117 	ldw	r6,4(r19)
1010d4f0:	9c07883a 	add	r3,r19,r16
1010d4f4:	3180004c 	andi	r6,r6,1
1010d4f8:	3420b03a 	or	r16,r6,r16
1010d4fc:	9c000115 	stw	r16,4(r19)
1010d500:	18800117 	ldw	r2,4(r3)
1010d504:	10800054 	ori	r2,r2,1
1010d508:	18800115 	stw	r2,4(r3)
1010d50c:	a009883a 	mov	r4,r20
1010d510:	011488c0 	call	1011488c <__malloc_unlock>
1010d514:	9005883a 	mov	r2,r18
1010d518:	dfc00917 	ldw	ra,36(sp)
1010d51c:	df000817 	ldw	fp,32(sp)
1010d520:	ddc00717 	ldw	r23,28(sp)
1010d524:	dd800617 	ldw	r22,24(sp)
1010d528:	dd400517 	ldw	r21,20(sp)
1010d52c:	dd000417 	ldw	r20,16(sp)
1010d530:	dcc00317 	ldw	r19,12(sp)
1010d534:	dc800217 	ldw	r18,8(sp)
1010d538:	dc400117 	ldw	r17,4(sp)
1010d53c:	dc000017 	ldw	r16,0(sp)
1010d540:	dec00a04 	addi	sp,sp,40
1010d544:	f800283a 	ret
1010d548:	017fff04 	movi	r5,-4
1010d54c:	414a703a 	and	r5,r8,r5
1010d550:	814d883a 	add	r6,r16,r5
1010d554:	30c01f16 	blt	r6,r3,1010d5d4 <_realloc_r+0x22c>
1010d558:	20800317 	ldw	r2,12(r4)
1010d55c:	20c00217 	ldw	r3,8(r4)
1010d560:	a825883a 	mov	r18,r21
1010d564:	3021883a 	mov	r16,r6
1010d568:	18800315 	stw	r2,12(r3)
1010d56c:	10c00215 	stw	r3,8(r2)
1010d570:	003fdb06 	br	1010d4e0 <_gp+0xfffebf50>
1010d574:	00800304 	movi	r2,12
1010d578:	a0800015 	stw	r2,0(r20)
1010d57c:	0005883a 	mov	r2,zero
1010d580:	003fe506 	br	1010d518 <_gp+0xfffebf88>
1010d584:	98c00117 	ldw	r3,4(r19)
1010d588:	9c4b883a 	add	r5,r19,r17
1010d58c:	11000054 	ori	r4,r2,1
1010d590:	18c0004c 	andi	r3,r3,1
1010d594:	1c62b03a 	or	r17,r3,r17
1010d598:	9c400115 	stw	r17,4(r19)
1010d59c:	29000115 	stw	r4,4(r5)
1010d5a0:	2885883a 	add	r2,r5,r2
1010d5a4:	10c00117 	ldw	r3,4(r2)
1010d5a8:	29400204 	addi	r5,r5,8
1010d5ac:	a009883a 	mov	r4,r20
1010d5b0:	18c00054 	ori	r3,r3,1
1010d5b4:	10c00115 	stw	r3,4(r2)
1010d5b8:	0103c5c0 	call	10103c5c <_free_r>
1010d5bc:	003fd306 	br	1010d50c <_gp+0xfffebf7c>
1010d5c0:	017fff04 	movi	r5,-4
1010d5c4:	414a703a 	and	r5,r8,r5
1010d5c8:	89800404 	addi	r6,r17,16
1010d5cc:	8151883a 	add	r8,r16,r5
1010d5d0:	4180590e 	bge	r8,r6,1010d738 <_realloc_r+0x390>
1010d5d4:	1080004c 	andi	r2,r2,1
1010d5d8:	103f9e1e 	bne	r2,zero,1010d454 <_gp+0xfffebec4>
1010d5dc:	adbffe17 	ldw	r22,-8(r21)
1010d5e0:	00bfff04 	movi	r2,-4
1010d5e4:	9dadc83a 	sub	r22,r19,r22
1010d5e8:	b1800117 	ldw	r6,4(r22)
1010d5ec:	3084703a 	and	r2,r6,r2
1010d5f0:	20002026 	beq	r4,zero,1010d674 <_realloc_r+0x2cc>
1010d5f4:	80af883a 	add	r23,r16,r2
1010d5f8:	b96f883a 	add	r23,r23,r5
1010d5fc:	21c05f26 	beq	r4,r7,1010d77c <_realloc_r+0x3d4>
1010d600:	b8c01c16 	blt	r23,r3,1010d674 <_realloc_r+0x2cc>
1010d604:	20800317 	ldw	r2,12(r4)
1010d608:	20c00217 	ldw	r3,8(r4)
1010d60c:	81bfff04 	addi	r6,r16,-4
1010d610:	01000904 	movi	r4,36
1010d614:	18800315 	stw	r2,12(r3)
1010d618:	10c00215 	stw	r3,8(r2)
1010d61c:	b0c00217 	ldw	r3,8(r22)
1010d620:	b0800317 	ldw	r2,12(r22)
1010d624:	b4800204 	addi	r18,r22,8
1010d628:	18800315 	stw	r2,12(r3)
1010d62c:	10c00215 	stw	r3,8(r2)
1010d630:	21801b36 	bltu	r4,r6,1010d6a0 <_realloc_r+0x2f8>
1010d634:	008004c4 	movi	r2,19
1010d638:	1180352e 	bgeu	r2,r6,1010d710 <_realloc_r+0x368>
1010d63c:	a8800017 	ldw	r2,0(r21)
1010d640:	b0800215 	stw	r2,8(r22)
1010d644:	a8800117 	ldw	r2,4(r21)
1010d648:	b0800315 	stw	r2,12(r22)
1010d64c:	008006c4 	movi	r2,27
1010d650:	11807f36 	bltu	r2,r6,1010d850 <_realloc_r+0x4a8>
1010d654:	b0800404 	addi	r2,r22,16
1010d658:	ad400204 	addi	r21,r21,8
1010d65c:	00002d06 	br	1010d714 <_realloc_r+0x36c>
1010d660:	adbffe17 	ldw	r22,-8(r21)
1010d664:	00bfff04 	movi	r2,-4
1010d668:	9dadc83a 	sub	r22,r19,r22
1010d66c:	b1000117 	ldw	r4,4(r22)
1010d670:	2084703a 	and	r2,r4,r2
1010d674:	b03f7726 	beq	r22,zero,1010d454 <_gp+0xfffebec4>
1010d678:	80af883a 	add	r23,r16,r2
1010d67c:	b8ff7516 	blt	r23,r3,1010d454 <_gp+0xfffebec4>
1010d680:	b0800317 	ldw	r2,12(r22)
1010d684:	b0c00217 	ldw	r3,8(r22)
1010d688:	81bfff04 	addi	r6,r16,-4
1010d68c:	01000904 	movi	r4,36
1010d690:	18800315 	stw	r2,12(r3)
1010d694:	10c00215 	stw	r3,8(r2)
1010d698:	b4800204 	addi	r18,r22,8
1010d69c:	21bfe52e 	bgeu	r4,r6,1010d634 <_gp+0xfffec0a4>
1010d6a0:	a80b883a 	mov	r5,r21
1010d6a4:	9009883a 	mov	r4,r18
1010d6a8:	010c1f00 	call	1010c1f0 <memmove>
1010d6ac:	b821883a 	mov	r16,r23
1010d6b0:	b027883a 	mov	r19,r22
1010d6b4:	003f8a06 	br	1010d4e0 <_gp+0xfffebf50>
1010d6b8:	300b883a 	mov	r5,r6
1010d6bc:	dfc00917 	ldw	ra,36(sp)
1010d6c0:	df000817 	ldw	fp,32(sp)
1010d6c4:	ddc00717 	ldw	r23,28(sp)
1010d6c8:	dd800617 	ldw	r22,24(sp)
1010d6cc:	dd400517 	ldw	r21,20(sp)
1010d6d0:	dd000417 	ldw	r20,16(sp)
1010d6d4:	dcc00317 	ldw	r19,12(sp)
1010d6d8:	dc800217 	ldw	r18,8(sp)
1010d6dc:	dc400117 	ldw	r17,4(sp)
1010d6e0:	dc000017 	ldw	r16,0(sp)
1010d6e4:	dec00a04 	addi	sp,sp,40
1010d6e8:	010488c1 	jmpi	1010488c <_malloc_r>
1010d6ec:	a8c00017 	ldw	r3,0(r21)
1010d6f0:	90c00015 	stw	r3,0(r18)
1010d6f4:	a8c00117 	ldw	r3,4(r21)
1010d6f8:	90c00115 	stw	r3,4(r18)
1010d6fc:	00c006c4 	movi	r3,27
1010d700:	19804536 	bltu	r3,r6,1010d818 <_realloc_r+0x470>
1010d704:	90800204 	addi	r2,r18,8
1010d708:	a8c00204 	addi	r3,r21,8
1010d70c:	003f6306 	br	1010d49c <_gp+0xfffebf0c>
1010d710:	9005883a 	mov	r2,r18
1010d714:	a8c00017 	ldw	r3,0(r21)
1010d718:	b821883a 	mov	r16,r23
1010d71c:	b027883a 	mov	r19,r22
1010d720:	10c00015 	stw	r3,0(r2)
1010d724:	a8c00117 	ldw	r3,4(r21)
1010d728:	10c00115 	stw	r3,4(r2)
1010d72c:	a8c00217 	ldw	r3,8(r21)
1010d730:	10c00215 	stw	r3,8(r2)
1010d734:	003f6a06 	br	1010d4e0 <_gp+0xfffebf50>
1010d738:	9c67883a 	add	r19,r19,r17
1010d73c:	4445c83a 	sub	r2,r8,r17
1010d740:	e4c00215 	stw	r19,8(fp)
1010d744:	10800054 	ori	r2,r2,1
1010d748:	98800115 	stw	r2,4(r19)
1010d74c:	a8bfff17 	ldw	r2,-4(r21)
1010d750:	a009883a 	mov	r4,r20
1010d754:	1080004c 	andi	r2,r2,1
1010d758:	1462b03a 	or	r17,r2,r17
1010d75c:	ac7fff15 	stw	r17,-4(r21)
1010d760:	011488c0 	call	1011488c <__malloc_unlock>
1010d764:	a805883a 	mov	r2,r21
1010d768:	003f6b06 	br	1010d518 <_gp+0xfffebf88>
1010d76c:	a80b883a 	mov	r5,r21
1010d770:	9009883a 	mov	r4,r18
1010d774:	010c1f00 	call	1010c1f0 <memmove>
1010d778:	003f4e06 	br	1010d4b4 <_gp+0xfffebf24>
1010d77c:	89000404 	addi	r4,r17,16
1010d780:	b93fbc16 	blt	r23,r4,1010d674 <_gp+0xfffec0e4>
1010d784:	b0800317 	ldw	r2,12(r22)
1010d788:	b0c00217 	ldw	r3,8(r22)
1010d78c:	81bfff04 	addi	r6,r16,-4
1010d790:	01000904 	movi	r4,36
1010d794:	18800315 	stw	r2,12(r3)
1010d798:	10c00215 	stw	r3,8(r2)
1010d79c:	b4800204 	addi	r18,r22,8
1010d7a0:	21804336 	bltu	r4,r6,1010d8b0 <_realloc_r+0x508>
1010d7a4:	008004c4 	movi	r2,19
1010d7a8:	11803f2e 	bgeu	r2,r6,1010d8a8 <_realloc_r+0x500>
1010d7ac:	a8800017 	ldw	r2,0(r21)
1010d7b0:	b0800215 	stw	r2,8(r22)
1010d7b4:	a8800117 	ldw	r2,4(r21)
1010d7b8:	b0800315 	stw	r2,12(r22)
1010d7bc:	008006c4 	movi	r2,27
1010d7c0:	11803f36 	bltu	r2,r6,1010d8c0 <_realloc_r+0x518>
1010d7c4:	b0800404 	addi	r2,r22,16
1010d7c8:	ad400204 	addi	r21,r21,8
1010d7cc:	a8c00017 	ldw	r3,0(r21)
1010d7d0:	10c00015 	stw	r3,0(r2)
1010d7d4:	a8c00117 	ldw	r3,4(r21)
1010d7d8:	10c00115 	stw	r3,4(r2)
1010d7dc:	a8c00217 	ldw	r3,8(r21)
1010d7e0:	10c00215 	stw	r3,8(r2)
1010d7e4:	b447883a 	add	r3,r22,r17
1010d7e8:	bc45c83a 	sub	r2,r23,r17
1010d7ec:	e0c00215 	stw	r3,8(fp)
1010d7f0:	10800054 	ori	r2,r2,1
1010d7f4:	18800115 	stw	r2,4(r3)
1010d7f8:	b0800117 	ldw	r2,4(r22)
1010d7fc:	a009883a 	mov	r4,r20
1010d800:	1080004c 	andi	r2,r2,1
1010d804:	1462b03a 	or	r17,r2,r17
1010d808:	b4400115 	stw	r17,4(r22)
1010d80c:	011488c0 	call	1011488c <__malloc_unlock>
1010d810:	9005883a 	mov	r2,r18
1010d814:	003f4006 	br	1010d518 <_gp+0xfffebf88>
1010d818:	a8c00217 	ldw	r3,8(r21)
1010d81c:	90c00215 	stw	r3,8(r18)
1010d820:	a8c00317 	ldw	r3,12(r21)
1010d824:	90c00315 	stw	r3,12(r18)
1010d828:	30801126 	beq	r6,r2,1010d870 <_realloc_r+0x4c8>
1010d82c:	90800404 	addi	r2,r18,16
1010d830:	a8c00404 	addi	r3,r21,16
1010d834:	003f1906 	br	1010d49c <_gp+0xfffebf0c>
1010d838:	90ffff17 	ldw	r3,-4(r18)
1010d83c:	00bfff04 	movi	r2,-4
1010d840:	a825883a 	mov	r18,r21
1010d844:	1884703a 	and	r2,r3,r2
1010d848:	80a1883a 	add	r16,r16,r2
1010d84c:	003f2406 	br	1010d4e0 <_gp+0xfffebf50>
1010d850:	a8800217 	ldw	r2,8(r21)
1010d854:	b0800415 	stw	r2,16(r22)
1010d858:	a8800317 	ldw	r2,12(r21)
1010d85c:	b0800515 	stw	r2,20(r22)
1010d860:	31000a26 	beq	r6,r4,1010d88c <_realloc_r+0x4e4>
1010d864:	b0800604 	addi	r2,r22,24
1010d868:	ad400404 	addi	r21,r21,16
1010d86c:	003fa906 	br	1010d714 <_gp+0xfffec184>
1010d870:	a9000417 	ldw	r4,16(r21)
1010d874:	90800604 	addi	r2,r18,24
1010d878:	a8c00604 	addi	r3,r21,24
1010d87c:	91000415 	stw	r4,16(r18)
1010d880:	a9000517 	ldw	r4,20(r21)
1010d884:	91000515 	stw	r4,20(r18)
1010d888:	003f0406 	br	1010d49c <_gp+0xfffebf0c>
1010d88c:	a8c00417 	ldw	r3,16(r21)
1010d890:	ad400604 	addi	r21,r21,24
1010d894:	b0800804 	addi	r2,r22,32
1010d898:	b0c00615 	stw	r3,24(r22)
1010d89c:	a8ffff17 	ldw	r3,-4(r21)
1010d8a0:	b0c00715 	stw	r3,28(r22)
1010d8a4:	003f9b06 	br	1010d714 <_gp+0xfffec184>
1010d8a8:	9005883a 	mov	r2,r18
1010d8ac:	003fc706 	br	1010d7cc <_gp+0xfffec23c>
1010d8b0:	a80b883a 	mov	r5,r21
1010d8b4:	9009883a 	mov	r4,r18
1010d8b8:	010c1f00 	call	1010c1f0 <memmove>
1010d8bc:	003fc906 	br	1010d7e4 <_gp+0xfffec254>
1010d8c0:	a8800217 	ldw	r2,8(r21)
1010d8c4:	b0800415 	stw	r2,16(r22)
1010d8c8:	a8800317 	ldw	r2,12(r21)
1010d8cc:	b0800515 	stw	r2,20(r22)
1010d8d0:	31000726 	beq	r6,r4,1010d8f0 <_realloc_r+0x548>
1010d8d4:	b0800604 	addi	r2,r22,24
1010d8d8:	ad400404 	addi	r21,r21,16
1010d8dc:	003fbb06 	br	1010d7cc <_gp+0xfffec23c>
1010d8e0:	a009883a 	mov	r4,r20
1010d8e4:	011488c0 	call	1011488c <__malloc_unlock>
1010d8e8:	0005883a 	mov	r2,zero
1010d8ec:	003f0a06 	br	1010d518 <_gp+0xfffebf88>
1010d8f0:	a8c00417 	ldw	r3,16(r21)
1010d8f4:	ad400604 	addi	r21,r21,24
1010d8f8:	b0800804 	addi	r2,r22,32
1010d8fc:	b0c00615 	stw	r3,24(r22)
1010d900:	a8ffff17 	ldw	r3,-4(r21)
1010d904:	b0c00715 	stw	r3,28(r22)
1010d908:	003fb006 	br	1010d7cc <_gp+0xfffec23c>

1010d90c <__fpclassifyd>:
1010d90c:	00a00034 	movhi	r2,32768
1010d910:	10bfffc4 	addi	r2,r2,-1
1010d914:	2884703a 	and	r2,r5,r2
1010d918:	10000726 	beq	r2,zero,1010d938 <__fpclassifyd+0x2c>
1010d91c:	00fffc34 	movhi	r3,65520
1010d920:	019ff834 	movhi	r6,32736
1010d924:	28c7883a 	add	r3,r5,r3
1010d928:	31bfffc4 	addi	r6,r6,-1
1010d92c:	30c00536 	bltu	r6,r3,1010d944 <__fpclassifyd+0x38>
1010d930:	00800104 	movi	r2,4
1010d934:	f800283a 	ret
1010d938:	2000021e 	bne	r4,zero,1010d944 <__fpclassifyd+0x38>
1010d93c:	00800084 	movi	r2,2
1010d940:	f800283a 	ret
1010d944:	00dffc34 	movhi	r3,32752
1010d948:	019ff834 	movhi	r6,32736
1010d94c:	28cb883a 	add	r5,r5,r3
1010d950:	31bfffc4 	addi	r6,r6,-1
1010d954:	317ff62e 	bgeu	r6,r5,1010d930 <_gp+0xfffec3a0>
1010d958:	01400434 	movhi	r5,16
1010d95c:	297fffc4 	addi	r5,r5,-1
1010d960:	28800236 	bltu	r5,r2,1010d96c <__fpclassifyd+0x60>
1010d964:	008000c4 	movi	r2,3
1010d968:	f800283a 	ret
1010d96c:	10c00226 	beq	r2,r3,1010d978 <__fpclassifyd+0x6c>
1010d970:	0005883a 	mov	r2,zero
1010d974:	f800283a 	ret
1010d978:	2005003a 	cmpeq	r2,r4,zero
1010d97c:	f800283a 	ret

1010d980 <_init_signal_r>:
1010d980:	2080b717 	ldw	r2,732(r4)
1010d984:	10000226 	beq	r2,zero,1010d990 <_init_signal_r+0x10>
1010d988:	0005883a 	mov	r2,zero
1010d98c:	f800283a 	ret
1010d990:	defffe04 	addi	sp,sp,-8
1010d994:	01402004 	movi	r5,128
1010d998:	dc000015 	stw	r16,0(sp)
1010d99c:	dfc00115 	stw	ra,4(sp)
1010d9a0:	2021883a 	mov	r16,r4
1010d9a4:	010488c0 	call	1010488c <_malloc_r>
1010d9a8:	8080b715 	stw	r2,732(r16)
1010d9ac:	10000d26 	beq	r2,zero,1010d9e4 <_init_signal_r+0x64>
1010d9b0:	0007883a 	mov	r3,zero
1010d9b4:	01002004 	movi	r4,128
1010d9b8:	00000106 	br	1010d9c0 <_init_signal_r+0x40>
1010d9bc:	8080b717 	ldw	r2,732(r16)
1010d9c0:	10c5883a 	add	r2,r2,r3
1010d9c4:	10000015 	stw	zero,0(r2)
1010d9c8:	18c00104 	addi	r3,r3,4
1010d9cc:	193ffb1e 	bne	r3,r4,1010d9bc <_gp+0xfffec42c>
1010d9d0:	0005883a 	mov	r2,zero
1010d9d4:	dfc00117 	ldw	ra,4(sp)
1010d9d8:	dc000017 	ldw	r16,0(sp)
1010d9dc:	dec00204 	addi	sp,sp,8
1010d9e0:	f800283a 	ret
1010d9e4:	00bfffc4 	movi	r2,-1
1010d9e8:	003ffa06 	br	1010d9d4 <_gp+0xfffec444>

1010d9ec <_signal_r>:
1010d9ec:	00c007c4 	movi	r3,31
1010d9f0:	19401536 	bltu	r3,r5,1010da48 <_signal_r+0x5c>
1010d9f4:	2080b717 	ldw	r2,732(r4)
1010d9f8:	defffc04 	addi	sp,sp,-16
1010d9fc:	dc800215 	stw	r18,8(sp)
1010da00:	dc400115 	stw	r17,4(sp)
1010da04:	dc000015 	stw	r16,0(sp)
1010da08:	dfc00315 	stw	ra,12(sp)
1010da0c:	3023883a 	mov	r17,r6
1010da10:	2021883a 	mov	r16,r4
1010da14:	2825883a 	mov	r18,r5
1010da18:	10000f26 	beq	r2,zero,1010da58 <_signal_r+0x6c>
1010da1c:	948b883a 	add	r5,r18,r18
1010da20:	294b883a 	add	r5,r5,r5
1010da24:	114b883a 	add	r5,r2,r5
1010da28:	28800017 	ldw	r2,0(r5)
1010da2c:	2c400015 	stw	r17,0(r5)
1010da30:	dfc00317 	ldw	ra,12(sp)
1010da34:	dc800217 	ldw	r18,8(sp)
1010da38:	dc400117 	ldw	r17,4(sp)
1010da3c:	dc000017 	ldw	r16,0(sp)
1010da40:	dec00404 	addi	sp,sp,16
1010da44:	f800283a 	ret
1010da48:	00c00584 	movi	r3,22
1010da4c:	20c00015 	stw	r3,0(r4)
1010da50:	00bfffc4 	movi	r2,-1
1010da54:	f800283a 	ret
1010da58:	010d9800 	call	1010d980 <_init_signal_r>
1010da5c:	1000021e 	bne	r2,zero,1010da68 <_signal_r+0x7c>
1010da60:	8080b717 	ldw	r2,732(r16)
1010da64:	003fed06 	br	1010da1c <_gp+0xfffec48c>
1010da68:	00bfffc4 	movi	r2,-1
1010da6c:	003ff006 	br	1010da30 <_gp+0xfffec4a0>

1010da70 <_raise_r>:
1010da70:	008007c4 	movi	r2,31
1010da74:	11402936 	bltu	r2,r5,1010db1c <_raise_r+0xac>
1010da78:	20c0b717 	ldw	r3,732(r4)
1010da7c:	defffd04 	addi	sp,sp,-12
1010da80:	dc400115 	stw	r17,4(sp)
1010da84:	dc000015 	stw	r16,0(sp)
1010da88:	dfc00215 	stw	ra,8(sp)
1010da8c:	2021883a 	mov	r16,r4
1010da90:	2823883a 	mov	r17,r5
1010da94:	18001726 	beq	r3,zero,1010daf4 <_raise_r+0x84>
1010da98:	2945883a 	add	r2,r5,r5
1010da9c:	1085883a 	add	r2,r2,r2
1010daa0:	1887883a 	add	r3,r3,r2
1010daa4:	19800017 	ldw	r6,0(r3)
1010daa8:	30001226 	beq	r6,zero,1010daf4 <_raise_r+0x84>
1010daac:	00800044 	movi	r2,1
1010dab0:	30800e26 	beq	r6,r2,1010daec <_raise_r+0x7c>
1010dab4:	013fffc4 	movi	r4,-1
1010dab8:	31000926 	beq	r6,r4,1010dae0 <_raise_r+0x70>
1010dabc:	18000015 	stw	zero,0(r3)
1010dac0:	2809883a 	mov	r4,r5
1010dac4:	303ee83a 	callr	r6
1010dac8:	0005883a 	mov	r2,zero
1010dacc:	dfc00217 	ldw	ra,8(sp)
1010dad0:	dc400117 	ldw	r17,4(sp)
1010dad4:	dc000017 	ldw	r16,0(sp)
1010dad8:	dec00304 	addi	sp,sp,12
1010dadc:	f800283a 	ret
1010dae0:	00c00584 	movi	r3,22
1010dae4:	80c00015 	stw	r3,0(r16)
1010dae8:	003ff806 	br	1010dacc <_gp+0xfffec53c>
1010daec:	0005883a 	mov	r2,zero
1010daf0:	003ff606 	br	1010dacc <_gp+0xfffec53c>
1010daf4:	8009883a 	mov	r4,r16
1010daf8:	010dc800 	call	1010dc80 <_getpid_r>
1010dafc:	880d883a 	mov	r6,r17
1010db00:	100b883a 	mov	r5,r2
1010db04:	8009883a 	mov	r4,r16
1010db08:	dfc00217 	ldw	ra,8(sp)
1010db0c:	dc400117 	ldw	r17,4(sp)
1010db10:	dc000017 	ldw	r16,0(sp)
1010db14:	dec00304 	addi	sp,sp,12
1010db18:	010dc241 	jmpi	1010dc24 <_kill_r>
1010db1c:	00800584 	movi	r2,22
1010db20:	20800015 	stw	r2,0(r4)
1010db24:	00bfffc4 	movi	r2,-1
1010db28:	f800283a 	ret

1010db2c <__sigtramp_r>:
1010db2c:	008007c4 	movi	r2,31
1010db30:	11402436 	bltu	r2,r5,1010dbc4 <__sigtramp_r+0x98>
1010db34:	20c0b717 	ldw	r3,732(r4)
1010db38:	defffd04 	addi	sp,sp,-12
1010db3c:	dc400115 	stw	r17,4(sp)
1010db40:	dc000015 	stw	r16,0(sp)
1010db44:	dfc00215 	stw	ra,8(sp)
1010db48:	2021883a 	mov	r16,r4
1010db4c:	2823883a 	mov	r17,r5
1010db50:	18001826 	beq	r3,zero,1010dbb4 <__sigtramp_r+0x88>
1010db54:	8c45883a 	add	r2,r17,r17
1010db58:	1085883a 	add	r2,r2,r2
1010db5c:	1885883a 	add	r2,r3,r2
1010db60:	10c00017 	ldw	r3,0(r2)
1010db64:	18001126 	beq	r3,zero,1010dbac <__sigtramp_r+0x80>
1010db68:	013fffc4 	movi	r4,-1
1010db6c:	19000d26 	beq	r3,r4,1010dba4 <__sigtramp_r+0x78>
1010db70:	01000044 	movi	r4,1
1010db74:	19000926 	beq	r3,r4,1010db9c <__sigtramp_r+0x70>
1010db78:	10000015 	stw	zero,0(r2)
1010db7c:	8809883a 	mov	r4,r17
1010db80:	183ee83a 	callr	r3
1010db84:	0005883a 	mov	r2,zero
1010db88:	dfc00217 	ldw	ra,8(sp)
1010db8c:	dc400117 	ldw	r17,4(sp)
1010db90:	dc000017 	ldw	r16,0(sp)
1010db94:	dec00304 	addi	sp,sp,12
1010db98:	f800283a 	ret
1010db9c:	008000c4 	movi	r2,3
1010dba0:	003ff906 	br	1010db88 <_gp+0xfffec5f8>
1010dba4:	00800084 	movi	r2,2
1010dba8:	003ff706 	br	1010db88 <_gp+0xfffec5f8>
1010dbac:	00800044 	movi	r2,1
1010dbb0:	003ff506 	br	1010db88 <_gp+0xfffec5f8>
1010dbb4:	010d9800 	call	1010d980 <_init_signal_r>
1010dbb8:	1000041e 	bne	r2,zero,1010dbcc <__sigtramp_r+0xa0>
1010dbbc:	80c0b717 	ldw	r3,732(r16)
1010dbc0:	003fe406 	br	1010db54 <_gp+0xfffec5c4>
1010dbc4:	00bfffc4 	movi	r2,-1
1010dbc8:	f800283a 	ret
1010dbcc:	00bfffc4 	movi	r2,-1
1010dbd0:	003fed06 	br	1010db88 <_gp+0xfffec5f8>

1010dbd4 <raise>:
1010dbd4:	008404b4 	movhi	r2,4114
1010dbd8:	10a56504 	addi	r2,r2,-27244
1010dbdc:	200b883a 	mov	r5,r4
1010dbe0:	11000017 	ldw	r4,0(r2)
1010dbe4:	010da701 	jmpi	1010da70 <_raise_r>

1010dbe8 <signal>:
1010dbe8:	008404b4 	movhi	r2,4114
1010dbec:	10a56504 	addi	r2,r2,-27244
1010dbf0:	280d883a 	mov	r6,r5
1010dbf4:	200b883a 	mov	r5,r4
1010dbf8:	11000017 	ldw	r4,0(r2)
1010dbfc:	010d9ec1 	jmpi	1010d9ec <_signal_r>

1010dc00 <_init_signal>:
1010dc00:	008404b4 	movhi	r2,4114
1010dc04:	10a56504 	addi	r2,r2,-27244
1010dc08:	11000017 	ldw	r4,0(r2)
1010dc0c:	010d9801 	jmpi	1010d980 <_init_signal_r>

1010dc10 <__sigtramp>:
1010dc10:	008404b4 	movhi	r2,4114
1010dc14:	10a56504 	addi	r2,r2,-27244
1010dc18:	200b883a 	mov	r5,r4
1010dc1c:	11000017 	ldw	r4,0(r2)
1010dc20:	010db2c1 	jmpi	1010db2c <__sigtramp_r>

1010dc24 <_kill_r>:
1010dc24:	defffd04 	addi	sp,sp,-12
1010dc28:	2805883a 	mov	r2,r5
1010dc2c:	dc000015 	stw	r16,0(sp)
1010dc30:	040404b4 	movhi	r16,4114
1010dc34:	dc400115 	stw	r17,4(sp)
1010dc38:	842c5e04 	addi	r16,r16,-20104
1010dc3c:	2023883a 	mov	r17,r4
1010dc40:	300b883a 	mov	r5,r6
1010dc44:	1009883a 	mov	r4,r2
1010dc48:	dfc00215 	stw	ra,8(sp)
1010dc4c:	80000015 	stw	zero,0(r16)
1010dc50:	01144c00 	call	101144c0 <kill>
1010dc54:	00ffffc4 	movi	r3,-1
1010dc58:	10c00526 	beq	r2,r3,1010dc70 <_kill_r+0x4c>
1010dc5c:	dfc00217 	ldw	ra,8(sp)
1010dc60:	dc400117 	ldw	r17,4(sp)
1010dc64:	dc000017 	ldw	r16,0(sp)
1010dc68:	dec00304 	addi	sp,sp,12
1010dc6c:	f800283a 	ret
1010dc70:	80c00017 	ldw	r3,0(r16)
1010dc74:	183ff926 	beq	r3,zero,1010dc5c <_gp+0xfffec6cc>
1010dc78:	88c00015 	stw	r3,0(r17)
1010dc7c:	003ff706 	br	1010dc5c <_gp+0xfffec6cc>

1010dc80 <_getpid_r>:
1010dc80:	01141901 	jmpi	10114190 <getpid>

1010dc84 <strcmp>:
1010dc84:	2144b03a 	or	r2,r4,r5
1010dc88:	108000cc 	andi	r2,r2,3
1010dc8c:	1000171e 	bne	r2,zero,1010dcec <strcmp+0x68>
1010dc90:	20800017 	ldw	r2,0(r4)
1010dc94:	28c00017 	ldw	r3,0(r5)
1010dc98:	10c0141e 	bne	r2,r3,1010dcec <strcmp+0x68>
1010dc9c:	027fbff4 	movhi	r9,65279
1010dca0:	4a7fbfc4 	addi	r9,r9,-257
1010dca4:	0086303a 	nor	r3,zero,r2
1010dca8:	02202074 	movhi	r8,32897
1010dcac:	1245883a 	add	r2,r2,r9
1010dcb0:	42202004 	addi	r8,r8,-32640
1010dcb4:	10c4703a 	and	r2,r2,r3
1010dcb8:	1204703a 	and	r2,r2,r8
1010dcbc:	10000226 	beq	r2,zero,1010dcc8 <strcmp+0x44>
1010dcc0:	00002306 	br	1010dd50 <strcmp+0xcc>
1010dcc4:	1000221e 	bne	r2,zero,1010dd50 <strcmp+0xcc>
1010dcc8:	21000104 	addi	r4,r4,4
1010dccc:	20c00017 	ldw	r3,0(r4)
1010dcd0:	29400104 	addi	r5,r5,4
1010dcd4:	29800017 	ldw	r6,0(r5)
1010dcd8:	1a4f883a 	add	r7,r3,r9
1010dcdc:	00c4303a 	nor	r2,zero,r3
1010dce0:	3884703a 	and	r2,r7,r2
1010dce4:	1204703a 	and	r2,r2,r8
1010dce8:	19bff626 	beq	r3,r6,1010dcc4 <_gp+0xfffec734>
1010dcec:	20800003 	ldbu	r2,0(r4)
1010dcf0:	10c03fcc 	andi	r3,r2,255
1010dcf4:	18c0201c 	xori	r3,r3,128
1010dcf8:	18ffe004 	addi	r3,r3,-128
1010dcfc:	18000c26 	beq	r3,zero,1010dd30 <strcmp+0xac>
1010dd00:	29800007 	ldb	r6,0(r5)
1010dd04:	19800326 	beq	r3,r6,1010dd14 <strcmp+0x90>
1010dd08:	00001306 	br	1010dd58 <strcmp+0xd4>
1010dd0c:	29800007 	ldb	r6,0(r5)
1010dd10:	11800b1e 	bne	r2,r6,1010dd40 <strcmp+0xbc>
1010dd14:	21000044 	addi	r4,r4,1
1010dd18:	20c00003 	ldbu	r3,0(r4)
1010dd1c:	29400044 	addi	r5,r5,1
1010dd20:	18803fcc 	andi	r2,r3,255
1010dd24:	1080201c 	xori	r2,r2,128
1010dd28:	10bfe004 	addi	r2,r2,-128
1010dd2c:	103ff71e 	bne	r2,zero,1010dd0c <_gp+0xfffec77c>
1010dd30:	0007883a 	mov	r3,zero
1010dd34:	28800003 	ldbu	r2,0(r5)
1010dd38:	1885c83a 	sub	r2,r3,r2
1010dd3c:	f800283a 	ret
1010dd40:	28800003 	ldbu	r2,0(r5)
1010dd44:	18c03fcc 	andi	r3,r3,255
1010dd48:	1885c83a 	sub	r2,r3,r2
1010dd4c:	f800283a 	ret
1010dd50:	0005883a 	mov	r2,zero
1010dd54:	f800283a 	ret
1010dd58:	10c03fcc 	andi	r3,r2,255
1010dd5c:	003ff506 	br	1010dd34 <_gp+0xfffec7a4>

1010dd60 <__ssprint_r>:
1010dd60:	30800217 	ldw	r2,8(r6)
1010dd64:	defff604 	addi	sp,sp,-40
1010dd68:	dc800215 	stw	r18,8(sp)
1010dd6c:	dfc00915 	stw	ra,36(sp)
1010dd70:	df000815 	stw	fp,32(sp)
1010dd74:	ddc00715 	stw	r23,28(sp)
1010dd78:	dd800615 	stw	r22,24(sp)
1010dd7c:	dd400515 	stw	r21,20(sp)
1010dd80:	dd000415 	stw	r20,16(sp)
1010dd84:	dcc00315 	stw	r19,12(sp)
1010dd88:	dc400115 	stw	r17,4(sp)
1010dd8c:	dc000015 	stw	r16,0(sp)
1010dd90:	3025883a 	mov	r18,r6
1010dd94:	10005826 	beq	r2,zero,1010def8 <__ssprint_r+0x198>
1010dd98:	2027883a 	mov	r19,r4
1010dd9c:	35c00017 	ldw	r23,0(r6)
1010dda0:	29000017 	ldw	r4,0(r5)
1010dda4:	28800217 	ldw	r2,8(r5)
1010dda8:	2823883a 	mov	r17,r5
1010ddac:	0039883a 	mov	fp,zero
1010ddb0:	0021883a 	mov	r16,zero
1010ddb4:	80003926 	beq	r16,zero,1010de9c <__ssprint_r+0x13c>
1010ddb8:	102b883a 	mov	r21,r2
1010ddbc:	102d883a 	mov	r22,r2
1010ddc0:	80803a36 	bltu	r16,r2,1010deac <__ssprint_r+0x14c>
1010ddc4:	88c0030b 	ldhu	r3,12(r17)
1010ddc8:	1881200c 	andi	r2,r3,1152
1010ddcc:	10002626 	beq	r2,zero,1010de68 <__ssprint_r+0x108>
1010ddd0:	88800517 	ldw	r2,20(r17)
1010ddd4:	89400417 	ldw	r5,16(r17)
1010ddd8:	81800044 	addi	r6,r16,1
1010dddc:	108f883a 	add	r7,r2,r2
1010dde0:	3885883a 	add	r2,r7,r2
1010dde4:	100ed7fa 	srli	r7,r2,31
1010dde8:	216dc83a 	sub	r22,r4,r5
1010ddec:	3589883a 	add	r4,r6,r22
1010ddf0:	3885883a 	add	r2,r7,r2
1010ddf4:	102bd07a 	srai	r21,r2,1
1010ddf8:	a80d883a 	mov	r6,r21
1010ddfc:	a900022e 	bgeu	r21,r4,1010de08 <__ssprint_r+0xa8>
1010de00:	202b883a 	mov	r21,r4
1010de04:	200d883a 	mov	r6,r4
1010de08:	18c1000c 	andi	r3,r3,1024
1010de0c:	18002a26 	beq	r3,zero,1010deb8 <__ssprint_r+0x158>
1010de10:	300b883a 	mov	r5,r6
1010de14:	9809883a 	mov	r4,r19
1010de18:	010488c0 	call	1010488c <_malloc_r>
1010de1c:	1029883a 	mov	r20,r2
1010de20:	10002c26 	beq	r2,zero,1010ded4 <__ssprint_r+0x174>
1010de24:	89400417 	ldw	r5,16(r17)
1010de28:	b00d883a 	mov	r6,r22
1010de2c:	1009883a 	mov	r4,r2
1010de30:	010c0a80 	call	1010c0a8 <memcpy>
1010de34:	8880030b 	ldhu	r2,12(r17)
1010de38:	00fedfc4 	movi	r3,-1153
1010de3c:	10c4703a 	and	r2,r2,r3
1010de40:	10802014 	ori	r2,r2,128
1010de44:	8880030d 	sth	r2,12(r17)
1010de48:	a589883a 	add	r4,r20,r22
1010de4c:	adadc83a 	sub	r22,r21,r22
1010de50:	8d400515 	stw	r21,20(r17)
1010de54:	8d800215 	stw	r22,8(r17)
1010de58:	8d000415 	stw	r20,16(r17)
1010de5c:	89000015 	stw	r4,0(r17)
1010de60:	802b883a 	mov	r21,r16
1010de64:	802d883a 	mov	r22,r16
1010de68:	b00d883a 	mov	r6,r22
1010de6c:	e00b883a 	mov	r5,fp
1010de70:	010c1f00 	call	1010c1f0 <memmove>
1010de74:	88800217 	ldw	r2,8(r17)
1010de78:	89000017 	ldw	r4,0(r17)
1010de7c:	90c00217 	ldw	r3,8(r18)
1010de80:	1545c83a 	sub	r2,r2,r21
1010de84:	2589883a 	add	r4,r4,r22
1010de88:	88800215 	stw	r2,8(r17)
1010de8c:	89000015 	stw	r4,0(r17)
1010de90:	1c21c83a 	sub	r16,r3,r16
1010de94:	94000215 	stw	r16,8(r18)
1010de98:	80001726 	beq	r16,zero,1010def8 <__ssprint_r+0x198>
1010de9c:	bf000017 	ldw	fp,0(r23)
1010dea0:	bc000117 	ldw	r16,4(r23)
1010dea4:	bdc00204 	addi	r23,r23,8
1010dea8:	003fc206 	br	1010ddb4 <_gp+0xfffec824>
1010deac:	802b883a 	mov	r21,r16
1010deb0:	802d883a 	mov	r22,r16
1010deb4:	003fec06 	br	1010de68 <_gp+0xfffec8d8>
1010deb8:	9809883a 	mov	r4,r19
1010debc:	010d3a80 	call	1010d3a8 <_realloc_r>
1010dec0:	1029883a 	mov	r20,r2
1010dec4:	103fe01e 	bne	r2,zero,1010de48 <_gp+0xfffec8b8>
1010dec8:	89400417 	ldw	r5,16(r17)
1010decc:	9809883a 	mov	r4,r19
1010ded0:	0103c5c0 	call	10103c5c <_free_r>
1010ded4:	88c0030b 	ldhu	r3,12(r17)
1010ded8:	00800304 	movi	r2,12
1010dedc:	98800015 	stw	r2,0(r19)
1010dee0:	18c01014 	ori	r3,r3,64
1010dee4:	88c0030d 	sth	r3,12(r17)
1010dee8:	00bfffc4 	movi	r2,-1
1010deec:	90000215 	stw	zero,8(r18)
1010def0:	90000115 	stw	zero,4(r18)
1010def4:	00000206 	br	1010df00 <__ssprint_r+0x1a0>
1010def8:	90000115 	stw	zero,4(r18)
1010defc:	0005883a 	mov	r2,zero
1010df00:	dfc00917 	ldw	ra,36(sp)
1010df04:	df000817 	ldw	fp,32(sp)
1010df08:	ddc00717 	ldw	r23,28(sp)
1010df0c:	dd800617 	ldw	r22,24(sp)
1010df10:	dd400517 	ldw	r21,20(sp)
1010df14:	dd000417 	ldw	r20,16(sp)
1010df18:	dcc00317 	ldw	r19,12(sp)
1010df1c:	dc800217 	ldw	r18,8(sp)
1010df20:	dc400117 	ldw	r17,4(sp)
1010df24:	dc000017 	ldw	r16,0(sp)
1010df28:	dec00a04 	addi	sp,sp,40
1010df2c:	f800283a 	ret

1010df30 <___svfiprintf_internal_r>:
1010df30:	2880030b 	ldhu	r2,12(r5)
1010df34:	deffc804 	addi	sp,sp,-224
1010df38:	dcc03115 	stw	r19,196(sp)
1010df3c:	dfc03715 	stw	ra,220(sp)
1010df40:	df003615 	stw	fp,216(sp)
1010df44:	ddc03515 	stw	r23,212(sp)
1010df48:	dd803415 	stw	r22,208(sp)
1010df4c:	dd403315 	stw	r21,204(sp)
1010df50:	dd003215 	stw	r20,200(sp)
1010df54:	dc803015 	stw	r18,192(sp)
1010df58:	dc402f15 	stw	r17,188(sp)
1010df5c:	dc002e15 	stw	r16,184(sp)
1010df60:	d9402715 	stw	r5,156(sp)
1010df64:	d9002a15 	stw	r4,168(sp)
1010df68:	1080200c 	andi	r2,r2,128
1010df6c:	d9c02315 	stw	r7,140(sp)
1010df70:	3027883a 	mov	r19,r6
1010df74:	10000226 	beq	r2,zero,1010df80 <___svfiprintf_internal_r+0x50>
1010df78:	28800417 	ldw	r2,16(r5)
1010df7c:	10041d26 	beq	r2,zero,1010eff4 <___svfiprintf_internal_r+0x10c4>
1010df80:	dac01a04 	addi	r11,sp,104
1010df84:	dac01e15 	stw	r11,120(sp)
1010df88:	d8801e17 	ldw	r2,120(sp)
1010df8c:	dac019c4 	addi	r11,sp,103
1010df90:	dd402a17 	ldw	r21,168(sp)
1010df94:	ddc02717 	ldw	r23,156(sp)
1010df98:	05840474 	movhi	r22,4113
1010df9c:	05040474 	movhi	r20,4113
1010dfa0:	dac01f15 	stw	r11,124(sp)
1010dfa4:	12d7c83a 	sub	r11,r2,r11
1010dfa8:	b59e5304 	addi	r22,r22,31052
1010dfac:	a51e4f04 	addi	r20,r20,31036
1010dfb0:	dec01a15 	stw	sp,104(sp)
1010dfb4:	d8001c15 	stw	zero,112(sp)
1010dfb8:	d8001b15 	stw	zero,108(sp)
1010dfbc:	d811883a 	mov	r8,sp
1010dfc0:	d8002915 	stw	zero,164(sp)
1010dfc4:	d8002515 	stw	zero,148(sp)
1010dfc8:	dac02b15 	stw	r11,172(sp)
1010dfcc:	98800007 	ldb	r2,0(r19)
1010dfd0:	1002dd26 	beq	r2,zero,1010eb48 <___svfiprintf_internal_r+0xc18>
1010dfd4:	00c00944 	movi	r3,37
1010dfd8:	9823883a 	mov	r17,r19
1010dfdc:	10c0021e 	bne	r2,r3,1010dfe8 <___svfiprintf_internal_r+0xb8>
1010dfe0:	00001406 	br	1010e034 <___svfiprintf_internal_r+0x104>
1010dfe4:	10c00326 	beq	r2,r3,1010dff4 <___svfiprintf_internal_r+0xc4>
1010dfe8:	8c400044 	addi	r17,r17,1
1010dfec:	88800007 	ldb	r2,0(r17)
1010dff0:	103ffc1e 	bne	r2,zero,1010dfe4 <_gp+0xfffeca54>
1010dff4:	8ce1c83a 	sub	r16,r17,r19
1010dff8:	80000e26 	beq	r16,zero,1010e034 <___svfiprintf_internal_r+0x104>
1010dffc:	d8c01c17 	ldw	r3,112(sp)
1010e000:	d8801b17 	ldw	r2,108(sp)
1010e004:	44c00015 	stw	r19,0(r8)
1010e008:	1c07883a 	add	r3,r3,r16
1010e00c:	10800044 	addi	r2,r2,1
1010e010:	d8c01c15 	stw	r3,112(sp)
1010e014:	44000115 	stw	r16,4(r8)
1010e018:	d8801b15 	stw	r2,108(sp)
1010e01c:	00c001c4 	movi	r3,7
1010e020:	18831e16 	blt	r3,r2,1010ec9c <___svfiprintf_internal_r+0xd6c>
1010e024:	42000204 	addi	r8,r8,8
1010e028:	dac02517 	ldw	r11,148(sp)
1010e02c:	5c17883a 	add	r11,r11,r16
1010e030:	dac02515 	stw	r11,148(sp)
1010e034:	88800007 	ldb	r2,0(r17)
1010e038:	1002c526 	beq	r2,zero,1010eb50 <___svfiprintf_internal_r+0xc20>
1010e03c:	88c00047 	ldb	r3,1(r17)
1010e040:	8cc00044 	addi	r19,r17,1
1010e044:	d8001d85 	stb	zero,118(sp)
1010e048:	0009883a 	mov	r4,zero
1010e04c:	000f883a 	mov	r7,zero
1010e050:	043fffc4 	movi	r16,-1
1010e054:	d8002415 	stw	zero,144(sp)
1010e058:	0025883a 	mov	r18,zero
1010e05c:	01401604 	movi	r5,88
1010e060:	01800244 	movi	r6,9
1010e064:	02800a84 	movi	r10,42
1010e068:	02401b04 	movi	r9,108
1010e06c:	9cc00044 	addi	r19,r19,1
1010e070:	18bff804 	addi	r2,r3,-32
1010e074:	2881dd36 	bltu	r5,r2,1010e7ec <___svfiprintf_internal_r+0x8bc>
1010e078:	100490ba 	slli	r2,r2,2
1010e07c:	02c40474 	movhi	r11,4113
1010e080:	5af82404 	addi	r11,r11,-8048
1010e084:	12c5883a 	add	r2,r2,r11
1010e088:	10800017 	ldw	r2,0(r2)
1010e08c:	1000683a 	jmp	r2
1010e090:	1010e28c 	andi	zero,r2,17290
1010e094:	1010e7ec 	andhi	zero,r2,17311
1010e098:	1010e7ec 	andhi	zero,r2,17311
1010e09c:	1010e280 	call	11010e28 <_gp+0xeef898>
1010e0a0:	1010e7ec 	andhi	zero,r2,17311
1010e0a4:	1010e7ec 	andhi	zero,r2,17311
1010e0a8:	1010e7ec 	andhi	zero,r2,17311
1010e0ac:	1010e7ec 	andhi	zero,r2,17311
1010e0b0:	1010e7ec 	andhi	zero,r2,17311
1010e0b4:	1010e7ec 	andhi	zero,r2,17311
1010e0b8:	1010e1f4 	orhi	zero,r2,17287
1010e0bc:	1010e3d0 	cmplti	zero,r2,17295
1010e0c0:	1010e7ec 	andhi	zero,r2,17311
1010e0c4:	1010e220 	cmpeqi	zero,r2,17288
1010e0c8:	1010e820 	cmpeqi	zero,r2,17312
1010e0cc:	1010e7ec 	andhi	zero,r2,17311
1010e0d0:	1010e814 	ori	zero,r2,17312
1010e0d4:	1010e7b4 	orhi	zero,r2,17310
1010e0d8:	1010e7b4 	orhi	zero,r2,17310
1010e0dc:	1010e7b4 	orhi	zero,r2,17310
1010e0e0:	1010e7b4 	orhi	zero,r2,17310
1010e0e4:	1010e7b4 	orhi	zero,r2,17310
1010e0e8:	1010e7b4 	orhi	zero,r2,17310
1010e0ec:	1010e7b4 	orhi	zero,r2,17310
1010e0f0:	1010e7b4 	orhi	zero,r2,17310
1010e0f4:	1010e7b4 	orhi	zero,r2,17310
1010e0f8:	1010e7ec 	andhi	zero,r2,17311
1010e0fc:	1010e7ec 	andhi	zero,r2,17311
1010e100:	1010e7ec 	andhi	zero,r2,17311
1010e104:	1010e7ec 	andhi	zero,r2,17311
1010e108:	1010e7ec 	andhi	zero,r2,17311
1010e10c:	1010e7ec 	andhi	zero,r2,17311
1010e110:	1010e7ec 	andhi	zero,r2,17311
1010e114:	1010e7ec 	andhi	zero,r2,17311
1010e118:	1010e7ec 	andhi	zero,r2,17311
1010e11c:	1010e7ec 	andhi	zero,r2,17311
1010e120:	1010e750 	cmplti	zero,r2,17309
1010e124:	1010e7ec 	andhi	zero,r2,17311
1010e128:	1010e7ec 	andhi	zero,r2,17311
1010e12c:	1010e7ec 	andhi	zero,r2,17311
1010e130:	1010e7ec 	andhi	zero,r2,17311
1010e134:	1010e7ec 	andhi	zero,r2,17311
1010e138:	1010e7ec 	andhi	zero,r2,17311
1010e13c:	1010e7ec 	andhi	zero,r2,17311
1010e140:	1010e7ec 	andhi	zero,r2,17311
1010e144:	1010e7ec 	andhi	zero,r2,17311
1010e148:	1010e7ec 	andhi	zero,r2,17311
1010e14c:	1010e8c8 	cmpgei	zero,r2,17315
1010e150:	1010e7ec 	andhi	zero,r2,17311
1010e154:	1010e7ec 	andhi	zero,r2,17311
1010e158:	1010e7ec 	andhi	zero,r2,17311
1010e15c:	1010e7ec 	andhi	zero,r2,17311
1010e160:	1010e7ec 	andhi	zero,r2,17311
1010e164:	1010e860 	cmpeqi	zero,r2,17313
1010e168:	1010e7ec 	andhi	zero,r2,17311
1010e16c:	1010e7ec 	andhi	zero,r2,17311
1010e170:	1010e594 	ori	zero,r2,17302
1010e174:	1010e7ec 	andhi	zero,r2,17311
1010e178:	1010e7ec 	andhi	zero,r2,17311
1010e17c:	1010e7ec 	andhi	zero,r2,17311
1010e180:	1010e7ec 	andhi	zero,r2,17311
1010e184:	1010e7ec 	andhi	zero,r2,17311
1010e188:	1010e7ec 	andhi	zero,r2,17311
1010e18c:	1010e7ec 	andhi	zero,r2,17311
1010e190:	1010e7ec 	andhi	zero,r2,17311
1010e194:	1010e7ec 	andhi	zero,r2,17311
1010e198:	1010e7ec 	andhi	zero,r2,17311
1010e19c:	1010e484 	addi	zero,r2,17298
1010e1a0:	1010e630 	cmpltui	zero,r2,17304
1010e1a4:	1010e7ec 	andhi	zero,r2,17311
1010e1a8:	1010e7ec 	andhi	zero,r2,17311
1010e1ac:	1010e7ec 	andhi	zero,r2,17311
1010e1b0:	1010e624 	muli	zero,r2,17304
1010e1b4:	1010e630 	cmpltui	zero,r2,17304
1010e1b8:	1010e7ec 	andhi	zero,r2,17311
1010e1bc:	1010e7ec 	andhi	zero,r2,17311
1010e1c0:	1010e614 	ori	zero,r2,17304
1010e1c4:	1010e7ec 	andhi	zero,r2,17311
1010e1c8:	1010e5d8 	cmpnei	zero,r2,17303
1010e1cc:	1010e3e0 	cmpeqi	zero,r2,17295
1010e1d0:	1010e22c 	andhi	zero,r2,17288
1010e1d4:	1010e744 	addi	zero,r2,17309
1010e1d8:	1010e7ec 	andhi	zero,r2,17311
1010e1dc:	1010e6f8 	rdprs	zero,r2,17307
1010e1e0:	1010e7ec 	andhi	zero,r2,17311
1010e1e4:	1010e350 	cmplti	zero,r2,17293
1010e1e8:	1010e7ec 	andhi	zero,r2,17311
1010e1ec:	1010e7ec 	andhi	zero,r2,17311
1010e1f0:	1010e2ac 	andhi	zero,r2,17290
1010e1f4:	dac02317 	ldw	r11,140(sp)
1010e1f8:	5ac00017 	ldw	r11,0(r11)
1010e1fc:	dac02415 	stw	r11,144(sp)
1010e200:	dac02317 	ldw	r11,140(sp)
1010e204:	58800104 	addi	r2,r11,4
1010e208:	dac02417 	ldw	r11,144(sp)
1010e20c:	5802e90e 	bge	r11,zero,1010edb4 <___svfiprintf_internal_r+0xe84>
1010e210:	dac02417 	ldw	r11,144(sp)
1010e214:	d8802315 	stw	r2,140(sp)
1010e218:	02d7c83a 	sub	r11,zero,r11
1010e21c:	dac02415 	stw	r11,144(sp)
1010e220:	94800114 	ori	r18,r18,4
1010e224:	98c00007 	ldb	r3,0(r19)
1010e228:	003f9006 	br	1010e06c <_gp+0xfffecadc>
1010e22c:	00800c04 	movi	r2,48
1010e230:	dac02317 	ldw	r11,140(sp)
1010e234:	d8801d05 	stb	r2,116(sp)
1010e238:	00801e04 	movi	r2,120
1010e23c:	d8801d45 	stb	r2,117(sp)
1010e240:	d8001d85 	stb	zero,118(sp)
1010e244:	58c00104 	addi	r3,r11,4
1010e248:	5f000017 	ldw	fp,0(r11)
1010e24c:	0013883a 	mov	r9,zero
1010e250:	90800094 	ori	r2,r18,2
1010e254:	80032b16 	blt	r16,zero,1010ef04 <___svfiprintf_internal_r+0xfd4>
1010e258:	00bfdfc4 	movi	r2,-129
1010e25c:	90a4703a 	and	r18,r18,r2
1010e260:	d8c02315 	stw	r3,140(sp)
1010e264:	94800094 	ori	r18,r18,2
1010e268:	e002dc26 	beq	fp,zero,1010eddc <___svfiprintf_internal_r+0xeac>
1010e26c:	01040474 	movhi	r4,4113
1010e270:	211de704 	addi	r4,r4,30620
1010e274:	0015883a 	mov	r10,zero
1010e278:	d9002915 	stw	r4,164(sp)
1010e27c:	00002306 	br	1010e30c <___svfiprintf_internal_r+0x3dc>
1010e280:	94800054 	ori	r18,r18,1
1010e284:	98c00007 	ldb	r3,0(r19)
1010e288:	003f7806 	br	1010e06c <_gp+0xfffecadc>
1010e28c:	38803fcc 	andi	r2,r7,255
1010e290:	1080201c 	xori	r2,r2,128
1010e294:	10bfe004 	addi	r2,r2,-128
1010e298:	1002f31e 	bne	r2,zero,1010ee68 <___svfiprintf_internal_r+0xf38>
1010e29c:	01000044 	movi	r4,1
1010e2a0:	01c00804 	movi	r7,32
1010e2a4:	98c00007 	ldb	r3,0(r19)
1010e2a8:	003f7006 	br	1010e06c <_gp+0xfffecadc>
1010e2ac:	21003fcc 	andi	r4,r4,255
1010e2b0:	2003aa1e 	bne	r4,zero,1010f15c <___svfiprintf_internal_r+0x122c>
1010e2b4:	00840474 	movhi	r2,4113
1010e2b8:	109de704 	addi	r2,r2,30620
1010e2bc:	d8802915 	stw	r2,164(sp)
1010e2c0:	9080080c 	andi	r2,r18,32
1010e2c4:	1000ba26 	beq	r2,zero,1010e5b0 <___svfiprintf_internal_r+0x680>
1010e2c8:	dac02317 	ldw	r11,140(sp)
1010e2cc:	5f000017 	ldw	fp,0(r11)
1010e2d0:	5a400117 	ldw	r9,4(r11)
1010e2d4:	5ac00204 	addi	r11,r11,8
1010e2d8:	dac02315 	stw	r11,140(sp)
1010e2dc:	9080004c 	andi	r2,r18,1
1010e2e0:	10029026 	beq	r2,zero,1010ed24 <___svfiprintf_internal_r+0xdf4>
1010e2e4:	e244b03a 	or	r2,fp,r9
1010e2e8:	1002d41e 	bne	r2,zero,1010ee3c <___svfiprintf_internal_r+0xf0c>
1010e2ec:	d8001d85 	stb	zero,118(sp)
1010e2f0:	80030b16 	blt	r16,zero,1010ef20 <___svfiprintf_internal_r+0xff0>
1010e2f4:	00bfdfc4 	movi	r2,-129
1010e2f8:	90a4703a 	and	r18,r18,r2
1010e2fc:	0015883a 	mov	r10,zero
1010e300:	80002426 	beq	r16,zero,1010e394 <___svfiprintf_internal_r+0x464>
1010e304:	0039883a 	mov	fp,zero
1010e308:	0013883a 	mov	r9,zero
1010e30c:	d9002917 	ldw	r4,164(sp)
1010e310:	dc401a04 	addi	r17,sp,104
1010e314:	e08003cc 	andi	r2,fp,15
1010e318:	4806973a 	slli	r3,r9,28
1010e31c:	2085883a 	add	r2,r4,r2
1010e320:	e038d13a 	srli	fp,fp,4
1010e324:	10800003 	ldbu	r2,0(r2)
1010e328:	4812d13a 	srli	r9,r9,4
1010e32c:	8c7fffc4 	addi	r17,r17,-1
1010e330:	1f38b03a 	or	fp,r3,fp
1010e334:	88800005 	stb	r2,0(r17)
1010e338:	e244b03a 	or	r2,fp,r9
1010e33c:	103ff51e 	bne	r2,zero,1010e314 <_gp+0xfffecd84>
1010e340:	dac01e17 	ldw	r11,120(sp)
1010e344:	5c57c83a 	sub	r11,r11,r17
1010e348:	dac02115 	stw	r11,132(sp)
1010e34c:	00001406 	br	1010e3a0 <___svfiprintf_internal_r+0x470>
1010e350:	21003fcc 	andi	r4,r4,255
1010e354:	2003741e 	bne	r4,zero,1010f128 <___svfiprintf_internal_r+0x11f8>
1010e358:	9080080c 	andi	r2,r18,32
1010e35c:	10014526 	beq	r2,zero,1010e874 <___svfiprintf_internal_r+0x944>
1010e360:	dac02317 	ldw	r11,140(sp)
1010e364:	d8001d85 	stb	zero,118(sp)
1010e368:	58c00204 	addi	r3,r11,8
1010e36c:	5f000017 	ldw	fp,0(r11)
1010e370:	5a400117 	ldw	r9,4(r11)
1010e374:	8002d916 	blt	r16,zero,1010eedc <___svfiprintf_internal_r+0xfac>
1010e378:	013fdfc4 	movi	r4,-129
1010e37c:	e244b03a 	or	r2,fp,r9
1010e380:	d8c02315 	stw	r3,140(sp)
1010e384:	9124703a 	and	r18,r18,r4
1010e388:	0015883a 	mov	r10,zero
1010e38c:	1000b91e 	bne	r2,zero,1010e674 <___svfiprintf_internal_r+0x744>
1010e390:	8002e61e 	bne	r16,zero,1010ef2c <___svfiprintf_internal_r+0xffc>
1010e394:	0021883a 	mov	r16,zero
1010e398:	d8002115 	stw	zero,132(sp)
1010e39c:	dc401a04 	addi	r17,sp,104
1010e3a0:	d8c02117 	ldw	r3,132(sp)
1010e3a4:	dc002015 	stw	r16,128(sp)
1010e3a8:	80c0010e 	bge	r16,r3,1010e3b0 <___svfiprintf_internal_r+0x480>
1010e3ac:	d8c02015 	stw	r3,128(sp)
1010e3b0:	52803fcc 	andi	r10,r10,255
1010e3b4:	5280201c 	xori	r10,r10,128
1010e3b8:	52bfe004 	addi	r10,r10,-128
1010e3bc:	50003c26 	beq	r10,zero,1010e4b0 <___svfiprintf_internal_r+0x580>
1010e3c0:	dac02017 	ldw	r11,128(sp)
1010e3c4:	5ac00044 	addi	r11,r11,1
1010e3c8:	dac02015 	stw	r11,128(sp)
1010e3cc:	00003806 	br	1010e4b0 <___svfiprintf_internal_r+0x580>
1010e3d0:	01000044 	movi	r4,1
1010e3d4:	01c00ac4 	movi	r7,43
1010e3d8:	98c00007 	ldb	r3,0(r19)
1010e3dc:	003f2306 	br	1010e06c <_gp+0xfffecadc>
1010e3e0:	21003fcc 	andi	r4,r4,255
1010e3e4:	2003481e 	bne	r4,zero,1010f108 <___svfiprintf_internal_r+0x11d8>
1010e3e8:	9080080c 	andi	r2,r18,32
1010e3ec:	10013b26 	beq	r2,zero,1010e8dc <___svfiprintf_internal_r+0x9ac>
1010e3f0:	dac02317 	ldw	r11,140(sp)
1010e3f4:	d8001d85 	stb	zero,118(sp)
1010e3f8:	58800204 	addi	r2,r11,8
1010e3fc:	5f000017 	ldw	fp,0(r11)
1010e400:	5a400117 	ldw	r9,4(r11)
1010e404:	8002a816 	blt	r16,zero,1010eea8 <___svfiprintf_internal_r+0xf78>
1010e408:	013fdfc4 	movi	r4,-129
1010e40c:	e246b03a 	or	r3,fp,r9
1010e410:	d8802315 	stw	r2,140(sp)
1010e414:	9124703a 	and	r18,r18,r4
1010e418:	18013c26 	beq	r3,zero,1010e90c <___svfiprintf_internal_r+0x9dc>
1010e41c:	0015883a 	mov	r10,zero
1010e420:	dc401a04 	addi	r17,sp,104
1010e424:	e006d0fa 	srli	r3,fp,3
1010e428:	4808977a 	slli	r4,r9,29
1010e42c:	4812d0fa 	srli	r9,r9,3
1010e430:	e70001cc 	andi	fp,fp,7
1010e434:	e0800c04 	addi	r2,fp,48
1010e438:	8c7fffc4 	addi	r17,r17,-1
1010e43c:	20f8b03a 	or	fp,r4,r3
1010e440:	88800005 	stb	r2,0(r17)
1010e444:	e246b03a 	or	r3,fp,r9
1010e448:	183ff61e 	bne	r3,zero,1010e424 <_gp+0xfffece94>
1010e44c:	90c0004c 	andi	r3,r18,1
1010e450:	1800a526 	beq	r3,zero,1010e6e8 <___svfiprintf_internal_r+0x7b8>
1010e454:	10803fcc 	andi	r2,r2,255
1010e458:	1080201c 	xori	r2,r2,128
1010e45c:	10bfe004 	addi	r2,r2,-128
1010e460:	00c00c04 	movi	r3,48
1010e464:	10ffb626 	beq	r2,r3,1010e340 <_gp+0xfffecdb0>
1010e468:	88ffffc5 	stb	r3,-1(r17)
1010e46c:	d8c01e17 	ldw	r3,120(sp)
1010e470:	88bfffc4 	addi	r2,r17,-1
1010e474:	1023883a 	mov	r17,r2
1010e478:	1887c83a 	sub	r3,r3,r2
1010e47c:	d8c02115 	stw	r3,132(sp)
1010e480:	003fc706 	br	1010e3a0 <_gp+0xfffece10>
1010e484:	dac02317 	ldw	r11,140(sp)
1010e488:	00c00044 	movi	r3,1
1010e48c:	d8c02015 	stw	r3,128(sp)
1010e490:	58800017 	ldw	r2,0(r11)
1010e494:	5ac00104 	addi	r11,r11,4
1010e498:	d8001d85 	stb	zero,118(sp)
1010e49c:	d8801005 	stb	r2,64(sp)
1010e4a0:	dac02315 	stw	r11,140(sp)
1010e4a4:	d8c02115 	stw	r3,132(sp)
1010e4a8:	dc401004 	addi	r17,sp,64
1010e4ac:	0021883a 	mov	r16,zero
1010e4b0:	90c0008c 	andi	r3,r18,2
1010e4b4:	d8c02215 	stw	r3,136(sp)
1010e4b8:	18000326 	beq	r3,zero,1010e4c8 <___svfiprintf_internal_r+0x598>
1010e4bc:	dac02017 	ldw	r11,128(sp)
1010e4c0:	5ac00084 	addi	r11,r11,2
1010e4c4:	dac02015 	stw	r11,128(sp)
1010e4c8:	90c0210c 	andi	r3,r18,132
1010e4cc:	d8c02615 	stw	r3,152(sp)
1010e4d0:	1801131e 	bne	r3,zero,1010e920 <___svfiprintf_internal_r+0x9f0>
1010e4d4:	dac02417 	ldw	r11,144(sp)
1010e4d8:	d8c02017 	ldw	r3,128(sp)
1010e4dc:	58f9c83a 	sub	fp,r11,r3
1010e4e0:	07010f0e 	bge	zero,fp,1010e920 <___svfiprintf_internal_r+0x9f0>
1010e4e4:	02400404 	movi	r9,16
1010e4e8:	d8c01c17 	ldw	r3,112(sp)
1010e4ec:	d8801b17 	ldw	r2,108(sp)
1010e4f0:	4f02d60e 	bge	r9,fp,1010f04c <___svfiprintf_internal_r+0x111c>
1010e4f4:	01440474 	movhi	r5,4113
1010e4f8:	295e5304 	addi	r5,r5,31052
1010e4fc:	d9402815 	stw	r5,160(sp)
1010e500:	028001c4 	movi	r10,7
1010e504:	00000306 	br	1010e514 <___svfiprintf_internal_r+0x5e4>
1010e508:	e73ffc04 	addi	fp,fp,-16
1010e50c:	42000204 	addi	r8,r8,8
1010e510:	4f00150e 	bge	r9,fp,1010e568 <___svfiprintf_internal_r+0x638>
1010e514:	18c00404 	addi	r3,r3,16
1010e518:	10800044 	addi	r2,r2,1
1010e51c:	45800015 	stw	r22,0(r8)
1010e520:	42400115 	stw	r9,4(r8)
1010e524:	d8c01c15 	stw	r3,112(sp)
1010e528:	d8801b15 	stw	r2,108(sp)
1010e52c:	50bff60e 	bge	r10,r2,1010e508 <_gp+0xfffecf78>
1010e530:	d9801a04 	addi	r6,sp,104
1010e534:	b80b883a 	mov	r5,r23
1010e538:	a809883a 	mov	r4,r21
1010e53c:	da402c15 	stw	r9,176(sp)
1010e540:	da802d15 	stw	r10,180(sp)
1010e544:	010dd600 	call	1010dd60 <__ssprint_r>
1010e548:	da402c17 	ldw	r9,176(sp)
1010e54c:	da802d17 	ldw	r10,180(sp)
1010e550:	1001851e 	bne	r2,zero,1010eb68 <___svfiprintf_internal_r+0xc38>
1010e554:	e73ffc04 	addi	fp,fp,-16
1010e558:	d8c01c17 	ldw	r3,112(sp)
1010e55c:	d8801b17 	ldw	r2,108(sp)
1010e560:	d811883a 	mov	r8,sp
1010e564:	4f3feb16 	blt	r9,fp,1010e514 <_gp+0xfffecf84>
1010e568:	dac02817 	ldw	r11,160(sp)
1010e56c:	e0c7883a 	add	r3,fp,r3
1010e570:	10800044 	addi	r2,r2,1
1010e574:	42c00015 	stw	r11,0(r8)
1010e578:	47000115 	stw	fp,4(r8)
1010e57c:	d8c01c15 	stw	r3,112(sp)
1010e580:	d8801b15 	stw	r2,108(sp)
1010e584:	010001c4 	movi	r4,7
1010e588:	2081ee16 	blt	r4,r2,1010ed44 <___svfiprintf_internal_r+0xe14>
1010e58c:	42000204 	addi	r8,r8,8
1010e590:	0000e506 	br	1010e928 <___svfiprintf_internal_r+0x9f8>
1010e594:	21003fcc 	andi	r4,r4,255
1010e598:	2002dd1e 	bne	r4,zero,1010f110 <___svfiprintf_internal_r+0x11e0>
1010e59c:	00840474 	movhi	r2,4113
1010e5a0:	109de204 	addi	r2,r2,30600
1010e5a4:	d8802915 	stw	r2,164(sp)
1010e5a8:	9080080c 	andi	r2,r18,32
1010e5ac:	103f461e 	bne	r2,zero,1010e2c8 <_gp+0xfffecd38>
1010e5b0:	9080040c 	andi	r2,r18,16
1010e5b4:	10022e1e 	bne	r2,zero,1010ee70 <___svfiprintf_internal_r+0xf40>
1010e5b8:	9080100c 	andi	r2,r18,64
1010e5bc:	dac02317 	ldw	r11,140(sp)
1010e5c0:	10027326 	beq	r2,zero,1010ef90 <___svfiprintf_internal_r+0x1060>
1010e5c4:	5f00000b 	ldhu	fp,0(r11)
1010e5c8:	5ac00104 	addi	r11,r11,4
1010e5cc:	0013883a 	mov	r9,zero
1010e5d0:	dac02315 	stw	r11,140(sp)
1010e5d4:	003f4106 	br	1010e2dc <_gp+0xfffecd4c>
1010e5d8:	21003fcc 	andi	r4,r4,255
1010e5dc:	2002e11e 	bne	r4,zero,1010f164 <___svfiprintf_internal_r+0x1234>
1010e5e0:	9080080c 	andi	r2,r18,32
1010e5e4:	1002011e 	bne	r2,zero,1010edec <___svfiprintf_internal_r+0xebc>
1010e5e8:	9080040c 	andi	r2,r18,16
1010e5ec:	10023e1e 	bne	r2,zero,1010eee8 <___svfiprintf_internal_r+0xfb8>
1010e5f0:	9480100c 	andi	r18,r18,64
1010e5f4:	90023c26 	beq	r18,zero,1010eee8 <___svfiprintf_internal_r+0xfb8>
1010e5f8:	dac02317 	ldw	r11,140(sp)
1010e5fc:	58800017 	ldw	r2,0(r11)
1010e600:	5ac00104 	addi	r11,r11,4
1010e604:	dac02315 	stw	r11,140(sp)
1010e608:	dac02517 	ldw	r11,148(sp)
1010e60c:	12c0000d 	sth	r11,0(r2)
1010e610:	003e6e06 	br	1010dfcc <_gp+0xfffeca3c>
1010e614:	98c00007 	ldb	r3,0(r19)
1010e618:	1a422926 	beq	r3,r9,1010eec0 <___svfiprintf_internal_r+0xf90>
1010e61c:	94800414 	ori	r18,r18,16
1010e620:	003e9206 	br	1010e06c <_gp+0xfffecadc>
1010e624:	94801014 	ori	r18,r18,64
1010e628:	98c00007 	ldb	r3,0(r19)
1010e62c:	003e8f06 	br	1010e06c <_gp+0xfffecadc>
1010e630:	21003fcc 	andi	r4,r4,255
1010e634:	2002c71e 	bne	r4,zero,1010f154 <___svfiprintf_internal_r+0x1224>
1010e638:	9080080c 	andi	r2,r18,32
1010e63c:	10004926 	beq	r2,zero,1010e764 <___svfiprintf_internal_r+0x834>
1010e640:	dac02317 	ldw	r11,140(sp)
1010e644:	58800117 	ldw	r2,4(r11)
1010e648:	5f000017 	ldw	fp,0(r11)
1010e64c:	5ac00204 	addi	r11,r11,8
1010e650:	dac02315 	stw	r11,140(sp)
1010e654:	1013883a 	mov	r9,r2
1010e658:	10004b16 	blt	r2,zero,1010e788 <___svfiprintf_internal_r+0x858>
1010e65c:	da801d83 	ldbu	r10,118(sp)
1010e660:	8001cb16 	blt	r16,zero,1010ed90 <___svfiprintf_internal_r+0xe60>
1010e664:	00ffdfc4 	movi	r3,-129
1010e668:	e244b03a 	or	r2,fp,r9
1010e66c:	90e4703a 	and	r18,r18,r3
1010e670:	103f4726 	beq	r2,zero,1010e390 <_gp+0xfffece00>
1010e674:	48008c26 	beq	r9,zero,1010e8a8 <___svfiprintf_internal_r+0x978>
1010e678:	dc802015 	stw	r18,128(sp)
1010e67c:	dc002115 	stw	r16,132(sp)
1010e680:	dc401a04 	addi	r17,sp,104
1010e684:	e021883a 	mov	r16,fp
1010e688:	da002215 	stw	r8,136(sp)
1010e68c:	5039883a 	mov	fp,r10
1010e690:	4825883a 	mov	r18,r9
1010e694:	8009883a 	mov	r4,r16
1010e698:	900b883a 	mov	r5,r18
1010e69c:	01800284 	movi	r6,10
1010e6a0:	000f883a 	mov	r7,zero
1010e6a4:	01113980 	call	10111398 <__umoddi3>
1010e6a8:	10800c04 	addi	r2,r2,48
1010e6ac:	8c7fffc4 	addi	r17,r17,-1
1010e6b0:	8009883a 	mov	r4,r16
1010e6b4:	900b883a 	mov	r5,r18
1010e6b8:	88800005 	stb	r2,0(r17)
1010e6bc:	01800284 	movi	r6,10
1010e6c0:	000f883a 	mov	r7,zero
1010e6c4:	0110e200 	call	10110e20 <__udivdi3>
1010e6c8:	1021883a 	mov	r16,r2
1010e6cc:	10c4b03a 	or	r2,r2,r3
1010e6d0:	1825883a 	mov	r18,r3
1010e6d4:	103fef1e 	bne	r2,zero,1010e694 <_gp+0xfffed104>
1010e6d8:	dc802017 	ldw	r18,128(sp)
1010e6dc:	dc002117 	ldw	r16,132(sp)
1010e6e0:	da002217 	ldw	r8,136(sp)
1010e6e4:	e015883a 	mov	r10,fp
1010e6e8:	d8c01e17 	ldw	r3,120(sp)
1010e6ec:	1c47c83a 	sub	r3,r3,r17
1010e6f0:	d8c02115 	stw	r3,132(sp)
1010e6f4:	003f2a06 	br	1010e3a0 <_gp+0xfffece10>
1010e6f8:	dac02317 	ldw	r11,140(sp)
1010e6fc:	d8001d85 	stb	zero,118(sp)
1010e700:	5c400017 	ldw	r17,0(r11)
1010e704:	5f000104 	addi	fp,r11,4
1010e708:	88022f26 	beq	r17,zero,1010efc8 <___svfiprintf_internal_r+0x1098>
1010e70c:	80022516 	blt	r16,zero,1010efa4 <___svfiprintf_internal_r+0x1074>
1010e710:	800d883a 	mov	r6,r16
1010e714:	000b883a 	mov	r5,zero
1010e718:	8809883a 	mov	r4,r17
1010e71c:	da002c15 	stw	r8,176(sp)
1010e720:	010bfc40 	call	1010bfc4 <memchr>
1010e724:	da002c17 	ldw	r8,176(sp)
1010e728:	10026426 	beq	r2,zero,1010f0bc <___svfiprintf_internal_r+0x118c>
1010e72c:	1445c83a 	sub	r2,r2,r17
1010e730:	d8802115 	stw	r2,132(sp)
1010e734:	da801d83 	ldbu	r10,118(sp)
1010e738:	df002315 	stw	fp,140(sp)
1010e73c:	0021883a 	mov	r16,zero
1010e740:	003f1706 	br	1010e3a0 <_gp+0xfffece10>
1010e744:	94800814 	ori	r18,r18,32
1010e748:	98c00007 	ldb	r3,0(r19)
1010e74c:	003e4706 	br	1010e06c <_gp+0xfffecadc>
1010e750:	21003fcc 	andi	r4,r4,255
1010e754:	2002701e 	bne	r4,zero,1010f118 <___svfiprintf_internal_r+0x11e8>
1010e758:	94800414 	ori	r18,r18,16
1010e75c:	9080080c 	andi	r2,r18,32
1010e760:	103fb71e 	bne	r2,zero,1010e640 <_gp+0xfffed0b0>
1010e764:	9080040c 	andi	r2,r18,16
1010e768:	1001ab26 	beq	r2,zero,1010ee18 <___svfiprintf_internal_r+0xee8>
1010e76c:	dac02317 	ldw	r11,140(sp)
1010e770:	5f000017 	ldw	fp,0(r11)
1010e774:	5ac00104 	addi	r11,r11,4
1010e778:	dac02315 	stw	r11,140(sp)
1010e77c:	e013d7fa 	srai	r9,fp,31
1010e780:	4805883a 	mov	r2,r9
1010e784:	103fb50e 	bge	r2,zero,1010e65c <_gp+0xfffed0cc>
1010e788:	0739c83a 	sub	fp,zero,fp
1010e78c:	02800b44 	movi	r10,45
1010e790:	e004c03a 	cmpne	r2,fp,zero
1010e794:	0253c83a 	sub	r9,zero,r9
1010e798:	da801d85 	stb	r10,118(sp)
1010e79c:	4893c83a 	sub	r9,r9,r2
1010e7a0:	80023016 	blt	r16,zero,1010f064 <___svfiprintf_internal_r+0x1134>
1010e7a4:	00bfdfc4 	movi	r2,-129
1010e7a8:	90a4703a 	and	r18,r18,r2
1010e7ac:	483fb21e 	bne	r9,zero,1010e678 <_gp+0xfffed0e8>
1010e7b0:	00003d06 	br	1010e8a8 <___svfiprintf_internal_r+0x978>
1010e7b4:	9817883a 	mov	r11,r19
1010e7b8:	d8002415 	stw	zero,144(sp)
1010e7bc:	18bff404 	addi	r2,r3,-48
1010e7c0:	0019883a 	mov	r12,zero
1010e7c4:	58c00007 	ldb	r3,0(r11)
1010e7c8:	630002a4 	muli	r12,r12,10
1010e7cc:	9cc00044 	addi	r19,r19,1
1010e7d0:	9817883a 	mov	r11,r19
1010e7d4:	1319883a 	add	r12,r2,r12
1010e7d8:	18bff404 	addi	r2,r3,-48
1010e7dc:	30bff92e 	bgeu	r6,r2,1010e7c4 <_gp+0xfffed234>
1010e7e0:	db002415 	stw	r12,144(sp)
1010e7e4:	18bff804 	addi	r2,r3,-32
1010e7e8:	28be232e 	bgeu	r5,r2,1010e078 <_gp+0xfffecae8>
1010e7ec:	21003fcc 	andi	r4,r4,255
1010e7f0:	20024b1e 	bne	r4,zero,1010f120 <___svfiprintf_internal_r+0x11f0>
1010e7f4:	1800d626 	beq	r3,zero,1010eb50 <___svfiprintf_internal_r+0xc20>
1010e7f8:	02c00044 	movi	r11,1
1010e7fc:	dac02015 	stw	r11,128(sp)
1010e800:	d8c01005 	stb	r3,64(sp)
1010e804:	d8001d85 	stb	zero,118(sp)
1010e808:	dac02115 	stw	r11,132(sp)
1010e80c:	dc401004 	addi	r17,sp,64
1010e810:	003f2606 	br	1010e4ac <_gp+0xfffecf1c>
1010e814:	94802014 	ori	r18,r18,128
1010e818:	98c00007 	ldb	r3,0(r19)
1010e81c:	003e1306 	br	1010e06c <_gp+0xfffecadc>
1010e820:	98c00007 	ldb	r3,0(r19)
1010e824:	9ac00044 	addi	r11,r19,1
1010e828:	1a822b26 	beq	r3,r10,1010f0d8 <___svfiprintf_internal_r+0x11a8>
1010e82c:	18bff404 	addi	r2,r3,-48
1010e830:	0021883a 	mov	r16,zero
1010e834:	30821e36 	bltu	r6,r2,1010f0b0 <___svfiprintf_internal_r+0x1180>
1010e838:	58c00007 	ldb	r3,0(r11)
1010e83c:	840002a4 	muli	r16,r16,10
1010e840:	5cc00044 	addi	r19,r11,1
1010e844:	9817883a 	mov	r11,r19
1010e848:	80a1883a 	add	r16,r16,r2
1010e84c:	18bff404 	addi	r2,r3,-48
1010e850:	30bff92e 	bgeu	r6,r2,1010e838 <_gp+0xfffed2a8>
1010e854:	803e060e 	bge	r16,zero,1010e070 <_gp+0xfffecae0>
1010e858:	043fffc4 	movi	r16,-1
1010e85c:	003e0406 	br	1010e070 <_gp+0xfffecae0>
1010e860:	21003fcc 	andi	r4,r4,255
1010e864:	2002371e 	bne	r4,zero,1010f144 <___svfiprintf_internal_r+0x1214>
1010e868:	94800414 	ori	r18,r18,16
1010e86c:	9080080c 	andi	r2,r18,32
1010e870:	103ebb1e 	bne	r2,zero,1010e360 <_gp+0xfffecdd0>
1010e874:	9080040c 	andi	r2,r18,16
1010e878:	10013b26 	beq	r2,zero,1010ed68 <___svfiprintf_internal_r+0xe38>
1010e87c:	dac02317 	ldw	r11,140(sp)
1010e880:	d8001d85 	stb	zero,118(sp)
1010e884:	0013883a 	mov	r9,zero
1010e888:	58800104 	addi	r2,r11,4
1010e88c:	5f000017 	ldw	fp,0(r11)
1010e890:	80013d16 	blt	r16,zero,1010ed88 <___svfiprintf_internal_r+0xe58>
1010e894:	00ffdfc4 	movi	r3,-129
1010e898:	d8802315 	stw	r2,140(sp)
1010e89c:	90e4703a 	and	r18,r18,r3
1010e8a0:	0015883a 	mov	r10,zero
1010e8a4:	e03eba26 	beq	fp,zero,1010e390 <_gp+0xfffece00>
1010e8a8:	00800244 	movi	r2,9
1010e8ac:	173f7236 	bltu	r2,fp,1010e678 <_gp+0xfffed0e8>
1010e8b0:	dac02b17 	ldw	r11,172(sp)
1010e8b4:	e7000c04 	addi	fp,fp,48
1010e8b8:	df0019c5 	stb	fp,103(sp)
1010e8bc:	dac02115 	stw	r11,132(sp)
1010e8c0:	dc4019c4 	addi	r17,sp,103
1010e8c4:	003eb606 	br	1010e3a0 <_gp+0xfffece10>
1010e8c8:	21003fcc 	andi	r4,r4,255
1010e8cc:	20021f1e 	bne	r4,zero,1010f14c <___svfiprintf_internal_r+0x121c>
1010e8d0:	94800414 	ori	r18,r18,16
1010e8d4:	9080080c 	andi	r2,r18,32
1010e8d8:	103ec51e 	bne	r2,zero,1010e3f0 <_gp+0xfffece60>
1010e8dc:	9080040c 	andi	r2,r18,16
1010e8e0:	10016926 	beq	r2,zero,1010ee88 <___svfiprintf_internal_r+0xf58>
1010e8e4:	dac02317 	ldw	r11,140(sp)
1010e8e8:	d8001d85 	stb	zero,118(sp)
1010e8ec:	0013883a 	mov	r9,zero
1010e8f0:	58800104 	addi	r2,r11,4
1010e8f4:	5f000017 	ldw	fp,0(r11)
1010e8f8:	80016b16 	blt	r16,zero,1010eea8 <___svfiprintf_internal_r+0xf78>
1010e8fc:	00ffdfc4 	movi	r3,-129
1010e900:	d8802315 	stw	r2,140(sp)
1010e904:	90e4703a 	and	r18,r18,r3
1010e908:	e03ec41e 	bne	fp,zero,1010e41c <_gp+0xfffece8c>
1010e90c:	0015883a 	mov	r10,zero
1010e910:	8001c226 	beq	r16,zero,1010f01c <___svfiprintf_internal_r+0x10ec>
1010e914:	0039883a 	mov	fp,zero
1010e918:	0013883a 	mov	r9,zero
1010e91c:	003ec006 	br	1010e420 <_gp+0xfffece90>
1010e920:	d8c01c17 	ldw	r3,112(sp)
1010e924:	d8801b17 	ldw	r2,108(sp)
1010e928:	d9001d87 	ldb	r4,118(sp)
1010e92c:	20000b26 	beq	r4,zero,1010e95c <___svfiprintf_internal_r+0xa2c>
1010e930:	d9001d84 	addi	r4,sp,118
1010e934:	18c00044 	addi	r3,r3,1
1010e938:	10800044 	addi	r2,r2,1
1010e93c:	41000015 	stw	r4,0(r8)
1010e940:	01000044 	movi	r4,1
1010e944:	41000115 	stw	r4,4(r8)
1010e948:	d8c01c15 	stw	r3,112(sp)
1010e94c:	d8801b15 	stw	r2,108(sp)
1010e950:	010001c4 	movi	r4,7
1010e954:	2080e116 	blt	r4,r2,1010ecdc <___svfiprintf_internal_r+0xdac>
1010e958:	42000204 	addi	r8,r8,8
1010e95c:	dac02217 	ldw	r11,136(sp)
1010e960:	58000b26 	beq	r11,zero,1010e990 <___svfiprintf_internal_r+0xa60>
1010e964:	d9001d04 	addi	r4,sp,116
1010e968:	18c00084 	addi	r3,r3,2
1010e96c:	10800044 	addi	r2,r2,1
1010e970:	41000015 	stw	r4,0(r8)
1010e974:	01000084 	movi	r4,2
1010e978:	41000115 	stw	r4,4(r8)
1010e97c:	d8c01c15 	stw	r3,112(sp)
1010e980:	d8801b15 	stw	r2,108(sp)
1010e984:	010001c4 	movi	r4,7
1010e988:	2080dd16 	blt	r4,r2,1010ed00 <___svfiprintf_internal_r+0xdd0>
1010e98c:	42000204 	addi	r8,r8,8
1010e990:	dac02617 	ldw	r11,152(sp)
1010e994:	01002004 	movi	r4,128
1010e998:	59008426 	beq	r11,r4,1010ebac <___svfiprintf_internal_r+0xc7c>
1010e99c:	dac02117 	ldw	r11,132(sp)
1010e9a0:	82e1c83a 	sub	r16,r16,r11
1010e9a4:	0400270e 	bge	zero,r16,1010ea44 <___svfiprintf_internal_r+0xb14>
1010e9a8:	01c00404 	movi	r7,16
1010e9ac:	3c016a0e 	bge	r7,r16,1010ef58 <___svfiprintf_internal_r+0x1028>
1010e9b0:	01440474 	movhi	r5,4113
1010e9b4:	295e4f04 	addi	r5,r5,31036
1010e9b8:	d9402215 	stw	r5,136(sp)
1010e9bc:	070001c4 	movi	fp,7
1010e9c0:	00000306 	br	1010e9d0 <___svfiprintf_internal_r+0xaa0>
1010e9c4:	843ffc04 	addi	r16,r16,-16
1010e9c8:	42000204 	addi	r8,r8,8
1010e9cc:	3c00130e 	bge	r7,r16,1010ea1c <___svfiprintf_internal_r+0xaec>
1010e9d0:	18c00404 	addi	r3,r3,16
1010e9d4:	10800044 	addi	r2,r2,1
1010e9d8:	45000015 	stw	r20,0(r8)
1010e9dc:	41c00115 	stw	r7,4(r8)
1010e9e0:	d8c01c15 	stw	r3,112(sp)
1010e9e4:	d8801b15 	stw	r2,108(sp)
1010e9e8:	e0bff60e 	bge	fp,r2,1010e9c4 <_gp+0xfffed434>
1010e9ec:	d9801a04 	addi	r6,sp,104
1010e9f0:	b80b883a 	mov	r5,r23
1010e9f4:	a809883a 	mov	r4,r21
1010e9f8:	d9c02c15 	stw	r7,176(sp)
1010e9fc:	010dd600 	call	1010dd60 <__ssprint_r>
1010ea00:	d9c02c17 	ldw	r7,176(sp)
1010ea04:	1000581e 	bne	r2,zero,1010eb68 <___svfiprintf_internal_r+0xc38>
1010ea08:	843ffc04 	addi	r16,r16,-16
1010ea0c:	d8c01c17 	ldw	r3,112(sp)
1010ea10:	d8801b17 	ldw	r2,108(sp)
1010ea14:	d811883a 	mov	r8,sp
1010ea18:	3c3fed16 	blt	r7,r16,1010e9d0 <_gp+0xfffed440>
1010ea1c:	dac02217 	ldw	r11,136(sp)
1010ea20:	1c07883a 	add	r3,r3,r16
1010ea24:	10800044 	addi	r2,r2,1
1010ea28:	42c00015 	stw	r11,0(r8)
1010ea2c:	44000115 	stw	r16,4(r8)
1010ea30:	d8c01c15 	stw	r3,112(sp)
1010ea34:	d8801b15 	stw	r2,108(sp)
1010ea38:	010001c4 	movi	r4,7
1010ea3c:	20809e16 	blt	r4,r2,1010ecb8 <___svfiprintf_internal_r+0xd88>
1010ea40:	42000204 	addi	r8,r8,8
1010ea44:	dac02117 	ldw	r11,132(sp)
1010ea48:	10800044 	addi	r2,r2,1
1010ea4c:	44400015 	stw	r17,0(r8)
1010ea50:	58c7883a 	add	r3,r11,r3
1010ea54:	42c00115 	stw	r11,4(r8)
1010ea58:	d8c01c15 	stw	r3,112(sp)
1010ea5c:	d8801b15 	stw	r2,108(sp)
1010ea60:	010001c4 	movi	r4,7
1010ea64:	20807f16 	blt	r4,r2,1010ec64 <___svfiprintf_internal_r+0xd34>
1010ea68:	42000204 	addi	r8,r8,8
1010ea6c:	9480010c 	andi	r18,r18,4
1010ea70:	90002926 	beq	r18,zero,1010eb18 <___svfiprintf_internal_r+0xbe8>
1010ea74:	dac02417 	ldw	r11,144(sp)
1010ea78:	d8802017 	ldw	r2,128(sp)
1010ea7c:	58a1c83a 	sub	r16,r11,r2
1010ea80:	0400250e 	bge	zero,r16,1010eb18 <___svfiprintf_internal_r+0xbe8>
1010ea84:	04400404 	movi	r17,16
1010ea88:	d8801b17 	ldw	r2,108(sp)
1010ea8c:	8c017c0e 	bge	r17,r16,1010f080 <___svfiprintf_internal_r+0x1150>
1010ea90:	01440474 	movhi	r5,4113
1010ea94:	295e5304 	addi	r5,r5,31052
1010ea98:	d9402815 	stw	r5,160(sp)
1010ea9c:	048001c4 	movi	r18,7
1010eaa0:	00000306 	br	1010eab0 <___svfiprintf_internal_r+0xb80>
1010eaa4:	843ffc04 	addi	r16,r16,-16
1010eaa8:	42000204 	addi	r8,r8,8
1010eaac:	8c00110e 	bge	r17,r16,1010eaf4 <___svfiprintf_internal_r+0xbc4>
1010eab0:	18c00404 	addi	r3,r3,16
1010eab4:	10800044 	addi	r2,r2,1
1010eab8:	45800015 	stw	r22,0(r8)
1010eabc:	44400115 	stw	r17,4(r8)
1010eac0:	d8c01c15 	stw	r3,112(sp)
1010eac4:	d8801b15 	stw	r2,108(sp)
1010eac8:	90bff60e 	bge	r18,r2,1010eaa4 <_gp+0xfffed514>
1010eacc:	d9801a04 	addi	r6,sp,104
1010ead0:	b80b883a 	mov	r5,r23
1010ead4:	a809883a 	mov	r4,r21
1010ead8:	010dd600 	call	1010dd60 <__ssprint_r>
1010eadc:	1000221e 	bne	r2,zero,1010eb68 <___svfiprintf_internal_r+0xc38>
1010eae0:	843ffc04 	addi	r16,r16,-16
1010eae4:	d8c01c17 	ldw	r3,112(sp)
1010eae8:	d8801b17 	ldw	r2,108(sp)
1010eaec:	d811883a 	mov	r8,sp
1010eaf0:	8c3fef16 	blt	r17,r16,1010eab0 <_gp+0xfffed520>
1010eaf4:	dac02817 	ldw	r11,160(sp)
1010eaf8:	1c07883a 	add	r3,r3,r16
1010eafc:	10800044 	addi	r2,r2,1
1010eb00:	42c00015 	stw	r11,0(r8)
1010eb04:	44000115 	stw	r16,4(r8)
1010eb08:	d8c01c15 	stw	r3,112(sp)
1010eb0c:	d8801b15 	stw	r2,108(sp)
1010eb10:	010001c4 	movi	r4,7
1010eb14:	2080aa16 	blt	r4,r2,1010edc0 <___svfiprintf_internal_r+0xe90>
1010eb18:	d8802417 	ldw	r2,144(sp)
1010eb1c:	dac02017 	ldw	r11,128(sp)
1010eb20:	12c0010e 	bge	r2,r11,1010eb28 <___svfiprintf_internal_r+0xbf8>
1010eb24:	5805883a 	mov	r2,r11
1010eb28:	dac02517 	ldw	r11,148(sp)
1010eb2c:	5897883a 	add	r11,r11,r2
1010eb30:	dac02515 	stw	r11,148(sp)
1010eb34:	1800531e 	bne	r3,zero,1010ec84 <___svfiprintf_internal_r+0xd54>
1010eb38:	98800007 	ldb	r2,0(r19)
1010eb3c:	d8001b15 	stw	zero,108(sp)
1010eb40:	d811883a 	mov	r8,sp
1010eb44:	103d231e 	bne	r2,zero,1010dfd4 <_gp+0xfffeca44>
1010eb48:	9823883a 	mov	r17,r19
1010eb4c:	003d3906 	br	1010e034 <_gp+0xfffecaa4>
1010eb50:	d8801c17 	ldw	r2,112(sp)
1010eb54:	10000426 	beq	r2,zero,1010eb68 <___svfiprintf_internal_r+0xc38>
1010eb58:	d9402717 	ldw	r5,156(sp)
1010eb5c:	d9002a17 	ldw	r4,168(sp)
1010eb60:	d9801a04 	addi	r6,sp,104
1010eb64:	010dd600 	call	1010dd60 <__ssprint_r>
1010eb68:	dac02717 	ldw	r11,156(sp)
1010eb6c:	d8802517 	ldw	r2,148(sp)
1010eb70:	58c0030b 	ldhu	r3,12(r11)
1010eb74:	18c0100c 	andi	r3,r3,64
1010eb78:	1801381e 	bne	r3,zero,1010f05c <___svfiprintf_internal_r+0x112c>
1010eb7c:	dfc03717 	ldw	ra,220(sp)
1010eb80:	df003617 	ldw	fp,216(sp)
1010eb84:	ddc03517 	ldw	r23,212(sp)
1010eb88:	dd803417 	ldw	r22,208(sp)
1010eb8c:	dd403317 	ldw	r21,204(sp)
1010eb90:	dd003217 	ldw	r20,200(sp)
1010eb94:	dcc03117 	ldw	r19,196(sp)
1010eb98:	dc803017 	ldw	r18,192(sp)
1010eb9c:	dc402f17 	ldw	r17,188(sp)
1010eba0:	dc002e17 	ldw	r16,184(sp)
1010eba4:	dec03804 	addi	sp,sp,224
1010eba8:	f800283a 	ret
1010ebac:	dac02417 	ldw	r11,144(sp)
1010ebb0:	d9002017 	ldw	r4,128(sp)
1010ebb4:	5939c83a 	sub	fp,r11,r4
1010ebb8:	073f780e 	bge	zero,fp,1010e99c <_gp+0xfffed40c>
1010ebbc:	02400404 	movi	r9,16
1010ebc0:	4f01370e 	bge	r9,fp,1010f0a0 <___svfiprintf_internal_r+0x1170>
1010ebc4:	02c40474 	movhi	r11,4113
1010ebc8:	5ade4f04 	addi	r11,r11,31036
1010ebcc:	dac02215 	stw	r11,136(sp)
1010ebd0:	028001c4 	movi	r10,7
1010ebd4:	00000306 	br	1010ebe4 <___svfiprintf_internal_r+0xcb4>
1010ebd8:	e73ffc04 	addi	fp,fp,-16
1010ebdc:	42000204 	addi	r8,r8,8
1010ebe0:	4f00150e 	bge	r9,fp,1010ec38 <___svfiprintf_internal_r+0xd08>
1010ebe4:	18c00404 	addi	r3,r3,16
1010ebe8:	10800044 	addi	r2,r2,1
1010ebec:	45000015 	stw	r20,0(r8)
1010ebf0:	42400115 	stw	r9,4(r8)
1010ebf4:	d8c01c15 	stw	r3,112(sp)
1010ebf8:	d8801b15 	stw	r2,108(sp)
1010ebfc:	50bff60e 	bge	r10,r2,1010ebd8 <_gp+0xfffed648>
1010ec00:	d9801a04 	addi	r6,sp,104
1010ec04:	b80b883a 	mov	r5,r23
1010ec08:	a809883a 	mov	r4,r21
1010ec0c:	da402c15 	stw	r9,176(sp)
1010ec10:	da802d15 	stw	r10,180(sp)
1010ec14:	010dd600 	call	1010dd60 <__ssprint_r>
1010ec18:	da402c17 	ldw	r9,176(sp)
1010ec1c:	da802d17 	ldw	r10,180(sp)
1010ec20:	103fd11e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ec24:	e73ffc04 	addi	fp,fp,-16
1010ec28:	d8c01c17 	ldw	r3,112(sp)
1010ec2c:	d8801b17 	ldw	r2,108(sp)
1010ec30:	d811883a 	mov	r8,sp
1010ec34:	4f3feb16 	blt	r9,fp,1010ebe4 <_gp+0xfffed654>
1010ec38:	dac02217 	ldw	r11,136(sp)
1010ec3c:	1f07883a 	add	r3,r3,fp
1010ec40:	10800044 	addi	r2,r2,1
1010ec44:	42c00015 	stw	r11,0(r8)
1010ec48:	47000115 	stw	fp,4(r8)
1010ec4c:	d8c01c15 	stw	r3,112(sp)
1010ec50:	d8801b15 	stw	r2,108(sp)
1010ec54:	010001c4 	movi	r4,7
1010ec58:	2080b616 	blt	r4,r2,1010ef34 <___svfiprintf_internal_r+0x1004>
1010ec5c:	42000204 	addi	r8,r8,8
1010ec60:	003f4e06 	br	1010e99c <_gp+0xfffed40c>
1010ec64:	d9801a04 	addi	r6,sp,104
1010ec68:	b80b883a 	mov	r5,r23
1010ec6c:	a809883a 	mov	r4,r21
1010ec70:	010dd600 	call	1010dd60 <__ssprint_r>
1010ec74:	103fbc1e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ec78:	d8c01c17 	ldw	r3,112(sp)
1010ec7c:	d811883a 	mov	r8,sp
1010ec80:	003f7a06 	br	1010ea6c <_gp+0xfffed4dc>
1010ec84:	d9801a04 	addi	r6,sp,104
1010ec88:	b80b883a 	mov	r5,r23
1010ec8c:	a809883a 	mov	r4,r21
1010ec90:	010dd600 	call	1010dd60 <__ssprint_r>
1010ec94:	103fa826 	beq	r2,zero,1010eb38 <_gp+0xfffed5a8>
1010ec98:	003fb306 	br	1010eb68 <_gp+0xfffed5d8>
1010ec9c:	d9801a04 	addi	r6,sp,104
1010eca0:	b80b883a 	mov	r5,r23
1010eca4:	a809883a 	mov	r4,r21
1010eca8:	010dd600 	call	1010dd60 <__ssprint_r>
1010ecac:	103fae1e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ecb0:	d811883a 	mov	r8,sp
1010ecb4:	003cdc06 	br	1010e028 <_gp+0xfffeca98>
1010ecb8:	d9801a04 	addi	r6,sp,104
1010ecbc:	b80b883a 	mov	r5,r23
1010ecc0:	a809883a 	mov	r4,r21
1010ecc4:	010dd600 	call	1010dd60 <__ssprint_r>
1010ecc8:	103fa71e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010eccc:	d8c01c17 	ldw	r3,112(sp)
1010ecd0:	d8801b17 	ldw	r2,108(sp)
1010ecd4:	d811883a 	mov	r8,sp
1010ecd8:	003f5a06 	br	1010ea44 <_gp+0xfffed4b4>
1010ecdc:	d9801a04 	addi	r6,sp,104
1010ece0:	b80b883a 	mov	r5,r23
1010ece4:	a809883a 	mov	r4,r21
1010ece8:	010dd600 	call	1010dd60 <__ssprint_r>
1010ecec:	103f9e1e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ecf0:	d8c01c17 	ldw	r3,112(sp)
1010ecf4:	d8801b17 	ldw	r2,108(sp)
1010ecf8:	d811883a 	mov	r8,sp
1010ecfc:	003f1706 	br	1010e95c <_gp+0xfffed3cc>
1010ed00:	d9801a04 	addi	r6,sp,104
1010ed04:	b80b883a 	mov	r5,r23
1010ed08:	a809883a 	mov	r4,r21
1010ed0c:	010dd600 	call	1010dd60 <__ssprint_r>
1010ed10:	103f951e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ed14:	d8c01c17 	ldw	r3,112(sp)
1010ed18:	d8801b17 	ldw	r2,108(sp)
1010ed1c:	d811883a 	mov	r8,sp
1010ed20:	003f1b06 	br	1010e990 <_gp+0xfffed400>
1010ed24:	d8001d85 	stb	zero,118(sp)
1010ed28:	80007b16 	blt	r16,zero,1010ef18 <___svfiprintf_internal_r+0xfe8>
1010ed2c:	00ffdfc4 	movi	r3,-129
1010ed30:	e244b03a 	or	r2,fp,r9
1010ed34:	90e4703a 	and	r18,r18,r3
1010ed38:	103d7026 	beq	r2,zero,1010e2fc <_gp+0xfffecd6c>
1010ed3c:	0015883a 	mov	r10,zero
1010ed40:	003d7206 	br	1010e30c <_gp+0xfffecd7c>
1010ed44:	d9801a04 	addi	r6,sp,104
1010ed48:	b80b883a 	mov	r5,r23
1010ed4c:	a809883a 	mov	r4,r21
1010ed50:	010dd600 	call	1010dd60 <__ssprint_r>
1010ed54:	103f841e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ed58:	d8c01c17 	ldw	r3,112(sp)
1010ed5c:	d8801b17 	ldw	r2,108(sp)
1010ed60:	d811883a 	mov	r8,sp
1010ed64:	003ef006 	br	1010e928 <_gp+0xfffed398>
1010ed68:	9080100c 	andi	r2,r18,64
1010ed6c:	d8001d85 	stb	zero,118(sp)
1010ed70:	dac02317 	ldw	r11,140(sp)
1010ed74:	10008126 	beq	r2,zero,1010ef7c <___svfiprintf_internal_r+0x104c>
1010ed78:	58800104 	addi	r2,r11,4
1010ed7c:	5f00000b 	ldhu	fp,0(r11)
1010ed80:	0013883a 	mov	r9,zero
1010ed84:	803ec30e 	bge	r16,zero,1010e894 <_gp+0xfffed304>
1010ed88:	d8802315 	stw	r2,140(sp)
1010ed8c:	0015883a 	mov	r10,zero
1010ed90:	e244b03a 	or	r2,fp,r9
1010ed94:	103e371e 	bne	r2,zero,1010e674 <_gp+0xfffed0e4>
1010ed98:	00800044 	movi	r2,1
1010ed9c:	10803fcc 	andi	r2,r2,255
1010eda0:	00c00044 	movi	r3,1
1010eda4:	10c06126 	beq	r2,r3,1010ef2c <___svfiprintf_internal_r+0xffc>
1010eda8:	00c00084 	movi	r3,2
1010edac:	10fd5526 	beq	r2,r3,1010e304 <_gp+0xfffecd74>
1010edb0:	003ed806 	br	1010e914 <_gp+0xfffed384>
1010edb4:	d8802315 	stw	r2,140(sp)
1010edb8:	98c00007 	ldb	r3,0(r19)
1010edbc:	003cab06 	br	1010e06c <_gp+0xfffecadc>
1010edc0:	d9801a04 	addi	r6,sp,104
1010edc4:	b80b883a 	mov	r5,r23
1010edc8:	a809883a 	mov	r4,r21
1010edcc:	010dd600 	call	1010dd60 <__ssprint_r>
1010edd0:	103f651e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010edd4:	d8c01c17 	ldw	r3,112(sp)
1010edd8:	003f4f06 	br	1010eb18 <_gp+0xfffed588>
1010eddc:	00840474 	movhi	r2,4113
1010ede0:	109de704 	addi	r2,r2,30620
1010ede4:	d8802915 	stw	r2,164(sp)
1010ede8:	003d4406 	br	1010e2fc <_gp+0xfffecd6c>
1010edec:	dac02317 	ldw	r11,140(sp)
1010edf0:	58800017 	ldw	r2,0(r11)
1010edf4:	dac02517 	ldw	r11,148(sp)
1010edf8:	5807d7fa 	srai	r3,r11,31
1010edfc:	dac02317 	ldw	r11,140(sp)
1010ee00:	10c00115 	stw	r3,4(r2)
1010ee04:	5ac00104 	addi	r11,r11,4
1010ee08:	dac02315 	stw	r11,140(sp)
1010ee0c:	dac02517 	ldw	r11,148(sp)
1010ee10:	12c00015 	stw	r11,0(r2)
1010ee14:	003c6d06 	br	1010dfcc <_gp+0xfffeca3c>
1010ee18:	9080100c 	andi	r2,r18,64
1010ee1c:	dac02317 	ldw	r11,140(sp)
1010ee20:	103e5326 	beq	r2,zero,1010e770 <_gp+0xfffed1e0>
1010ee24:	5f00000f 	ldh	fp,0(r11)
1010ee28:	5ac00104 	addi	r11,r11,4
1010ee2c:	dac02315 	stw	r11,140(sp)
1010ee30:	e013d7fa 	srai	r9,fp,31
1010ee34:	4805883a 	mov	r2,r9
1010ee38:	003e0706 	br	1010e658 <_gp+0xfffed0c8>
1010ee3c:	00800c04 	movi	r2,48
1010ee40:	d8801d05 	stb	r2,116(sp)
1010ee44:	d8c01d45 	stb	r3,117(sp)
1010ee48:	d8001d85 	stb	zero,118(sp)
1010ee4c:	90800094 	ori	r2,r18,2
1010ee50:	80008f16 	blt	r16,zero,1010f090 <___svfiprintf_internal_r+0x1160>
1010ee54:	00bfdfc4 	movi	r2,-129
1010ee58:	90a4703a 	and	r18,r18,r2
1010ee5c:	94800094 	ori	r18,r18,2
1010ee60:	0015883a 	mov	r10,zero
1010ee64:	003d2906 	br	1010e30c <_gp+0xfffecd7c>
1010ee68:	98c00007 	ldb	r3,0(r19)
1010ee6c:	003c7f06 	br	1010e06c <_gp+0xfffecadc>
1010ee70:	dac02317 	ldw	r11,140(sp)
1010ee74:	0013883a 	mov	r9,zero
1010ee78:	5f000017 	ldw	fp,0(r11)
1010ee7c:	5ac00104 	addi	r11,r11,4
1010ee80:	dac02315 	stw	r11,140(sp)
1010ee84:	003d1506 	br	1010e2dc <_gp+0xfffecd4c>
1010ee88:	9080100c 	andi	r2,r18,64
1010ee8c:	d8001d85 	stb	zero,118(sp)
1010ee90:	dac02317 	ldw	r11,140(sp)
1010ee94:	10003426 	beq	r2,zero,1010ef68 <___svfiprintf_internal_r+0x1038>
1010ee98:	58800104 	addi	r2,r11,4
1010ee9c:	5f00000b 	ldhu	fp,0(r11)
1010eea0:	0013883a 	mov	r9,zero
1010eea4:	803e950e 	bge	r16,zero,1010e8fc <_gp+0xfffed36c>
1010eea8:	e246b03a 	or	r3,fp,r9
1010eeac:	d8802315 	stw	r2,140(sp)
1010eeb0:	183d5a1e 	bne	r3,zero,1010e41c <_gp+0xfffece8c>
1010eeb4:	0015883a 	mov	r10,zero
1010eeb8:	0005883a 	mov	r2,zero
1010eebc:	003fb706 	br	1010ed9c <_gp+0xfffed80c>
1010eec0:	98c00043 	ldbu	r3,1(r19)
1010eec4:	94800814 	ori	r18,r18,32
1010eec8:	9cc00044 	addi	r19,r19,1
1010eecc:	18c03fcc 	andi	r3,r3,255
1010eed0:	18c0201c 	xori	r3,r3,128
1010eed4:	18ffe004 	addi	r3,r3,-128
1010eed8:	003c6406 	br	1010e06c <_gp+0xfffecadc>
1010eedc:	d8c02315 	stw	r3,140(sp)
1010eee0:	0015883a 	mov	r10,zero
1010eee4:	003faa06 	br	1010ed90 <_gp+0xfffed800>
1010eee8:	dac02317 	ldw	r11,140(sp)
1010eeec:	58800017 	ldw	r2,0(r11)
1010eef0:	5ac00104 	addi	r11,r11,4
1010eef4:	dac02315 	stw	r11,140(sp)
1010eef8:	dac02517 	ldw	r11,148(sp)
1010eefc:	12c00015 	stw	r11,0(r2)
1010ef00:	003c3206 	br	1010dfcc <_gp+0xfffeca3c>
1010ef04:	01040474 	movhi	r4,4113
1010ef08:	211de704 	addi	r4,r4,30620
1010ef0c:	d9002915 	stw	r4,164(sp)
1010ef10:	d8c02315 	stw	r3,140(sp)
1010ef14:	1025883a 	mov	r18,r2
1010ef18:	e244b03a 	or	r2,fp,r9
1010ef1c:	103f871e 	bne	r2,zero,1010ed3c <_gp+0xfffed7ac>
1010ef20:	0015883a 	mov	r10,zero
1010ef24:	00800084 	movi	r2,2
1010ef28:	003f9c06 	br	1010ed9c <_gp+0xfffed80c>
1010ef2c:	0039883a 	mov	fp,zero
1010ef30:	003e5f06 	br	1010e8b0 <_gp+0xfffed320>
1010ef34:	d9801a04 	addi	r6,sp,104
1010ef38:	b80b883a 	mov	r5,r23
1010ef3c:	a809883a 	mov	r4,r21
1010ef40:	010dd600 	call	1010dd60 <__ssprint_r>
1010ef44:	103f081e 	bne	r2,zero,1010eb68 <_gp+0xfffed5d8>
1010ef48:	d8c01c17 	ldw	r3,112(sp)
1010ef4c:	d8801b17 	ldw	r2,108(sp)
1010ef50:	d811883a 	mov	r8,sp
1010ef54:	003e9106 	br	1010e99c <_gp+0xfffed40c>
1010ef58:	01040474 	movhi	r4,4113
1010ef5c:	211e4f04 	addi	r4,r4,31036
1010ef60:	d9002215 	stw	r4,136(sp)
1010ef64:	003ead06 	br	1010ea1c <_gp+0xfffed48c>
1010ef68:	58800104 	addi	r2,r11,4
1010ef6c:	5f000017 	ldw	fp,0(r11)
1010ef70:	0013883a 	mov	r9,zero
1010ef74:	803e610e 	bge	r16,zero,1010e8fc <_gp+0xfffed36c>
1010ef78:	003fcb06 	br	1010eea8 <_gp+0xfffed918>
1010ef7c:	58800104 	addi	r2,r11,4
1010ef80:	5f000017 	ldw	fp,0(r11)
1010ef84:	0013883a 	mov	r9,zero
1010ef88:	803e420e 	bge	r16,zero,1010e894 <_gp+0xfffed304>
1010ef8c:	003f7e06 	br	1010ed88 <_gp+0xfffed7f8>
1010ef90:	5f000017 	ldw	fp,0(r11)
1010ef94:	5ac00104 	addi	r11,r11,4
1010ef98:	0013883a 	mov	r9,zero
1010ef9c:	dac02315 	stw	r11,140(sp)
1010efa0:	003cce06 	br	1010e2dc <_gp+0xfffecd4c>
1010efa4:	8809883a 	mov	r4,r17
1010efa8:	da002c15 	stw	r8,176(sp)
1010efac:	01058200 	call	10105820 <strlen>
1010efb0:	d8802115 	stw	r2,132(sp)
1010efb4:	da801d83 	ldbu	r10,118(sp)
1010efb8:	df002315 	stw	fp,140(sp)
1010efbc:	0021883a 	mov	r16,zero
1010efc0:	da002c17 	ldw	r8,176(sp)
1010efc4:	003cf606 	br	1010e3a0 <_gp+0xfffece10>
1010efc8:	00800184 	movi	r2,6
1010efcc:	1400012e 	bgeu	r2,r16,1010efd4 <___svfiprintf_internal_r+0x10a4>
1010efd0:	1021883a 	mov	r16,r2
1010efd4:	dc002115 	stw	r16,132(sp)
1010efd8:	8005883a 	mov	r2,r16
1010efdc:	80003c16 	blt	r16,zero,1010f0d0 <___svfiprintf_internal_r+0x11a0>
1010efe0:	04440474 	movhi	r17,4113
1010efe4:	d8802015 	stw	r2,128(sp)
1010efe8:	df002315 	stw	fp,140(sp)
1010efec:	8c5dec04 	addi	r17,r17,30640
1010eff0:	003d2e06 	br	1010e4ac <_gp+0xfffecf1c>
1010eff4:	04001004 	movi	r16,64
1010eff8:	800b883a 	mov	r5,r16
1010effc:	010488c0 	call	1010488c <_malloc_r>
1010f000:	dac02717 	ldw	r11,156(sp)
1010f004:	58800015 	stw	r2,0(r11)
1010f008:	58800415 	stw	r2,16(r11)
1010f00c:	10004826 	beq	r2,zero,1010f130 <___svfiprintf_internal_r+0x1200>
1010f010:	dac02717 	ldw	r11,156(sp)
1010f014:	5c000515 	stw	r16,20(r11)
1010f018:	003bd906 	br	1010df80 <_gp+0xfffec9f0>
1010f01c:	9080004c 	andi	r2,r18,1
1010f020:	0015883a 	mov	r10,zero
1010f024:	10000626 	beq	r2,zero,1010f040 <___svfiprintf_internal_r+0x1110>
1010f028:	dac02b17 	ldw	r11,172(sp)
1010f02c:	00800c04 	movi	r2,48
1010f030:	d88019c5 	stb	r2,103(sp)
1010f034:	dac02115 	stw	r11,132(sp)
1010f038:	dc4019c4 	addi	r17,sp,103
1010f03c:	003cd806 	br	1010e3a0 <_gp+0xfffece10>
1010f040:	d8002115 	stw	zero,132(sp)
1010f044:	dc401a04 	addi	r17,sp,104
1010f048:	003cd506 	br	1010e3a0 <_gp+0xfffece10>
1010f04c:	01040474 	movhi	r4,4113
1010f050:	211e5304 	addi	r4,r4,31052
1010f054:	d9002815 	stw	r4,160(sp)
1010f058:	003d4306 	br	1010e568 <_gp+0xfffecfd8>
1010f05c:	00bfffc4 	movi	r2,-1
1010f060:	003ec606 	br	1010eb7c <_gp+0xfffed5ec>
1010f064:	00800044 	movi	r2,1
1010f068:	10803fcc 	andi	r2,r2,255
1010f06c:	00c00044 	movi	r3,1
1010f070:	10fd8026 	beq	r2,r3,1010e674 <_gp+0xfffed0e4>
1010f074:	00c00084 	movi	r3,2
1010f078:	10fca426 	beq	r2,r3,1010e30c <_gp+0xfffecd7c>
1010f07c:	003ce806 	br	1010e420 <_gp+0xfffece90>
1010f080:	01040474 	movhi	r4,4113
1010f084:	211e5304 	addi	r4,r4,31052
1010f088:	d9002815 	stw	r4,160(sp)
1010f08c:	003e9906 	br	1010eaf4 <_gp+0xfffed564>
1010f090:	1025883a 	mov	r18,r2
1010f094:	0015883a 	mov	r10,zero
1010f098:	00800084 	movi	r2,2
1010f09c:	003ff206 	br	1010f068 <_gp+0xfffedad8>
1010f0a0:	01440474 	movhi	r5,4113
1010f0a4:	295e4f04 	addi	r5,r5,31036
1010f0a8:	d9402215 	stw	r5,136(sp)
1010f0ac:	003ee206 	br	1010ec38 <_gp+0xfffed6a8>
1010f0b0:	5827883a 	mov	r19,r11
1010f0b4:	0021883a 	mov	r16,zero
1010f0b8:	003bed06 	br	1010e070 <_gp+0xfffecae0>
1010f0bc:	dc002115 	stw	r16,132(sp)
1010f0c0:	da801d83 	ldbu	r10,118(sp)
1010f0c4:	df002315 	stw	fp,140(sp)
1010f0c8:	0021883a 	mov	r16,zero
1010f0cc:	003cb406 	br	1010e3a0 <_gp+0xfffece10>
1010f0d0:	0005883a 	mov	r2,zero
1010f0d4:	003fc206 	br	1010efe0 <_gp+0xfffeda50>
1010f0d8:	d8802317 	ldw	r2,140(sp)
1010f0dc:	98c00043 	ldbu	r3,1(r19)
1010f0e0:	5827883a 	mov	r19,r11
1010f0e4:	14000017 	ldw	r16,0(r2)
1010f0e8:	10800104 	addi	r2,r2,4
1010f0ec:	d8802315 	stw	r2,140(sp)
1010f0f0:	803f760e 	bge	r16,zero,1010eecc <_gp+0xfffed93c>
1010f0f4:	18c03fcc 	andi	r3,r3,255
1010f0f8:	18c0201c 	xori	r3,r3,128
1010f0fc:	043fffc4 	movi	r16,-1
1010f100:	18ffe004 	addi	r3,r3,-128
1010f104:	003bd906 	br	1010e06c <_gp+0xfffecadc>
1010f108:	d9c01d85 	stb	r7,118(sp)
1010f10c:	003cb606 	br	1010e3e8 <_gp+0xfffece58>
1010f110:	d9c01d85 	stb	r7,118(sp)
1010f114:	003d2106 	br	1010e59c <_gp+0xfffed00c>
1010f118:	d9c01d85 	stb	r7,118(sp)
1010f11c:	003d8e06 	br	1010e758 <_gp+0xfffed1c8>
1010f120:	d9c01d85 	stb	r7,118(sp)
1010f124:	003db306 	br	1010e7f4 <_gp+0xfffed264>
1010f128:	d9c01d85 	stb	r7,118(sp)
1010f12c:	003c8a06 	br	1010e358 <_gp+0xfffecdc8>
1010f130:	dac02a17 	ldw	r11,168(sp)
1010f134:	00800304 	movi	r2,12
1010f138:	58800015 	stw	r2,0(r11)
1010f13c:	00bfffc4 	movi	r2,-1
1010f140:	003e8e06 	br	1010eb7c <_gp+0xfffed5ec>
1010f144:	d9c01d85 	stb	r7,118(sp)
1010f148:	003dc706 	br	1010e868 <_gp+0xfffed2d8>
1010f14c:	d9c01d85 	stb	r7,118(sp)
1010f150:	003ddf06 	br	1010e8d0 <_gp+0xfffed340>
1010f154:	d9c01d85 	stb	r7,118(sp)
1010f158:	003d3706 	br	1010e638 <_gp+0xfffed0a8>
1010f15c:	d9c01d85 	stb	r7,118(sp)
1010f160:	003c5406 	br	1010e2b4 <_gp+0xfffecd24>
1010f164:	d9c01d85 	stb	r7,118(sp)
1010f168:	003d1d06 	br	1010e5e0 <_gp+0xfffed050>

1010f16c <__sprint_r.part.0>:
1010f16c:	28801917 	ldw	r2,100(r5)
1010f170:	defff604 	addi	sp,sp,-40
1010f174:	dd400515 	stw	r21,20(sp)
1010f178:	dfc00915 	stw	ra,36(sp)
1010f17c:	df000815 	stw	fp,32(sp)
1010f180:	ddc00715 	stw	r23,28(sp)
1010f184:	dd800615 	stw	r22,24(sp)
1010f188:	dd000415 	stw	r20,16(sp)
1010f18c:	dcc00315 	stw	r19,12(sp)
1010f190:	dc800215 	stw	r18,8(sp)
1010f194:	dc400115 	stw	r17,4(sp)
1010f198:	dc000015 	stw	r16,0(sp)
1010f19c:	1088000c 	andi	r2,r2,8192
1010f1a0:	302b883a 	mov	r21,r6
1010f1a4:	10002e26 	beq	r2,zero,1010f260 <__sprint_r.part.0+0xf4>
1010f1a8:	30800217 	ldw	r2,8(r6)
1010f1ac:	35800017 	ldw	r22,0(r6)
1010f1b0:	10002926 	beq	r2,zero,1010f258 <__sprint_r.part.0+0xec>
1010f1b4:	2827883a 	mov	r19,r5
1010f1b8:	2029883a 	mov	r20,r4
1010f1bc:	b5c00104 	addi	r23,r22,4
1010f1c0:	04bfffc4 	movi	r18,-1
1010f1c4:	bc400017 	ldw	r17,0(r23)
1010f1c8:	b4000017 	ldw	r16,0(r22)
1010f1cc:	0039883a 	mov	fp,zero
1010f1d0:	8822d0ba 	srli	r17,r17,2
1010f1d4:	8800031e 	bne	r17,zero,1010f1e4 <__sprint_r.part.0+0x78>
1010f1d8:	00001806 	br	1010f23c <__sprint_r.part.0+0xd0>
1010f1dc:	84000104 	addi	r16,r16,4
1010f1e0:	8f001526 	beq	r17,fp,1010f238 <__sprint_r.part.0+0xcc>
1010f1e4:	81400017 	ldw	r5,0(r16)
1010f1e8:	980d883a 	mov	r6,r19
1010f1ec:	a009883a 	mov	r4,r20
1010f1f0:	01109dc0 	call	101109dc <_fputwc_r>
1010f1f4:	e7000044 	addi	fp,fp,1
1010f1f8:	14bff81e 	bne	r2,r18,1010f1dc <_gp+0xfffedc4c>
1010f1fc:	9005883a 	mov	r2,r18
1010f200:	a8000215 	stw	zero,8(r21)
1010f204:	a8000115 	stw	zero,4(r21)
1010f208:	dfc00917 	ldw	ra,36(sp)
1010f20c:	df000817 	ldw	fp,32(sp)
1010f210:	ddc00717 	ldw	r23,28(sp)
1010f214:	dd800617 	ldw	r22,24(sp)
1010f218:	dd400517 	ldw	r21,20(sp)
1010f21c:	dd000417 	ldw	r20,16(sp)
1010f220:	dcc00317 	ldw	r19,12(sp)
1010f224:	dc800217 	ldw	r18,8(sp)
1010f228:	dc400117 	ldw	r17,4(sp)
1010f22c:	dc000017 	ldw	r16,0(sp)
1010f230:	dec00a04 	addi	sp,sp,40
1010f234:	f800283a 	ret
1010f238:	a8800217 	ldw	r2,8(r21)
1010f23c:	8c63883a 	add	r17,r17,r17
1010f240:	8c63883a 	add	r17,r17,r17
1010f244:	1445c83a 	sub	r2,r2,r17
1010f248:	a8800215 	stw	r2,8(r21)
1010f24c:	b5800204 	addi	r22,r22,8
1010f250:	bdc00204 	addi	r23,r23,8
1010f254:	103fdb1e 	bne	r2,zero,1010f1c4 <_gp+0xfffedc34>
1010f258:	0005883a 	mov	r2,zero
1010f25c:	003fe806 	br	1010f200 <_gp+0xfffedc70>
1010f260:	010b91c0 	call	1010b91c <__sfvwrite_r>
1010f264:	003fe606 	br	1010f200 <_gp+0xfffedc70>

1010f268 <__sprint_r>:
1010f268:	30c00217 	ldw	r3,8(r6)
1010f26c:	18000126 	beq	r3,zero,1010f274 <__sprint_r+0xc>
1010f270:	010f16c1 	jmpi	1010f16c <__sprint_r.part.0>
1010f274:	30000115 	stw	zero,4(r6)
1010f278:	0005883a 	mov	r2,zero
1010f27c:	f800283a 	ret

1010f280 <___vfiprintf_internal_r>:
1010f280:	deffc904 	addi	sp,sp,-220
1010f284:	df003515 	stw	fp,212(sp)
1010f288:	dd003115 	stw	r20,196(sp)
1010f28c:	dfc03615 	stw	ra,216(sp)
1010f290:	ddc03415 	stw	r23,208(sp)
1010f294:	dd803315 	stw	r22,204(sp)
1010f298:	dd403215 	stw	r21,200(sp)
1010f29c:	dcc03015 	stw	r19,192(sp)
1010f2a0:	dc802f15 	stw	r18,188(sp)
1010f2a4:	dc402e15 	stw	r17,184(sp)
1010f2a8:	dc002d15 	stw	r16,180(sp)
1010f2ac:	d9002015 	stw	r4,128(sp)
1010f2b0:	d9c02215 	stw	r7,136(sp)
1010f2b4:	2829883a 	mov	r20,r5
1010f2b8:	3039883a 	mov	fp,r6
1010f2bc:	20000226 	beq	r4,zero,1010f2c8 <___vfiprintf_internal_r+0x48>
1010f2c0:	20800e17 	ldw	r2,56(r4)
1010f2c4:	1000cf26 	beq	r2,zero,1010f604 <___vfiprintf_internal_r+0x384>
1010f2c8:	a080030b 	ldhu	r2,12(r20)
1010f2cc:	10c8000c 	andi	r3,r2,8192
1010f2d0:	1800061e 	bne	r3,zero,1010f2ec <___vfiprintf_internal_r+0x6c>
1010f2d4:	a1001917 	ldw	r4,100(r20)
1010f2d8:	00f7ffc4 	movi	r3,-8193
1010f2dc:	10880014 	ori	r2,r2,8192
1010f2e0:	20c6703a 	and	r3,r4,r3
1010f2e4:	a080030d 	sth	r2,12(r20)
1010f2e8:	a0c01915 	stw	r3,100(r20)
1010f2ec:	10c0020c 	andi	r3,r2,8
1010f2f0:	1800a926 	beq	r3,zero,1010f598 <___vfiprintf_internal_r+0x318>
1010f2f4:	a0c00417 	ldw	r3,16(r20)
1010f2f8:	1800a726 	beq	r3,zero,1010f598 <___vfiprintf_internal_r+0x318>
1010f2fc:	1080068c 	andi	r2,r2,26
1010f300:	00c00284 	movi	r3,10
1010f304:	10c0ac26 	beq	r2,r3,1010f5b8 <___vfiprintf_internal_r+0x338>
1010f308:	da801a04 	addi	r10,sp,104
1010f30c:	da801e15 	stw	r10,120(sp)
1010f310:	d8801e17 	ldw	r2,120(sp)
1010f314:	da8019c4 	addi	r10,sp,103
1010f318:	05840474 	movhi	r22,4113
1010f31c:	05c40474 	movhi	r23,4113
1010f320:	da801f15 	stw	r10,124(sp)
1010f324:	1295c83a 	sub	r10,r2,r10
1010f328:	b59e5b04 	addi	r22,r22,31084
1010f32c:	bdde5704 	addi	r23,r23,31068
1010f330:	dec01a15 	stw	sp,104(sp)
1010f334:	d8001c15 	stw	zero,112(sp)
1010f338:	d8001b15 	stw	zero,108(sp)
1010f33c:	d8002615 	stw	zero,152(sp)
1010f340:	d8002315 	stw	zero,140(sp)
1010f344:	da802715 	stw	r10,156(sp)
1010f348:	d811883a 	mov	r8,sp
1010f34c:	dd002115 	stw	r20,132(sp)
1010f350:	e021883a 	mov	r16,fp
1010f354:	80800007 	ldb	r2,0(r16)
1010f358:	1003ea26 	beq	r2,zero,10110304 <___vfiprintf_internal_r+0x1084>
1010f35c:	00c00944 	movi	r3,37
1010f360:	8025883a 	mov	r18,r16
1010f364:	10c0021e 	bne	r2,r3,1010f370 <___vfiprintf_internal_r+0xf0>
1010f368:	00001606 	br	1010f3c4 <___vfiprintf_internal_r+0x144>
1010f36c:	10c00326 	beq	r2,r3,1010f37c <___vfiprintf_internal_r+0xfc>
1010f370:	94800044 	addi	r18,r18,1
1010f374:	90800007 	ldb	r2,0(r18)
1010f378:	103ffc1e 	bne	r2,zero,1010f36c <_gp+0xfffedddc>
1010f37c:	9423c83a 	sub	r17,r18,r16
1010f380:	88001026 	beq	r17,zero,1010f3c4 <___vfiprintf_internal_r+0x144>
1010f384:	d8c01c17 	ldw	r3,112(sp)
1010f388:	d8801b17 	ldw	r2,108(sp)
1010f38c:	44000015 	stw	r16,0(r8)
1010f390:	88c7883a 	add	r3,r17,r3
1010f394:	10800044 	addi	r2,r2,1
1010f398:	44400115 	stw	r17,4(r8)
1010f39c:	d8c01c15 	stw	r3,112(sp)
1010f3a0:	d8801b15 	stw	r2,108(sp)
1010f3a4:	010001c4 	movi	r4,7
1010f3a8:	2080760e 	bge	r4,r2,1010f584 <___vfiprintf_internal_r+0x304>
1010f3ac:	1803821e 	bne	r3,zero,101101b8 <___vfiprintf_internal_r+0xf38>
1010f3b0:	da802317 	ldw	r10,140(sp)
1010f3b4:	d8001b15 	stw	zero,108(sp)
1010f3b8:	d811883a 	mov	r8,sp
1010f3bc:	5455883a 	add	r10,r10,r17
1010f3c0:	da802315 	stw	r10,140(sp)
1010f3c4:	90800007 	ldb	r2,0(r18)
1010f3c8:	10044626 	beq	r2,zero,101104e4 <___vfiprintf_internal_r+0x1264>
1010f3cc:	90c00047 	ldb	r3,1(r18)
1010f3d0:	94000044 	addi	r16,r18,1
1010f3d4:	d8001d85 	stb	zero,118(sp)
1010f3d8:	0009883a 	mov	r4,zero
1010f3dc:	000f883a 	mov	r7,zero
1010f3e0:	027fffc4 	movi	r9,-1
1010f3e4:	0023883a 	mov	r17,zero
1010f3e8:	0029883a 	mov	r20,zero
1010f3ec:	01401604 	movi	r5,88
1010f3f0:	01800244 	movi	r6,9
1010f3f4:	03400a84 	movi	r13,42
1010f3f8:	03001b04 	movi	r12,108
1010f3fc:	84000044 	addi	r16,r16,1
1010f400:	18bff804 	addi	r2,r3,-32
1010f404:	28827336 	bltu	r5,r2,1010fdd4 <___vfiprintf_internal_r+0xb54>
1010f408:	100490ba 	slli	r2,r2,2
1010f40c:	02840474 	movhi	r10,4113
1010f410:	52bd0804 	addi	r10,r10,-3040
1010f414:	1285883a 	add	r2,r2,r10
1010f418:	10800017 	ldw	r2,0(r2)
1010f41c:	1000683a 	jmp	r2
1010f420:	1010fb08 	cmpgei	zero,r2,17388
1010f424:	1010fdd4 	ori	zero,r2,17399
1010f428:	1010fdd4 	ori	zero,r2,17399
1010f42c:	1010fb28 	cmpgeui	zero,r2,17388
1010f430:	1010fdd4 	ori	zero,r2,17399
1010f434:	1010fdd4 	ori	zero,r2,17399
1010f438:	1010fdd4 	ori	zero,r2,17399
1010f43c:	1010fdd4 	ori	zero,r2,17399
1010f440:	1010fdd4 	ori	zero,r2,17399
1010f444:	1010fdd4 	ori	zero,r2,17399
1010f448:	1010fd10 	cmplti	zero,r2,17396
1010f44c:	1010fd2c 	andhi	zero,r2,17396
1010f450:	1010fdd4 	ori	zero,r2,17399
1010f454:	1010f614 	ori	zero,r2,17368
1010f458:	1010fd3c 	xorhi	zero,r2,17396
1010f45c:	1010fdd4 	ori	zero,r2,17399
1010f460:	1010fb34 	orhi	zero,r2,17388
1010f464:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f468:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f46c:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f470:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f474:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f478:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f47c:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f480:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f484:	1010fb40 	call	11010fb4 <_gp+0xeefa24>
1010f488:	1010fdd4 	ori	zero,r2,17399
1010f48c:	1010fdd4 	ori	zero,r2,17399
1010f490:	1010fdd4 	ori	zero,r2,17399
1010f494:	1010fdd4 	ori	zero,r2,17399
1010f498:	1010fdd4 	ori	zero,r2,17399
1010f49c:	1010fdd4 	ori	zero,r2,17399
1010f4a0:	1010fdd4 	ori	zero,r2,17399
1010f4a4:	1010fdd4 	ori	zero,r2,17399
1010f4a8:	1010fdd4 	ori	zero,r2,17399
1010f4ac:	1010fdd4 	ori	zero,r2,17399
1010f4b0:	1010fb6c 	andhi	zero,r2,17389
1010f4b4:	1010fdd4 	ori	zero,r2,17399
1010f4b8:	1010fdd4 	ori	zero,r2,17399
1010f4bc:	1010fdd4 	ori	zero,r2,17399
1010f4c0:	1010fdd4 	ori	zero,r2,17399
1010f4c4:	1010fdd4 	ori	zero,r2,17399
1010f4c8:	1010fdd4 	ori	zero,r2,17399
1010f4cc:	1010fdd4 	ori	zero,r2,17399
1010f4d0:	1010fdd4 	ori	zero,r2,17399
1010f4d4:	1010fdd4 	ori	zero,r2,17399
1010f4d8:	1010fdd4 	ori	zero,r2,17399
1010f4dc:	1010fba4 	muli	zero,r2,17390
1010f4e0:	1010fdd4 	ori	zero,r2,17399
1010f4e4:	1010fdd4 	ori	zero,r2,17399
1010f4e8:	1010fdd4 	ori	zero,r2,17399
1010f4ec:	1010fdd4 	ori	zero,r2,17399
1010f4f0:	1010fdd4 	ori	zero,r2,17399
1010f4f4:	1010fbfc 	xorhi	zero,r2,17391
1010f4f8:	1010fdd4 	ori	zero,r2,17399
1010f4fc:	1010fdd4 	ori	zero,r2,17399
1010f500:	1010fc6c 	andhi	zero,r2,17393
1010f504:	1010fdd4 	ori	zero,r2,17399
1010f508:	1010fdd4 	ori	zero,r2,17399
1010f50c:	1010fdd4 	ori	zero,r2,17399
1010f510:	1010fdd4 	ori	zero,r2,17399
1010f514:	1010fdd4 	ori	zero,r2,17399
1010f518:	1010fdd4 	ori	zero,r2,17399
1010f51c:	1010fdd4 	ori	zero,r2,17399
1010f520:	1010fdd4 	ori	zero,r2,17399
1010f524:	1010fdd4 	ori	zero,r2,17399
1010f528:	1010fdd4 	ori	zero,r2,17399
1010f52c:	1010fa18 	cmpnei	zero,r2,17384
1010f530:	1010fa44 	addi	zero,r2,17385
1010f534:	1010fdd4 	ori	zero,r2,17399
1010f538:	1010fdd4 	ori	zero,r2,17399
1010f53c:	1010fdd4 	ori	zero,r2,17399
1010f540:	1010fd7c 	xorhi	zero,r2,17397
1010f544:	1010fa44 	addi	zero,r2,17385
1010f548:	1010fdd4 	ori	zero,r2,17399
1010f54c:	1010fdd4 	ori	zero,r2,17399
1010f550:	1010f8d8 	cmpnei	zero,r2,17379
1010f554:	1010fdd4 	ori	zero,r2,17399
1010f558:	1010f8e8 	cmpgeui	zero,r2,17379
1010f55c:	1010f924 	muli	zero,r2,17380
1010f560:	1010f620 	cmpeqi	zero,r2,17368
1010f564:	1010f8cc 	andi	zero,r2,17379
1010f568:	1010fdd4 	ori	zero,r2,17399
1010f56c:	1010fca8 	cmpgeui	zero,r2,17394
1010f570:	1010fdd4 	ori	zero,r2,17399
1010f574:	1010fd00 	call	11010fd0 <_gp+0xeefa40>
1010f578:	1010fdd4 	ori	zero,r2,17399
1010f57c:	1010fdd4 	ori	zero,r2,17399
1010f580:	1010f9c4 	addi	zero,r2,17383
1010f584:	42000204 	addi	r8,r8,8
1010f588:	da802317 	ldw	r10,140(sp)
1010f58c:	5455883a 	add	r10,r10,r17
1010f590:	da802315 	stw	r10,140(sp)
1010f594:	003f8b06 	br	1010f3c4 <_gp+0xfffede34>
1010f598:	d9002017 	ldw	r4,128(sp)
1010f59c:	a00b883a 	mov	r5,r20
1010f5a0:	0109e280 	call	10109e28 <__swsetup_r>
1010f5a4:	1003b11e 	bne	r2,zero,1011046c <___vfiprintf_internal_r+0x11ec>
1010f5a8:	a080030b 	ldhu	r2,12(r20)
1010f5ac:	00c00284 	movi	r3,10
1010f5b0:	1080068c 	andi	r2,r2,26
1010f5b4:	10ff541e 	bne	r2,r3,1010f308 <_gp+0xfffedd78>
1010f5b8:	a080038f 	ldh	r2,14(r20)
1010f5bc:	103f5216 	blt	r2,zero,1010f308 <_gp+0xfffedd78>
1010f5c0:	d9c02217 	ldw	r7,136(sp)
1010f5c4:	d9002017 	ldw	r4,128(sp)
1010f5c8:	e00d883a 	mov	r6,fp
1010f5cc:	a00b883a 	mov	r5,r20
1010f5d0:	01106f80 	call	101106f8 <__sbprintf>
1010f5d4:	dfc03617 	ldw	ra,216(sp)
1010f5d8:	df003517 	ldw	fp,212(sp)
1010f5dc:	ddc03417 	ldw	r23,208(sp)
1010f5e0:	dd803317 	ldw	r22,204(sp)
1010f5e4:	dd403217 	ldw	r21,200(sp)
1010f5e8:	dd003117 	ldw	r20,196(sp)
1010f5ec:	dcc03017 	ldw	r19,192(sp)
1010f5f0:	dc802f17 	ldw	r18,188(sp)
1010f5f4:	dc402e17 	ldw	r17,184(sp)
1010f5f8:	dc002d17 	ldw	r16,180(sp)
1010f5fc:	dec03704 	addi	sp,sp,220
1010f600:	f800283a 	ret
1010f604:	01039340 	call	10103934 <__sinit>
1010f608:	003f2f06 	br	1010f2c8 <_gp+0xfffedd38>
1010f60c:	0463c83a 	sub	r17,zero,r17
1010f610:	d8802215 	stw	r2,136(sp)
1010f614:	a5000114 	ori	r20,r20,4
1010f618:	80c00007 	ldb	r3,0(r16)
1010f61c:	003f7706 	br	1010f3fc <_gp+0xfffede6c>
1010f620:	00800c04 	movi	r2,48
1010f624:	da802217 	ldw	r10,136(sp)
1010f628:	d8801d05 	stb	r2,116(sp)
1010f62c:	00801e04 	movi	r2,120
1010f630:	d8801d45 	stb	r2,117(sp)
1010f634:	d8001d85 	stb	zero,118(sp)
1010f638:	50c00104 	addi	r3,r10,4
1010f63c:	54800017 	ldw	r18,0(r10)
1010f640:	0027883a 	mov	r19,zero
1010f644:	a0800094 	ori	r2,r20,2
1010f648:	48030b16 	blt	r9,zero,10110278 <___vfiprintf_internal_r+0xff8>
1010f64c:	00bfdfc4 	movi	r2,-129
1010f650:	a096703a 	and	r11,r20,r2
1010f654:	d8c02215 	stw	r3,136(sp)
1010f658:	5d000094 	ori	r20,r11,2
1010f65c:	90032b1e 	bne	r18,zero,1011030c <___vfiprintf_internal_r+0x108c>
1010f660:	00840474 	movhi	r2,4113
1010f664:	109de704 	addi	r2,r2,30620
1010f668:	d8802615 	stw	r2,152(sp)
1010f66c:	0039883a 	mov	fp,zero
1010f670:	48017b1e 	bne	r9,zero,1010fc60 <___vfiprintf_internal_r+0x9e0>
1010f674:	0013883a 	mov	r9,zero
1010f678:	0027883a 	mov	r19,zero
1010f67c:	dd401a04 	addi	r21,sp,104
1010f680:	4825883a 	mov	r18,r9
1010f684:	4cc0010e 	bge	r9,r19,1010f68c <___vfiprintf_internal_r+0x40c>
1010f688:	9825883a 	mov	r18,r19
1010f68c:	e7003fcc 	andi	fp,fp,255
1010f690:	e700201c 	xori	fp,fp,128
1010f694:	e73fe004 	addi	fp,fp,-128
1010f698:	e0000126 	beq	fp,zero,1010f6a0 <___vfiprintf_internal_r+0x420>
1010f69c:	94800044 	addi	r18,r18,1
1010f6a0:	a380008c 	andi	r14,r20,2
1010f6a4:	70000126 	beq	r14,zero,1010f6ac <___vfiprintf_internal_r+0x42c>
1010f6a8:	94800084 	addi	r18,r18,2
1010f6ac:	a700210c 	andi	fp,r20,132
1010f6b0:	e001df1e 	bne	fp,zero,1010fe30 <___vfiprintf_internal_r+0xbb0>
1010f6b4:	8c87c83a 	sub	r3,r17,r18
1010f6b8:	00c1dd0e 	bge	zero,r3,1010fe30 <___vfiprintf_internal_r+0xbb0>
1010f6bc:	01c00404 	movi	r7,16
1010f6c0:	d8801c17 	ldw	r2,112(sp)
1010f6c4:	38c3ad0e 	bge	r7,r3,1011057c <___vfiprintf_internal_r+0x12fc>
1010f6c8:	02840474 	movhi	r10,4113
1010f6cc:	529e5b04 	addi	r10,r10,31084
1010f6d0:	dc002915 	stw	r16,164(sp)
1010f6d4:	d9801b17 	ldw	r6,108(sp)
1010f6d8:	da802415 	stw	r10,144(sp)
1010f6dc:	03c001c4 	movi	r15,7
1010f6e0:	da402515 	stw	r9,148(sp)
1010f6e4:	db802815 	stw	r14,160(sp)
1010f6e8:	1821883a 	mov	r16,r3
1010f6ec:	00000506 	br	1010f704 <___vfiprintf_internal_r+0x484>
1010f6f0:	31400084 	addi	r5,r6,2
1010f6f4:	42000204 	addi	r8,r8,8
1010f6f8:	200d883a 	mov	r6,r4
1010f6fc:	843ffc04 	addi	r16,r16,-16
1010f700:	3c000d0e 	bge	r7,r16,1010f738 <___vfiprintf_internal_r+0x4b8>
1010f704:	10800404 	addi	r2,r2,16
1010f708:	31000044 	addi	r4,r6,1
1010f70c:	45800015 	stw	r22,0(r8)
1010f710:	41c00115 	stw	r7,4(r8)
1010f714:	d8801c15 	stw	r2,112(sp)
1010f718:	d9001b15 	stw	r4,108(sp)
1010f71c:	793ff40e 	bge	r15,r4,1010f6f0 <_gp+0xfffee160>
1010f720:	1001b51e 	bne	r2,zero,1010fdf8 <___vfiprintf_internal_r+0xb78>
1010f724:	843ffc04 	addi	r16,r16,-16
1010f728:	000d883a 	mov	r6,zero
1010f72c:	01400044 	movi	r5,1
1010f730:	d811883a 	mov	r8,sp
1010f734:	3c3ff316 	blt	r7,r16,1010f704 <_gp+0xfffee174>
1010f738:	8007883a 	mov	r3,r16
1010f73c:	da402517 	ldw	r9,148(sp)
1010f740:	db802817 	ldw	r14,160(sp)
1010f744:	dc002917 	ldw	r16,164(sp)
1010f748:	da802417 	ldw	r10,144(sp)
1010f74c:	1885883a 	add	r2,r3,r2
1010f750:	40c00115 	stw	r3,4(r8)
1010f754:	42800015 	stw	r10,0(r8)
1010f758:	d8801c15 	stw	r2,112(sp)
1010f75c:	d9401b15 	stw	r5,108(sp)
1010f760:	00c001c4 	movi	r3,7
1010f764:	19426016 	blt	r3,r5,101100e8 <___vfiprintf_internal_r+0xe68>
1010f768:	d8c01d87 	ldb	r3,118(sp)
1010f76c:	42000204 	addi	r8,r8,8
1010f770:	29000044 	addi	r4,r5,1
1010f774:	1801b31e 	bne	r3,zero,1010fe44 <___vfiprintf_internal_r+0xbc4>
1010f778:	7001c026 	beq	r14,zero,1010fe7c <___vfiprintf_internal_r+0xbfc>
1010f77c:	d8c01d04 	addi	r3,sp,116
1010f780:	10800084 	addi	r2,r2,2
1010f784:	40c00015 	stw	r3,0(r8)
1010f788:	00c00084 	movi	r3,2
1010f78c:	40c00115 	stw	r3,4(r8)
1010f790:	d8801c15 	stw	r2,112(sp)
1010f794:	d9001b15 	stw	r4,108(sp)
1010f798:	00c001c4 	movi	r3,7
1010f79c:	1902650e 	bge	r3,r4,10110134 <___vfiprintf_internal_r+0xeb4>
1010f7a0:	10029a1e 	bne	r2,zero,1011020c <___vfiprintf_internal_r+0xf8c>
1010f7a4:	00c02004 	movi	r3,128
1010f7a8:	01000044 	movi	r4,1
1010f7ac:	000b883a 	mov	r5,zero
1010f7b0:	d811883a 	mov	r8,sp
1010f7b4:	e0c1b31e 	bne	fp,r3,1010fe84 <___vfiprintf_internal_r+0xc04>
1010f7b8:	8cb9c83a 	sub	fp,r17,r18
1010f7bc:	0701b10e 	bge	zero,fp,1010fe84 <___vfiprintf_internal_r+0xc04>
1010f7c0:	01c00404 	movi	r7,16
1010f7c4:	3f03890e 	bge	r7,fp,101105ec <___vfiprintf_internal_r+0x136c>
1010f7c8:	00c40474 	movhi	r3,4113
1010f7cc:	18de5704 	addi	r3,r3,31068
1010f7d0:	d8c02415 	stw	r3,144(sp)
1010f7d4:	8007883a 	mov	r3,r16
1010f7d8:	034001c4 	movi	r13,7
1010f7dc:	e021883a 	mov	r16,fp
1010f7e0:	da402515 	stw	r9,148(sp)
1010f7e4:	1839883a 	mov	fp,r3
1010f7e8:	00000506 	br	1010f800 <___vfiprintf_internal_r+0x580>
1010f7ec:	29800084 	addi	r6,r5,2
1010f7f0:	42000204 	addi	r8,r8,8
1010f7f4:	180b883a 	mov	r5,r3
1010f7f8:	843ffc04 	addi	r16,r16,-16
1010f7fc:	3c000d0e 	bge	r7,r16,1010f834 <___vfiprintf_internal_r+0x5b4>
1010f800:	10800404 	addi	r2,r2,16
1010f804:	28c00044 	addi	r3,r5,1
1010f808:	45c00015 	stw	r23,0(r8)
1010f80c:	41c00115 	stw	r7,4(r8)
1010f810:	d8801c15 	stw	r2,112(sp)
1010f814:	d8c01b15 	stw	r3,108(sp)
1010f818:	68fff40e 	bge	r13,r3,1010f7ec <_gp+0xfffee25c>
1010f81c:	1002241e 	bne	r2,zero,101100b0 <___vfiprintf_internal_r+0xe30>
1010f820:	843ffc04 	addi	r16,r16,-16
1010f824:	01800044 	movi	r6,1
1010f828:	000b883a 	mov	r5,zero
1010f82c:	d811883a 	mov	r8,sp
1010f830:	3c3ff316 	blt	r7,r16,1010f800 <_gp+0xfffee270>
1010f834:	da402517 	ldw	r9,148(sp)
1010f838:	e007883a 	mov	r3,fp
1010f83c:	8039883a 	mov	fp,r16
1010f840:	1821883a 	mov	r16,r3
1010f844:	d8c02417 	ldw	r3,144(sp)
1010f848:	1705883a 	add	r2,r2,fp
1010f84c:	47000115 	stw	fp,4(r8)
1010f850:	40c00015 	stw	r3,0(r8)
1010f854:	d8801c15 	stw	r2,112(sp)
1010f858:	d9801b15 	stw	r6,108(sp)
1010f85c:	00c001c4 	movi	r3,7
1010f860:	19827616 	blt	r3,r6,1011023c <___vfiprintf_internal_r+0xfbc>
1010f864:	4cf9c83a 	sub	fp,r9,r19
1010f868:	42000204 	addi	r8,r8,8
1010f86c:	31000044 	addi	r4,r6,1
1010f870:	300b883a 	mov	r5,r6
1010f874:	07018516 	blt	zero,fp,1010fe8c <___vfiprintf_internal_r+0xc0c>
1010f878:	9885883a 	add	r2,r19,r2
1010f87c:	45400015 	stw	r21,0(r8)
1010f880:	44c00115 	stw	r19,4(r8)
1010f884:	d8801c15 	stw	r2,112(sp)
1010f888:	d9001b15 	stw	r4,108(sp)
1010f88c:	00c001c4 	movi	r3,7
1010f890:	1901dd0e 	bge	r3,r4,10110008 <___vfiprintf_internal_r+0xd88>
1010f894:	1002401e 	bne	r2,zero,10110198 <___vfiprintf_internal_r+0xf18>
1010f898:	d8001b15 	stw	zero,108(sp)
1010f89c:	a2c0010c 	andi	r11,r20,4
1010f8a0:	58000226 	beq	r11,zero,1010f8ac <___vfiprintf_internal_r+0x62c>
1010f8a4:	8ca7c83a 	sub	r19,r17,r18
1010f8a8:	04c2f216 	blt	zero,r19,10110474 <___vfiprintf_internal_r+0x11f4>
1010f8ac:	8c80010e 	bge	r17,r18,1010f8b4 <___vfiprintf_internal_r+0x634>
1010f8b0:	9023883a 	mov	r17,r18
1010f8b4:	da802317 	ldw	r10,140(sp)
1010f8b8:	5455883a 	add	r10,r10,r17
1010f8bc:	da802315 	stw	r10,140(sp)
1010f8c0:	d8001b15 	stw	zero,108(sp)
1010f8c4:	d811883a 	mov	r8,sp
1010f8c8:	003ea206 	br	1010f354 <_gp+0xfffeddc4>
1010f8cc:	a5000814 	ori	r20,r20,32
1010f8d0:	80c00007 	ldb	r3,0(r16)
1010f8d4:	003ec906 	br	1010f3fc <_gp+0xfffede6c>
1010f8d8:	80c00007 	ldb	r3,0(r16)
1010f8dc:	1b030926 	beq	r3,r12,10110504 <___vfiprintf_internal_r+0x1284>
1010f8e0:	a5000414 	ori	r20,r20,16
1010f8e4:	003ec506 	br	1010f3fc <_gp+0xfffede6c>
1010f8e8:	21003fcc 	andi	r4,r4,255
1010f8ec:	20035e1e 	bne	r4,zero,10110668 <___vfiprintf_internal_r+0x13e8>
1010f8f0:	a080080c 	andi	r2,r20,32
1010f8f4:	1002a526 	beq	r2,zero,1011038c <___vfiprintf_internal_r+0x110c>
1010f8f8:	da802217 	ldw	r10,136(sp)
1010f8fc:	50800017 	ldw	r2,0(r10)
1010f900:	da802317 	ldw	r10,140(sp)
1010f904:	5007d7fa 	srai	r3,r10,31
1010f908:	da802217 	ldw	r10,136(sp)
1010f90c:	10c00115 	stw	r3,4(r2)
1010f910:	52800104 	addi	r10,r10,4
1010f914:	da802215 	stw	r10,136(sp)
1010f918:	da802317 	ldw	r10,140(sp)
1010f91c:	12800015 	stw	r10,0(r2)
1010f920:	003e8c06 	br	1010f354 <_gp+0xfffeddc4>
1010f924:	21003fcc 	andi	r4,r4,255
1010f928:	2003511e 	bne	r4,zero,10110670 <___vfiprintf_internal_r+0x13f0>
1010f92c:	a080080c 	andi	r2,r20,32
1010f930:	1000a126 	beq	r2,zero,1010fbb8 <___vfiprintf_internal_r+0x938>
1010f934:	da802217 	ldw	r10,136(sp)
1010f938:	d8001d85 	stb	zero,118(sp)
1010f93c:	50800204 	addi	r2,r10,8
1010f940:	54800017 	ldw	r18,0(r10)
1010f944:	54c00117 	ldw	r19,4(r10)
1010f948:	4802b416 	blt	r9,zero,1011041c <___vfiprintf_internal_r+0x119c>
1010f94c:	013fdfc4 	movi	r4,-129
1010f950:	94c6b03a 	or	r3,r18,r19
1010f954:	d8802215 	stw	r2,136(sp)
1010f958:	a128703a 	and	r20,r20,r4
1010f95c:	1800a226 	beq	r3,zero,1010fbe8 <___vfiprintf_internal_r+0x968>
1010f960:	0039883a 	mov	fp,zero
1010f964:	dd401a04 	addi	r21,sp,104
1010f968:	9006d0fa 	srli	r3,r18,3
1010f96c:	9808977a 	slli	r4,r19,29
1010f970:	9826d0fa 	srli	r19,r19,3
1010f974:	948001cc 	andi	r18,r18,7
1010f978:	90800c04 	addi	r2,r18,48
1010f97c:	ad7fffc4 	addi	r21,r21,-1
1010f980:	20e4b03a 	or	r18,r4,r3
1010f984:	a8800005 	stb	r2,0(r21)
1010f988:	94c6b03a 	or	r3,r18,r19
1010f98c:	183ff61e 	bne	r3,zero,1010f968 <_gp+0xfffee3d8>
1010f990:	a0c0004c 	andi	r3,r20,1
1010f994:	18005926 	beq	r3,zero,1010fafc <___vfiprintf_internal_r+0x87c>
1010f998:	10803fcc 	andi	r2,r2,255
1010f99c:	1080201c 	xori	r2,r2,128
1010f9a0:	10bfe004 	addi	r2,r2,-128
1010f9a4:	00c00c04 	movi	r3,48
1010f9a8:	10c05426 	beq	r2,r3,1010fafc <___vfiprintf_internal_r+0x87c>
1010f9ac:	da801e17 	ldw	r10,120(sp)
1010f9b0:	a8bfffc4 	addi	r2,r21,-1
1010f9b4:	a8ffffc5 	stb	r3,-1(r21)
1010f9b8:	50a7c83a 	sub	r19,r10,r2
1010f9bc:	102b883a 	mov	r21,r2
1010f9c0:	003f2f06 	br	1010f680 <_gp+0xfffee0f0>
1010f9c4:	21003fcc 	andi	r4,r4,255
1010f9c8:	2003421e 	bne	r4,zero,101106d4 <___vfiprintf_internal_r+0x1454>
1010f9cc:	00840474 	movhi	r2,4113
1010f9d0:	109de704 	addi	r2,r2,30620
1010f9d4:	d8802615 	stw	r2,152(sp)
1010f9d8:	a080080c 	andi	r2,r20,32
1010f9dc:	1000aa26 	beq	r2,zero,1010fc88 <___vfiprintf_internal_r+0xa08>
1010f9e0:	da802217 	ldw	r10,136(sp)
1010f9e4:	54800017 	ldw	r18,0(r10)
1010f9e8:	54c00117 	ldw	r19,4(r10)
1010f9ec:	52800204 	addi	r10,r10,8
1010f9f0:	da802215 	stw	r10,136(sp)
1010f9f4:	a080004c 	andi	r2,r20,1
1010f9f8:	1001d226 	beq	r2,zero,10110144 <___vfiprintf_internal_r+0xec4>
1010f9fc:	94c4b03a 	or	r2,r18,r19
1010fa00:	1002351e 	bne	r2,zero,101102d8 <___vfiprintf_internal_r+0x1058>
1010fa04:	d8001d85 	stb	zero,118(sp)
1010fa08:	48022216 	blt	r9,zero,10110294 <___vfiprintf_internal_r+0x1014>
1010fa0c:	00bfdfc4 	movi	r2,-129
1010fa10:	a0a8703a 	and	r20,r20,r2
1010fa14:	003f1506 	br	1010f66c <_gp+0xfffee0dc>
1010fa18:	da802217 	ldw	r10,136(sp)
1010fa1c:	04800044 	movi	r18,1
1010fa20:	d8001d85 	stb	zero,118(sp)
1010fa24:	50800017 	ldw	r2,0(r10)
1010fa28:	52800104 	addi	r10,r10,4
1010fa2c:	da802215 	stw	r10,136(sp)
1010fa30:	d8801005 	stb	r2,64(sp)
1010fa34:	9027883a 	mov	r19,r18
1010fa38:	dd401004 	addi	r21,sp,64
1010fa3c:	0013883a 	mov	r9,zero
1010fa40:	003f1706 	br	1010f6a0 <_gp+0xfffee110>
1010fa44:	21003fcc 	andi	r4,r4,255
1010fa48:	2003201e 	bne	r4,zero,101106cc <___vfiprintf_internal_r+0x144c>
1010fa4c:	a080080c 	andi	r2,r20,32
1010fa50:	10004b26 	beq	r2,zero,1010fb80 <___vfiprintf_internal_r+0x900>
1010fa54:	da802217 	ldw	r10,136(sp)
1010fa58:	50800117 	ldw	r2,4(r10)
1010fa5c:	54800017 	ldw	r18,0(r10)
1010fa60:	52800204 	addi	r10,r10,8
1010fa64:	da802215 	stw	r10,136(sp)
1010fa68:	1027883a 	mov	r19,r2
1010fa6c:	10022c16 	blt	r2,zero,10110320 <___vfiprintf_internal_r+0x10a0>
1010fa70:	df001d83 	ldbu	fp,118(sp)
1010fa74:	48007216 	blt	r9,zero,1010fc40 <___vfiprintf_internal_r+0x9c0>
1010fa78:	00ffdfc4 	movi	r3,-129
1010fa7c:	94c4b03a 	or	r2,r18,r19
1010fa80:	a0e8703a 	and	r20,r20,r3
1010fa84:	1000cc26 	beq	r2,zero,1010fdb8 <___vfiprintf_internal_r+0xb38>
1010fa88:	98021026 	beq	r19,zero,101102cc <___vfiprintf_internal_r+0x104c>
1010fa8c:	dc402415 	stw	r17,144(sp)
1010fa90:	dc002515 	stw	r16,148(sp)
1010fa94:	9823883a 	mov	r17,r19
1010fa98:	9021883a 	mov	r16,r18
1010fa9c:	dd401a04 	addi	r21,sp,104
1010faa0:	4825883a 	mov	r18,r9
1010faa4:	4027883a 	mov	r19,r8
1010faa8:	8009883a 	mov	r4,r16
1010faac:	880b883a 	mov	r5,r17
1010fab0:	01800284 	movi	r6,10
1010fab4:	000f883a 	mov	r7,zero
1010fab8:	01113980 	call	10111398 <__umoddi3>
1010fabc:	10800c04 	addi	r2,r2,48
1010fac0:	ad7fffc4 	addi	r21,r21,-1
1010fac4:	8009883a 	mov	r4,r16
1010fac8:	880b883a 	mov	r5,r17
1010facc:	a8800005 	stb	r2,0(r21)
1010fad0:	01800284 	movi	r6,10
1010fad4:	000f883a 	mov	r7,zero
1010fad8:	0110e200 	call	10110e20 <__udivdi3>
1010fadc:	1021883a 	mov	r16,r2
1010fae0:	10c4b03a 	or	r2,r2,r3
1010fae4:	1823883a 	mov	r17,r3
1010fae8:	103fef1e 	bne	r2,zero,1010faa8 <_gp+0xfffee518>
1010faec:	dc402417 	ldw	r17,144(sp)
1010faf0:	dc002517 	ldw	r16,148(sp)
1010faf4:	9013883a 	mov	r9,r18
1010faf8:	9811883a 	mov	r8,r19
1010fafc:	da801e17 	ldw	r10,120(sp)
1010fb00:	5567c83a 	sub	r19,r10,r21
1010fb04:	003ede06 	br	1010f680 <_gp+0xfffee0f0>
1010fb08:	38803fcc 	andi	r2,r7,255
1010fb0c:	1080201c 	xori	r2,r2,128
1010fb10:	10bfe004 	addi	r2,r2,-128
1010fb14:	1002371e 	bne	r2,zero,101103f4 <___vfiprintf_internal_r+0x1174>
1010fb18:	01000044 	movi	r4,1
1010fb1c:	01c00804 	movi	r7,32
1010fb20:	80c00007 	ldb	r3,0(r16)
1010fb24:	003e3506 	br	1010f3fc <_gp+0xfffede6c>
1010fb28:	a5000054 	ori	r20,r20,1
1010fb2c:	80c00007 	ldb	r3,0(r16)
1010fb30:	003e3206 	br	1010f3fc <_gp+0xfffede6c>
1010fb34:	a5002014 	ori	r20,r20,128
1010fb38:	80c00007 	ldb	r3,0(r16)
1010fb3c:	003e2f06 	br	1010f3fc <_gp+0xfffede6c>
1010fb40:	8015883a 	mov	r10,r16
1010fb44:	0023883a 	mov	r17,zero
1010fb48:	18bff404 	addi	r2,r3,-48
1010fb4c:	50c00007 	ldb	r3,0(r10)
1010fb50:	8c4002a4 	muli	r17,r17,10
1010fb54:	84000044 	addi	r16,r16,1
1010fb58:	8015883a 	mov	r10,r16
1010fb5c:	1463883a 	add	r17,r2,r17
1010fb60:	18bff404 	addi	r2,r3,-48
1010fb64:	30bff92e 	bgeu	r6,r2,1010fb4c <_gp+0xfffee5bc>
1010fb68:	003e2506 	br	1010f400 <_gp+0xfffede70>
1010fb6c:	21003fcc 	andi	r4,r4,255
1010fb70:	2002d41e 	bne	r4,zero,101106c4 <___vfiprintf_internal_r+0x1444>
1010fb74:	a5000414 	ori	r20,r20,16
1010fb78:	a080080c 	andi	r2,r20,32
1010fb7c:	103fb51e 	bne	r2,zero,1010fa54 <_gp+0xfffee4c4>
1010fb80:	a080040c 	andi	r2,r20,16
1010fb84:	1001f826 	beq	r2,zero,10110368 <___vfiprintf_internal_r+0x10e8>
1010fb88:	da802217 	ldw	r10,136(sp)
1010fb8c:	54800017 	ldw	r18,0(r10)
1010fb90:	52800104 	addi	r10,r10,4
1010fb94:	da802215 	stw	r10,136(sp)
1010fb98:	9027d7fa 	srai	r19,r18,31
1010fb9c:	9805883a 	mov	r2,r19
1010fba0:	003fb206 	br	1010fa6c <_gp+0xfffee4dc>
1010fba4:	21003fcc 	andi	r4,r4,255
1010fba8:	2002c41e 	bne	r4,zero,101106bc <___vfiprintf_internal_r+0x143c>
1010fbac:	a5000414 	ori	r20,r20,16
1010fbb0:	a080080c 	andi	r2,r20,32
1010fbb4:	103f5f1e 	bne	r2,zero,1010f934 <_gp+0xfffee3a4>
1010fbb8:	a080040c 	andi	r2,r20,16
1010fbbc:	10020f26 	beq	r2,zero,101103fc <___vfiprintf_internal_r+0x117c>
1010fbc0:	da802217 	ldw	r10,136(sp)
1010fbc4:	d8001d85 	stb	zero,118(sp)
1010fbc8:	0027883a 	mov	r19,zero
1010fbcc:	50800104 	addi	r2,r10,4
1010fbd0:	54800017 	ldw	r18,0(r10)
1010fbd4:	48021116 	blt	r9,zero,1011041c <___vfiprintf_internal_r+0x119c>
1010fbd8:	00ffdfc4 	movi	r3,-129
1010fbdc:	d8802215 	stw	r2,136(sp)
1010fbe0:	a0e8703a 	and	r20,r20,r3
1010fbe4:	903f5e1e 	bne	r18,zero,1010f960 <_gp+0xfffee3d0>
1010fbe8:	0039883a 	mov	fp,zero
1010fbec:	4802a626 	beq	r9,zero,10110688 <___vfiprintf_internal_r+0x1408>
1010fbf0:	0025883a 	mov	r18,zero
1010fbf4:	0027883a 	mov	r19,zero
1010fbf8:	003f5a06 	br	1010f964 <_gp+0xfffee3d4>
1010fbfc:	21003fcc 	andi	r4,r4,255
1010fc00:	20029f1e 	bne	r4,zero,10110680 <___vfiprintf_internal_r+0x1400>
1010fc04:	a5000414 	ori	r20,r20,16
1010fc08:	a080080c 	andi	r2,r20,32
1010fc0c:	10005e1e 	bne	r2,zero,1010fd88 <___vfiprintf_internal_r+0xb08>
1010fc10:	a080040c 	andi	r2,r20,16
1010fc14:	1001a21e 	bne	r2,zero,101102a0 <___vfiprintf_internal_r+0x1020>
1010fc18:	a080100c 	andi	r2,r20,64
1010fc1c:	d8001d85 	stb	zero,118(sp)
1010fc20:	da802217 	ldw	r10,136(sp)
1010fc24:	1002231e 	bne	r2,zero,101104b4 <___vfiprintf_internal_r+0x1234>
1010fc28:	50800104 	addi	r2,r10,4
1010fc2c:	54800017 	ldw	r18,0(r10)
1010fc30:	0027883a 	mov	r19,zero
1010fc34:	4801a00e 	bge	r9,zero,101102b8 <___vfiprintf_internal_r+0x1038>
1010fc38:	d8802215 	stw	r2,136(sp)
1010fc3c:	0039883a 	mov	fp,zero
1010fc40:	94c4b03a 	or	r2,r18,r19
1010fc44:	103f901e 	bne	r2,zero,1010fa88 <_gp+0xfffee4f8>
1010fc48:	00800044 	movi	r2,1
1010fc4c:	10803fcc 	andi	r2,r2,255
1010fc50:	00c00044 	movi	r3,1
1010fc54:	10c05926 	beq	r2,r3,1010fdbc <___vfiprintf_internal_r+0xb3c>
1010fc58:	00c00084 	movi	r3,2
1010fc5c:	10ffe41e 	bne	r2,r3,1010fbf0 <_gp+0xfffee660>
1010fc60:	0025883a 	mov	r18,zero
1010fc64:	0027883a 	mov	r19,zero
1010fc68:	00013d06 	br	10110160 <___vfiprintf_internal_r+0xee0>
1010fc6c:	21003fcc 	andi	r4,r4,255
1010fc70:	2002811e 	bne	r4,zero,10110678 <___vfiprintf_internal_r+0x13f8>
1010fc74:	00840474 	movhi	r2,4113
1010fc78:	109de204 	addi	r2,r2,30600
1010fc7c:	d8802615 	stw	r2,152(sp)
1010fc80:	a080080c 	andi	r2,r20,32
1010fc84:	103f561e 	bne	r2,zero,1010f9e0 <_gp+0xfffee450>
1010fc88:	a080040c 	andi	r2,r20,16
1010fc8c:	1001d126 	beq	r2,zero,101103d4 <___vfiprintf_internal_r+0x1154>
1010fc90:	da802217 	ldw	r10,136(sp)
1010fc94:	0027883a 	mov	r19,zero
1010fc98:	54800017 	ldw	r18,0(r10)
1010fc9c:	52800104 	addi	r10,r10,4
1010fca0:	da802215 	stw	r10,136(sp)
1010fca4:	003f5306 	br	1010f9f4 <_gp+0xfffee464>
1010fca8:	da802217 	ldw	r10,136(sp)
1010fcac:	d8001d85 	stb	zero,118(sp)
1010fcb0:	55400017 	ldw	r21,0(r10)
1010fcb4:	50c00104 	addi	r3,r10,4
1010fcb8:	a8024226 	beq	r21,zero,101105c4 <___vfiprintf_internal_r+0x1344>
1010fcbc:	48021816 	blt	r9,zero,10110520 <___vfiprintf_internal_r+0x12a0>
1010fcc0:	480d883a 	mov	r6,r9
1010fcc4:	000b883a 	mov	r5,zero
1010fcc8:	a809883a 	mov	r4,r21
1010fccc:	d8c02a15 	stw	r3,168(sp)
1010fcd0:	da002b15 	stw	r8,172(sp)
1010fcd4:	da402c15 	stw	r9,176(sp)
1010fcd8:	010bfc40 	call	1010bfc4 <memchr>
1010fcdc:	d8c02a17 	ldw	r3,168(sp)
1010fce0:	da002b17 	ldw	r8,172(sp)
1010fce4:	da402c17 	ldw	r9,176(sp)
1010fce8:	10024826 	beq	r2,zero,1011060c <___vfiprintf_internal_r+0x138c>
1010fcec:	1567c83a 	sub	r19,r2,r21
1010fcf0:	df001d83 	ldbu	fp,118(sp)
1010fcf4:	d8c02215 	stw	r3,136(sp)
1010fcf8:	0013883a 	mov	r9,zero
1010fcfc:	003e6006 	br	1010f680 <_gp+0xfffee0f0>
1010fd00:	21003fcc 	andi	r4,r4,255
1010fd04:	203fc026 	beq	r4,zero,1010fc08 <_gp+0xfffee678>
1010fd08:	d9c01d85 	stb	r7,118(sp)
1010fd0c:	003fbe06 	br	1010fc08 <_gp+0xfffee678>
1010fd10:	da802217 	ldw	r10,136(sp)
1010fd14:	54400017 	ldw	r17,0(r10)
1010fd18:	50800104 	addi	r2,r10,4
1010fd1c:	883e3b16 	blt	r17,zero,1010f60c <_gp+0xfffee07c>
1010fd20:	d8802215 	stw	r2,136(sp)
1010fd24:	80c00007 	ldb	r3,0(r16)
1010fd28:	003db406 	br	1010f3fc <_gp+0xfffede6c>
1010fd2c:	01000044 	movi	r4,1
1010fd30:	01c00ac4 	movi	r7,43
1010fd34:	80c00007 	ldb	r3,0(r16)
1010fd38:	003db006 	br	1010f3fc <_gp+0xfffede6c>
1010fd3c:	80c00007 	ldb	r3,0(r16)
1010fd40:	82800044 	addi	r10,r16,1
1010fd44:	1b423c26 	beq	r3,r13,10110638 <___vfiprintf_internal_r+0x13b8>
1010fd48:	18bff404 	addi	r2,r3,-48
1010fd4c:	0013883a 	mov	r9,zero
1010fd50:	30822b36 	bltu	r6,r2,10110600 <___vfiprintf_internal_r+0x1380>
1010fd54:	50c00007 	ldb	r3,0(r10)
1010fd58:	4a4002a4 	muli	r9,r9,10
1010fd5c:	54000044 	addi	r16,r10,1
1010fd60:	8015883a 	mov	r10,r16
1010fd64:	4893883a 	add	r9,r9,r2
1010fd68:	18bff404 	addi	r2,r3,-48
1010fd6c:	30bff92e 	bgeu	r6,r2,1010fd54 <_gp+0xfffee7c4>
1010fd70:	483da30e 	bge	r9,zero,1010f400 <_gp+0xfffede70>
1010fd74:	027fffc4 	movi	r9,-1
1010fd78:	003da106 	br	1010f400 <_gp+0xfffede70>
1010fd7c:	a5001014 	ori	r20,r20,64
1010fd80:	80c00007 	ldb	r3,0(r16)
1010fd84:	003d9d06 	br	1010f3fc <_gp+0xfffede6c>
1010fd88:	da802217 	ldw	r10,136(sp)
1010fd8c:	d8001d85 	stb	zero,118(sp)
1010fd90:	50c00204 	addi	r3,r10,8
1010fd94:	54800017 	ldw	r18,0(r10)
1010fd98:	54c00117 	ldw	r19,4(r10)
1010fd9c:	4801ca16 	blt	r9,zero,101104c8 <___vfiprintf_internal_r+0x1248>
1010fda0:	013fdfc4 	movi	r4,-129
1010fda4:	94c4b03a 	or	r2,r18,r19
1010fda8:	d8c02215 	stw	r3,136(sp)
1010fdac:	a128703a 	and	r20,r20,r4
1010fdb0:	0039883a 	mov	fp,zero
1010fdb4:	103f341e 	bne	r2,zero,1010fa88 <_gp+0xfffee4f8>
1010fdb8:	483e2e26 	beq	r9,zero,1010f674 <_gp+0xfffee0e4>
1010fdbc:	0025883a 	mov	r18,zero
1010fdc0:	94800c04 	addi	r18,r18,48
1010fdc4:	dc8019c5 	stb	r18,103(sp)
1010fdc8:	dcc02717 	ldw	r19,156(sp)
1010fdcc:	dd4019c4 	addi	r21,sp,103
1010fdd0:	003e2b06 	br	1010f680 <_gp+0xfffee0f0>
1010fdd4:	21003fcc 	andi	r4,r4,255
1010fdd8:	2002361e 	bne	r4,zero,101106b4 <___vfiprintf_internal_r+0x1434>
1010fddc:	1801c126 	beq	r3,zero,101104e4 <___vfiprintf_internal_r+0x1264>
1010fde0:	04800044 	movi	r18,1
1010fde4:	d8c01005 	stb	r3,64(sp)
1010fde8:	d8001d85 	stb	zero,118(sp)
1010fdec:	9027883a 	mov	r19,r18
1010fdf0:	dd401004 	addi	r21,sp,64
1010fdf4:	003f1106 	br	1010fa3c <_gp+0xfffee4ac>
1010fdf8:	d9402117 	ldw	r5,132(sp)
1010fdfc:	d9002017 	ldw	r4,128(sp)
1010fe00:	d9801a04 	addi	r6,sp,104
1010fe04:	d9c02b15 	stw	r7,172(sp)
1010fe08:	dbc02a15 	stw	r15,168(sp)
1010fe0c:	010f16c0 	call	1010f16c <__sprint_r.part.0>
1010fe10:	d9c02b17 	ldw	r7,172(sp)
1010fe14:	dbc02a17 	ldw	r15,168(sp)
1010fe18:	10006d1e 	bne	r2,zero,1010ffd0 <___vfiprintf_internal_r+0xd50>
1010fe1c:	d9801b17 	ldw	r6,108(sp)
1010fe20:	d8801c17 	ldw	r2,112(sp)
1010fe24:	d811883a 	mov	r8,sp
1010fe28:	31400044 	addi	r5,r6,1
1010fe2c:	003e3306 	br	1010f6fc <_gp+0xfffee16c>
1010fe30:	d9401b17 	ldw	r5,108(sp)
1010fe34:	d8801c17 	ldw	r2,112(sp)
1010fe38:	29000044 	addi	r4,r5,1
1010fe3c:	d8c01d87 	ldb	r3,118(sp)
1010fe40:	183e4d26 	beq	r3,zero,1010f778 <_gp+0xfffee1e8>
1010fe44:	00c00044 	movi	r3,1
1010fe48:	d9401d84 	addi	r5,sp,118
1010fe4c:	10c5883a 	add	r2,r2,r3
1010fe50:	41400015 	stw	r5,0(r8)
1010fe54:	40c00115 	stw	r3,4(r8)
1010fe58:	d8801c15 	stw	r2,112(sp)
1010fe5c:	d9001b15 	stw	r4,108(sp)
1010fe60:	014001c4 	movi	r5,7
1010fe64:	2900a90e 	bge	r5,r4,1011010c <___vfiprintf_internal_r+0xe8c>
1010fe68:	1000da1e 	bne	r2,zero,101101d4 <___vfiprintf_internal_r+0xf54>
1010fe6c:	7000ab1e 	bne	r14,zero,1011011c <___vfiprintf_internal_r+0xe9c>
1010fe70:	000b883a 	mov	r5,zero
1010fe74:	1809883a 	mov	r4,r3
1010fe78:	d811883a 	mov	r8,sp
1010fe7c:	00c02004 	movi	r3,128
1010fe80:	e0fe4d26 	beq	fp,r3,1010f7b8 <_gp+0xfffee228>
1010fe84:	4cf9c83a 	sub	fp,r9,r19
1010fe88:	073e7b0e 	bge	zero,fp,1010f878 <_gp+0xfffee2e8>
1010fe8c:	01c00404 	movi	r7,16
1010fe90:	3f01900e 	bge	r7,fp,101104d4 <___vfiprintf_internal_r+0x1254>
1010fe94:	00c40474 	movhi	r3,4113
1010fe98:	18de5704 	addi	r3,r3,31068
1010fe9c:	d8c02415 	stw	r3,144(sp)
1010fea0:	034001c4 	movi	r13,7
1010fea4:	00000506 	br	1010febc <___vfiprintf_internal_r+0xc3c>
1010fea8:	29000084 	addi	r4,r5,2
1010feac:	42000204 	addi	r8,r8,8
1010feb0:	180b883a 	mov	r5,r3
1010feb4:	e73ffc04 	addi	fp,fp,-16
1010feb8:	3f000d0e 	bge	r7,fp,1010fef0 <___vfiprintf_internal_r+0xc70>
1010febc:	10800404 	addi	r2,r2,16
1010fec0:	28c00044 	addi	r3,r5,1
1010fec4:	45c00015 	stw	r23,0(r8)
1010fec8:	41c00115 	stw	r7,4(r8)
1010fecc:	d8801c15 	stw	r2,112(sp)
1010fed0:	d8c01b15 	stw	r3,108(sp)
1010fed4:	68fff40e 	bge	r13,r3,1010fea8 <_gp+0xfffee918>
1010fed8:	1000101e 	bne	r2,zero,1010ff1c <___vfiprintf_internal_r+0xc9c>
1010fedc:	e73ffc04 	addi	fp,fp,-16
1010fee0:	01000044 	movi	r4,1
1010fee4:	000b883a 	mov	r5,zero
1010fee8:	d811883a 	mov	r8,sp
1010feec:	3f3ff316 	blt	r7,fp,1010febc <_gp+0xfffee92c>
1010fef0:	da802417 	ldw	r10,144(sp)
1010fef4:	1705883a 	add	r2,r2,fp
1010fef8:	47000115 	stw	fp,4(r8)
1010fefc:	42800015 	stw	r10,0(r8)
1010ff00:	d8801c15 	stw	r2,112(sp)
1010ff04:	d9001b15 	stw	r4,108(sp)
1010ff08:	00c001c4 	movi	r3,7
1010ff0c:	19003616 	blt	r3,r4,1010ffe8 <___vfiprintf_internal_r+0xd68>
1010ff10:	42000204 	addi	r8,r8,8
1010ff14:	21000044 	addi	r4,r4,1
1010ff18:	003e5706 	br	1010f878 <_gp+0xfffee2e8>
1010ff1c:	d9402117 	ldw	r5,132(sp)
1010ff20:	d9002017 	ldw	r4,128(sp)
1010ff24:	d9801a04 	addi	r6,sp,104
1010ff28:	d9c02b15 	stw	r7,172(sp)
1010ff2c:	db402a15 	stw	r13,168(sp)
1010ff30:	010f16c0 	call	1010f16c <__sprint_r.part.0>
1010ff34:	d9c02b17 	ldw	r7,172(sp)
1010ff38:	db402a17 	ldw	r13,168(sp)
1010ff3c:	1000241e 	bne	r2,zero,1010ffd0 <___vfiprintf_internal_r+0xd50>
1010ff40:	d9401b17 	ldw	r5,108(sp)
1010ff44:	d8801c17 	ldw	r2,112(sp)
1010ff48:	d811883a 	mov	r8,sp
1010ff4c:	29000044 	addi	r4,r5,1
1010ff50:	003fd806 	br	1010feb4 <_gp+0xfffee924>
1010ff54:	d9401b17 	ldw	r5,108(sp)
1010ff58:	00c40474 	movhi	r3,4113
1010ff5c:	18de5b04 	addi	r3,r3,31084
1010ff60:	d8c02415 	stw	r3,144(sp)
1010ff64:	29400044 	addi	r5,r5,1
1010ff68:	d8c02417 	ldw	r3,144(sp)
1010ff6c:	14c5883a 	add	r2,r2,r19
1010ff70:	44c00115 	stw	r19,4(r8)
1010ff74:	40c00015 	stw	r3,0(r8)
1010ff78:	d8801c15 	stw	r2,112(sp)
1010ff7c:	d9401b15 	stw	r5,108(sp)
1010ff80:	00c001c4 	movi	r3,7
1010ff84:	1940070e 	bge	r3,r5,1010ffa4 <___vfiprintf_internal_r+0xd24>
1010ff88:	103e4826 	beq	r2,zero,1010f8ac <_gp+0xfffee31c>
1010ff8c:	d9402117 	ldw	r5,132(sp)
1010ff90:	d9002017 	ldw	r4,128(sp)
1010ff94:	d9801a04 	addi	r6,sp,104
1010ff98:	010f16c0 	call	1010f16c <__sprint_r.part.0>
1010ff9c:	10000c1e 	bne	r2,zero,1010ffd0 <___vfiprintf_internal_r+0xd50>
1010ffa0:	d8801c17 	ldw	r2,112(sp)
1010ffa4:	8c80010e 	bge	r17,r18,1010ffac <___vfiprintf_internal_r+0xd2c>
1010ffa8:	9023883a 	mov	r17,r18
1010ffac:	da802317 	ldw	r10,140(sp)
1010ffb0:	5455883a 	add	r10,r10,r17
1010ffb4:	da802315 	stw	r10,140(sp)
1010ffb8:	103e4126 	beq	r2,zero,1010f8c0 <_gp+0xfffee330>
1010ffbc:	d9402117 	ldw	r5,132(sp)
1010ffc0:	d9002017 	ldw	r4,128(sp)
1010ffc4:	d9801a04 	addi	r6,sp,104
1010ffc8:	010f16c0 	call	1010f16c <__sprint_r.part.0>
1010ffcc:	103e3c26 	beq	r2,zero,1010f8c0 <_gp+0xfffee330>
1010ffd0:	dd002117 	ldw	r20,132(sp)
1010ffd4:	a080030b 	ldhu	r2,12(r20)
1010ffd8:	1080100c 	andi	r2,r2,64
1010ffdc:	1001231e 	bne	r2,zero,1011046c <___vfiprintf_internal_r+0x11ec>
1010ffe0:	d8802317 	ldw	r2,140(sp)
1010ffe4:	003d7b06 	br	1010f5d4 <_gp+0xfffee044>
1010ffe8:	1000991e 	bne	r2,zero,10110250 <___vfiprintf_internal_r+0xfd0>
1010ffec:	00c00044 	movi	r3,1
1010fff0:	9805883a 	mov	r2,r19
1010fff4:	dd400015 	stw	r21,0(sp)
1010fff8:	dcc00115 	stw	r19,4(sp)
1010fffc:	dcc01c15 	stw	r19,112(sp)
10110000:	d8c01b15 	stw	r3,108(sp)
10110004:	d811883a 	mov	r8,sp
10110008:	42000204 	addi	r8,r8,8
1011000c:	a2c0010c 	andi	r11,r20,4
10110010:	583fe426 	beq	r11,zero,1010ffa4 <_gp+0xfffeea14>
10110014:	8ca7c83a 	sub	r19,r17,r18
10110018:	04ffe20e 	bge	zero,r19,1010ffa4 <_gp+0xfffeea14>
1011001c:	01c00404 	movi	r7,16
10110020:	3cffcc0e 	bge	r7,r19,1010ff54 <_gp+0xfffee9c4>
10110024:	02840474 	movhi	r10,4113
10110028:	529e5b04 	addi	r10,r10,31084
1011002c:	d9001b17 	ldw	r4,108(sp)
10110030:	da802415 	stw	r10,144(sp)
10110034:	382b883a 	mov	r21,r7
10110038:	050001c4 	movi	r20,7
1011003c:	df002017 	ldw	fp,128(sp)
10110040:	00000506 	br	10110058 <___vfiprintf_internal_r+0xdd8>
10110044:	21400084 	addi	r5,r4,2
10110048:	42000204 	addi	r8,r8,8
1011004c:	1809883a 	mov	r4,r3
10110050:	9cfffc04 	addi	r19,r19,-16
10110054:	acffc40e 	bge	r21,r19,1010ff68 <_gp+0xfffee9d8>
10110058:	10800404 	addi	r2,r2,16
1011005c:	20c00044 	addi	r3,r4,1
10110060:	45800015 	stw	r22,0(r8)
10110064:	45400115 	stw	r21,4(r8)
10110068:	d8801c15 	stw	r2,112(sp)
1011006c:	d8c01b15 	stw	r3,108(sp)
10110070:	a0fff40e 	bge	r20,r3,10110044 <_gp+0xfffeeab4>
10110074:	1000041e 	bne	r2,zero,10110088 <___vfiprintf_internal_r+0xe08>
10110078:	01400044 	movi	r5,1
1011007c:	0009883a 	mov	r4,zero
10110080:	d811883a 	mov	r8,sp
10110084:	003ff206 	br	10110050 <_gp+0xfffeeac0>
10110088:	d9402117 	ldw	r5,132(sp)
1011008c:	d9801a04 	addi	r6,sp,104
10110090:	e009883a 	mov	r4,fp
10110094:	010f16c0 	call	1010f16c <__sprint_r.part.0>
10110098:	103fcd1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
1011009c:	d9001b17 	ldw	r4,108(sp)
101100a0:	d8801c17 	ldw	r2,112(sp)
101100a4:	d811883a 	mov	r8,sp
101100a8:	21400044 	addi	r5,r4,1
101100ac:	003fe806 	br	10110050 <_gp+0xfffeeac0>
101100b0:	d9402117 	ldw	r5,132(sp)
101100b4:	d9002017 	ldw	r4,128(sp)
101100b8:	d9801a04 	addi	r6,sp,104
101100bc:	d9c02b15 	stw	r7,172(sp)
101100c0:	db402a15 	stw	r13,168(sp)
101100c4:	010f16c0 	call	1010f16c <__sprint_r.part.0>
101100c8:	d9c02b17 	ldw	r7,172(sp)
101100cc:	db402a17 	ldw	r13,168(sp)
101100d0:	103fbf1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
101100d4:	d9401b17 	ldw	r5,108(sp)
101100d8:	d8801c17 	ldw	r2,112(sp)
101100dc:	d811883a 	mov	r8,sp
101100e0:	29800044 	addi	r6,r5,1
101100e4:	003dc406 	br	1010f7f8 <_gp+0xfffee268>
101100e8:	1000d21e 	bne	r2,zero,10110434 <___vfiprintf_internal_r+0x11b4>
101100ec:	d8c01d87 	ldb	r3,118(sp)
101100f0:	18009526 	beq	r3,zero,10110348 <___vfiprintf_internal_r+0x10c8>
101100f4:	00800044 	movi	r2,1
101100f8:	d8c01d84 	addi	r3,sp,118
101100fc:	1009883a 	mov	r4,r2
10110100:	d8c00015 	stw	r3,0(sp)
10110104:	d8800115 	stw	r2,4(sp)
10110108:	d811883a 	mov	r8,sp
1011010c:	200b883a 	mov	r5,r4
10110110:	42000204 	addi	r8,r8,8
10110114:	21000044 	addi	r4,r4,1
10110118:	003d9706 	br	1010f778 <_gp+0xfffee1e8>
1011011c:	d9001d04 	addi	r4,sp,116
10110120:	00800084 	movi	r2,2
10110124:	d9000015 	stw	r4,0(sp)
10110128:	d8800115 	stw	r2,4(sp)
1011012c:	1809883a 	mov	r4,r3
10110130:	d811883a 	mov	r8,sp
10110134:	200b883a 	mov	r5,r4
10110138:	42000204 	addi	r8,r8,8
1011013c:	21000044 	addi	r4,r4,1
10110140:	003f4e06 	br	1010fe7c <_gp+0xfffee8ec>
10110144:	d8001d85 	stb	zero,118(sp)
10110148:	48005016 	blt	r9,zero,1011028c <___vfiprintf_internal_r+0x100c>
1011014c:	00ffdfc4 	movi	r3,-129
10110150:	94c4b03a 	or	r2,r18,r19
10110154:	a0e8703a 	and	r20,r20,r3
10110158:	103d4426 	beq	r2,zero,1010f66c <_gp+0xfffee0dc>
1011015c:	0039883a 	mov	fp,zero
10110160:	d9002617 	ldw	r4,152(sp)
10110164:	dd401a04 	addi	r21,sp,104
10110168:	908003cc 	andi	r2,r18,15
1011016c:	9806973a 	slli	r3,r19,28
10110170:	2085883a 	add	r2,r4,r2
10110174:	9024d13a 	srli	r18,r18,4
10110178:	10800003 	ldbu	r2,0(r2)
1011017c:	9826d13a 	srli	r19,r19,4
10110180:	ad7fffc4 	addi	r21,r21,-1
10110184:	1ca4b03a 	or	r18,r3,r18
10110188:	a8800005 	stb	r2,0(r21)
1011018c:	94c4b03a 	or	r2,r18,r19
10110190:	103ff51e 	bne	r2,zero,10110168 <_gp+0xfffeebd8>
10110194:	003e5906 	br	1010fafc <_gp+0xfffee56c>
10110198:	d9402117 	ldw	r5,132(sp)
1011019c:	d9002017 	ldw	r4,128(sp)
101101a0:	d9801a04 	addi	r6,sp,104
101101a4:	010f16c0 	call	1010f16c <__sprint_r.part.0>
101101a8:	103f891e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
101101ac:	d8801c17 	ldw	r2,112(sp)
101101b0:	d811883a 	mov	r8,sp
101101b4:	003f9506 	br	1011000c <_gp+0xfffeea7c>
101101b8:	d9402117 	ldw	r5,132(sp)
101101bc:	d9002017 	ldw	r4,128(sp)
101101c0:	d9801a04 	addi	r6,sp,104
101101c4:	010f16c0 	call	1010f16c <__sprint_r.part.0>
101101c8:	103f811e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
101101cc:	d811883a 	mov	r8,sp
101101d0:	003ced06 	br	1010f588 <_gp+0xfffedff8>
101101d4:	d9402117 	ldw	r5,132(sp)
101101d8:	d9002017 	ldw	r4,128(sp)
101101dc:	d9801a04 	addi	r6,sp,104
101101e0:	da402c15 	stw	r9,176(sp)
101101e4:	db802a15 	stw	r14,168(sp)
101101e8:	010f16c0 	call	1010f16c <__sprint_r.part.0>
101101ec:	da402c17 	ldw	r9,176(sp)
101101f0:	db802a17 	ldw	r14,168(sp)
101101f4:	103f761e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
101101f8:	d9401b17 	ldw	r5,108(sp)
101101fc:	d8801c17 	ldw	r2,112(sp)
10110200:	d811883a 	mov	r8,sp
10110204:	29000044 	addi	r4,r5,1
10110208:	003d5b06 	br	1010f778 <_gp+0xfffee1e8>
1011020c:	d9402117 	ldw	r5,132(sp)
10110210:	d9002017 	ldw	r4,128(sp)
10110214:	d9801a04 	addi	r6,sp,104
10110218:	da402c15 	stw	r9,176(sp)
1011021c:	010f16c0 	call	1010f16c <__sprint_r.part.0>
10110220:	da402c17 	ldw	r9,176(sp)
10110224:	103f6a1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
10110228:	d9401b17 	ldw	r5,108(sp)
1011022c:	d8801c17 	ldw	r2,112(sp)
10110230:	d811883a 	mov	r8,sp
10110234:	29000044 	addi	r4,r5,1
10110238:	003f1006 	br	1010fe7c <_gp+0xfffee8ec>
1011023c:	1000c31e 	bne	r2,zero,1011054c <___vfiprintf_internal_r+0x12cc>
10110240:	01000044 	movi	r4,1
10110244:	000b883a 	mov	r5,zero
10110248:	d811883a 	mov	r8,sp
1011024c:	003f0d06 	br	1010fe84 <_gp+0xfffee8f4>
10110250:	d9402117 	ldw	r5,132(sp)
10110254:	d9002017 	ldw	r4,128(sp)
10110258:	d9801a04 	addi	r6,sp,104
1011025c:	010f16c0 	call	1010f16c <__sprint_r.part.0>
10110260:	103f5b1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
10110264:	d9001b17 	ldw	r4,108(sp)
10110268:	d8801c17 	ldw	r2,112(sp)
1011026c:	d811883a 	mov	r8,sp
10110270:	21000044 	addi	r4,r4,1
10110274:	003d8006 	br	1010f878 <_gp+0xfffee2e8>
10110278:	01040474 	movhi	r4,4113
1011027c:	211de704 	addi	r4,r4,30620
10110280:	d9002615 	stw	r4,152(sp)
10110284:	d8c02215 	stw	r3,136(sp)
10110288:	1029883a 	mov	r20,r2
1011028c:	94c4b03a 	or	r2,r18,r19
10110290:	103fb21e 	bne	r2,zero,1011015c <_gp+0xfffeebcc>
10110294:	0039883a 	mov	fp,zero
10110298:	00800084 	movi	r2,2
1011029c:	003e6b06 	br	1010fc4c <_gp+0xfffee6bc>
101102a0:	da802217 	ldw	r10,136(sp)
101102a4:	d8001d85 	stb	zero,118(sp)
101102a8:	0027883a 	mov	r19,zero
101102ac:	50800104 	addi	r2,r10,4
101102b0:	54800017 	ldw	r18,0(r10)
101102b4:	483e6016 	blt	r9,zero,1010fc38 <_gp+0xfffee6a8>
101102b8:	00ffdfc4 	movi	r3,-129
101102bc:	d8802215 	stw	r2,136(sp)
101102c0:	a0e8703a 	and	r20,r20,r3
101102c4:	0039883a 	mov	fp,zero
101102c8:	903ebb26 	beq	r18,zero,1010fdb8 <_gp+0xfffee828>
101102cc:	00800244 	movi	r2,9
101102d0:	14bdee36 	bltu	r2,r18,1010fa8c <_gp+0xfffee4fc>
101102d4:	003eba06 	br	1010fdc0 <_gp+0xfffee830>
101102d8:	00800c04 	movi	r2,48
101102dc:	d8c01d45 	stb	r3,117(sp)
101102e0:	d8801d05 	stb	r2,116(sp)
101102e4:	d8001d85 	stb	zero,118(sp)
101102e8:	a0c00094 	ori	r3,r20,2
101102ec:	4800a916 	blt	r9,zero,10110594 <___vfiprintf_internal_r+0x1314>
101102f0:	00bfdfc4 	movi	r2,-129
101102f4:	a096703a 	and	r11,r20,r2
101102f8:	5d000094 	ori	r20,r11,2
101102fc:	0039883a 	mov	fp,zero
10110300:	003f9706 	br	10110160 <_gp+0xfffeebd0>
10110304:	8025883a 	mov	r18,r16
10110308:	003c2e06 	br	1010f3c4 <_gp+0xfffede34>
1011030c:	00840474 	movhi	r2,4113
10110310:	109de704 	addi	r2,r2,30620
10110314:	0039883a 	mov	fp,zero
10110318:	d8802615 	stw	r2,152(sp)
1011031c:	003f9006 	br	10110160 <_gp+0xfffeebd0>
10110320:	04a5c83a 	sub	r18,zero,r18
10110324:	07000b44 	movi	fp,45
10110328:	9004c03a 	cmpne	r2,r18,zero
1011032c:	04e7c83a 	sub	r19,zero,r19
10110330:	df001d85 	stb	fp,118(sp)
10110334:	98a7c83a 	sub	r19,r19,r2
10110338:	48009f16 	blt	r9,zero,101105b8 <___vfiprintf_internal_r+0x1338>
1011033c:	00bfdfc4 	movi	r2,-129
10110340:	a0a8703a 	and	r20,r20,r2
10110344:	003dd006 	br	1010fa88 <_gp+0xfffee4f8>
10110348:	70004c26 	beq	r14,zero,1011047c <___vfiprintf_internal_r+0x11fc>
1011034c:	00800084 	movi	r2,2
10110350:	d8c01d04 	addi	r3,sp,116
10110354:	d8c00015 	stw	r3,0(sp)
10110358:	d8800115 	stw	r2,4(sp)
1011035c:	01000044 	movi	r4,1
10110360:	d811883a 	mov	r8,sp
10110364:	003f7306 	br	10110134 <_gp+0xfffeeba4>
10110368:	a080100c 	andi	r2,r20,64
1011036c:	da802217 	ldw	r10,136(sp)
10110370:	103e0626 	beq	r2,zero,1010fb8c <_gp+0xfffee5fc>
10110374:	5480000f 	ldh	r18,0(r10)
10110378:	52800104 	addi	r10,r10,4
1011037c:	da802215 	stw	r10,136(sp)
10110380:	9027d7fa 	srai	r19,r18,31
10110384:	9805883a 	mov	r2,r19
10110388:	003db806 	br	1010fa6c <_gp+0xfffee4dc>
1011038c:	a080040c 	andi	r2,r20,16
10110390:	1000091e 	bne	r2,zero,101103b8 <___vfiprintf_internal_r+0x1138>
10110394:	a2c0100c 	andi	r11,r20,64
10110398:	58000726 	beq	r11,zero,101103b8 <___vfiprintf_internal_r+0x1138>
1011039c:	da802217 	ldw	r10,136(sp)
101103a0:	50800017 	ldw	r2,0(r10)
101103a4:	52800104 	addi	r10,r10,4
101103a8:	da802215 	stw	r10,136(sp)
101103ac:	da802317 	ldw	r10,140(sp)
101103b0:	1280000d 	sth	r10,0(r2)
101103b4:	003be706 	br	1010f354 <_gp+0xfffeddc4>
101103b8:	da802217 	ldw	r10,136(sp)
101103bc:	50800017 	ldw	r2,0(r10)
101103c0:	52800104 	addi	r10,r10,4
101103c4:	da802215 	stw	r10,136(sp)
101103c8:	da802317 	ldw	r10,140(sp)
101103cc:	12800015 	stw	r10,0(r2)
101103d0:	003be006 	br	1010f354 <_gp+0xfffeddc4>
101103d4:	a080100c 	andi	r2,r20,64
101103d8:	da802217 	ldw	r10,136(sp)
101103dc:	10003026 	beq	r2,zero,101104a0 <___vfiprintf_internal_r+0x1220>
101103e0:	5480000b 	ldhu	r18,0(r10)
101103e4:	52800104 	addi	r10,r10,4
101103e8:	0027883a 	mov	r19,zero
101103ec:	da802215 	stw	r10,136(sp)
101103f0:	003d8006 	br	1010f9f4 <_gp+0xfffee464>
101103f4:	80c00007 	ldb	r3,0(r16)
101103f8:	003c0006 	br	1010f3fc <_gp+0xfffede6c>
101103fc:	a080100c 	andi	r2,r20,64
10110400:	d8001d85 	stb	zero,118(sp)
10110404:	da802217 	ldw	r10,136(sp)
10110408:	1000201e 	bne	r2,zero,1011048c <___vfiprintf_internal_r+0x120c>
1011040c:	50800104 	addi	r2,r10,4
10110410:	54800017 	ldw	r18,0(r10)
10110414:	0027883a 	mov	r19,zero
10110418:	483def0e 	bge	r9,zero,1010fbd8 <_gp+0xfffee648>
1011041c:	94c6b03a 	or	r3,r18,r19
10110420:	d8802215 	stw	r2,136(sp)
10110424:	183d4e1e 	bne	r3,zero,1010f960 <_gp+0xfffee3d0>
10110428:	0039883a 	mov	fp,zero
1011042c:	0005883a 	mov	r2,zero
10110430:	003e0606 	br	1010fc4c <_gp+0xfffee6bc>
10110434:	d9402117 	ldw	r5,132(sp)
10110438:	d9002017 	ldw	r4,128(sp)
1011043c:	d9801a04 	addi	r6,sp,104
10110440:	da402c15 	stw	r9,176(sp)
10110444:	db802a15 	stw	r14,168(sp)
10110448:	010f16c0 	call	1010f16c <__sprint_r.part.0>
1011044c:	da402c17 	ldw	r9,176(sp)
10110450:	db802a17 	ldw	r14,168(sp)
10110454:	103ede1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
10110458:	d9401b17 	ldw	r5,108(sp)
1011045c:	d8801c17 	ldw	r2,112(sp)
10110460:	d811883a 	mov	r8,sp
10110464:	29000044 	addi	r4,r5,1
10110468:	003e7406 	br	1010fe3c <_gp+0xfffee8ac>
1011046c:	00bfffc4 	movi	r2,-1
10110470:	003c5806 	br	1010f5d4 <_gp+0xfffee044>
10110474:	d811883a 	mov	r8,sp
10110478:	003ee806 	br	1011001c <_gp+0xfffeea8c>
1011047c:	000b883a 	mov	r5,zero
10110480:	01000044 	movi	r4,1
10110484:	d811883a 	mov	r8,sp
10110488:	003e7c06 	br	1010fe7c <_gp+0xfffee8ec>
1011048c:	50800104 	addi	r2,r10,4
10110490:	5480000b 	ldhu	r18,0(r10)
10110494:	0027883a 	mov	r19,zero
10110498:	483dcf0e 	bge	r9,zero,1010fbd8 <_gp+0xfffee648>
1011049c:	003fdf06 	br	1011041c <_gp+0xfffeee8c>
101104a0:	54800017 	ldw	r18,0(r10)
101104a4:	52800104 	addi	r10,r10,4
101104a8:	0027883a 	mov	r19,zero
101104ac:	da802215 	stw	r10,136(sp)
101104b0:	003d5006 	br	1010f9f4 <_gp+0xfffee464>
101104b4:	50800104 	addi	r2,r10,4
101104b8:	5480000b 	ldhu	r18,0(r10)
101104bc:	0027883a 	mov	r19,zero
101104c0:	483f7d0e 	bge	r9,zero,101102b8 <_gp+0xfffeed28>
101104c4:	003ddc06 	br	1010fc38 <_gp+0xfffee6a8>
101104c8:	d8c02215 	stw	r3,136(sp)
101104cc:	0039883a 	mov	fp,zero
101104d0:	003ddb06 	br	1010fc40 <_gp+0xfffee6b0>
101104d4:	02840474 	movhi	r10,4113
101104d8:	529e5704 	addi	r10,r10,31068
101104dc:	da802415 	stw	r10,144(sp)
101104e0:	003e8306 	br	1010fef0 <_gp+0xfffee960>
101104e4:	d8801c17 	ldw	r2,112(sp)
101104e8:	dd002117 	ldw	r20,132(sp)
101104ec:	103eb926 	beq	r2,zero,1010ffd4 <_gp+0xfffeea44>
101104f0:	d9002017 	ldw	r4,128(sp)
101104f4:	d9801a04 	addi	r6,sp,104
101104f8:	a00b883a 	mov	r5,r20
101104fc:	010f16c0 	call	1010f16c <__sprint_r.part.0>
10110500:	003eb406 	br	1010ffd4 <_gp+0xfffeea44>
10110504:	80c00043 	ldbu	r3,1(r16)
10110508:	a5000814 	ori	r20,r20,32
1011050c:	84000044 	addi	r16,r16,1
10110510:	18c03fcc 	andi	r3,r3,255
10110514:	18c0201c 	xori	r3,r3,128
10110518:	18ffe004 	addi	r3,r3,-128
1011051c:	003bb706 	br	1010f3fc <_gp+0xfffede6c>
10110520:	a809883a 	mov	r4,r21
10110524:	d8c02a15 	stw	r3,168(sp)
10110528:	da002b15 	stw	r8,172(sp)
1011052c:	01058200 	call	10105820 <strlen>
10110530:	d8c02a17 	ldw	r3,168(sp)
10110534:	1027883a 	mov	r19,r2
10110538:	df001d83 	ldbu	fp,118(sp)
1011053c:	d8c02215 	stw	r3,136(sp)
10110540:	0013883a 	mov	r9,zero
10110544:	da002b17 	ldw	r8,172(sp)
10110548:	003c4d06 	br	1010f680 <_gp+0xfffee0f0>
1011054c:	d9402117 	ldw	r5,132(sp)
10110550:	d9002017 	ldw	r4,128(sp)
10110554:	d9801a04 	addi	r6,sp,104
10110558:	da402c15 	stw	r9,176(sp)
1011055c:	010f16c0 	call	1010f16c <__sprint_r.part.0>
10110560:	da402c17 	ldw	r9,176(sp)
10110564:	103e9a1e 	bne	r2,zero,1010ffd0 <_gp+0xfffeea40>
10110568:	d9401b17 	ldw	r5,108(sp)
1011056c:	d8801c17 	ldw	r2,112(sp)
10110570:	d811883a 	mov	r8,sp
10110574:	29000044 	addi	r4,r5,1
10110578:	003e4206 	br	1010fe84 <_gp+0xfffee8f4>
1011057c:	d9401b17 	ldw	r5,108(sp)
10110580:	01040474 	movhi	r4,4113
10110584:	211e5b04 	addi	r4,r4,31084
10110588:	d9002415 	stw	r4,144(sp)
1011058c:	29400044 	addi	r5,r5,1
10110590:	003c6d06 	br	1010f748 <_gp+0xfffee1b8>
10110594:	0039883a 	mov	fp,zero
10110598:	00800084 	movi	r2,2
1011059c:	10803fcc 	andi	r2,r2,255
101105a0:	01000044 	movi	r4,1
101105a4:	11001e26 	beq	r2,r4,10110620 <___vfiprintf_internal_r+0x13a0>
101105a8:	01000084 	movi	r4,2
101105ac:	11001e1e 	bne	r2,r4,10110628 <___vfiprintf_internal_r+0x13a8>
101105b0:	1829883a 	mov	r20,r3
101105b4:	003eea06 	br	10110160 <_gp+0xfffeebd0>
101105b8:	a007883a 	mov	r3,r20
101105bc:	00800044 	movi	r2,1
101105c0:	003ff606 	br	1011059c <_gp+0xfffef00c>
101105c4:	00800184 	movi	r2,6
101105c8:	1240012e 	bgeu	r2,r9,101105d0 <___vfiprintf_internal_r+0x1350>
101105cc:	1013883a 	mov	r9,r2
101105d0:	4827883a 	mov	r19,r9
101105d4:	4825883a 	mov	r18,r9
101105d8:	48001516 	blt	r9,zero,10110630 <___vfiprintf_internal_r+0x13b0>
101105dc:	05440474 	movhi	r21,4113
101105e0:	d8c02215 	stw	r3,136(sp)
101105e4:	ad5dec04 	addi	r21,r21,30640
101105e8:	003d1406 	br	1010fa3c <_gp+0xfffee4ac>
101105ec:	02840474 	movhi	r10,4113
101105f0:	529e5704 	addi	r10,r10,31068
101105f4:	da802415 	stw	r10,144(sp)
101105f8:	200d883a 	mov	r6,r4
101105fc:	003c9106 	br	1010f844 <_gp+0xfffee2b4>
10110600:	5021883a 	mov	r16,r10
10110604:	0013883a 	mov	r9,zero
10110608:	003b7d06 	br	1010f400 <_gp+0xfffede70>
1011060c:	4827883a 	mov	r19,r9
10110610:	df001d83 	ldbu	fp,118(sp)
10110614:	d8c02215 	stw	r3,136(sp)
10110618:	0013883a 	mov	r9,zero
1011061c:	003c1806 	br	1010f680 <_gp+0xfffee0f0>
10110620:	1829883a 	mov	r20,r3
10110624:	003d1806 	br	1010fa88 <_gp+0xfffee4f8>
10110628:	1829883a 	mov	r20,r3
1011062c:	003ccd06 	br	1010f964 <_gp+0xfffee3d4>
10110630:	0025883a 	mov	r18,zero
10110634:	003fe906 	br	101105dc <_gp+0xfffef04c>
10110638:	d8802217 	ldw	r2,136(sp)
1011063c:	80c00043 	ldbu	r3,1(r16)
10110640:	5021883a 	mov	r16,r10
10110644:	12400017 	ldw	r9,0(r2)
10110648:	10800104 	addi	r2,r2,4
1011064c:	d8802215 	stw	r2,136(sp)
10110650:	483faf0e 	bge	r9,zero,10110510 <_gp+0xfffeef80>
10110654:	18c03fcc 	andi	r3,r3,255
10110658:	18c0201c 	xori	r3,r3,128
1011065c:	027fffc4 	movi	r9,-1
10110660:	18ffe004 	addi	r3,r3,-128
10110664:	003b6506 	br	1010f3fc <_gp+0xfffede6c>
10110668:	d9c01d85 	stb	r7,118(sp)
1011066c:	003ca006 	br	1010f8f0 <_gp+0xfffee360>
10110670:	d9c01d85 	stb	r7,118(sp)
10110674:	003cad06 	br	1010f92c <_gp+0xfffee39c>
10110678:	d9c01d85 	stb	r7,118(sp)
1011067c:	003d7d06 	br	1010fc74 <_gp+0xfffee6e4>
10110680:	d9c01d85 	stb	r7,118(sp)
10110684:	003d5f06 	br	1010fc04 <_gp+0xfffee674>
10110688:	a080004c 	andi	r2,r20,1
1011068c:	0039883a 	mov	fp,zero
10110690:	10000526 	beq	r2,zero,101106a8 <___vfiprintf_internal_r+0x1428>
10110694:	00800c04 	movi	r2,48
10110698:	d88019c5 	stb	r2,103(sp)
1011069c:	dcc02717 	ldw	r19,156(sp)
101106a0:	dd4019c4 	addi	r21,sp,103
101106a4:	003bf606 	br	1010f680 <_gp+0xfffee0f0>
101106a8:	0027883a 	mov	r19,zero
101106ac:	dd401a04 	addi	r21,sp,104
101106b0:	003bf306 	br	1010f680 <_gp+0xfffee0f0>
101106b4:	d9c01d85 	stb	r7,118(sp)
101106b8:	003dc806 	br	1010fddc <_gp+0xfffee84c>
101106bc:	d9c01d85 	stb	r7,118(sp)
101106c0:	003d3a06 	br	1010fbac <_gp+0xfffee61c>
101106c4:	d9c01d85 	stb	r7,118(sp)
101106c8:	003d2a06 	br	1010fb74 <_gp+0xfffee5e4>
101106cc:	d9c01d85 	stb	r7,118(sp)
101106d0:	003cde06 	br	1010fa4c <_gp+0xfffee4bc>
101106d4:	d9c01d85 	stb	r7,118(sp)
101106d8:	003cbc06 	br	1010f9cc <_gp+0xfffee43c>

101106dc <__vfiprintf_internal>:
101106dc:	008404b4 	movhi	r2,4114
101106e0:	10a56504 	addi	r2,r2,-27244
101106e4:	300f883a 	mov	r7,r6
101106e8:	280d883a 	mov	r6,r5
101106ec:	200b883a 	mov	r5,r4
101106f0:	11000017 	ldw	r4,0(r2)
101106f4:	010f2801 	jmpi	1010f280 <___vfiprintf_internal_r>

101106f8 <__sbprintf>:
101106f8:	2880030b 	ldhu	r2,12(r5)
101106fc:	2ac01917 	ldw	r11,100(r5)
10110700:	2a80038b 	ldhu	r10,14(r5)
10110704:	2a400717 	ldw	r9,28(r5)
10110708:	2a000917 	ldw	r8,36(r5)
1011070c:	defee204 	addi	sp,sp,-1144
10110710:	00c10004 	movi	r3,1024
10110714:	dc011a15 	stw	r16,1128(sp)
10110718:	10bfff4c 	andi	r2,r2,65533
1011071c:	2821883a 	mov	r16,r5
10110720:	d8cb883a 	add	r5,sp,r3
10110724:	dc811c15 	stw	r18,1136(sp)
10110728:	dc411b15 	stw	r17,1132(sp)
1011072c:	dfc11d15 	stw	ra,1140(sp)
10110730:	2025883a 	mov	r18,r4
10110734:	d881030d 	sth	r2,1036(sp)
10110738:	dac11915 	stw	r11,1124(sp)
1011073c:	da81038d 	sth	r10,1038(sp)
10110740:	da410715 	stw	r9,1052(sp)
10110744:	da010915 	stw	r8,1060(sp)
10110748:	dec10015 	stw	sp,1024(sp)
1011074c:	dec10415 	stw	sp,1040(sp)
10110750:	d8c10215 	stw	r3,1032(sp)
10110754:	d8c10515 	stw	r3,1044(sp)
10110758:	d8010615 	stw	zero,1048(sp)
1011075c:	010f2800 	call	1010f280 <___vfiprintf_internal_r>
10110760:	1023883a 	mov	r17,r2
10110764:	10000416 	blt	r2,zero,10110778 <__sbprintf+0x80>
10110768:	d9410004 	addi	r5,sp,1024
1011076c:	9009883a 	mov	r4,r18
10110770:	01035580 	call	10103558 <_fflush_r>
10110774:	10000d1e 	bne	r2,zero,101107ac <__sbprintf+0xb4>
10110778:	d881030b 	ldhu	r2,1036(sp)
1011077c:	1080100c 	andi	r2,r2,64
10110780:	10000326 	beq	r2,zero,10110790 <__sbprintf+0x98>
10110784:	8080030b 	ldhu	r2,12(r16)
10110788:	10801014 	ori	r2,r2,64
1011078c:	8080030d 	sth	r2,12(r16)
10110790:	8805883a 	mov	r2,r17
10110794:	dfc11d17 	ldw	ra,1140(sp)
10110798:	dc811c17 	ldw	r18,1136(sp)
1011079c:	dc411b17 	ldw	r17,1132(sp)
101107a0:	dc011a17 	ldw	r16,1128(sp)
101107a4:	dec11e04 	addi	sp,sp,1144
101107a8:	f800283a 	ret
101107ac:	047fffc4 	movi	r17,-1
101107b0:	003ff106 	br	10110778 <_gp+0xfffef1e8>

101107b4 <_calloc_r>:
101107b4:	298b383a 	mul	r5,r5,r6
101107b8:	defffe04 	addi	sp,sp,-8
101107bc:	dfc00115 	stw	ra,4(sp)
101107c0:	dc000015 	stw	r16,0(sp)
101107c4:	010488c0 	call	1010488c <_malloc_r>
101107c8:	10002926 	beq	r2,zero,10110870 <_calloc_r+0xbc>
101107cc:	11bfff17 	ldw	r6,-4(r2)
101107d0:	1021883a 	mov	r16,r2
101107d4:	00bfff04 	movi	r2,-4
101107d8:	308c703a 	and	r6,r6,r2
101107dc:	00c00904 	movi	r3,36
101107e0:	308d883a 	add	r6,r6,r2
101107e4:	19801636 	bltu	r3,r6,10110840 <_calloc_r+0x8c>
101107e8:	008004c4 	movi	r2,19
101107ec:	11800b2e 	bgeu	r2,r6,1011081c <_calloc_r+0x68>
101107f0:	80000015 	stw	zero,0(r16)
101107f4:	80000115 	stw	zero,4(r16)
101107f8:	008006c4 	movi	r2,27
101107fc:	11801a2e 	bgeu	r2,r6,10110868 <_calloc_r+0xb4>
10110800:	80000215 	stw	zero,8(r16)
10110804:	80000315 	stw	zero,12(r16)
10110808:	30c0151e 	bne	r6,r3,10110860 <_calloc_r+0xac>
1011080c:	80000415 	stw	zero,16(r16)
10110810:	80800604 	addi	r2,r16,24
10110814:	80000515 	stw	zero,20(r16)
10110818:	00000106 	br	10110820 <_calloc_r+0x6c>
1011081c:	8005883a 	mov	r2,r16
10110820:	10000015 	stw	zero,0(r2)
10110824:	10000115 	stw	zero,4(r2)
10110828:	10000215 	stw	zero,8(r2)
1011082c:	8005883a 	mov	r2,r16
10110830:	dfc00117 	ldw	ra,4(sp)
10110834:	dc000017 	ldw	r16,0(sp)
10110838:	dec00204 	addi	sp,sp,8
1011083c:	f800283a 	ret
10110840:	000b883a 	mov	r5,zero
10110844:	8009883a 	mov	r4,r16
10110848:	01050980 	call	10105098 <memset>
1011084c:	8005883a 	mov	r2,r16
10110850:	dfc00117 	ldw	ra,4(sp)
10110854:	dc000017 	ldw	r16,0(sp)
10110858:	dec00204 	addi	sp,sp,8
1011085c:	f800283a 	ret
10110860:	80800404 	addi	r2,r16,16
10110864:	003fee06 	br	10110820 <_gp+0xfffef290>
10110868:	80800204 	addi	r2,r16,8
1011086c:	003fec06 	br	10110820 <_gp+0xfffef290>
10110870:	0005883a 	mov	r2,zero
10110874:	003fee06 	br	10110830 <_gp+0xfffef2a0>

10110878 <__fputwc>:
10110878:	defff804 	addi	sp,sp,-32
1011087c:	dcc00415 	stw	r19,16(sp)
10110880:	dc800315 	stw	r18,12(sp)
10110884:	dc000115 	stw	r16,4(sp)
10110888:	dfc00715 	stw	ra,28(sp)
1011088c:	dd400615 	stw	r21,24(sp)
10110890:	dd000515 	stw	r20,20(sp)
10110894:	dc400215 	stw	r17,8(sp)
10110898:	2027883a 	mov	r19,r4
1011089c:	2825883a 	mov	r18,r5
101108a0:	3021883a 	mov	r16,r6
101108a4:	010bf100 	call	1010bf10 <__locale_mb_cur_max>
101108a8:	00c00044 	movi	r3,1
101108ac:	10c03e26 	beq	r2,r3,101109a8 <__fputwc+0x130>
101108b0:	81c01704 	addi	r7,r16,92
101108b4:	900d883a 	mov	r6,r18
101108b8:	d80b883a 	mov	r5,sp
101108bc:	9809883a 	mov	r4,r19
101108c0:	0110bd80 	call	10110bd8 <_wcrtomb_r>
101108c4:	1029883a 	mov	r20,r2
101108c8:	00bfffc4 	movi	r2,-1
101108cc:	a0802026 	beq	r20,r2,10110950 <__fputwc+0xd8>
101108d0:	d9400003 	ldbu	r5,0(sp)
101108d4:	a0001c26 	beq	r20,zero,10110948 <__fputwc+0xd0>
101108d8:	0023883a 	mov	r17,zero
101108dc:	05400284 	movi	r21,10
101108e0:	00000906 	br	10110908 <__fputwc+0x90>
101108e4:	80800017 	ldw	r2,0(r16)
101108e8:	11400005 	stb	r5,0(r2)
101108ec:	80c00017 	ldw	r3,0(r16)
101108f0:	18c00044 	addi	r3,r3,1
101108f4:	80c00015 	stw	r3,0(r16)
101108f8:	8c400044 	addi	r17,r17,1
101108fc:	dc45883a 	add	r2,sp,r17
10110900:	8d00112e 	bgeu	r17,r20,10110948 <__fputwc+0xd0>
10110904:	11400003 	ldbu	r5,0(r2)
10110908:	80c00217 	ldw	r3,8(r16)
1011090c:	18ffffc4 	addi	r3,r3,-1
10110910:	80c00215 	stw	r3,8(r16)
10110914:	183ff30e 	bge	r3,zero,101108e4 <_gp+0xfffef354>
10110918:	80800617 	ldw	r2,24(r16)
1011091c:	18801916 	blt	r3,r2,10110984 <__fputwc+0x10c>
10110920:	80800017 	ldw	r2,0(r16)
10110924:	11400005 	stb	r5,0(r2)
10110928:	80800017 	ldw	r2,0(r16)
1011092c:	10c00003 	ldbu	r3,0(r2)
10110930:	10800044 	addi	r2,r2,1
10110934:	1d402326 	beq	r3,r21,101109c4 <__fputwc+0x14c>
10110938:	80800015 	stw	r2,0(r16)
1011093c:	8c400044 	addi	r17,r17,1
10110940:	dc45883a 	add	r2,sp,r17
10110944:	8d3fef36 	bltu	r17,r20,10110904 <_gp+0xfffef374>
10110948:	9005883a 	mov	r2,r18
1011094c:	00000406 	br	10110960 <__fputwc+0xe8>
10110950:	80c0030b 	ldhu	r3,12(r16)
10110954:	a005883a 	mov	r2,r20
10110958:	18c01014 	ori	r3,r3,64
1011095c:	80c0030d 	sth	r3,12(r16)
10110960:	dfc00717 	ldw	ra,28(sp)
10110964:	dd400617 	ldw	r21,24(sp)
10110968:	dd000517 	ldw	r20,20(sp)
1011096c:	dcc00417 	ldw	r19,16(sp)
10110970:	dc800317 	ldw	r18,12(sp)
10110974:	dc400217 	ldw	r17,8(sp)
10110978:	dc000117 	ldw	r16,4(sp)
1011097c:	dec00804 	addi	sp,sp,32
10110980:	f800283a 	ret
10110984:	800d883a 	mov	r6,r16
10110988:	29403fcc 	andi	r5,r5,255
1011098c:	9809883a 	mov	r4,r19
10110990:	0110a800 	call	10110a80 <__swbuf_r>
10110994:	10bfffe0 	cmpeqi	r2,r2,-1
10110998:	10803fcc 	andi	r2,r2,255
1011099c:	103fd626 	beq	r2,zero,101108f8 <_gp+0xfffef368>
101109a0:	00bfffc4 	movi	r2,-1
101109a4:	003fee06 	br	10110960 <_gp+0xfffef3d0>
101109a8:	90ffffc4 	addi	r3,r18,-1
101109ac:	01003f84 	movi	r4,254
101109b0:	20ffbf36 	bltu	r4,r3,101108b0 <_gp+0xfffef320>
101109b4:	900b883a 	mov	r5,r18
101109b8:	dc800005 	stb	r18,0(sp)
101109bc:	1029883a 	mov	r20,r2
101109c0:	003fc506 	br	101108d8 <_gp+0xfffef348>
101109c4:	800d883a 	mov	r6,r16
101109c8:	a80b883a 	mov	r5,r21
101109cc:	9809883a 	mov	r4,r19
101109d0:	0110a800 	call	10110a80 <__swbuf_r>
101109d4:	10bfffe0 	cmpeqi	r2,r2,-1
101109d8:	003fef06 	br	10110998 <_gp+0xfffef408>

101109dc <_fputwc_r>:
101109dc:	3080030b 	ldhu	r2,12(r6)
101109e0:	10c8000c 	andi	r3,r2,8192
101109e4:	1800051e 	bne	r3,zero,101109fc <_fputwc_r+0x20>
101109e8:	30c01917 	ldw	r3,100(r6)
101109ec:	10880014 	ori	r2,r2,8192
101109f0:	3080030d 	sth	r2,12(r6)
101109f4:	18880014 	ori	r2,r3,8192
101109f8:	30801915 	stw	r2,100(r6)
101109fc:	01108781 	jmpi	10110878 <__fputwc>

10110a00 <fputwc>:
10110a00:	008404b4 	movhi	r2,4114
10110a04:	defffc04 	addi	sp,sp,-16
10110a08:	10a56504 	addi	r2,r2,-27244
10110a0c:	dc000115 	stw	r16,4(sp)
10110a10:	14000017 	ldw	r16,0(r2)
10110a14:	dc400215 	stw	r17,8(sp)
10110a18:	dfc00315 	stw	ra,12(sp)
10110a1c:	2023883a 	mov	r17,r4
10110a20:	80000226 	beq	r16,zero,10110a2c <fputwc+0x2c>
10110a24:	80800e17 	ldw	r2,56(r16)
10110a28:	10001026 	beq	r2,zero,10110a6c <fputwc+0x6c>
10110a2c:	2880030b 	ldhu	r2,12(r5)
10110a30:	10c8000c 	andi	r3,r2,8192
10110a34:	1800051e 	bne	r3,zero,10110a4c <fputwc+0x4c>
10110a38:	28c01917 	ldw	r3,100(r5)
10110a3c:	10880014 	ori	r2,r2,8192
10110a40:	2880030d 	sth	r2,12(r5)
10110a44:	18880014 	ori	r2,r3,8192
10110a48:	28801915 	stw	r2,100(r5)
10110a4c:	280d883a 	mov	r6,r5
10110a50:	8009883a 	mov	r4,r16
10110a54:	880b883a 	mov	r5,r17
10110a58:	dfc00317 	ldw	ra,12(sp)
10110a5c:	dc400217 	ldw	r17,8(sp)
10110a60:	dc000117 	ldw	r16,4(sp)
10110a64:	dec00404 	addi	sp,sp,16
10110a68:	01108781 	jmpi	10110878 <__fputwc>
10110a6c:	8009883a 	mov	r4,r16
10110a70:	d9400015 	stw	r5,0(sp)
10110a74:	01039340 	call	10103934 <__sinit>
10110a78:	d9400017 	ldw	r5,0(sp)
10110a7c:	003feb06 	br	10110a2c <_gp+0xfffef49c>

10110a80 <__swbuf_r>:
10110a80:	defffb04 	addi	sp,sp,-20
10110a84:	dcc00315 	stw	r19,12(sp)
10110a88:	dc800215 	stw	r18,8(sp)
10110a8c:	dc000015 	stw	r16,0(sp)
10110a90:	dfc00415 	stw	ra,16(sp)
10110a94:	dc400115 	stw	r17,4(sp)
10110a98:	2025883a 	mov	r18,r4
10110a9c:	2827883a 	mov	r19,r5
10110aa0:	3021883a 	mov	r16,r6
10110aa4:	20000226 	beq	r4,zero,10110ab0 <__swbuf_r+0x30>
10110aa8:	20800e17 	ldw	r2,56(r4)
10110aac:	10004226 	beq	r2,zero,10110bb8 <__swbuf_r+0x138>
10110ab0:	80800617 	ldw	r2,24(r16)
10110ab4:	8100030b 	ldhu	r4,12(r16)
10110ab8:	80800215 	stw	r2,8(r16)
10110abc:	2080020c 	andi	r2,r4,8
10110ac0:	10003626 	beq	r2,zero,10110b9c <__swbuf_r+0x11c>
10110ac4:	80c00417 	ldw	r3,16(r16)
10110ac8:	18003426 	beq	r3,zero,10110b9c <__swbuf_r+0x11c>
10110acc:	2088000c 	andi	r2,r4,8192
10110ad0:	9c403fcc 	andi	r17,r19,255
10110ad4:	10001a26 	beq	r2,zero,10110b40 <__swbuf_r+0xc0>
10110ad8:	80800017 	ldw	r2,0(r16)
10110adc:	81000517 	ldw	r4,20(r16)
10110ae0:	10c7c83a 	sub	r3,r2,r3
10110ae4:	1900200e 	bge	r3,r4,10110b68 <__swbuf_r+0xe8>
10110ae8:	18c00044 	addi	r3,r3,1
10110aec:	81000217 	ldw	r4,8(r16)
10110af0:	11400044 	addi	r5,r2,1
10110af4:	81400015 	stw	r5,0(r16)
10110af8:	213fffc4 	addi	r4,r4,-1
10110afc:	81000215 	stw	r4,8(r16)
10110b00:	14c00005 	stb	r19,0(r2)
10110b04:	80800517 	ldw	r2,20(r16)
10110b08:	10c01e26 	beq	r2,r3,10110b84 <__swbuf_r+0x104>
10110b0c:	8080030b 	ldhu	r2,12(r16)
10110b10:	1080004c 	andi	r2,r2,1
10110b14:	10000226 	beq	r2,zero,10110b20 <__swbuf_r+0xa0>
10110b18:	00800284 	movi	r2,10
10110b1c:	88801926 	beq	r17,r2,10110b84 <__swbuf_r+0x104>
10110b20:	8805883a 	mov	r2,r17
10110b24:	dfc00417 	ldw	ra,16(sp)
10110b28:	dcc00317 	ldw	r19,12(sp)
10110b2c:	dc800217 	ldw	r18,8(sp)
10110b30:	dc400117 	ldw	r17,4(sp)
10110b34:	dc000017 	ldw	r16,0(sp)
10110b38:	dec00504 	addi	sp,sp,20
10110b3c:	f800283a 	ret
10110b40:	81401917 	ldw	r5,100(r16)
10110b44:	00b7ffc4 	movi	r2,-8193
10110b48:	21080014 	ori	r4,r4,8192
10110b4c:	2884703a 	and	r2,r5,r2
10110b50:	80801915 	stw	r2,100(r16)
10110b54:	80800017 	ldw	r2,0(r16)
10110b58:	8100030d 	sth	r4,12(r16)
10110b5c:	81000517 	ldw	r4,20(r16)
10110b60:	10c7c83a 	sub	r3,r2,r3
10110b64:	193fe016 	blt	r3,r4,10110ae8 <_gp+0xfffef558>
10110b68:	800b883a 	mov	r5,r16
10110b6c:	9009883a 	mov	r4,r18
10110b70:	01035580 	call	10103558 <_fflush_r>
10110b74:	1000071e 	bne	r2,zero,10110b94 <__swbuf_r+0x114>
10110b78:	80800017 	ldw	r2,0(r16)
10110b7c:	00c00044 	movi	r3,1
10110b80:	003fda06 	br	10110aec <_gp+0xfffef55c>
10110b84:	800b883a 	mov	r5,r16
10110b88:	9009883a 	mov	r4,r18
10110b8c:	01035580 	call	10103558 <_fflush_r>
10110b90:	103fe326 	beq	r2,zero,10110b20 <_gp+0xfffef590>
10110b94:	00bfffc4 	movi	r2,-1
10110b98:	003fe206 	br	10110b24 <_gp+0xfffef594>
10110b9c:	800b883a 	mov	r5,r16
10110ba0:	9009883a 	mov	r4,r18
10110ba4:	0109e280 	call	10109e28 <__swsetup_r>
10110ba8:	103ffa1e 	bne	r2,zero,10110b94 <_gp+0xfffef604>
10110bac:	8100030b 	ldhu	r4,12(r16)
10110bb0:	80c00417 	ldw	r3,16(r16)
10110bb4:	003fc506 	br	10110acc <_gp+0xfffef53c>
10110bb8:	01039340 	call	10103934 <__sinit>
10110bbc:	003fbc06 	br	10110ab0 <_gp+0xfffef520>

10110bc0 <__swbuf>:
10110bc0:	008404b4 	movhi	r2,4114
10110bc4:	10a56504 	addi	r2,r2,-27244
10110bc8:	280d883a 	mov	r6,r5
10110bcc:	200b883a 	mov	r5,r4
10110bd0:	11000017 	ldw	r4,0(r2)
10110bd4:	0110a801 	jmpi	10110a80 <__swbuf_r>

10110bd8 <_wcrtomb_r>:
10110bd8:	defff604 	addi	sp,sp,-40
10110bdc:	008404b4 	movhi	r2,4114
10110be0:	dc800815 	stw	r18,32(sp)
10110be4:	dc400715 	stw	r17,28(sp)
10110be8:	dc000615 	stw	r16,24(sp)
10110bec:	10a56904 	addi	r2,r2,-27228
10110bf0:	dfc00915 	stw	ra,36(sp)
10110bf4:	2021883a 	mov	r16,r4
10110bf8:	3823883a 	mov	r17,r7
10110bfc:	14800017 	ldw	r18,0(r2)
10110c00:	28001426 	beq	r5,zero,10110c54 <_wcrtomb_r+0x7c>
10110c04:	d9400415 	stw	r5,16(sp)
10110c08:	d9800515 	stw	r6,20(sp)
10110c0c:	010bf040 	call	1010bf04 <__locale_charset>
10110c10:	d9800517 	ldw	r6,20(sp)
10110c14:	d9400417 	ldw	r5,16(sp)
10110c18:	100f883a 	mov	r7,r2
10110c1c:	dc400015 	stw	r17,0(sp)
10110c20:	8009883a 	mov	r4,r16
10110c24:	903ee83a 	callr	r18
10110c28:	00ffffc4 	movi	r3,-1
10110c2c:	10c0031e 	bne	r2,r3,10110c3c <_wcrtomb_r+0x64>
10110c30:	88000015 	stw	zero,0(r17)
10110c34:	00c02284 	movi	r3,138
10110c38:	80c00015 	stw	r3,0(r16)
10110c3c:	dfc00917 	ldw	ra,36(sp)
10110c40:	dc800817 	ldw	r18,32(sp)
10110c44:	dc400717 	ldw	r17,28(sp)
10110c48:	dc000617 	ldw	r16,24(sp)
10110c4c:	dec00a04 	addi	sp,sp,40
10110c50:	f800283a 	ret
10110c54:	010bf040 	call	1010bf04 <__locale_charset>
10110c58:	100f883a 	mov	r7,r2
10110c5c:	dc400015 	stw	r17,0(sp)
10110c60:	000d883a 	mov	r6,zero
10110c64:	d9400104 	addi	r5,sp,4
10110c68:	8009883a 	mov	r4,r16
10110c6c:	903ee83a 	callr	r18
10110c70:	003fed06 	br	10110c28 <_gp+0xfffef698>

10110c74 <wcrtomb>:
10110c74:	defff604 	addi	sp,sp,-40
10110c78:	008404b4 	movhi	r2,4114
10110c7c:	dc800615 	stw	r18,24(sp)
10110c80:	dc400515 	stw	r17,20(sp)
10110c84:	10a56504 	addi	r2,r2,-27244
10110c88:	dfc00915 	stw	ra,36(sp)
10110c8c:	dd000815 	stw	r20,32(sp)
10110c90:	dcc00715 	stw	r19,28(sp)
10110c94:	dc000415 	stw	r16,16(sp)
10110c98:	3025883a 	mov	r18,r6
10110c9c:	14400017 	ldw	r17,0(r2)
10110ca0:	20001926 	beq	r4,zero,10110d08 <wcrtomb+0x94>
10110ca4:	008404b4 	movhi	r2,4114
10110ca8:	10a56904 	addi	r2,r2,-27228
10110cac:	15000017 	ldw	r20,0(r2)
10110cb0:	2021883a 	mov	r16,r4
10110cb4:	2827883a 	mov	r19,r5
10110cb8:	010bf040 	call	1010bf04 <__locale_charset>
10110cbc:	100f883a 	mov	r7,r2
10110cc0:	dc800015 	stw	r18,0(sp)
10110cc4:	980d883a 	mov	r6,r19
10110cc8:	800b883a 	mov	r5,r16
10110ccc:	8809883a 	mov	r4,r17
10110cd0:	a03ee83a 	callr	r20
10110cd4:	00ffffc4 	movi	r3,-1
10110cd8:	10c0031e 	bne	r2,r3,10110ce8 <wcrtomb+0x74>
10110cdc:	90000015 	stw	zero,0(r18)
10110ce0:	00c02284 	movi	r3,138
10110ce4:	88c00015 	stw	r3,0(r17)
10110ce8:	dfc00917 	ldw	ra,36(sp)
10110cec:	dd000817 	ldw	r20,32(sp)
10110cf0:	dcc00717 	ldw	r19,28(sp)
10110cf4:	dc800617 	ldw	r18,24(sp)
10110cf8:	dc400517 	ldw	r17,20(sp)
10110cfc:	dc000417 	ldw	r16,16(sp)
10110d00:	dec00a04 	addi	sp,sp,40
10110d04:	f800283a 	ret
10110d08:	008404b4 	movhi	r2,4114
10110d0c:	10a56904 	addi	r2,r2,-27228
10110d10:	14000017 	ldw	r16,0(r2)
10110d14:	010bf040 	call	1010bf04 <__locale_charset>
10110d18:	100f883a 	mov	r7,r2
10110d1c:	dc800015 	stw	r18,0(sp)
10110d20:	000d883a 	mov	r6,zero
10110d24:	d9400104 	addi	r5,sp,4
10110d28:	8809883a 	mov	r4,r17
10110d2c:	803ee83a 	callr	r16
10110d30:	003fe806 	br	10110cd4 <_gp+0xfffef744>

10110d34 <__ascii_wctomb>:
10110d34:	28000526 	beq	r5,zero,10110d4c <__ascii_wctomb+0x18>
10110d38:	00803fc4 	movi	r2,255
10110d3c:	11800536 	bltu	r2,r6,10110d54 <__ascii_wctomb+0x20>
10110d40:	29800005 	stb	r6,0(r5)
10110d44:	00800044 	movi	r2,1
10110d48:	f800283a 	ret
10110d4c:	0005883a 	mov	r2,zero
10110d50:	f800283a 	ret
10110d54:	00802284 	movi	r2,138
10110d58:	20800015 	stw	r2,0(r4)
10110d5c:	00bfffc4 	movi	r2,-1
10110d60:	f800283a 	ret

10110d64 <_wctomb_r>:
10110d64:	008404b4 	movhi	r2,4114
10110d68:	defff904 	addi	sp,sp,-28
10110d6c:	10a56904 	addi	r2,r2,-27228
10110d70:	dfc00615 	stw	ra,24(sp)
10110d74:	dc400515 	stw	r17,20(sp)
10110d78:	dc000415 	stw	r16,16(sp)
10110d7c:	3823883a 	mov	r17,r7
10110d80:	14000017 	ldw	r16,0(r2)
10110d84:	d9000115 	stw	r4,4(sp)
10110d88:	d9400215 	stw	r5,8(sp)
10110d8c:	d9800315 	stw	r6,12(sp)
10110d90:	010bf040 	call	1010bf04 <__locale_charset>
10110d94:	d9800317 	ldw	r6,12(sp)
10110d98:	d9400217 	ldw	r5,8(sp)
10110d9c:	d9000117 	ldw	r4,4(sp)
10110da0:	100f883a 	mov	r7,r2
10110da4:	dc400015 	stw	r17,0(sp)
10110da8:	803ee83a 	callr	r16
10110dac:	dfc00617 	ldw	ra,24(sp)
10110db0:	dc400517 	ldw	r17,20(sp)
10110db4:	dc000417 	ldw	r16,16(sp)
10110db8:	dec00704 	addi	sp,sp,28
10110dbc:	f800283a 	ret

10110dc0 <__muldi3>:
10110dc0:	223fffcc 	andi	r8,r4,65535
10110dc4:	2006d43a 	srli	r3,r4,16
10110dc8:	32bfffcc 	andi	r10,r6,65535
10110dcc:	3012d43a 	srli	r9,r6,16
10110dd0:	4297383a 	mul	r11,r8,r10
10110dd4:	1a95383a 	mul	r10,r3,r10
10110dd8:	4251383a 	mul	r8,r8,r9
10110ddc:	5804d43a 	srli	r2,r11,16
10110de0:	4291883a 	add	r8,r8,r10
10110de4:	1205883a 	add	r2,r2,r8
10110de8:	1a51383a 	mul	r8,r3,r9
10110dec:	1280022e 	bgeu	r2,r10,10110df8 <__muldi3+0x38>
10110df0:	00c00074 	movhi	r3,1
10110df4:	40d1883a 	add	r8,r8,r3
10110df8:	1006d43a 	srli	r3,r2,16
10110dfc:	21cf383a 	mul	r7,r4,r7
10110e00:	314b383a 	mul	r5,r6,r5
10110e04:	1004943a 	slli	r2,r2,16
10110e08:	1a11883a 	add	r8,r3,r8
10110e0c:	5affffcc 	andi	r11,r11,65535
10110e10:	3947883a 	add	r3,r7,r5
10110e14:	12c5883a 	add	r2,r2,r11
10110e18:	1a07883a 	add	r3,r3,r8
10110e1c:	f800283a 	ret

10110e20 <__udivdi3>:
10110e20:	defff504 	addi	sp,sp,-44
10110e24:	dcc00415 	stw	r19,16(sp)
10110e28:	dc000115 	stw	r16,4(sp)
10110e2c:	dfc00a15 	stw	ra,40(sp)
10110e30:	df000915 	stw	fp,36(sp)
10110e34:	ddc00815 	stw	r23,32(sp)
10110e38:	dd800715 	stw	r22,28(sp)
10110e3c:	dd400615 	stw	r21,24(sp)
10110e40:	dd000515 	stw	r20,20(sp)
10110e44:	dc800315 	stw	r18,12(sp)
10110e48:	dc400215 	stw	r17,8(sp)
10110e4c:	2027883a 	mov	r19,r4
10110e50:	2821883a 	mov	r16,r5
10110e54:	3800411e 	bne	r7,zero,10110f5c <__udivdi3+0x13c>
10110e58:	3023883a 	mov	r17,r6
10110e5c:	2025883a 	mov	r18,r4
10110e60:	2980522e 	bgeu	r5,r6,10110fac <__udivdi3+0x18c>
10110e64:	00bfffd4 	movui	r2,65535
10110e68:	282d883a 	mov	r22,r5
10110e6c:	1180a836 	bltu	r2,r6,10111110 <__udivdi3+0x2f0>
10110e70:	00803fc4 	movi	r2,255
10110e74:	1185803a 	cmpltu	r2,r2,r6
10110e78:	100490fa 	slli	r2,r2,3
10110e7c:	3086d83a 	srl	r3,r6,r2
10110e80:	01040474 	movhi	r4,4113
10110e84:	211e5f04 	addi	r4,r4,31100
10110e88:	20c7883a 	add	r3,r4,r3
10110e8c:	18c00003 	ldbu	r3,0(r3)
10110e90:	1885883a 	add	r2,r3,r2
10110e94:	00c00804 	movi	r3,32
10110e98:	1887c83a 	sub	r3,r3,r2
10110e9c:	18000526 	beq	r3,zero,10110eb4 <__udivdi3+0x94>
10110ea0:	80e0983a 	sll	r16,r16,r3
10110ea4:	9884d83a 	srl	r2,r19,r2
10110ea8:	30e2983a 	sll	r17,r6,r3
10110eac:	98e4983a 	sll	r18,r19,r3
10110eb0:	142cb03a 	or	r22,r2,r16
10110eb4:	882ad43a 	srli	r21,r17,16
10110eb8:	b009883a 	mov	r4,r22
10110ebc:	8d3fffcc 	andi	r20,r17,65535
10110ec0:	a80b883a 	mov	r5,r21
10110ec4:	01031640 	call	10103164 <__umodsi3>
10110ec8:	b009883a 	mov	r4,r22
10110ecc:	a80b883a 	mov	r5,r21
10110ed0:	1027883a 	mov	r19,r2
10110ed4:	01031000 	call	10103100 <__udivsi3>
10110ed8:	102d883a 	mov	r22,r2
10110edc:	9826943a 	slli	r19,r19,16
10110ee0:	9004d43a 	srli	r2,r18,16
10110ee4:	a5a1383a 	mul	r16,r20,r22
10110ee8:	14c4b03a 	or	r2,r2,r19
10110eec:	1400052e 	bgeu	r2,r16,10110f04 <__udivdi3+0xe4>
10110ef0:	1445883a 	add	r2,r2,r17
10110ef4:	b0ffffc4 	addi	r3,r22,-1
10110ef8:	14400136 	bltu	r2,r17,10110f00 <__udivdi3+0xe0>
10110efc:	14012336 	bltu	r2,r16,1011138c <__udivdi3+0x56c>
10110f00:	182d883a 	mov	r22,r3
10110f04:	1421c83a 	sub	r16,r2,r16
10110f08:	a80b883a 	mov	r5,r21
10110f0c:	8009883a 	mov	r4,r16
10110f10:	01031640 	call	10103164 <__umodsi3>
10110f14:	1027883a 	mov	r19,r2
10110f18:	a80b883a 	mov	r5,r21
10110f1c:	8009883a 	mov	r4,r16
10110f20:	01031000 	call	10103100 <__udivsi3>
10110f24:	9826943a 	slli	r19,r19,16
10110f28:	a0a9383a 	mul	r20,r20,r2
10110f2c:	94bfffcc 	andi	r18,r18,65535
10110f30:	94e4b03a 	or	r18,r18,r19
10110f34:	9500052e 	bgeu	r18,r20,10110f4c <__udivdi3+0x12c>
10110f38:	8ca5883a 	add	r18,r17,r18
10110f3c:	10ffffc4 	addi	r3,r2,-1
10110f40:	9440f136 	bltu	r18,r17,10111308 <__udivdi3+0x4e8>
10110f44:	9500f02e 	bgeu	r18,r20,10111308 <__udivdi3+0x4e8>
10110f48:	10bfff84 	addi	r2,r2,-2
10110f4c:	b00c943a 	slli	r6,r22,16
10110f50:	0007883a 	mov	r3,zero
10110f54:	3084b03a 	or	r2,r6,r2
10110f58:	00005906 	br	101110c0 <__udivdi3+0x2a0>
10110f5c:	29c05636 	bltu	r5,r7,101110b8 <__udivdi3+0x298>
10110f60:	00bfffd4 	movui	r2,65535
10110f64:	11c0622e 	bgeu	r2,r7,101110f0 <__udivdi3+0x2d0>
10110f68:	00804034 	movhi	r2,256
10110f6c:	10bfffc4 	addi	r2,r2,-1
10110f70:	11c0ee36 	bltu	r2,r7,1011132c <__udivdi3+0x50c>
10110f74:	00800404 	movi	r2,16
10110f78:	3886d83a 	srl	r3,r7,r2
10110f7c:	01040474 	movhi	r4,4113
10110f80:	211e5f04 	addi	r4,r4,31100
10110f84:	20c7883a 	add	r3,r4,r3
10110f88:	18c00003 	ldbu	r3,0(r3)
10110f8c:	05400804 	movi	r21,32
10110f90:	1885883a 	add	r2,r3,r2
10110f94:	a8abc83a 	sub	r21,r21,r2
10110f98:	a800621e 	bne	r21,zero,10111124 <__udivdi3+0x304>
10110f9c:	3c00e936 	bltu	r7,r16,10111344 <__udivdi3+0x524>
10110fa0:	9985403a 	cmpgeu	r2,r19,r6
10110fa4:	0007883a 	mov	r3,zero
10110fa8:	00004506 	br	101110c0 <__udivdi3+0x2a0>
10110fac:	3000041e 	bne	r6,zero,10110fc0 <__udivdi3+0x1a0>
10110fb0:	000b883a 	mov	r5,zero
10110fb4:	01000044 	movi	r4,1
10110fb8:	01031000 	call	10103100 <__udivsi3>
10110fbc:	1023883a 	mov	r17,r2
10110fc0:	00bfffd4 	movui	r2,65535
10110fc4:	14404e2e 	bgeu	r2,r17,10111100 <__udivdi3+0x2e0>
10110fc8:	00804034 	movhi	r2,256
10110fcc:	10bfffc4 	addi	r2,r2,-1
10110fd0:	1440d836 	bltu	r2,r17,10111334 <__udivdi3+0x514>
10110fd4:	00800404 	movi	r2,16
10110fd8:	8886d83a 	srl	r3,r17,r2
10110fdc:	01040474 	movhi	r4,4113
10110fe0:	211e5f04 	addi	r4,r4,31100
10110fe4:	20c7883a 	add	r3,r4,r3
10110fe8:	18c00003 	ldbu	r3,0(r3)
10110fec:	1885883a 	add	r2,r3,r2
10110ff0:	00c00804 	movi	r3,32
10110ff4:	1887c83a 	sub	r3,r3,r2
10110ff8:	18008f1e 	bne	r3,zero,10111238 <__udivdi3+0x418>
10110ffc:	882ad43a 	srli	r21,r17,16
10111000:	8461c83a 	sub	r16,r16,r17
10111004:	8d3fffcc 	andi	r20,r17,65535
10111008:	00c00044 	movi	r3,1
1011100c:	8009883a 	mov	r4,r16
10111010:	a80b883a 	mov	r5,r21
10111014:	d8c00015 	stw	r3,0(sp)
10111018:	01031640 	call	10103164 <__umodsi3>
1011101c:	8009883a 	mov	r4,r16
10111020:	a80b883a 	mov	r5,r21
10111024:	1027883a 	mov	r19,r2
10111028:	01031000 	call	10103100 <__udivsi3>
1011102c:	9826943a 	slli	r19,r19,16
10111030:	9008d43a 	srli	r4,r18,16
10111034:	1521383a 	mul	r16,r2,r20
10111038:	102d883a 	mov	r22,r2
1011103c:	24c8b03a 	or	r4,r4,r19
10111040:	d8c00017 	ldw	r3,0(sp)
10111044:	2400052e 	bgeu	r4,r16,1011105c <__udivdi3+0x23c>
10111048:	2449883a 	add	r4,r4,r17
1011104c:	b0bfffc4 	addi	r2,r22,-1
10111050:	24400136 	bltu	r4,r17,10111058 <__udivdi3+0x238>
10111054:	2400ca36 	bltu	r4,r16,10111380 <__udivdi3+0x560>
10111058:	102d883a 	mov	r22,r2
1011105c:	2421c83a 	sub	r16,r4,r16
10111060:	a80b883a 	mov	r5,r21
10111064:	8009883a 	mov	r4,r16
10111068:	d8c00015 	stw	r3,0(sp)
1011106c:	01031640 	call	10103164 <__umodsi3>
10111070:	1027883a 	mov	r19,r2
10111074:	a80b883a 	mov	r5,r21
10111078:	8009883a 	mov	r4,r16
1011107c:	01031000 	call	10103100 <__udivsi3>
10111080:	9826943a 	slli	r19,r19,16
10111084:	1529383a 	mul	r20,r2,r20
10111088:	94bfffcc 	andi	r18,r18,65535
1011108c:	94e4b03a 	or	r18,r18,r19
10111090:	d8c00017 	ldw	r3,0(sp)
10111094:	9500052e 	bgeu	r18,r20,101110ac <__udivdi3+0x28c>
10111098:	8ca5883a 	add	r18,r17,r18
1011109c:	113fffc4 	addi	r4,r2,-1
101110a0:	94409736 	bltu	r18,r17,10111300 <__udivdi3+0x4e0>
101110a4:	9500962e 	bgeu	r18,r20,10111300 <__udivdi3+0x4e0>
101110a8:	10bfff84 	addi	r2,r2,-2
101110ac:	b00c943a 	slli	r6,r22,16
101110b0:	3084b03a 	or	r2,r6,r2
101110b4:	00000206 	br	101110c0 <__udivdi3+0x2a0>
101110b8:	0007883a 	mov	r3,zero
101110bc:	0005883a 	mov	r2,zero
101110c0:	dfc00a17 	ldw	ra,40(sp)
101110c4:	df000917 	ldw	fp,36(sp)
101110c8:	ddc00817 	ldw	r23,32(sp)
101110cc:	dd800717 	ldw	r22,28(sp)
101110d0:	dd400617 	ldw	r21,24(sp)
101110d4:	dd000517 	ldw	r20,20(sp)
101110d8:	dcc00417 	ldw	r19,16(sp)
101110dc:	dc800317 	ldw	r18,12(sp)
101110e0:	dc400217 	ldw	r17,8(sp)
101110e4:	dc000117 	ldw	r16,4(sp)
101110e8:	dec00b04 	addi	sp,sp,44
101110ec:	f800283a 	ret
101110f0:	00803fc4 	movi	r2,255
101110f4:	11c5803a 	cmpltu	r2,r2,r7
101110f8:	100490fa 	slli	r2,r2,3
101110fc:	003f9e06 	br	10110f78 <_gp+0xfffef9e8>
10111100:	00803fc4 	movi	r2,255
10111104:	1445803a 	cmpltu	r2,r2,r17
10111108:	100490fa 	slli	r2,r2,3
1011110c:	003fb206 	br	10110fd8 <_gp+0xfffefa48>
10111110:	00804034 	movhi	r2,256
10111114:	10bfffc4 	addi	r2,r2,-1
10111118:	11808836 	bltu	r2,r6,1011133c <__udivdi3+0x51c>
1011111c:	00800404 	movi	r2,16
10111120:	003f5606 	br	10110e7c <_gp+0xfffef8ec>
10111124:	30aed83a 	srl	r23,r6,r2
10111128:	3d4e983a 	sll	r7,r7,r21
1011112c:	80acd83a 	srl	r22,r16,r2
10111130:	9884d83a 	srl	r2,r19,r2
10111134:	3deeb03a 	or	r23,r7,r23
10111138:	b824d43a 	srli	r18,r23,16
1011113c:	8560983a 	sll	r16,r16,r21
10111140:	b009883a 	mov	r4,r22
10111144:	900b883a 	mov	r5,r18
10111148:	3568983a 	sll	r20,r6,r21
1011114c:	1420b03a 	or	r16,r2,r16
10111150:	01031640 	call	10103164 <__umodsi3>
10111154:	b009883a 	mov	r4,r22
10111158:	900b883a 	mov	r5,r18
1011115c:	1023883a 	mov	r17,r2
10111160:	01031000 	call	10103100 <__udivsi3>
10111164:	8808943a 	slli	r4,r17,16
10111168:	bf3fffcc 	andi	fp,r23,65535
1011116c:	8006d43a 	srli	r3,r16,16
10111170:	e0a3383a 	mul	r17,fp,r2
10111174:	100d883a 	mov	r6,r2
10111178:	1906b03a 	or	r3,r3,r4
1011117c:	1c40042e 	bgeu	r3,r17,10111190 <__udivdi3+0x370>
10111180:	1dc7883a 	add	r3,r3,r23
10111184:	10bfffc4 	addi	r2,r2,-1
10111188:	1dc0752e 	bgeu	r3,r23,10111360 <__udivdi3+0x540>
1011118c:	100d883a 	mov	r6,r2
10111190:	1c63c83a 	sub	r17,r3,r17
10111194:	900b883a 	mov	r5,r18
10111198:	8809883a 	mov	r4,r17
1011119c:	d9800015 	stw	r6,0(sp)
101111a0:	01031640 	call	10103164 <__umodsi3>
101111a4:	102d883a 	mov	r22,r2
101111a8:	8809883a 	mov	r4,r17
101111ac:	900b883a 	mov	r5,r18
101111b0:	01031000 	call	10103100 <__udivsi3>
101111b4:	b02c943a 	slli	r22,r22,16
101111b8:	e089383a 	mul	r4,fp,r2
101111bc:	843fffcc 	andi	r16,r16,65535
101111c0:	85a0b03a 	or	r16,r16,r22
101111c4:	d9800017 	ldw	r6,0(sp)
101111c8:	8100042e 	bgeu	r16,r4,101111dc <__udivdi3+0x3bc>
101111cc:	85e1883a 	add	r16,r16,r23
101111d0:	10ffffc4 	addi	r3,r2,-1
101111d4:	85c05e2e 	bgeu	r16,r23,10111350 <__udivdi3+0x530>
101111d8:	1805883a 	mov	r2,r3
101111dc:	300c943a 	slli	r6,r6,16
101111e0:	a17fffcc 	andi	r5,r20,65535
101111e4:	a028d43a 	srli	r20,r20,16
101111e8:	3084b03a 	or	r2,r6,r2
101111ec:	10ffffcc 	andi	r3,r2,65535
101111f0:	100cd43a 	srli	r6,r2,16
101111f4:	194f383a 	mul	r7,r3,r5
101111f8:	1d07383a 	mul	r3,r3,r20
101111fc:	314b383a 	mul	r5,r6,r5
10111200:	3810d43a 	srli	r8,r7,16
10111204:	8121c83a 	sub	r16,r16,r4
10111208:	1947883a 	add	r3,r3,r5
1011120c:	40c7883a 	add	r3,r8,r3
10111210:	350d383a 	mul	r6,r6,r20
10111214:	1940022e 	bgeu	r3,r5,10111220 <__udivdi3+0x400>
10111218:	01000074 	movhi	r4,1
1011121c:	310d883a 	add	r6,r6,r4
10111220:	1828d43a 	srli	r20,r3,16
10111224:	a18d883a 	add	r6,r20,r6
10111228:	81803e36 	bltu	r16,r6,10111324 <__udivdi3+0x504>
1011122c:	81803826 	beq	r16,r6,10111310 <__udivdi3+0x4f0>
10111230:	0007883a 	mov	r3,zero
10111234:	003fa206 	br	101110c0 <_gp+0xfffefb30>
10111238:	88e2983a 	sll	r17,r17,r3
1011123c:	80a8d83a 	srl	r20,r16,r2
10111240:	80e0983a 	sll	r16,r16,r3
10111244:	882ad43a 	srli	r21,r17,16
10111248:	9884d83a 	srl	r2,r19,r2
1011124c:	a009883a 	mov	r4,r20
10111250:	a80b883a 	mov	r5,r21
10111254:	142eb03a 	or	r23,r2,r16
10111258:	98e4983a 	sll	r18,r19,r3
1011125c:	01031640 	call	10103164 <__umodsi3>
10111260:	a009883a 	mov	r4,r20
10111264:	a80b883a 	mov	r5,r21
10111268:	1021883a 	mov	r16,r2
1011126c:	01031000 	call	10103100 <__udivsi3>
10111270:	1039883a 	mov	fp,r2
10111274:	8d3fffcc 	andi	r20,r17,65535
10111278:	8020943a 	slli	r16,r16,16
1011127c:	b804d43a 	srli	r2,r23,16
10111280:	a72d383a 	mul	r22,r20,fp
10111284:	1404b03a 	or	r2,r2,r16
10111288:	1580062e 	bgeu	r2,r22,101112a4 <__udivdi3+0x484>
1011128c:	1445883a 	add	r2,r2,r17
10111290:	e0ffffc4 	addi	r3,fp,-1
10111294:	14403836 	bltu	r2,r17,10111378 <__udivdi3+0x558>
10111298:	1580372e 	bgeu	r2,r22,10111378 <__udivdi3+0x558>
1011129c:	e73fff84 	addi	fp,fp,-2
101112a0:	1445883a 	add	r2,r2,r17
101112a4:	15adc83a 	sub	r22,r2,r22
101112a8:	a80b883a 	mov	r5,r21
101112ac:	b009883a 	mov	r4,r22
101112b0:	01031640 	call	10103164 <__umodsi3>
101112b4:	1027883a 	mov	r19,r2
101112b8:	b009883a 	mov	r4,r22
101112bc:	a80b883a 	mov	r5,r21
101112c0:	01031000 	call	10103100 <__udivsi3>
101112c4:	9826943a 	slli	r19,r19,16
101112c8:	a0a1383a 	mul	r16,r20,r2
101112cc:	b93fffcc 	andi	r4,r23,65535
101112d0:	24c8b03a 	or	r4,r4,r19
101112d4:	2400062e 	bgeu	r4,r16,101112f0 <__udivdi3+0x4d0>
101112d8:	2449883a 	add	r4,r4,r17
101112dc:	10ffffc4 	addi	r3,r2,-1
101112e0:	24402336 	bltu	r4,r17,10111370 <__udivdi3+0x550>
101112e4:	2400222e 	bgeu	r4,r16,10111370 <__udivdi3+0x550>
101112e8:	10bfff84 	addi	r2,r2,-2
101112ec:	2449883a 	add	r4,r4,r17
101112f0:	e038943a 	slli	fp,fp,16
101112f4:	2421c83a 	sub	r16,r4,r16
101112f8:	e086b03a 	or	r3,fp,r2
101112fc:	003f4306 	br	1011100c <_gp+0xfffefa7c>
10111300:	2005883a 	mov	r2,r4
10111304:	003f6906 	br	101110ac <_gp+0xfffefb1c>
10111308:	1805883a 	mov	r2,r3
1011130c:	003f0f06 	br	10110f4c <_gp+0xfffef9bc>
10111310:	1806943a 	slli	r3,r3,16
10111314:	9d66983a 	sll	r19,r19,r21
10111318:	39ffffcc 	andi	r7,r7,65535
1011131c:	19c7883a 	add	r3,r3,r7
10111320:	98ffc32e 	bgeu	r19,r3,10111230 <_gp+0xfffefca0>
10111324:	10bfffc4 	addi	r2,r2,-1
10111328:	003fc106 	br	10111230 <_gp+0xfffefca0>
1011132c:	00800604 	movi	r2,24
10111330:	003f1106 	br	10110f78 <_gp+0xfffef9e8>
10111334:	00800604 	movi	r2,24
10111338:	003f2706 	br	10110fd8 <_gp+0xfffefa48>
1011133c:	00800604 	movi	r2,24
10111340:	003ece06 	br	10110e7c <_gp+0xfffef8ec>
10111344:	0007883a 	mov	r3,zero
10111348:	00800044 	movi	r2,1
1011134c:	003f5c06 	br	101110c0 <_gp+0xfffefb30>
10111350:	813fa12e 	bgeu	r16,r4,101111d8 <_gp+0xfffefc48>
10111354:	10bfff84 	addi	r2,r2,-2
10111358:	85e1883a 	add	r16,r16,r23
1011135c:	003f9f06 	br	101111dc <_gp+0xfffefc4c>
10111360:	1c7f8a2e 	bgeu	r3,r17,1011118c <_gp+0xfffefbfc>
10111364:	31bfff84 	addi	r6,r6,-2
10111368:	1dc7883a 	add	r3,r3,r23
1011136c:	003f8806 	br	10111190 <_gp+0xfffefc00>
10111370:	1805883a 	mov	r2,r3
10111374:	003fde06 	br	101112f0 <_gp+0xfffefd60>
10111378:	1839883a 	mov	fp,r3
1011137c:	003fc906 	br	101112a4 <_gp+0xfffefd14>
10111380:	b5bfff84 	addi	r22,r22,-2
10111384:	2449883a 	add	r4,r4,r17
10111388:	003f3406 	br	1011105c <_gp+0xfffefacc>
1011138c:	b5bfff84 	addi	r22,r22,-2
10111390:	1445883a 	add	r2,r2,r17
10111394:	003edb06 	br	10110f04 <_gp+0xfffef974>

10111398 <__umoddi3>:
10111398:	defff404 	addi	sp,sp,-48
1011139c:	df000a15 	stw	fp,40(sp)
101113a0:	dc400315 	stw	r17,12(sp)
101113a4:	dc000215 	stw	r16,8(sp)
101113a8:	dfc00b15 	stw	ra,44(sp)
101113ac:	ddc00915 	stw	r23,36(sp)
101113b0:	dd800815 	stw	r22,32(sp)
101113b4:	dd400715 	stw	r21,28(sp)
101113b8:	dd000615 	stw	r20,24(sp)
101113bc:	dcc00515 	stw	r19,20(sp)
101113c0:	dc800415 	stw	r18,16(sp)
101113c4:	2021883a 	mov	r16,r4
101113c8:	2823883a 	mov	r17,r5
101113cc:	2839883a 	mov	fp,r5
101113d0:	38003c1e 	bne	r7,zero,101114c4 <__umoddi3+0x12c>
101113d4:	3027883a 	mov	r19,r6
101113d8:	2029883a 	mov	r20,r4
101113dc:	2980512e 	bgeu	r5,r6,10111524 <__umoddi3+0x18c>
101113e0:	00bfffd4 	movui	r2,65535
101113e4:	11809a36 	bltu	r2,r6,10111650 <__umoddi3+0x2b8>
101113e8:	01003fc4 	movi	r4,255
101113ec:	2189803a 	cmpltu	r4,r4,r6
101113f0:	200890fa 	slli	r4,r4,3
101113f4:	3104d83a 	srl	r2,r6,r4
101113f8:	00c40474 	movhi	r3,4113
101113fc:	18de5f04 	addi	r3,r3,31100
10111400:	1885883a 	add	r2,r3,r2
10111404:	10c00003 	ldbu	r3,0(r2)
10111408:	00800804 	movi	r2,32
1011140c:	1909883a 	add	r4,r3,r4
10111410:	1125c83a 	sub	r18,r2,r4
10111414:	90000526 	beq	r18,zero,1011142c <__umoddi3+0x94>
10111418:	8ca2983a 	sll	r17,r17,r18
1011141c:	8108d83a 	srl	r4,r16,r4
10111420:	34a6983a 	sll	r19,r6,r18
10111424:	84a8983a 	sll	r20,r16,r18
10111428:	2478b03a 	or	fp,r4,r17
1011142c:	982ed43a 	srli	r23,r19,16
10111430:	e009883a 	mov	r4,fp
10111434:	9dbfffcc 	andi	r22,r19,65535
10111438:	b80b883a 	mov	r5,r23
1011143c:	01031640 	call	10103164 <__umodsi3>
10111440:	e009883a 	mov	r4,fp
10111444:	b80b883a 	mov	r5,r23
10111448:	102b883a 	mov	r21,r2
1011144c:	01031000 	call	10103100 <__udivsi3>
10111450:	a806943a 	slli	r3,r21,16
10111454:	a008d43a 	srli	r4,r20,16
10111458:	b085383a 	mul	r2,r22,r2
1011145c:	20c8b03a 	or	r4,r4,r3
10111460:	2080032e 	bgeu	r4,r2,10111470 <__umoddi3+0xd8>
10111464:	24c9883a 	add	r4,r4,r19
10111468:	24c00136 	bltu	r4,r19,10111470 <__umoddi3+0xd8>
1011146c:	20811036 	bltu	r4,r2,101118b0 <__umoddi3+0x518>
10111470:	20abc83a 	sub	r21,r4,r2
10111474:	b80b883a 	mov	r5,r23
10111478:	a809883a 	mov	r4,r21
1011147c:	01031640 	call	10103164 <__umodsi3>
10111480:	1023883a 	mov	r17,r2
10111484:	b80b883a 	mov	r5,r23
10111488:	a809883a 	mov	r4,r21
1011148c:	01031000 	call	10103100 <__udivsi3>
10111490:	8822943a 	slli	r17,r17,16
10111494:	b085383a 	mul	r2,r22,r2
10111498:	a0ffffcc 	andi	r3,r20,65535
1011149c:	1c46b03a 	or	r3,r3,r17
101114a0:	1880042e 	bgeu	r3,r2,101114b4 <__umoddi3+0x11c>
101114a4:	1cc7883a 	add	r3,r3,r19
101114a8:	1cc00236 	bltu	r3,r19,101114b4 <__umoddi3+0x11c>
101114ac:	1880012e 	bgeu	r3,r2,101114b4 <__umoddi3+0x11c>
101114b0:	1cc7883a 	add	r3,r3,r19
101114b4:	1885c83a 	sub	r2,r3,r2
101114b8:	1484d83a 	srl	r2,r2,r18
101114bc:	0007883a 	mov	r3,zero
101114c0:	00004f06 	br	10111600 <__umoddi3+0x268>
101114c4:	29c04c36 	bltu	r5,r7,101115f8 <__umoddi3+0x260>
101114c8:	00bfffd4 	movui	r2,65535
101114cc:	11c0582e 	bgeu	r2,r7,10111630 <__umoddi3+0x298>
101114d0:	00804034 	movhi	r2,256
101114d4:	10bfffc4 	addi	r2,r2,-1
101114d8:	11c0e736 	bltu	r2,r7,10111878 <__umoddi3+0x4e0>
101114dc:	01000404 	movi	r4,16
101114e0:	3904d83a 	srl	r2,r7,r4
101114e4:	00c40474 	movhi	r3,4113
101114e8:	18de5f04 	addi	r3,r3,31100
101114ec:	1885883a 	add	r2,r3,r2
101114f0:	14c00003 	ldbu	r19,0(r2)
101114f4:	00c00804 	movi	r3,32
101114f8:	9927883a 	add	r19,r19,r4
101114fc:	1ce9c83a 	sub	r20,r3,r19
10111500:	a000581e 	bne	r20,zero,10111664 <__umoddi3+0x2cc>
10111504:	3c400136 	bltu	r7,r17,1011150c <__umoddi3+0x174>
10111508:	8180eb36 	bltu	r16,r6,101118b8 <__umoddi3+0x520>
1011150c:	8185c83a 	sub	r2,r16,r6
10111510:	89e3c83a 	sub	r17,r17,r7
10111514:	8089803a 	cmpltu	r4,r16,r2
10111518:	8939c83a 	sub	fp,r17,r4
1011151c:	e007883a 	mov	r3,fp
10111520:	00003706 	br	10111600 <__umoddi3+0x268>
10111524:	3000041e 	bne	r6,zero,10111538 <__umoddi3+0x1a0>
10111528:	000b883a 	mov	r5,zero
1011152c:	01000044 	movi	r4,1
10111530:	01031000 	call	10103100 <__udivsi3>
10111534:	1027883a 	mov	r19,r2
10111538:	00bfffd4 	movui	r2,65535
1011153c:	14c0402e 	bgeu	r2,r19,10111640 <__umoddi3+0x2a8>
10111540:	00804034 	movhi	r2,256
10111544:	10bfffc4 	addi	r2,r2,-1
10111548:	14c0cd36 	bltu	r2,r19,10111880 <__umoddi3+0x4e8>
1011154c:	00800404 	movi	r2,16
10111550:	9886d83a 	srl	r3,r19,r2
10111554:	01040474 	movhi	r4,4113
10111558:	211e5f04 	addi	r4,r4,31100
1011155c:	20c7883a 	add	r3,r4,r3
10111560:	18c00003 	ldbu	r3,0(r3)
10111564:	1887883a 	add	r3,r3,r2
10111568:	00800804 	movi	r2,32
1011156c:	10e5c83a 	sub	r18,r2,r3
10111570:	9000901e 	bne	r18,zero,101117b4 <__umoddi3+0x41c>
10111574:	982cd43a 	srli	r22,r19,16
10111578:	8ce3c83a 	sub	r17,r17,r19
1011157c:	9d7fffcc 	andi	r21,r19,65535
10111580:	b00b883a 	mov	r5,r22
10111584:	8809883a 	mov	r4,r17
10111588:	01031640 	call	10103164 <__umodsi3>
1011158c:	8809883a 	mov	r4,r17
10111590:	b00b883a 	mov	r5,r22
10111594:	1021883a 	mov	r16,r2
10111598:	01031000 	call	10103100 <__udivsi3>
1011159c:	8006943a 	slli	r3,r16,16
101115a0:	a008d43a 	srli	r4,r20,16
101115a4:	1545383a 	mul	r2,r2,r21
101115a8:	20c8b03a 	or	r4,r4,r3
101115ac:	2080042e 	bgeu	r4,r2,101115c0 <__umoddi3+0x228>
101115b0:	24c9883a 	add	r4,r4,r19
101115b4:	24c00236 	bltu	r4,r19,101115c0 <__umoddi3+0x228>
101115b8:	2080012e 	bgeu	r4,r2,101115c0 <__umoddi3+0x228>
101115bc:	24c9883a 	add	r4,r4,r19
101115c0:	20a1c83a 	sub	r16,r4,r2
101115c4:	b00b883a 	mov	r5,r22
101115c8:	8009883a 	mov	r4,r16
101115cc:	01031640 	call	10103164 <__umodsi3>
101115d0:	1023883a 	mov	r17,r2
101115d4:	b00b883a 	mov	r5,r22
101115d8:	8009883a 	mov	r4,r16
101115dc:	01031000 	call	10103100 <__udivsi3>
101115e0:	8822943a 	slli	r17,r17,16
101115e4:	1545383a 	mul	r2,r2,r21
101115e8:	a53fffcc 	andi	r20,r20,65535
101115ec:	a446b03a 	or	r3,r20,r17
101115f0:	18bfb02e 	bgeu	r3,r2,101114b4 <_gp+0xfffeff24>
101115f4:	003fab06 	br	101114a4 <_gp+0xfffeff14>
101115f8:	2005883a 	mov	r2,r4
101115fc:	2807883a 	mov	r3,r5
10111600:	dfc00b17 	ldw	ra,44(sp)
10111604:	df000a17 	ldw	fp,40(sp)
10111608:	ddc00917 	ldw	r23,36(sp)
1011160c:	dd800817 	ldw	r22,32(sp)
10111610:	dd400717 	ldw	r21,28(sp)
10111614:	dd000617 	ldw	r20,24(sp)
10111618:	dcc00517 	ldw	r19,20(sp)
1011161c:	dc800417 	ldw	r18,16(sp)
10111620:	dc400317 	ldw	r17,12(sp)
10111624:	dc000217 	ldw	r16,8(sp)
10111628:	dec00c04 	addi	sp,sp,48
1011162c:	f800283a 	ret
10111630:	04c03fc4 	movi	r19,255
10111634:	99c9803a 	cmpltu	r4,r19,r7
10111638:	200890fa 	slli	r4,r4,3
1011163c:	003fa806 	br	101114e0 <_gp+0xfffeff50>
10111640:	00803fc4 	movi	r2,255
10111644:	14c5803a 	cmpltu	r2,r2,r19
10111648:	100490fa 	slli	r2,r2,3
1011164c:	003fc006 	br	10111550 <_gp+0xfffeffc0>
10111650:	00804034 	movhi	r2,256
10111654:	10bfffc4 	addi	r2,r2,-1
10111658:	11808b36 	bltu	r2,r6,10111888 <__umoddi3+0x4f0>
1011165c:	01000404 	movi	r4,16
10111660:	003f6406 	br	101113f4 <_gp+0xfffefe64>
10111664:	34c4d83a 	srl	r2,r6,r19
10111668:	3d0e983a 	sll	r7,r7,r20
1011166c:	8cf8d83a 	srl	fp,r17,r19
10111670:	8d10983a 	sll	r8,r17,r20
10111674:	38aab03a 	or	r21,r7,r2
10111678:	a82cd43a 	srli	r22,r21,16
1011167c:	84e2d83a 	srl	r17,r16,r19
10111680:	e009883a 	mov	r4,fp
10111684:	b00b883a 	mov	r5,r22
10111688:	8a22b03a 	or	r17,r17,r8
1011168c:	3524983a 	sll	r18,r6,r20
10111690:	01031640 	call	10103164 <__umodsi3>
10111694:	e009883a 	mov	r4,fp
10111698:	b00b883a 	mov	r5,r22
1011169c:	102f883a 	mov	r23,r2
101116a0:	01031000 	call	10103100 <__udivsi3>
101116a4:	100d883a 	mov	r6,r2
101116a8:	b808943a 	slli	r4,r23,16
101116ac:	aa3fffcc 	andi	r8,r21,65535
101116b0:	8804d43a 	srli	r2,r17,16
101116b4:	41af383a 	mul	r23,r8,r6
101116b8:	8520983a 	sll	r16,r16,r20
101116bc:	1104b03a 	or	r2,r2,r4
101116c0:	15c0042e 	bgeu	r2,r23,101116d4 <__umoddi3+0x33c>
101116c4:	1545883a 	add	r2,r2,r21
101116c8:	30ffffc4 	addi	r3,r6,-1
101116cc:	1540742e 	bgeu	r2,r21,101118a0 <__umoddi3+0x508>
101116d0:	180d883a 	mov	r6,r3
101116d4:	15efc83a 	sub	r23,r2,r23
101116d8:	b00b883a 	mov	r5,r22
101116dc:	b809883a 	mov	r4,r23
101116e0:	d9800115 	stw	r6,4(sp)
101116e4:	da000015 	stw	r8,0(sp)
101116e8:	01031640 	call	10103164 <__umodsi3>
101116ec:	b00b883a 	mov	r5,r22
101116f0:	b809883a 	mov	r4,r23
101116f4:	1039883a 	mov	fp,r2
101116f8:	01031000 	call	10103100 <__udivsi3>
101116fc:	da000017 	ldw	r8,0(sp)
10111700:	e038943a 	slli	fp,fp,16
10111704:	100b883a 	mov	r5,r2
10111708:	4089383a 	mul	r4,r8,r2
1011170c:	8a3fffcc 	andi	r8,r17,65535
10111710:	4710b03a 	or	r8,r8,fp
10111714:	d9800117 	ldw	r6,4(sp)
10111718:	4100042e 	bgeu	r8,r4,1011172c <__umoddi3+0x394>
1011171c:	4551883a 	add	r8,r8,r21
10111720:	10bfffc4 	addi	r2,r2,-1
10111724:	45405a2e 	bgeu	r8,r21,10111890 <__umoddi3+0x4f8>
10111728:	100b883a 	mov	r5,r2
1011172c:	300c943a 	slli	r6,r6,16
10111730:	91ffffcc 	andi	r7,r18,65535
10111734:	9004d43a 	srli	r2,r18,16
10111738:	314cb03a 	or	r6,r6,r5
1011173c:	317fffcc 	andi	r5,r6,65535
10111740:	300cd43a 	srli	r6,r6,16
10111744:	29d3383a 	mul	r9,r5,r7
10111748:	288b383a 	mul	r5,r5,r2
1011174c:	31cf383a 	mul	r7,r6,r7
10111750:	4806d43a 	srli	r3,r9,16
10111754:	4111c83a 	sub	r8,r8,r4
10111758:	29cb883a 	add	r5,r5,r7
1011175c:	194b883a 	add	r5,r3,r5
10111760:	3085383a 	mul	r2,r6,r2
10111764:	29c0022e 	bgeu	r5,r7,10111770 <__umoddi3+0x3d8>
10111768:	00c00074 	movhi	r3,1
1011176c:	10c5883a 	add	r2,r2,r3
10111770:	2808d43a 	srli	r4,r5,16
10111774:	280a943a 	slli	r5,r5,16
10111778:	4a7fffcc 	andi	r9,r9,65535
1011177c:	2085883a 	add	r2,r4,r2
10111780:	2a4b883a 	add	r5,r5,r9
10111784:	40803636 	bltu	r8,r2,10111860 <__umoddi3+0x4c8>
10111788:	40804d26 	beq	r8,r2,101118c0 <__umoddi3+0x528>
1011178c:	4089c83a 	sub	r4,r8,r2
10111790:	280f883a 	mov	r7,r5
10111794:	81cfc83a 	sub	r7,r16,r7
10111798:	81c7803a 	cmpltu	r3,r16,r7
1011179c:	20c7c83a 	sub	r3,r4,r3
101117a0:	1cc4983a 	sll	r2,r3,r19
101117a4:	3d0ed83a 	srl	r7,r7,r20
101117a8:	1d06d83a 	srl	r3,r3,r20
101117ac:	11c4b03a 	or	r2,r2,r7
101117b0:	003f9306 	br	10111600 <_gp+0xffff0070>
101117b4:	9ca6983a 	sll	r19,r19,r18
101117b8:	88e8d83a 	srl	r20,r17,r3
101117bc:	80c4d83a 	srl	r2,r16,r3
101117c0:	982cd43a 	srli	r22,r19,16
101117c4:	8ca2983a 	sll	r17,r17,r18
101117c8:	a009883a 	mov	r4,r20
101117cc:	b00b883a 	mov	r5,r22
101117d0:	1478b03a 	or	fp,r2,r17
101117d4:	01031640 	call	10103164 <__umodsi3>
101117d8:	a009883a 	mov	r4,r20
101117dc:	b00b883a 	mov	r5,r22
101117e0:	1023883a 	mov	r17,r2
101117e4:	01031000 	call	10103100 <__udivsi3>
101117e8:	9d7fffcc 	andi	r21,r19,65535
101117ec:	880a943a 	slli	r5,r17,16
101117f0:	e008d43a 	srli	r4,fp,16
101117f4:	a885383a 	mul	r2,r21,r2
101117f8:	84a8983a 	sll	r20,r16,r18
101117fc:	2148b03a 	or	r4,r4,r5
10111800:	2080042e 	bgeu	r4,r2,10111814 <__umoddi3+0x47c>
10111804:	24c9883a 	add	r4,r4,r19
10111808:	24c00236 	bltu	r4,r19,10111814 <__umoddi3+0x47c>
1011180c:	2080012e 	bgeu	r4,r2,10111814 <__umoddi3+0x47c>
10111810:	24c9883a 	add	r4,r4,r19
10111814:	20a3c83a 	sub	r17,r4,r2
10111818:	b00b883a 	mov	r5,r22
1011181c:	8809883a 	mov	r4,r17
10111820:	01031640 	call	10103164 <__umodsi3>
10111824:	102f883a 	mov	r23,r2
10111828:	8809883a 	mov	r4,r17
1011182c:	b00b883a 	mov	r5,r22
10111830:	01031000 	call	10103100 <__udivsi3>
10111834:	b82e943a 	slli	r23,r23,16
10111838:	a885383a 	mul	r2,r21,r2
1011183c:	e13fffcc 	andi	r4,fp,65535
10111840:	25c8b03a 	or	r4,r4,r23
10111844:	2080042e 	bgeu	r4,r2,10111858 <__umoddi3+0x4c0>
10111848:	24c9883a 	add	r4,r4,r19
1011184c:	24c00236 	bltu	r4,r19,10111858 <__umoddi3+0x4c0>
10111850:	2080012e 	bgeu	r4,r2,10111858 <__umoddi3+0x4c0>
10111854:	24c9883a 	add	r4,r4,r19
10111858:	20a3c83a 	sub	r17,r4,r2
1011185c:	003f4806 	br	10111580 <_gp+0xfffefff0>
10111860:	2c8fc83a 	sub	r7,r5,r18
10111864:	1545c83a 	sub	r2,r2,r21
10111868:	29cb803a 	cmpltu	r5,r5,r7
1011186c:	1145c83a 	sub	r2,r2,r5
10111870:	4089c83a 	sub	r4,r8,r2
10111874:	003fc706 	br	10111794 <_gp+0xffff0204>
10111878:	01000604 	movi	r4,24
1011187c:	003f1806 	br	101114e0 <_gp+0xfffeff50>
10111880:	00800604 	movi	r2,24
10111884:	003f3206 	br	10111550 <_gp+0xfffeffc0>
10111888:	01000604 	movi	r4,24
1011188c:	003ed906 	br	101113f4 <_gp+0xfffefe64>
10111890:	413fa52e 	bgeu	r8,r4,10111728 <_gp+0xffff0198>
10111894:	297fff84 	addi	r5,r5,-2
10111898:	4551883a 	add	r8,r8,r21
1011189c:	003fa306 	br	1011172c <_gp+0xffff019c>
101118a0:	15ff8b2e 	bgeu	r2,r23,101116d0 <_gp+0xffff0140>
101118a4:	31bfff84 	addi	r6,r6,-2
101118a8:	1545883a 	add	r2,r2,r21
101118ac:	003f8906 	br	101116d4 <_gp+0xffff0144>
101118b0:	24c9883a 	add	r4,r4,r19
101118b4:	003eee06 	br	10111470 <_gp+0xfffefee0>
101118b8:	8005883a 	mov	r2,r16
101118bc:	003f1706 	br	1011151c <_gp+0xfffeff8c>
101118c0:	817fe736 	bltu	r16,r5,10111860 <_gp+0xffff02d0>
101118c4:	280f883a 	mov	r7,r5
101118c8:	0009883a 	mov	r4,zero
101118cc:	003fb106 	br	10111794 <_gp+0xffff0204>

101118d0 <__adddf3>:
101118d0:	02c00434 	movhi	r11,16
101118d4:	5affffc4 	addi	r11,r11,-1
101118d8:	2806d7fa 	srli	r3,r5,31
101118dc:	2ad4703a 	and	r10,r5,r11
101118e0:	3ad2703a 	and	r9,r7,r11
101118e4:	3804d53a 	srli	r2,r7,20
101118e8:	3018d77a 	srli	r12,r6,29
101118ec:	280ad53a 	srli	r5,r5,20
101118f0:	501490fa 	slli	r10,r10,3
101118f4:	2010d77a 	srli	r8,r4,29
101118f8:	481290fa 	slli	r9,r9,3
101118fc:	380ed7fa 	srli	r7,r7,31
10111900:	defffb04 	addi	sp,sp,-20
10111904:	dc800215 	stw	r18,8(sp)
10111908:	dc400115 	stw	r17,4(sp)
1011190c:	dc000015 	stw	r16,0(sp)
10111910:	dfc00415 	stw	ra,16(sp)
10111914:	dcc00315 	stw	r19,12(sp)
10111918:	1c803fcc 	andi	r18,r3,255
1011191c:	2c01ffcc 	andi	r16,r5,2047
10111920:	5210b03a 	or	r8,r10,r8
10111924:	202290fa 	slli	r17,r4,3
10111928:	1081ffcc 	andi	r2,r2,2047
1011192c:	4b12b03a 	or	r9,r9,r12
10111930:	300c90fa 	slli	r6,r6,3
10111934:	91c07526 	beq	r18,r7,10111b0c <__adddf3+0x23c>
10111938:	8087c83a 	sub	r3,r16,r2
1011193c:	00c0ab0e 	bge	zero,r3,10111bec <__adddf3+0x31c>
10111940:	10002a1e 	bne	r2,zero,101119ec <__adddf3+0x11c>
10111944:	4984b03a 	or	r2,r9,r6
10111948:	1000961e 	bne	r2,zero,10111ba4 <__adddf3+0x2d4>
1011194c:	888001cc 	andi	r2,r17,7
10111950:	10000726 	beq	r2,zero,10111970 <__adddf3+0xa0>
10111954:	888003cc 	andi	r2,r17,15
10111958:	00c00104 	movi	r3,4
1011195c:	10c00426 	beq	r2,r3,10111970 <__adddf3+0xa0>
10111960:	88c7883a 	add	r3,r17,r3
10111964:	1c63803a 	cmpltu	r17,r3,r17
10111968:	4451883a 	add	r8,r8,r17
1011196c:	1823883a 	mov	r17,r3
10111970:	4080202c 	andhi	r2,r8,128
10111974:	10005926 	beq	r2,zero,10111adc <__adddf3+0x20c>
10111978:	84000044 	addi	r16,r16,1
1011197c:	0081ffc4 	movi	r2,2047
10111980:	8080ba26 	beq	r16,r2,10111c6c <__adddf3+0x39c>
10111984:	00bfe034 	movhi	r2,65408
10111988:	10bfffc4 	addi	r2,r2,-1
1011198c:	4090703a 	and	r8,r8,r2
10111990:	4004977a 	slli	r2,r8,29
10111994:	4010927a 	slli	r8,r8,9
10111998:	8822d0fa 	srli	r17,r17,3
1011199c:	8401ffcc 	andi	r16,r16,2047
101119a0:	4010d33a 	srli	r8,r8,12
101119a4:	9007883a 	mov	r3,r18
101119a8:	1444b03a 	or	r2,r2,r17
101119ac:	8401ffcc 	andi	r16,r16,2047
101119b0:	8020953a 	slli	r16,r16,20
101119b4:	18c03fcc 	andi	r3,r3,255
101119b8:	01000434 	movhi	r4,16
101119bc:	213fffc4 	addi	r4,r4,-1
101119c0:	180697fa 	slli	r3,r3,31
101119c4:	4110703a 	and	r8,r8,r4
101119c8:	4410b03a 	or	r8,r8,r16
101119cc:	40c6b03a 	or	r3,r8,r3
101119d0:	dfc00417 	ldw	ra,16(sp)
101119d4:	dcc00317 	ldw	r19,12(sp)
101119d8:	dc800217 	ldw	r18,8(sp)
101119dc:	dc400117 	ldw	r17,4(sp)
101119e0:	dc000017 	ldw	r16,0(sp)
101119e4:	dec00504 	addi	sp,sp,20
101119e8:	f800283a 	ret
101119ec:	0081ffc4 	movi	r2,2047
101119f0:	80bfd626 	beq	r16,r2,1011194c <_gp+0xffff03bc>
101119f4:	4a402034 	orhi	r9,r9,128
101119f8:	00800e04 	movi	r2,56
101119fc:	10c09f16 	blt	r2,r3,10111c7c <__adddf3+0x3ac>
10111a00:	008007c4 	movi	r2,31
10111a04:	10c0c216 	blt	r2,r3,10111d10 <__adddf3+0x440>
10111a08:	00800804 	movi	r2,32
10111a0c:	10c5c83a 	sub	r2,r2,r3
10111a10:	488a983a 	sll	r5,r9,r2
10111a14:	30c8d83a 	srl	r4,r6,r3
10111a18:	3084983a 	sll	r2,r6,r2
10111a1c:	48c6d83a 	srl	r3,r9,r3
10111a20:	290cb03a 	or	r6,r5,r4
10111a24:	1004c03a 	cmpne	r2,r2,zero
10111a28:	308cb03a 	or	r6,r6,r2
10111a2c:	898dc83a 	sub	r6,r17,r6
10111a30:	89a3803a 	cmpltu	r17,r17,r6
10111a34:	40d1c83a 	sub	r8,r8,r3
10111a38:	4451c83a 	sub	r8,r8,r17
10111a3c:	3023883a 	mov	r17,r6
10111a40:	4080202c 	andhi	r2,r8,128
10111a44:	10002326 	beq	r2,zero,10111ad4 <__adddf3+0x204>
10111a48:	04c02034 	movhi	r19,128
10111a4c:	9cffffc4 	addi	r19,r19,-1
10111a50:	44e6703a 	and	r19,r8,r19
10111a54:	98007626 	beq	r19,zero,10111c30 <__adddf3+0x360>
10111a58:	9809883a 	mov	r4,r19
10111a5c:	0113ed40 	call	10113ed4 <__clzsi2>
10111a60:	10fffe04 	addi	r3,r2,-8
10111a64:	010007c4 	movi	r4,31
10111a68:	20c07716 	blt	r4,r3,10111c48 <__adddf3+0x378>
10111a6c:	00800804 	movi	r2,32
10111a70:	10c5c83a 	sub	r2,r2,r3
10111a74:	8884d83a 	srl	r2,r17,r2
10111a78:	98d0983a 	sll	r8,r19,r3
10111a7c:	88e2983a 	sll	r17,r17,r3
10111a80:	1204b03a 	or	r2,r2,r8
10111a84:	1c007416 	blt	r3,r16,10111c58 <__adddf3+0x388>
10111a88:	1c21c83a 	sub	r16,r3,r16
10111a8c:	82000044 	addi	r8,r16,1
10111a90:	00c007c4 	movi	r3,31
10111a94:	1a009116 	blt	r3,r8,10111cdc <__adddf3+0x40c>
10111a98:	00c00804 	movi	r3,32
10111a9c:	1a07c83a 	sub	r3,r3,r8
10111aa0:	8a08d83a 	srl	r4,r17,r8
10111aa4:	88e2983a 	sll	r17,r17,r3
10111aa8:	10c6983a 	sll	r3,r2,r3
10111aac:	1210d83a 	srl	r8,r2,r8
10111ab0:	8804c03a 	cmpne	r2,r17,zero
10111ab4:	1906b03a 	or	r3,r3,r4
10111ab8:	18a2b03a 	or	r17,r3,r2
10111abc:	0021883a 	mov	r16,zero
10111ac0:	003fa206 	br	1011194c <_gp+0xffff03bc>
10111ac4:	1890b03a 	or	r8,r3,r2
10111ac8:	40017d26 	beq	r8,zero,101120c0 <__adddf3+0x7f0>
10111acc:	1011883a 	mov	r8,r2
10111ad0:	1823883a 	mov	r17,r3
10111ad4:	888001cc 	andi	r2,r17,7
10111ad8:	103f9e1e 	bne	r2,zero,10111954 <_gp+0xffff03c4>
10111adc:	4004977a 	slli	r2,r8,29
10111ae0:	8822d0fa 	srli	r17,r17,3
10111ae4:	4010d0fa 	srli	r8,r8,3
10111ae8:	9007883a 	mov	r3,r18
10111aec:	1444b03a 	or	r2,r2,r17
10111af0:	0101ffc4 	movi	r4,2047
10111af4:	81002426 	beq	r16,r4,10111b88 <__adddf3+0x2b8>
10111af8:	8120703a 	and	r16,r16,r4
10111afc:	01000434 	movhi	r4,16
10111b00:	213fffc4 	addi	r4,r4,-1
10111b04:	4110703a 	and	r8,r8,r4
10111b08:	003fa806 	br	101119ac <_gp+0xffff041c>
10111b0c:	8089c83a 	sub	r4,r16,r2
10111b10:	01005e0e 	bge	zero,r4,10111c8c <__adddf3+0x3bc>
10111b14:	10002b26 	beq	r2,zero,10111bc4 <__adddf3+0x2f4>
10111b18:	0081ffc4 	movi	r2,2047
10111b1c:	80bf8b26 	beq	r16,r2,1011194c <_gp+0xffff03bc>
10111b20:	4a402034 	orhi	r9,r9,128
10111b24:	00800e04 	movi	r2,56
10111b28:	1100a40e 	bge	r2,r4,10111dbc <__adddf3+0x4ec>
10111b2c:	498cb03a 	or	r6,r9,r6
10111b30:	300ac03a 	cmpne	r5,r6,zero
10111b34:	0013883a 	mov	r9,zero
10111b38:	2c4b883a 	add	r5,r5,r17
10111b3c:	2c63803a 	cmpltu	r17,r5,r17
10111b40:	4a11883a 	add	r8,r9,r8
10111b44:	8a11883a 	add	r8,r17,r8
10111b48:	2823883a 	mov	r17,r5
10111b4c:	4080202c 	andhi	r2,r8,128
10111b50:	103fe026 	beq	r2,zero,10111ad4 <_gp+0xffff0544>
10111b54:	84000044 	addi	r16,r16,1
10111b58:	0081ffc4 	movi	r2,2047
10111b5c:	8080d226 	beq	r16,r2,10111ea8 <__adddf3+0x5d8>
10111b60:	00bfe034 	movhi	r2,65408
10111b64:	10bfffc4 	addi	r2,r2,-1
10111b68:	4090703a 	and	r8,r8,r2
10111b6c:	880ad07a 	srli	r5,r17,1
10111b70:	400897fa 	slli	r4,r8,31
10111b74:	88c0004c 	andi	r3,r17,1
10111b78:	28e2b03a 	or	r17,r5,r3
10111b7c:	4010d07a 	srli	r8,r8,1
10111b80:	2462b03a 	or	r17,r4,r17
10111b84:	003f7106 	br	1011194c <_gp+0xffff03bc>
10111b88:	4088b03a 	or	r4,r8,r2
10111b8c:	20014526 	beq	r4,zero,101120a4 <__adddf3+0x7d4>
10111b90:	01000434 	movhi	r4,16
10111b94:	42000234 	orhi	r8,r8,8
10111b98:	213fffc4 	addi	r4,r4,-1
10111b9c:	4110703a 	and	r8,r8,r4
10111ba0:	003f8206 	br	101119ac <_gp+0xffff041c>
10111ba4:	18ffffc4 	addi	r3,r3,-1
10111ba8:	1800491e 	bne	r3,zero,10111cd0 <__adddf3+0x400>
10111bac:	898bc83a 	sub	r5,r17,r6
10111bb0:	8963803a 	cmpltu	r17,r17,r5
10111bb4:	4251c83a 	sub	r8,r8,r9
10111bb8:	4451c83a 	sub	r8,r8,r17
10111bbc:	2823883a 	mov	r17,r5
10111bc0:	003f9f06 	br	10111a40 <_gp+0xffff04b0>
10111bc4:	4984b03a 	or	r2,r9,r6
10111bc8:	103f6026 	beq	r2,zero,1011194c <_gp+0xffff03bc>
10111bcc:	213fffc4 	addi	r4,r4,-1
10111bd0:	2000931e 	bne	r4,zero,10111e20 <__adddf3+0x550>
10111bd4:	898d883a 	add	r6,r17,r6
10111bd8:	3463803a 	cmpltu	r17,r6,r17
10111bdc:	4251883a 	add	r8,r8,r9
10111be0:	8a11883a 	add	r8,r17,r8
10111be4:	3023883a 	mov	r17,r6
10111be8:	003fd806 	br	10111b4c <_gp+0xffff05bc>
10111bec:	1800541e 	bne	r3,zero,10111d40 <__adddf3+0x470>
10111bf0:	80800044 	addi	r2,r16,1
10111bf4:	1081ffcc 	andi	r2,r2,2047
10111bf8:	00c00044 	movi	r3,1
10111bfc:	1880a00e 	bge	r3,r2,10111e80 <__adddf3+0x5b0>
10111c00:	8989c83a 	sub	r4,r17,r6
10111c04:	8905803a 	cmpltu	r2,r17,r4
10111c08:	4267c83a 	sub	r19,r8,r9
10111c0c:	98a7c83a 	sub	r19,r19,r2
10111c10:	9880202c 	andhi	r2,r19,128
10111c14:	10006326 	beq	r2,zero,10111da4 <__adddf3+0x4d4>
10111c18:	3463c83a 	sub	r17,r6,r17
10111c1c:	4a07c83a 	sub	r3,r9,r8
10111c20:	344d803a 	cmpltu	r6,r6,r17
10111c24:	19a7c83a 	sub	r19,r3,r6
10111c28:	3825883a 	mov	r18,r7
10111c2c:	983f8a1e 	bne	r19,zero,10111a58 <_gp+0xffff04c8>
10111c30:	8809883a 	mov	r4,r17
10111c34:	0113ed40 	call	10113ed4 <__clzsi2>
10111c38:	10800804 	addi	r2,r2,32
10111c3c:	10fffe04 	addi	r3,r2,-8
10111c40:	010007c4 	movi	r4,31
10111c44:	20ff890e 	bge	r4,r3,10111a6c <_gp+0xffff04dc>
10111c48:	10bff604 	addi	r2,r2,-40
10111c4c:	8884983a 	sll	r2,r17,r2
10111c50:	0023883a 	mov	r17,zero
10111c54:	1c3f8c0e 	bge	r3,r16,10111a88 <_gp+0xffff04f8>
10111c58:	023fe034 	movhi	r8,65408
10111c5c:	423fffc4 	addi	r8,r8,-1
10111c60:	80e1c83a 	sub	r16,r16,r3
10111c64:	1210703a 	and	r8,r2,r8
10111c68:	003f3806 	br	1011194c <_gp+0xffff03bc>
10111c6c:	9007883a 	mov	r3,r18
10111c70:	0011883a 	mov	r8,zero
10111c74:	0005883a 	mov	r2,zero
10111c78:	003f4c06 	br	101119ac <_gp+0xffff041c>
10111c7c:	498cb03a 	or	r6,r9,r6
10111c80:	300cc03a 	cmpne	r6,r6,zero
10111c84:	0007883a 	mov	r3,zero
10111c88:	003f6806 	br	10111a2c <_gp+0xffff049c>
10111c8c:	20009c1e 	bne	r4,zero,10111f00 <__adddf3+0x630>
10111c90:	80800044 	addi	r2,r16,1
10111c94:	1141ffcc 	andi	r5,r2,2047
10111c98:	01000044 	movi	r4,1
10111c9c:	2140670e 	bge	r4,r5,10111e3c <__adddf3+0x56c>
10111ca0:	0101ffc4 	movi	r4,2047
10111ca4:	11007f26 	beq	r2,r4,10111ea4 <__adddf3+0x5d4>
10111ca8:	898d883a 	add	r6,r17,r6
10111cac:	4247883a 	add	r3,r8,r9
10111cb0:	3451803a 	cmpltu	r8,r6,r17
10111cb4:	40d1883a 	add	r8,r8,r3
10111cb8:	402297fa 	slli	r17,r8,31
10111cbc:	300cd07a 	srli	r6,r6,1
10111cc0:	4010d07a 	srli	r8,r8,1
10111cc4:	1021883a 	mov	r16,r2
10111cc8:	89a2b03a 	or	r17,r17,r6
10111ccc:	003f1f06 	br	1011194c <_gp+0xffff03bc>
10111cd0:	0081ffc4 	movi	r2,2047
10111cd4:	80bf481e 	bne	r16,r2,101119f8 <_gp+0xffff0468>
10111cd8:	003f1c06 	br	1011194c <_gp+0xffff03bc>
10111cdc:	843ff844 	addi	r16,r16,-31
10111ce0:	01000804 	movi	r4,32
10111ce4:	1406d83a 	srl	r3,r2,r16
10111ce8:	41005026 	beq	r8,r4,10111e2c <__adddf3+0x55c>
10111cec:	01001004 	movi	r4,64
10111cf0:	2211c83a 	sub	r8,r4,r8
10111cf4:	1204983a 	sll	r2,r2,r8
10111cf8:	88a2b03a 	or	r17,r17,r2
10111cfc:	8822c03a 	cmpne	r17,r17,zero
10111d00:	1c62b03a 	or	r17,r3,r17
10111d04:	0011883a 	mov	r8,zero
10111d08:	0021883a 	mov	r16,zero
10111d0c:	003f7106 	br	10111ad4 <_gp+0xffff0544>
10111d10:	193ff804 	addi	r4,r3,-32
10111d14:	00800804 	movi	r2,32
10111d18:	4908d83a 	srl	r4,r9,r4
10111d1c:	18804526 	beq	r3,r2,10111e34 <__adddf3+0x564>
10111d20:	00801004 	movi	r2,64
10111d24:	10c5c83a 	sub	r2,r2,r3
10111d28:	4886983a 	sll	r3,r9,r2
10111d2c:	198cb03a 	or	r6,r3,r6
10111d30:	300cc03a 	cmpne	r6,r6,zero
10111d34:	218cb03a 	or	r6,r4,r6
10111d38:	0007883a 	mov	r3,zero
10111d3c:	003f3b06 	br	10111a2c <_gp+0xffff049c>
10111d40:	80002a26 	beq	r16,zero,10111dec <__adddf3+0x51c>
10111d44:	0101ffc4 	movi	r4,2047
10111d48:	11006826 	beq	r2,r4,10111eec <__adddf3+0x61c>
10111d4c:	00c7c83a 	sub	r3,zero,r3
10111d50:	42002034 	orhi	r8,r8,128
10111d54:	01000e04 	movi	r4,56
10111d58:	20c07c16 	blt	r4,r3,10111f4c <__adddf3+0x67c>
10111d5c:	010007c4 	movi	r4,31
10111d60:	20c0da16 	blt	r4,r3,101120cc <__adddf3+0x7fc>
10111d64:	01000804 	movi	r4,32
10111d68:	20c9c83a 	sub	r4,r4,r3
10111d6c:	4114983a 	sll	r10,r8,r4
10111d70:	88cad83a 	srl	r5,r17,r3
10111d74:	8908983a 	sll	r4,r17,r4
10111d78:	40c6d83a 	srl	r3,r8,r3
10111d7c:	5162b03a 	or	r17,r10,r5
10111d80:	2008c03a 	cmpne	r4,r4,zero
10111d84:	8922b03a 	or	r17,r17,r4
10111d88:	3463c83a 	sub	r17,r6,r17
10111d8c:	48c7c83a 	sub	r3,r9,r3
10111d90:	344d803a 	cmpltu	r6,r6,r17
10111d94:	1991c83a 	sub	r8,r3,r6
10111d98:	1021883a 	mov	r16,r2
10111d9c:	3825883a 	mov	r18,r7
10111da0:	003f2706 	br	10111a40 <_gp+0xffff04b0>
10111da4:	24d0b03a 	or	r8,r4,r19
10111da8:	40001b1e 	bne	r8,zero,10111e18 <__adddf3+0x548>
10111dac:	0005883a 	mov	r2,zero
10111db0:	0007883a 	mov	r3,zero
10111db4:	0021883a 	mov	r16,zero
10111db8:	003f4d06 	br	10111af0 <_gp+0xffff0560>
10111dbc:	008007c4 	movi	r2,31
10111dc0:	11003c16 	blt	r2,r4,10111eb4 <__adddf3+0x5e4>
10111dc4:	00800804 	movi	r2,32
10111dc8:	1105c83a 	sub	r2,r2,r4
10111dcc:	488e983a 	sll	r7,r9,r2
10111dd0:	310ad83a 	srl	r5,r6,r4
10111dd4:	3084983a 	sll	r2,r6,r2
10111dd8:	4912d83a 	srl	r9,r9,r4
10111ddc:	394ab03a 	or	r5,r7,r5
10111de0:	1004c03a 	cmpne	r2,r2,zero
10111de4:	288ab03a 	or	r5,r5,r2
10111de8:	003f5306 	br	10111b38 <_gp+0xffff05a8>
10111dec:	4448b03a 	or	r4,r8,r17
10111df0:	20003e26 	beq	r4,zero,10111eec <__adddf3+0x61c>
10111df4:	00c6303a 	nor	r3,zero,r3
10111df8:	18003a1e 	bne	r3,zero,10111ee4 <__adddf3+0x614>
10111dfc:	3463c83a 	sub	r17,r6,r17
10111e00:	4a07c83a 	sub	r3,r9,r8
10111e04:	344d803a 	cmpltu	r6,r6,r17
10111e08:	1991c83a 	sub	r8,r3,r6
10111e0c:	1021883a 	mov	r16,r2
10111e10:	3825883a 	mov	r18,r7
10111e14:	003f0a06 	br	10111a40 <_gp+0xffff04b0>
10111e18:	2023883a 	mov	r17,r4
10111e1c:	003f0d06 	br	10111a54 <_gp+0xffff04c4>
10111e20:	0081ffc4 	movi	r2,2047
10111e24:	80bf3f1e 	bne	r16,r2,10111b24 <_gp+0xffff0594>
10111e28:	003ec806 	br	1011194c <_gp+0xffff03bc>
10111e2c:	0005883a 	mov	r2,zero
10111e30:	003fb106 	br	10111cf8 <_gp+0xffff0768>
10111e34:	0007883a 	mov	r3,zero
10111e38:	003fbc06 	br	10111d2c <_gp+0xffff079c>
10111e3c:	4444b03a 	or	r2,r8,r17
10111e40:	8000871e 	bne	r16,zero,10112060 <__adddf3+0x790>
10111e44:	1000ba26 	beq	r2,zero,10112130 <__adddf3+0x860>
10111e48:	4984b03a 	or	r2,r9,r6
10111e4c:	103ebf26 	beq	r2,zero,1011194c <_gp+0xffff03bc>
10111e50:	8985883a 	add	r2,r17,r6
10111e54:	4247883a 	add	r3,r8,r9
10111e58:	1451803a 	cmpltu	r8,r2,r17
10111e5c:	40d1883a 	add	r8,r8,r3
10111e60:	40c0202c 	andhi	r3,r8,128
10111e64:	1023883a 	mov	r17,r2
10111e68:	183f1a26 	beq	r3,zero,10111ad4 <_gp+0xffff0544>
10111e6c:	00bfe034 	movhi	r2,65408
10111e70:	10bfffc4 	addi	r2,r2,-1
10111e74:	2021883a 	mov	r16,r4
10111e78:	4090703a 	and	r8,r8,r2
10111e7c:	003eb306 	br	1011194c <_gp+0xffff03bc>
10111e80:	4444b03a 	or	r2,r8,r17
10111e84:	8000291e 	bne	r16,zero,10111f2c <__adddf3+0x65c>
10111e88:	10004b1e 	bne	r2,zero,10111fb8 <__adddf3+0x6e8>
10111e8c:	4990b03a 	or	r8,r9,r6
10111e90:	40008b26 	beq	r8,zero,101120c0 <__adddf3+0x7f0>
10111e94:	4811883a 	mov	r8,r9
10111e98:	3023883a 	mov	r17,r6
10111e9c:	3825883a 	mov	r18,r7
10111ea0:	003eaa06 	br	1011194c <_gp+0xffff03bc>
10111ea4:	1021883a 	mov	r16,r2
10111ea8:	0011883a 	mov	r8,zero
10111eac:	0005883a 	mov	r2,zero
10111eb0:	003f0f06 	br	10111af0 <_gp+0xffff0560>
10111eb4:	217ff804 	addi	r5,r4,-32
10111eb8:	00800804 	movi	r2,32
10111ebc:	494ad83a 	srl	r5,r9,r5
10111ec0:	20807d26 	beq	r4,r2,101120b8 <__adddf3+0x7e8>
10111ec4:	00801004 	movi	r2,64
10111ec8:	1109c83a 	sub	r4,r2,r4
10111ecc:	4912983a 	sll	r9,r9,r4
10111ed0:	498cb03a 	or	r6,r9,r6
10111ed4:	300cc03a 	cmpne	r6,r6,zero
10111ed8:	298ab03a 	or	r5,r5,r6
10111edc:	0013883a 	mov	r9,zero
10111ee0:	003f1506 	br	10111b38 <_gp+0xffff05a8>
10111ee4:	0101ffc4 	movi	r4,2047
10111ee8:	113f9a1e 	bne	r2,r4,10111d54 <_gp+0xffff07c4>
10111eec:	4811883a 	mov	r8,r9
10111ef0:	3023883a 	mov	r17,r6
10111ef4:	1021883a 	mov	r16,r2
10111ef8:	3825883a 	mov	r18,r7
10111efc:	003e9306 	br	1011194c <_gp+0xffff03bc>
10111f00:	8000161e 	bne	r16,zero,10111f5c <__adddf3+0x68c>
10111f04:	444ab03a 	or	r5,r8,r17
10111f08:	28005126 	beq	r5,zero,10112050 <__adddf3+0x780>
10111f0c:	0108303a 	nor	r4,zero,r4
10111f10:	20004d1e 	bne	r4,zero,10112048 <__adddf3+0x778>
10111f14:	89a3883a 	add	r17,r17,r6
10111f18:	4253883a 	add	r9,r8,r9
10111f1c:	898d803a 	cmpltu	r6,r17,r6
10111f20:	3251883a 	add	r8,r6,r9
10111f24:	1021883a 	mov	r16,r2
10111f28:	003f0806 	br	10111b4c <_gp+0xffff05bc>
10111f2c:	1000301e 	bne	r2,zero,10111ff0 <__adddf3+0x720>
10111f30:	4984b03a 	or	r2,r9,r6
10111f34:	10007126 	beq	r2,zero,101120fc <__adddf3+0x82c>
10111f38:	4811883a 	mov	r8,r9
10111f3c:	3023883a 	mov	r17,r6
10111f40:	3825883a 	mov	r18,r7
10111f44:	0401ffc4 	movi	r16,2047
10111f48:	003e8006 	br	1011194c <_gp+0xffff03bc>
10111f4c:	4462b03a 	or	r17,r8,r17
10111f50:	8822c03a 	cmpne	r17,r17,zero
10111f54:	0007883a 	mov	r3,zero
10111f58:	003f8b06 	br	10111d88 <_gp+0xffff07f8>
10111f5c:	0141ffc4 	movi	r5,2047
10111f60:	11403b26 	beq	r2,r5,10112050 <__adddf3+0x780>
10111f64:	0109c83a 	sub	r4,zero,r4
10111f68:	42002034 	orhi	r8,r8,128
10111f6c:	01400e04 	movi	r5,56
10111f70:	29006716 	blt	r5,r4,10112110 <__adddf3+0x840>
10111f74:	014007c4 	movi	r5,31
10111f78:	29007016 	blt	r5,r4,1011213c <__adddf3+0x86c>
10111f7c:	01400804 	movi	r5,32
10111f80:	290bc83a 	sub	r5,r5,r4
10111f84:	4154983a 	sll	r10,r8,r5
10111f88:	890ed83a 	srl	r7,r17,r4
10111f8c:	894a983a 	sll	r5,r17,r5
10111f90:	4108d83a 	srl	r4,r8,r4
10111f94:	51e2b03a 	or	r17,r10,r7
10111f98:	280ac03a 	cmpne	r5,r5,zero
10111f9c:	8962b03a 	or	r17,r17,r5
10111fa0:	89a3883a 	add	r17,r17,r6
10111fa4:	2253883a 	add	r9,r4,r9
10111fa8:	898d803a 	cmpltu	r6,r17,r6
10111fac:	3251883a 	add	r8,r6,r9
10111fb0:	1021883a 	mov	r16,r2
10111fb4:	003ee506 	br	10111b4c <_gp+0xffff05bc>
10111fb8:	4984b03a 	or	r2,r9,r6
10111fbc:	103e6326 	beq	r2,zero,1011194c <_gp+0xffff03bc>
10111fc0:	8987c83a 	sub	r3,r17,r6
10111fc4:	88c9803a 	cmpltu	r4,r17,r3
10111fc8:	4245c83a 	sub	r2,r8,r9
10111fcc:	1105c83a 	sub	r2,r2,r4
10111fd0:	1100202c 	andhi	r4,r2,128
10111fd4:	203ebb26 	beq	r4,zero,10111ac4 <_gp+0xffff0534>
10111fd8:	3463c83a 	sub	r17,r6,r17
10111fdc:	4a07c83a 	sub	r3,r9,r8
10111fe0:	344d803a 	cmpltu	r6,r6,r17
10111fe4:	1991c83a 	sub	r8,r3,r6
10111fe8:	3825883a 	mov	r18,r7
10111fec:	003e5706 	br	1011194c <_gp+0xffff03bc>
10111ff0:	4984b03a 	or	r2,r9,r6
10111ff4:	10002e26 	beq	r2,zero,101120b0 <__adddf3+0x7e0>
10111ff8:	4004d0fa 	srli	r2,r8,3
10111ffc:	8822d0fa 	srli	r17,r17,3
10112000:	4010977a 	slli	r8,r8,29
10112004:	10c0022c 	andhi	r3,r2,8
10112008:	4462b03a 	or	r17,r8,r17
1011200c:	18000826 	beq	r3,zero,10112030 <__adddf3+0x760>
10112010:	4808d0fa 	srli	r4,r9,3
10112014:	20c0022c 	andhi	r3,r4,8
10112018:	1800051e 	bne	r3,zero,10112030 <__adddf3+0x760>
1011201c:	300cd0fa 	srli	r6,r6,3
10112020:	4806977a 	slli	r3,r9,29
10112024:	2005883a 	mov	r2,r4
10112028:	3825883a 	mov	r18,r7
1011202c:	19a2b03a 	or	r17,r3,r6
10112030:	8810d77a 	srli	r8,r17,29
10112034:	100490fa 	slli	r2,r2,3
10112038:	882290fa 	slli	r17,r17,3
1011203c:	0401ffc4 	movi	r16,2047
10112040:	4090b03a 	or	r8,r8,r2
10112044:	003e4106 	br	1011194c <_gp+0xffff03bc>
10112048:	0141ffc4 	movi	r5,2047
1011204c:	117fc71e 	bne	r2,r5,10111f6c <_gp+0xffff09dc>
10112050:	4811883a 	mov	r8,r9
10112054:	3023883a 	mov	r17,r6
10112058:	1021883a 	mov	r16,r2
1011205c:	003e3b06 	br	1011194c <_gp+0xffff03bc>
10112060:	10002f26 	beq	r2,zero,10112120 <__adddf3+0x850>
10112064:	4984b03a 	or	r2,r9,r6
10112068:	10001126 	beq	r2,zero,101120b0 <__adddf3+0x7e0>
1011206c:	4004d0fa 	srli	r2,r8,3
10112070:	8822d0fa 	srli	r17,r17,3
10112074:	4010977a 	slli	r8,r8,29
10112078:	10c0022c 	andhi	r3,r2,8
1011207c:	4462b03a 	or	r17,r8,r17
10112080:	183feb26 	beq	r3,zero,10112030 <_gp+0xffff0aa0>
10112084:	4808d0fa 	srli	r4,r9,3
10112088:	20c0022c 	andhi	r3,r4,8
1011208c:	183fe81e 	bne	r3,zero,10112030 <_gp+0xffff0aa0>
10112090:	300cd0fa 	srli	r6,r6,3
10112094:	4806977a 	slli	r3,r9,29
10112098:	2005883a 	mov	r2,r4
1011209c:	19a2b03a 	or	r17,r3,r6
101120a0:	003fe306 	br	10112030 <_gp+0xffff0aa0>
101120a4:	0011883a 	mov	r8,zero
101120a8:	0005883a 	mov	r2,zero
101120ac:	003e3f06 	br	101119ac <_gp+0xffff041c>
101120b0:	0401ffc4 	movi	r16,2047
101120b4:	003e2506 	br	1011194c <_gp+0xffff03bc>
101120b8:	0013883a 	mov	r9,zero
101120bc:	003f8406 	br	10111ed0 <_gp+0xffff0940>
101120c0:	0005883a 	mov	r2,zero
101120c4:	0007883a 	mov	r3,zero
101120c8:	003e8906 	br	10111af0 <_gp+0xffff0560>
101120cc:	197ff804 	addi	r5,r3,-32
101120d0:	01000804 	movi	r4,32
101120d4:	414ad83a 	srl	r5,r8,r5
101120d8:	19002426 	beq	r3,r4,1011216c <__adddf3+0x89c>
101120dc:	01001004 	movi	r4,64
101120e0:	20c7c83a 	sub	r3,r4,r3
101120e4:	40c6983a 	sll	r3,r8,r3
101120e8:	1c46b03a 	or	r3,r3,r17
101120ec:	1806c03a 	cmpne	r3,r3,zero
101120f0:	28e2b03a 	or	r17,r5,r3
101120f4:	0007883a 	mov	r3,zero
101120f8:	003f2306 	br	10111d88 <_gp+0xffff07f8>
101120fc:	0007883a 	mov	r3,zero
10112100:	5811883a 	mov	r8,r11
10112104:	00bfffc4 	movi	r2,-1
10112108:	0401ffc4 	movi	r16,2047
1011210c:	003e7806 	br	10111af0 <_gp+0xffff0560>
10112110:	4462b03a 	or	r17,r8,r17
10112114:	8822c03a 	cmpne	r17,r17,zero
10112118:	0009883a 	mov	r4,zero
1011211c:	003fa006 	br	10111fa0 <_gp+0xffff0a10>
10112120:	4811883a 	mov	r8,r9
10112124:	3023883a 	mov	r17,r6
10112128:	0401ffc4 	movi	r16,2047
1011212c:	003e0706 	br	1011194c <_gp+0xffff03bc>
10112130:	4811883a 	mov	r8,r9
10112134:	3023883a 	mov	r17,r6
10112138:	003e0406 	br	1011194c <_gp+0xffff03bc>
1011213c:	21fff804 	addi	r7,r4,-32
10112140:	01400804 	movi	r5,32
10112144:	41ced83a 	srl	r7,r8,r7
10112148:	21400a26 	beq	r4,r5,10112174 <__adddf3+0x8a4>
1011214c:	01401004 	movi	r5,64
10112150:	2909c83a 	sub	r4,r5,r4
10112154:	4108983a 	sll	r4,r8,r4
10112158:	2448b03a 	or	r4,r4,r17
1011215c:	2008c03a 	cmpne	r4,r4,zero
10112160:	3922b03a 	or	r17,r7,r4
10112164:	0009883a 	mov	r4,zero
10112168:	003f8d06 	br	10111fa0 <_gp+0xffff0a10>
1011216c:	0007883a 	mov	r3,zero
10112170:	003fdd06 	br	101120e8 <_gp+0xffff0b58>
10112174:	0009883a 	mov	r4,zero
10112178:	003ff706 	br	10112158 <_gp+0xffff0bc8>

1011217c <__divdf3>:
1011217c:	defff204 	addi	sp,sp,-56
10112180:	dd400915 	stw	r21,36(sp)
10112184:	282ad53a 	srli	r21,r5,20
10112188:	dd000815 	stw	r20,32(sp)
1011218c:	2828d7fa 	srli	r20,r5,31
10112190:	dc000415 	stw	r16,16(sp)
10112194:	04000434 	movhi	r16,16
10112198:	df000c15 	stw	fp,48(sp)
1011219c:	843fffc4 	addi	r16,r16,-1
101121a0:	dfc00d15 	stw	ra,52(sp)
101121a4:	ddc00b15 	stw	r23,44(sp)
101121a8:	dd800a15 	stw	r22,40(sp)
101121ac:	dcc00715 	stw	r19,28(sp)
101121b0:	dc800615 	stw	r18,24(sp)
101121b4:	dc400515 	stw	r17,20(sp)
101121b8:	ad41ffcc 	andi	r21,r21,2047
101121bc:	2c20703a 	and	r16,r5,r16
101121c0:	a7003fcc 	andi	fp,r20,255
101121c4:	a8006126 	beq	r21,zero,1011234c <__divdf3+0x1d0>
101121c8:	0081ffc4 	movi	r2,2047
101121cc:	2025883a 	mov	r18,r4
101121d0:	a8803726 	beq	r21,r2,101122b0 <__divdf3+0x134>
101121d4:	80800434 	orhi	r2,r16,16
101121d8:	100490fa 	slli	r2,r2,3
101121dc:	2020d77a 	srli	r16,r4,29
101121e0:	202490fa 	slli	r18,r4,3
101121e4:	ad7f0044 	addi	r21,r21,-1023
101121e8:	80a0b03a 	or	r16,r16,r2
101121ec:	0027883a 	mov	r19,zero
101121f0:	0013883a 	mov	r9,zero
101121f4:	3804d53a 	srli	r2,r7,20
101121f8:	382cd7fa 	srli	r22,r7,31
101121fc:	04400434 	movhi	r17,16
10112200:	8c7fffc4 	addi	r17,r17,-1
10112204:	1081ffcc 	andi	r2,r2,2047
10112208:	3011883a 	mov	r8,r6
1011220c:	3c62703a 	and	r17,r7,r17
10112210:	b5c03fcc 	andi	r23,r22,255
10112214:	10006c26 	beq	r2,zero,101123c8 <__divdf3+0x24c>
10112218:	00c1ffc4 	movi	r3,2047
1011221c:	10c06426 	beq	r2,r3,101123b0 <__divdf3+0x234>
10112220:	88c00434 	orhi	r3,r17,16
10112224:	180690fa 	slli	r3,r3,3
10112228:	3022d77a 	srli	r17,r6,29
1011222c:	301090fa 	slli	r8,r6,3
10112230:	10bf0044 	addi	r2,r2,-1023
10112234:	88e2b03a 	or	r17,r17,r3
10112238:	000f883a 	mov	r7,zero
1011223c:	a58cf03a 	xor	r6,r20,r22
10112240:	3cc8b03a 	or	r4,r7,r19
10112244:	a8abc83a 	sub	r21,r21,r2
10112248:	008003c4 	movi	r2,15
1011224c:	3007883a 	mov	r3,r6
10112250:	34c03fcc 	andi	r19,r6,255
10112254:	11009036 	bltu	r2,r4,10112498 <__divdf3+0x31c>
10112258:	200890ba 	slli	r4,r4,2
1011225c:	00840474 	movhi	r2,4113
10112260:	10889c04 	addi	r2,r2,8816
10112264:	2089883a 	add	r4,r4,r2
10112268:	20800017 	ldw	r2,0(r4)
1011226c:	1000683a 	jmp	r2
10112270:	10112498 	cmpnei	zero,r2,17554
10112274:	101122e8 	cmpgeui	zero,r2,17547
10112278:	10112488 	cmpgei	zero,r2,17554
1011227c:	101122dc 	xori	zero,r2,17547
10112280:	10112488 	cmpgei	zero,r2,17554
10112284:	1011245c 	xori	zero,r2,17553
10112288:	10112488 	cmpgei	zero,r2,17554
1011228c:	101122dc 	xori	zero,r2,17547
10112290:	101122e8 	cmpgeui	zero,r2,17547
10112294:	101122e8 	cmpgeui	zero,r2,17547
10112298:	1011245c 	xori	zero,r2,17553
1011229c:	101122dc 	xori	zero,r2,17547
101122a0:	101122cc 	andi	zero,r2,17547
101122a4:	101122cc 	andi	zero,r2,17547
101122a8:	101122cc 	andi	zero,r2,17547
101122ac:	1011277c 	xorhi	zero,r2,17565
101122b0:	2404b03a 	or	r2,r4,r16
101122b4:	1000661e 	bne	r2,zero,10112450 <__divdf3+0x2d4>
101122b8:	04c00204 	movi	r19,8
101122bc:	0021883a 	mov	r16,zero
101122c0:	0025883a 	mov	r18,zero
101122c4:	02400084 	movi	r9,2
101122c8:	003fca06 	br	101121f4 <_gp+0xffff0c64>
101122cc:	8023883a 	mov	r17,r16
101122d0:	9011883a 	mov	r8,r18
101122d4:	e02f883a 	mov	r23,fp
101122d8:	480f883a 	mov	r7,r9
101122dc:	00800084 	movi	r2,2
101122e0:	3881311e 	bne	r7,r2,101127a8 <__divdf3+0x62c>
101122e4:	b827883a 	mov	r19,r23
101122e8:	98c0004c 	andi	r3,r19,1
101122ec:	0081ffc4 	movi	r2,2047
101122f0:	000b883a 	mov	r5,zero
101122f4:	0025883a 	mov	r18,zero
101122f8:	1004953a 	slli	r2,r2,20
101122fc:	18c03fcc 	andi	r3,r3,255
10112300:	04400434 	movhi	r17,16
10112304:	8c7fffc4 	addi	r17,r17,-1
10112308:	180697fa 	slli	r3,r3,31
1011230c:	2c4a703a 	and	r5,r5,r17
10112310:	288ab03a 	or	r5,r5,r2
10112314:	28c6b03a 	or	r3,r5,r3
10112318:	9005883a 	mov	r2,r18
1011231c:	dfc00d17 	ldw	ra,52(sp)
10112320:	df000c17 	ldw	fp,48(sp)
10112324:	ddc00b17 	ldw	r23,44(sp)
10112328:	dd800a17 	ldw	r22,40(sp)
1011232c:	dd400917 	ldw	r21,36(sp)
10112330:	dd000817 	ldw	r20,32(sp)
10112334:	dcc00717 	ldw	r19,28(sp)
10112338:	dc800617 	ldw	r18,24(sp)
1011233c:	dc400517 	ldw	r17,20(sp)
10112340:	dc000417 	ldw	r16,16(sp)
10112344:	dec00e04 	addi	sp,sp,56
10112348:	f800283a 	ret
1011234c:	2404b03a 	or	r2,r4,r16
10112350:	2027883a 	mov	r19,r4
10112354:	10003926 	beq	r2,zero,1011243c <__divdf3+0x2c0>
10112358:	80012e26 	beq	r16,zero,10112814 <__divdf3+0x698>
1011235c:	8009883a 	mov	r4,r16
10112360:	d9800315 	stw	r6,12(sp)
10112364:	d9c00215 	stw	r7,8(sp)
10112368:	0113ed40 	call	10113ed4 <__clzsi2>
1011236c:	d9800317 	ldw	r6,12(sp)
10112370:	d9c00217 	ldw	r7,8(sp)
10112374:	113ffd44 	addi	r4,r2,-11
10112378:	00c00704 	movi	r3,28
1011237c:	19012116 	blt	r3,r4,10112804 <__divdf3+0x688>
10112380:	00c00744 	movi	r3,29
10112384:	147ffe04 	addi	r17,r2,-8
10112388:	1907c83a 	sub	r3,r3,r4
1011238c:	8460983a 	sll	r16,r16,r17
10112390:	98c6d83a 	srl	r3,r19,r3
10112394:	9c64983a 	sll	r18,r19,r17
10112398:	1c20b03a 	or	r16,r3,r16
1011239c:	1080fcc4 	addi	r2,r2,1011
101123a0:	00abc83a 	sub	r21,zero,r2
101123a4:	0027883a 	mov	r19,zero
101123a8:	0013883a 	mov	r9,zero
101123ac:	003f9106 	br	101121f4 <_gp+0xffff0c64>
101123b0:	3446b03a 	or	r3,r6,r17
101123b4:	18001f1e 	bne	r3,zero,10112434 <__divdf3+0x2b8>
101123b8:	0023883a 	mov	r17,zero
101123bc:	0011883a 	mov	r8,zero
101123c0:	01c00084 	movi	r7,2
101123c4:	003f9d06 	br	1011223c <_gp+0xffff0cac>
101123c8:	3446b03a 	or	r3,r6,r17
101123cc:	18001526 	beq	r3,zero,10112424 <__divdf3+0x2a8>
101123d0:	88011b26 	beq	r17,zero,10112840 <__divdf3+0x6c4>
101123d4:	8809883a 	mov	r4,r17
101123d8:	d9800315 	stw	r6,12(sp)
101123dc:	da400115 	stw	r9,4(sp)
101123e0:	0113ed40 	call	10113ed4 <__clzsi2>
101123e4:	d9800317 	ldw	r6,12(sp)
101123e8:	da400117 	ldw	r9,4(sp)
101123ec:	113ffd44 	addi	r4,r2,-11
101123f0:	00c00704 	movi	r3,28
101123f4:	19010e16 	blt	r3,r4,10112830 <__divdf3+0x6b4>
101123f8:	00c00744 	movi	r3,29
101123fc:	123ffe04 	addi	r8,r2,-8
10112400:	1907c83a 	sub	r3,r3,r4
10112404:	8a22983a 	sll	r17,r17,r8
10112408:	30c6d83a 	srl	r3,r6,r3
1011240c:	3210983a 	sll	r8,r6,r8
10112410:	1c62b03a 	or	r17,r3,r17
10112414:	1080fcc4 	addi	r2,r2,1011
10112418:	0085c83a 	sub	r2,zero,r2
1011241c:	000f883a 	mov	r7,zero
10112420:	003f8606 	br	1011223c <_gp+0xffff0cac>
10112424:	0023883a 	mov	r17,zero
10112428:	0011883a 	mov	r8,zero
1011242c:	01c00044 	movi	r7,1
10112430:	003f8206 	br	1011223c <_gp+0xffff0cac>
10112434:	01c000c4 	movi	r7,3
10112438:	003f8006 	br	1011223c <_gp+0xffff0cac>
1011243c:	04c00104 	movi	r19,4
10112440:	0021883a 	mov	r16,zero
10112444:	0025883a 	mov	r18,zero
10112448:	02400044 	movi	r9,1
1011244c:	003f6906 	br	101121f4 <_gp+0xffff0c64>
10112450:	04c00304 	movi	r19,12
10112454:	024000c4 	movi	r9,3
10112458:	003f6606 	br	101121f4 <_gp+0xffff0c64>
1011245c:	01400434 	movhi	r5,16
10112460:	0007883a 	mov	r3,zero
10112464:	297fffc4 	addi	r5,r5,-1
10112468:	04bfffc4 	movi	r18,-1
1011246c:	0081ffc4 	movi	r2,2047
10112470:	003fa106 	br	101122f8 <_gp+0xffff0d68>
10112474:	00c00044 	movi	r3,1
10112478:	1887c83a 	sub	r3,r3,r2
1011247c:	01000e04 	movi	r4,56
10112480:	20c1210e 	bge	r4,r3,10112908 <__divdf3+0x78c>
10112484:	98c0004c 	andi	r3,r19,1
10112488:	0005883a 	mov	r2,zero
1011248c:	000b883a 	mov	r5,zero
10112490:	0025883a 	mov	r18,zero
10112494:	003f9806 	br	101122f8 <_gp+0xffff0d68>
10112498:	8c00fd36 	bltu	r17,r16,10112890 <__divdf3+0x714>
1011249c:	8440fb26 	beq	r16,r17,1011288c <__divdf3+0x710>
101124a0:	8007883a 	mov	r3,r16
101124a4:	ad7fffc4 	addi	r21,r21,-1
101124a8:	0021883a 	mov	r16,zero
101124ac:	4004d63a 	srli	r2,r8,24
101124b0:	8822923a 	slli	r17,r17,8
101124b4:	1809883a 	mov	r4,r3
101124b8:	402c923a 	slli	r22,r8,8
101124bc:	88b8b03a 	or	fp,r17,r2
101124c0:	e028d43a 	srli	r20,fp,16
101124c4:	d8c00015 	stw	r3,0(sp)
101124c8:	e5ffffcc 	andi	r23,fp,65535
101124cc:	a00b883a 	mov	r5,r20
101124d0:	01031000 	call	10103100 <__udivsi3>
101124d4:	d8c00017 	ldw	r3,0(sp)
101124d8:	a00b883a 	mov	r5,r20
101124dc:	d8800315 	stw	r2,12(sp)
101124e0:	1809883a 	mov	r4,r3
101124e4:	01031640 	call	10103164 <__umodsi3>
101124e8:	d9800317 	ldw	r6,12(sp)
101124ec:	1006943a 	slli	r3,r2,16
101124f0:	9004d43a 	srli	r2,r18,16
101124f4:	b9a3383a 	mul	r17,r23,r6
101124f8:	10c4b03a 	or	r2,r2,r3
101124fc:	1440062e 	bgeu	r2,r17,10112518 <__divdf3+0x39c>
10112500:	1705883a 	add	r2,r2,fp
10112504:	30ffffc4 	addi	r3,r6,-1
10112508:	1700ee36 	bltu	r2,fp,101128c4 <__divdf3+0x748>
1011250c:	1440ed2e 	bgeu	r2,r17,101128c4 <__divdf3+0x748>
10112510:	31bfff84 	addi	r6,r6,-2
10112514:	1705883a 	add	r2,r2,fp
10112518:	1463c83a 	sub	r17,r2,r17
1011251c:	a00b883a 	mov	r5,r20
10112520:	8809883a 	mov	r4,r17
10112524:	d9800315 	stw	r6,12(sp)
10112528:	01031000 	call	10103100 <__udivsi3>
1011252c:	a00b883a 	mov	r5,r20
10112530:	8809883a 	mov	r4,r17
10112534:	d8800215 	stw	r2,8(sp)
10112538:	01031640 	call	10103164 <__umodsi3>
1011253c:	d9c00217 	ldw	r7,8(sp)
10112540:	1004943a 	slli	r2,r2,16
10112544:	94bfffcc 	andi	r18,r18,65535
10112548:	b9d1383a 	mul	r8,r23,r7
1011254c:	90a4b03a 	or	r18,r18,r2
10112550:	d9800317 	ldw	r6,12(sp)
10112554:	9200062e 	bgeu	r18,r8,10112570 <__divdf3+0x3f4>
10112558:	9725883a 	add	r18,r18,fp
1011255c:	38bfffc4 	addi	r2,r7,-1
10112560:	9700d636 	bltu	r18,fp,101128bc <__divdf3+0x740>
10112564:	9200d52e 	bgeu	r18,r8,101128bc <__divdf3+0x740>
10112568:	39ffff84 	addi	r7,r7,-2
1011256c:	9725883a 	add	r18,r18,fp
10112570:	3004943a 	slli	r2,r6,16
10112574:	b012d43a 	srli	r9,r22,16
10112578:	b1bfffcc 	andi	r6,r22,65535
1011257c:	11e2b03a 	or	r17,r2,r7
10112580:	8806d43a 	srli	r3,r17,16
10112584:	893fffcc 	andi	r4,r17,65535
10112588:	218b383a 	mul	r5,r4,r6
1011258c:	30c5383a 	mul	r2,r6,r3
10112590:	2249383a 	mul	r4,r4,r9
10112594:	280ed43a 	srli	r7,r5,16
10112598:	9225c83a 	sub	r18,r18,r8
1011259c:	2089883a 	add	r4,r4,r2
101125a0:	3909883a 	add	r4,r7,r4
101125a4:	1a47383a 	mul	r3,r3,r9
101125a8:	2080022e 	bgeu	r4,r2,101125b4 <__divdf3+0x438>
101125ac:	00800074 	movhi	r2,1
101125b0:	1887883a 	add	r3,r3,r2
101125b4:	2004d43a 	srli	r2,r4,16
101125b8:	2008943a 	slli	r4,r4,16
101125bc:	297fffcc 	andi	r5,r5,65535
101125c0:	10c7883a 	add	r3,r2,r3
101125c4:	2149883a 	add	r4,r4,r5
101125c8:	90c0a536 	bltu	r18,r3,10112860 <__divdf3+0x6e4>
101125cc:	90c0bf26 	beq	r18,r3,101128cc <__divdf3+0x750>
101125d0:	90c7c83a 	sub	r3,r18,r3
101125d4:	810fc83a 	sub	r7,r16,r4
101125d8:	81e5803a 	cmpltu	r18,r16,r7
101125dc:	1ca5c83a 	sub	r18,r3,r18
101125e0:	e480c126 	beq	fp,r18,101128e8 <__divdf3+0x76c>
101125e4:	a00b883a 	mov	r5,r20
101125e8:	9009883a 	mov	r4,r18
101125ec:	d9800315 	stw	r6,12(sp)
101125f0:	d9c00215 	stw	r7,8(sp)
101125f4:	da400115 	stw	r9,4(sp)
101125f8:	01031000 	call	10103100 <__udivsi3>
101125fc:	a00b883a 	mov	r5,r20
10112600:	9009883a 	mov	r4,r18
10112604:	d8800015 	stw	r2,0(sp)
10112608:	01031640 	call	10103164 <__umodsi3>
1011260c:	d9c00217 	ldw	r7,8(sp)
10112610:	da000017 	ldw	r8,0(sp)
10112614:	1006943a 	slli	r3,r2,16
10112618:	3804d43a 	srli	r2,r7,16
1011261c:	ba21383a 	mul	r16,r23,r8
10112620:	d9800317 	ldw	r6,12(sp)
10112624:	10c4b03a 	or	r2,r2,r3
10112628:	da400117 	ldw	r9,4(sp)
1011262c:	1400062e 	bgeu	r2,r16,10112648 <__divdf3+0x4cc>
10112630:	1705883a 	add	r2,r2,fp
10112634:	40ffffc4 	addi	r3,r8,-1
10112638:	1700ad36 	bltu	r2,fp,101128f0 <__divdf3+0x774>
1011263c:	1400ac2e 	bgeu	r2,r16,101128f0 <__divdf3+0x774>
10112640:	423fff84 	addi	r8,r8,-2
10112644:	1705883a 	add	r2,r2,fp
10112648:	1421c83a 	sub	r16,r2,r16
1011264c:	a00b883a 	mov	r5,r20
10112650:	8009883a 	mov	r4,r16
10112654:	d9800315 	stw	r6,12(sp)
10112658:	d9c00215 	stw	r7,8(sp)
1011265c:	da000015 	stw	r8,0(sp)
10112660:	da400115 	stw	r9,4(sp)
10112664:	01031000 	call	10103100 <__udivsi3>
10112668:	8009883a 	mov	r4,r16
1011266c:	a00b883a 	mov	r5,r20
10112670:	1025883a 	mov	r18,r2
10112674:	01031640 	call	10103164 <__umodsi3>
10112678:	d9c00217 	ldw	r7,8(sp)
1011267c:	1004943a 	slli	r2,r2,16
10112680:	bcaf383a 	mul	r23,r23,r18
10112684:	393fffcc 	andi	r4,r7,65535
10112688:	2088b03a 	or	r4,r4,r2
1011268c:	d9800317 	ldw	r6,12(sp)
10112690:	da000017 	ldw	r8,0(sp)
10112694:	da400117 	ldw	r9,4(sp)
10112698:	25c0062e 	bgeu	r4,r23,101126b4 <__divdf3+0x538>
1011269c:	2709883a 	add	r4,r4,fp
101126a0:	90bfffc4 	addi	r2,r18,-1
101126a4:	27009436 	bltu	r4,fp,101128f8 <__divdf3+0x77c>
101126a8:	25c0932e 	bgeu	r4,r23,101128f8 <__divdf3+0x77c>
101126ac:	94bfff84 	addi	r18,r18,-2
101126b0:	2709883a 	add	r4,r4,fp
101126b4:	4004943a 	slli	r2,r8,16
101126b8:	25efc83a 	sub	r23,r4,r23
101126bc:	1490b03a 	or	r8,r2,r18
101126c0:	4008d43a 	srli	r4,r8,16
101126c4:	40ffffcc 	andi	r3,r8,65535
101126c8:	30c5383a 	mul	r2,r6,r3
101126cc:	1a47383a 	mul	r3,r3,r9
101126d0:	310d383a 	mul	r6,r6,r4
101126d4:	100ad43a 	srli	r5,r2,16
101126d8:	4913383a 	mul	r9,r9,r4
101126dc:	1987883a 	add	r3,r3,r6
101126e0:	28c7883a 	add	r3,r5,r3
101126e4:	1980022e 	bgeu	r3,r6,101126f0 <__divdf3+0x574>
101126e8:	01000074 	movhi	r4,1
101126ec:	4913883a 	add	r9,r9,r4
101126f0:	1808d43a 	srli	r4,r3,16
101126f4:	1806943a 	slli	r3,r3,16
101126f8:	10bfffcc 	andi	r2,r2,65535
101126fc:	2253883a 	add	r9,r4,r9
10112700:	1887883a 	add	r3,r3,r2
10112704:	ba403836 	bltu	r23,r9,101127e8 <__divdf3+0x66c>
10112708:	ba403626 	beq	r23,r9,101127e4 <__divdf3+0x668>
1011270c:	42000054 	ori	r8,r8,1
10112710:	a880ffc4 	addi	r2,r21,1023
10112714:	00bf570e 	bge	zero,r2,10112474 <_gp+0xffff0ee4>
10112718:	40c001cc 	andi	r3,r8,7
1011271c:	18000726 	beq	r3,zero,1011273c <__divdf3+0x5c0>
10112720:	40c003cc 	andi	r3,r8,15
10112724:	01000104 	movi	r4,4
10112728:	19000426 	beq	r3,r4,1011273c <__divdf3+0x5c0>
1011272c:	4107883a 	add	r3,r8,r4
10112730:	1a11803a 	cmpltu	r8,r3,r8
10112734:	8a23883a 	add	r17,r17,r8
10112738:	1811883a 	mov	r8,r3
1011273c:	88c0402c 	andhi	r3,r17,256
10112740:	18000426 	beq	r3,zero,10112754 <__divdf3+0x5d8>
10112744:	00ffc034 	movhi	r3,65280
10112748:	18ffffc4 	addi	r3,r3,-1
1011274c:	a8810004 	addi	r2,r21,1024
10112750:	88e2703a 	and	r17,r17,r3
10112754:	00c1ff84 	movi	r3,2046
10112758:	18bee316 	blt	r3,r2,101122e8 <_gp+0xffff0d58>
1011275c:	8824977a 	slli	r18,r17,29
10112760:	4010d0fa 	srli	r8,r8,3
10112764:	8822927a 	slli	r17,r17,9
10112768:	1081ffcc 	andi	r2,r2,2047
1011276c:	9224b03a 	or	r18,r18,r8
10112770:	880ad33a 	srli	r5,r17,12
10112774:	98c0004c 	andi	r3,r19,1
10112778:	003edf06 	br	101122f8 <_gp+0xffff0d68>
1011277c:	8080022c 	andhi	r2,r16,8
10112780:	10001226 	beq	r2,zero,101127cc <__divdf3+0x650>
10112784:	8880022c 	andhi	r2,r17,8
10112788:	1000101e 	bne	r2,zero,101127cc <__divdf3+0x650>
1011278c:	00800434 	movhi	r2,16
10112790:	89400234 	orhi	r5,r17,8
10112794:	10bfffc4 	addi	r2,r2,-1
10112798:	b007883a 	mov	r3,r22
1011279c:	288a703a 	and	r5,r5,r2
101127a0:	4025883a 	mov	r18,r8
101127a4:	003f3106 	br	1011246c <_gp+0xffff0edc>
101127a8:	008000c4 	movi	r2,3
101127ac:	3880a626 	beq	r7,r2,10112a48 <__divdf3+0x8cc>
101127b0:	00800044 	movi	r2,1
101127b4:	3880521e 	bne	r7,r2,10112900 <__divdf3+0x784>
101127b8:	b807883a 	mov	r3,r23
101127bc:	0005883a 	mov	r2,zero
101127c0:	000b883a 	mov	r5,zero
101127c4:	0025883a 	mov	r18,zero
101127c8:	003ecb06 	br	101122f8 <_gp+0xffff0d68>
101127cc:	00800434 	movhi	r2,16
101127d0:	81400234 	orhi	r5,r16,8
101127d4:	10bfffc4 	addi	r2,r2,-1
101127d8:	a007883a 	mov	r3,r20
101127dc:	288a703a 	and	r5,r5,r2
101127e0:	003f2206 	br	1011246c <_gp+0xffff0edc>
101127e4:	183fca26 	beq	r3,zero,10112710 <_gp+0xffff1180>
101127e8:	e5ef883a 	add	r23,fp,r23
101127ec:	40bfffc4 	addi	r2,r8,-1
101127f0:	bf00392e 	bgeu	r23,fp,101128d8 <__divdf3+0x75c>
101127f4:	1011883a 	mov	r8,r2
101127f8:	ba7fc41e 	bne	r23,r9,1011270c <_gp+0xffff117c>
101127fc:	b0ffc31e 	bne	r22,r3,1011270c <_gp+0xffff117c>
10112800:	003fc306 	br	10112710 <_gp+0xffff1180>
10112804:	143ff604 	addi	r16,r2,-40
10112808:	9c20983a 	sll	r16,r19,r16
1011280c:	0025883a 	mov	r18,zero
10112810:	003ee206 	br	1011239c <_gp+0xffff0e0c>
10112814:	d9800315 	stw	r6,12(sp)
10112818:	d9c00215 	stw	r7,8(sp)
1011281c:	0113ed40 	call	10113ed4 <__clzsi2>
10112820:	10800804 	addi	r2,r2,32
10112824:	d9c00217 	ldw	r7,8(sp)
10112828:	d9800317 	ldw	r6,12(sp)
1011282c:	003ed106 	br	10112374 <_gp+0xffff0de4>
10112830:	147ff604 	addi	r17,r2,-40
10112834:	3462983a 	sll	r17,r6,r17
10112838:	0011883a 	mov	r8,zero
1011283c:	003ef506 	br	10112414 <_gp+0xffff0e84>
10112840:	3009883a 	mov	r4,r6
10112844:	d9800315 	stw	r6,12(sp)
10112848:	da400115 	stw	r9,4(sp)
1011284c:	0113ed40 	call	10113ed4 <__clzsi2>
10112850:	10800804 	addi	r2,r2,32
10112854:	da400117 	ldw	r9,4(sp)
10112858:	d9800317 	ldw	r6,12(sp)
1011285c:	003ee306 	br	101123ec <_gp+0xffff0e5c>
10112860:	85a1883a 	add	r16,r16,r22
10112864:	8585803a 	cmpltu	r2,r16,r22
10112868:	1705883a 	add	r2,r2,fp
1011286c:	14a5883a 	add	r18,r2,r18
10112870:	88bfffc4 	addi	r2,r17,-1
10112874:	e4800c2e 	bgeu	fp,r18,101128a8 <__divdf3+0x72c>
10112878:	90c03e36 	bltu	r18,r3,10112974 <__divdf3+0x7f8>
1011287c:	1c806926 	beq	r3,r18,10112a24 <__divdf3+0x8a8>
10112880:	90c7c83a 	sub	r3,r18,r3
10112884:	1023883a 	mov	r17,r2
10112888:	003f5206 	br	101125d4 <_gp+0xffff1044>
1011288c:	923f0436 	bltu	r18,r8,101124a0 <_gp+0xffff0f10>
10112890:	800897fa 	slli	r4,r16,31
10112894:	9004d07a 	srli	r2,r18,1
10112898:	8006d07a 	srli	r3,r16,1
1011289c:	902097fa 	slli	r16,r18,31
101128a0:	20a4b03a 	or	r18,r4,r2
101128a4:	003f0106 	br	101124ac <_gp+0xffff0f1c>
101128a8:	e4bff51e 	bne	fp,r18,10112880 <_gp+0xffff12f0>
101128ac:	85bff22e 	bgeu	r16,r22,10112878 <_gp+0xffff12e8>
101128b0:	e0c7c83a 	sub	r3,fp,r3
101128b4:	1023883a 	mov	r17,r2
101128b8:	003f4606 	br	101125d4 <_gp+0xffff1044>
101128bc:	100f883a 	mov	r7,r2
101128c0:	003f2b06 	br	10112570 <_gp+0xffff0fe0>
101128c4:	180d883a 	mov	r6,r3
101128c8:	003f1306 	br	10112518 <_gp+0xffff0f88>
101128cc:	813fe436 	bltu	r16,r4,10112860 <_gp+0xffff12d0>
101128d0:	0007883a 	mov	r3,zero
101128d4:	003f3f06 	br	101125d4 <_gp+0xffff1044>
101128d8:	ba402c36 	bltu	r23,r9,1011298c <__divdf3+0x810>
101128dc:	4dc05426 	beq	r9,r23,10112a30 <__divdf3+0x8b4>
101128e0:	1011883a 	mov	r8,r2
101128e4:	003f8906 	br	1011270c <_gp+0xffff117c>
101128e8:	023fffc4 	movi	r8,-1
101128ec:	003f8806 	br	10112710 <_gp+0xffff1180>
101128f0:	1811883a 	mov	r8,r3
101128f4:	003f5406 	br	10112648 <_gp+0xffff10b8>
101128f8:	1025883a 	mov	r18,r2
101128fc:	003f6d06 	br	101126b4 <_gp+0xffff1124>
10112900:	b827883a 	mov	r19,r23
10112904:	003f8206 	br	10112710 <_gp+0xffff1180>
10112908:	010007c4 	movi	r4,31
1011290c:	20c02616 	blt	r4,r3,101129a8 <__divdf3+0x82c>
10112910:	00800804 	movi	r2,32
10112914:	10c5c83a 	sub	r2,r2,r3
10112918:	888a983a 	sll	r5,r17,r2
1011291c:	40c8d83a 	srl	r4,r8,r3
10112920:	4084983a 	sll	r2,r8,r2
10112924:	88e2d83a 	srl	r17,r17,r3
10112928:	2906b03a 	or	r3,r5,r4
1011292c:	1004c03a 	cmpne	r2,r2,zero
10112930:	1886b03a 	or	r3,r3,r2
10112934:	188001cc 	andi	r2,r3,7
10112938:	10000726 	beq	r2,zero,10112958 <__divdf3+0x7dc>
1011293c:	188003cc 	andi	r2,r3,15
10112940:	01000104 	movi	r4,4
10112944:	11000426 	beq	r2,r4,10112958 <__divdf3+0x7dc>
10112948:	1805883a 	mov	r2,r3
1011294c:	10c00104 	addi	r3,r2,4
10112950:	1885803a 	cmpltu	r2,r3,r2
10112954:	88a3883a 	add	r17,r17,r2
10112958:	8880202c 	andhi	r2,r17,128
1011295c:	10002726 	beq	r2,zero,101129fc <__divdf3+0x880>
10112960:	98c0004c 	andi	r3,r19,1
10112964:	00800044 	movi	r2,1
10112968:	000b883a 	mov	r5,zero
1011296c:	0025883a 	mov	r18,zero
10112970:	003e6106 	br	101122f8 <_gp+0xffff0d68>
10112974:	85a1883a 	add	r16,r16,r22
10112978:	8585803a 	cmpltu	r2,r16,r22
1011297c:	1705883a 	add	r2,r2,fp
10112980:	14a5883a 	add	r18,r2,r18
10112984:	8c7fff84 	addi	r17,r17,-2
10112988:	003f1106 	br	101125d0 <_gp+0xffff1040>
1011298c:	b589883a 	add	r4,r22,r22
10112990:	25ad803a 	cmpltu	r22,r4,r22
10112994:	b739883a 	add	fp,r22,fp
10112998:	40bfff84 	addi	r2,r8,-2
1011299c:	bf2f883a 	add	r23,r23,fp
101129a0:	202d883a 	mov	r22,r4
101129a4:	003f9306 	br	101127f4 <_gp+0xffff1264>
101129a8:	013ff844 	movi	r4,-31
101129ac:	2085c83a 	sub	r2,r4,r2
101129b0:	8888d83a 	srl	r4,r17,r2
101129b4:	00800804 	movi	r2,32
101129b8:	18802126 	beq	r3,r2,10112a40 <__divdf3+0x8c4>
101129bc:	00801004 	movi	r2,64
101129c0:	10c5c83a 	sub	r2,r2,r3
101129c4:	8884983a 	sll	r2,r17,r2
101129c8:	1204b03a 	or	r2,r2,r8
101129cc:	1004c03a 	cmpne	r2,r2,zero
101129d0:	2084b03a 	or	r2,r4,r2
101129d4:	144001cc 	andi	r17,r2,7
101129d8:	88000d1e 	bne	r17,zero,10112a10 <__divdf3+0x894>
101129dc:	000b883a 	mov	r5,zero
101129e0:	1024d0fa 	srli	r18,r2,3
101129e4:	98c0004c 	andi	r3,r19,1
101129e8:	0005883a 	mov	r2,zero
101129ec:	9464b03a 	or	r18,r18,r17
101129f0:	003e4106 	br	101122f8 <_gp+0xffff0d68>
101129f4:	1007883a 	mov	r3,r2
101129f8:	0023883a 	mov	r17,zero
101129fc:	880a927a 	slli	r5,r17,9
10112a00:	1805883a 	mov	r2,r3
10112a04:	8822977a 	slli	r17,r17,29
10112a08:	280ad33a 	srli	r5,r5,12
10112a0c:	003ff406 	br	101129e0 <_gp+0xffff1450>
10112a10:	10c003cc 	andi	r3,r2,15
10112a14:	01000104 	movi	r4,4
10112a18:	193ff626 	beq	r3,r4,101129f4 <_gp+0xffff1464>
10112a1c:	0023883a 	mov	r17,zero
10112a20:	003fca06 	br	1011294c <_gp+0xffff13bc>
10112a24:	813fd336 	bltu	r16,r4,10112974 <_gp+0xffff13e4>
10112a28:	1023883a 	mov	r17,r2
10112a2c:	003fa806 	br	101128d0 <_gp+0xffff1340>
10112a30:	b0ffd636 	bltu	r22,r3,1011298c <_gp+0xffff13fc>
10112a34:	1011883a 	mov	r8,r2
10112a38:	b0ff341e 	bne	r22,r3,1011270c <_gp+0xffff117c>
10112a3c:	003f3406 	br	10112710 <_gp+0xffff1180>
10112a40:	0005883a 	mov	r2,zero
10112a44:	003fe006 	br	101129c8 <_gp+0xffff1438>
10112a48:	00800434 	movhi	r2,16
10112a4c:	89400234 	orhi	r5,r17,8
10112a50:	10bfffc4 	addi	r2,r2,-1
10112a54:	b807883a 	mov	r3,r23
10112a58:	288a703a 	and	r5,r5,r2
10112a5c:	4025883a 	mov	r18,r8
10112a60:	003e8206 	br	1011246c <_gp+0xffff0edc>

10112a64 <__eqdf2>:
10112a64:	2804d53a 	srli	r2,r5,20
10112a68:	3806d53a 	srli	r3,r7,20
10112a6c:	02000434 	movhi	r8,16
10112a70:	423fffc4 	addi	r8,r8,-1
10112a74:	1081ffcc 	andi	r2,r2,2047
10112a78:	0281ffc4 	movi	r10,2047
10112a7c:	2a12703a 	and	r9,r5,r8
10112a80:	18c1ffcc 	andi	r3,r3,2047
10112a84:	3a10703a 	and	r8,r7,r8
10112a88:	280ad7fa 	srli	r5,r5,31
10112a8c:	380ed7fa 	srli	r7,r7,31
10112a90:	12801026 	beq	r2,r10,10112ad4 <__eqdf2+0x70>
10112a94:	0281ffc4 	movi	r10,2047
10112a98:	1a800a26 	beq	r3,r10,10112ac4 <__eqdf2+0x60>
10112a9c:	10c00226 	beq	r2,r3,10112aa8 <__eqdf2+0x44>
10112aa0:	00800044 	movi	r2,1
10112aa4:	f800283a 	ret
10112aa8:	4a3ffd1e 	bne	r9,r8,10112aa0 <_gp+0xffff1510>
10112aac:	21bffc1e 	bne	r4,r6,10112aa0 <_gp+0xffff1510>
10112ab0:	29c00c26 	beq	r5,r7,10112ae4 <__eqdf2+0x80>
10112ab4:	103ffa1e 	bne	r2,zero,10112aa0 <_gp+0xffff1510>
10112ab8:	2244b03a 	or	r2,r4,r9
10112abc:	1004c03a 	cmpne	r2,r2,zero
10112ac0:	f800283a 	ret
10112ac4:	3214b03a 	or	r10,r6,r8
10112ac8:	503ff426 	beq	r10,zero,10112a9c <_gp+0xffff150c>
10112acc:	00800044 	movi	r2,1
10112ad0:	f800283a 	ret
10112ad4:	2254b03a 	or	r10,r4,r9
10112ad8:	503fee26 	beq	r10,zero,10112a94 <_gp+0xffff1504>
10112adc:	00800044 	movi	r2,1
10112ae0:	f800283a 	ret
10112ae4:	0005883a 	mov	r2,zero
10112ae8:	f800283a 	ret

10112aec <__gedf2>:
10112aec:	2804d53a 	srli	r2,r5,20
10112af0:	3806d53a 	srli	r3,r7,20
10112af4:	02000434 	movhi	r8,16
10112af8:	423fffc4 	addi	r8,r8,-1
10112afc:	1081ffcc 	andi	r2,r2,2047
10112b00:	0241ffc4 	movi	r9,2047
10112b04:	2a14703a 	and	r10,r5,r8
10112b08:	18c1ffcc 	andi	r3,r3,2047
10112b0c:	3a10703a 	and	r8,r7,r8
10112b10:	280ad7fa 	srli	r5,r5,31
10112b14:	380ed7fa 	srli	r7,r7,31
10112b18:	12401d26 	beq	r2,r9,10112b90 <__gedf2+0xa4>
10112b1c:	0241ffc4 	movi	r9,2047
10112b20:	1a401226 	beq	r3,r9,10112b6c <__gedf2+0x80>
10112b24:	1000081e 	bne	r2,zero,10112b48 <__gedf2+0x5c>
10112b28:	2296b03a 	or	r11,r4,r10
10112b2c:	5813003a 	cmpeq	r9,r11,zero
10112b30:	1800091e 	bne	r3,zero,10112b58 <__gedf2+0x6c>
10112b34:	3218b03a 	or	r12,r6,r8
10112b38:	6000071e 	bne	r12,zero,10112b58 <__gedf2+0x6c>
10112b3c:	0005883a 	mov	r2,zero
10112b40:	5800101e 	bne	r11,zero,10112b84 <__gedf2+0x98>
10112b44:	f800283a 	ret
10112b48:	18000c1e 	bne	r3,zero,10112b7c <__gedf2+0x90>
10112b4c:	3212b03a 	or	r9,r6,r8
10112b50:	48000c26 	beq	r9,zero,10112b84 <__gedf2+0x98>
10112b54:	0013883a 	mov	r9,zero
10112b58:	39c03fcc 	andi	r7,r7,255
10112b5c:	48000826 	beq	r9,zero,10112b80 <__gedf2+0x94>
10112b60:	38000926 	beq	r7,zero,10112b88 <__gedf2+0x9c>
10112b64:	00800044 	movi	r2,1
10112b68:	f800283a 	ret
10112b6c:	3212b03a 	or	r9,r6,r8
10112b70:	483fec26 	beq	r9,zero,10112b24 <_gp+0xffff1594>
10112b74:	00bfff84 	movi	r2,-2
10112b78:	f800283a 	ret
10112b7c:	39c03fcc 	andi	r7,r7,255
10112b80:	29c00626 	beq	r5,r7,10112b9c <__gedf2+0xb0>
10112b84:	283ff726 	beq	r5,zero,10112b64 <_gp+0xffff15d4>
10112b88:	00bfffc4 	movi	r2,-1
10112b8c:	f800283a 	ret
10112b90:	2292b03a 	or	r9,r4,r10
10112b94:	483fe126 	beq	r9,zero,10112b1c <_gp+0xffff158c>
10112b98:	003ff606 	br	10112b74 <_gp+0xffff15e4>
10112b9c:	18bff916 	blt	r3,r2,10112b84 <_gp+0xffff15f4>
10112ba0:	10c00316 	blt	r2,r3,10112bb0 <__gedf2+0xc4>
10112ba4:	42bff736 	bltu	r8,r10,10112b84 <_gp+0xffff15f4>
10112ba8:	52000326 	beq	r10,r8,10112bb8 <__gedf2+0xcc>
10112bac:	5200042e 	bgeu	r10,r8,10112bc0 <__gedf2+0xd4>
10112bb0:	283fec1e 	bne	r5,zero,10112b64 <_gp+0xffff15d4>
10112bb4:	003ff406 	br	10112b88 <_gp+0xffff15f8>
10112bb8:	313ff236 	bltu	r6,r4,10112b84 <_gp+0xffff15f4>
10112bbc:	21bffc36 	bltu	r4,r6,10112bb0 <_gp+0xffff1620>
10112bc0:	0005883a 	mov	r2,zero
10112bc4:	f800283a 	ret

10112bc8 <__ledf2>:
10112bc8:	2804d53a 	srli	r2,r5,20
10112bcc:	3810d53a 	srli	r8,r7,20
10112bd0:	00c00434 	movhi	r3,16
10112bd4:	18ffffc4 	addi	r3,r3,-1
10112bd8:	1081ffcc 	andi	r2,r2,2047
10112bdc:	0241ffc4 	movi	r9,2047
10112be0:	28d4703a 	and	r10,r5,r3
10112be4:	4201ffcc 	andi	r8,r8,2047
10112be8:	38c6703a 	and	r3,r7,r3
10112bec:	280ad7fa 	srli	r5,r5,31
10112bf0:	380ed7fa 	srli	r7,r7,31
10112bf4:	12401f26 	beq	r2,r9,10112c74 <__ledf2+0xac>
10112bf8:	0241ffc4 	movi	r9,2047
10112bfc:	42401426 	beq	r8,r9,10112c50 <__ledf2+0x88>
10112c00:	1000091e 	bne	r2,zero,10112c28 <__ledf2+0x60>
10112c04:	2296b03a 	or	r11,r4,r10
10112c08:	5813003a 	cmpeq	r9,r11,zero
10112c0c:	29403fcc 	andi	r5,r5,255
10112c10:	40000a1e 	bne	r8,zero,10112c3c <__ledf2+0x74>
10112c14:	30d8b03a 	or	r12,r6,r3
10112c18:	6000081e 	bne	r12,zero,10112c3c <__ledf2+0x74>
10112c1c:	0005883a 	mov	r2,zero
10112c20:	5800111e 	bne	r11,zero,10112c68 <__ledf2+0xa0>
10112c24:	f800283a 	ret
10112c28:	29403fcc 	andi	r5,r5,255
10112c2c:	40000c1e 	bne	r8,zero,10112c60 <__ledf2+0x98>
10112c30:	30d2b03a 	or	r9,r6,r3
10112c34:	48000c26 	beq	r9,zero,10112c68 <__ledf2+0xa0>
10112c38:	0013883a 	mov	r9,zero
10112c3c:	39c03fcc 	andi	r7,r7,255
10112c40:	48000826 	beq	r9,zero,10112c64 <__ledf2+0x9c>
10112c44:	38001126 	beq	r7,zero,10112c8c <__ledf2+0xc4>
10112c48:	00800044 	movi	r2,1
10112c4c:	f800283a 	ret
10112c50:	30d2b03a 	or	r9,r6,r3
10112c54:	483fea26 	beq	r9,zero,10112c00 <_gp+0xffff1670>
10112c58:	00800084 	movi	r2,2
10112c5c:	f800283a 	ret
10112c60:	39c03fcc 	andi	r7,r7,255
10112c64:	39400726 	beq	r7,r5,10112c84 <__ledf2+0xbc>
10112c68:	2800081e 	bne	r5,zero,10112c8c <__ledf2+0xc4>
10112c6c:	00800044 	movi	r2,1
10112c70:	f800283a 	ret
10112c74:	2292b03a 	or	r9,r4,r10
10112c78:	483fdf26 	beq	r9,zero,10112bf8 <_gp+0xffff1668>
10112c7c:	00800084 	movi	r2,2
10112c80:	f800283a 	ret
10112c84:	4080030e 	bge	r8,r2,10112c94 <__ledf2+0xcc>
10112c88:	383fef26 	beq	r7,zero,10112c48 <_gp+0xffff16b8>
10112c8c:	00bfffc4 	movi	r2,-1
10112c90:	f800283a 	ret
10112c94:	123feb16 	blt	r2,r8,10112c44 <_gp+0xffff16b4>
10112c98:	1abff336 	bltu	r3,r10,10112c68 <_gp+0xffff16d8>
10112c9c:	50c00326 	beq	r10,r3,10112cac <__ledf2+0xe4>
10112ca0:	50c0042e 	bgeu	r10,r3,10112cb4 <__ledf2+0xec>
10112ca4:	283fe81e 	bne	r5,zero,10112c48 <_gp+0xffff16b8>
10112ca8:	003ff806 	br	10112c8c <_gp+0xffff16fc>
10112cac:	313fee36 	bltu	r6,r4,10112c68 <_gp+0xffff16d8>
10112cb0:	21bffc36 	bltu	r4,r6,10112ca4 <_gp+0xffff1714>
10112cb4:	0005883a 	mov	r2,zero
10112cb8:	f800283a 	ret

10112cbc <__muldf3>:
10112cbc:	defff304 	addi	sp,sp,-52
10112cc0:	2804d53a 	srli	r2,r5,20
10112cc4:	dd800915 	stw	r22,36(sp)
10112cc8:	282cd7fa 	srli	r22,r5,31
10112ccc:	dc000315 	stw	r16,12(sp)
10112cd0:	04000434 	movhi	r16,16
10112cd4:	dd400815 	stw	r21,32(sp)
10112cd8:	dc800515 	stw	r18,20(sp)
10112cdc:	843fffc4 	addi	r16,r16,-1
10112ce0:	dfc00c15 	stw	ra,48(sp)
10112ce4:	df000b15 	stw	fp,44(sp)
10112ce8:	ddc00a15 	stw	r23,40(sp)
10112cec:	dd000715 	stw	r20,28(sp)
10112cf0:	dcc00615 	stw	r19,24(sp)
10112cf4:	dc400415 	stw	r17,16(sp)
10112cf8:	1481ffcc 	andi	r18,r2,2047
10112cfc:	2c20703a 	and	r16,r5,r16
10112d00:	b02b883a 	mov	r21,r22
10112d04:	b2403fcc 	andi	r9,r22,255
10112d08:	90006026 	beq	r18,zero,10112e8c <__muldf3+0x1d0>
10112d0c:	0081ffc4 	movi	r2,2047
10112d10:	2029883a 	mov	r20,r4
10112d14:	90803626 	beq	r18,r2,10112df0 <__muldf3+0x134>
10112d18:	80800434 	orhi	r2,r16,16
10112d1c:	100490fa 	slli	r2,r2,3
10112d20:	2020d77a 	srli	r16,r4,29
10112d24:	202890fa 	slli	r20,r4,3
10112d28:	94bf0044 	addi	r18,r18,-1023
10112d2c:	80a0b03a 	or	r16,r16,r2
10112d30:	0027883a 	mov	r19,zero
10112d34:	0039883a 	mov	fp,zero
10112d38:	3804d53a 	srli	r2,r7,20
10112d3c:	382ed7fa 	srli	r23,r7,31
10112d40:	04400434 	movhi	r17,16
10112d44:	8c7fffc4 	addi	r17,r17,-1
10112d48:	1081ffcc 	andi	r2,r2,2047
10112d4c:	3011883a 	mov	r8,r6
10112d50:	3c62703a 	and	r17,r7,r17
10112d54:	ba803fcc 	andi	r10,r23,255
10112d58:	10006d26 	beq	r2,zero,10112f10 <__muldf3+0x254>
10112d5c:	00c1ffc4 	movi	r3,2047
10112d60:	10c06526 	beq	r2,r3,10112ef8 <__muldf3+0x23c>
10112d64:	88c00434 	orhi	r3,r17,16
10112d68:	180690fa 	slli	r3,r3,3
10112d6c:	3022d77a 	srli	r17,r6,29
10112d70:	301090fa 	slli	r8,r6,3
10112d74:	10bf0044 	addi	r2,r2,-1023
10112d78:	88e2b03a 	or	r17,r17,r3
10112d7c:	000b883a 	mov	r5,zero
10112d80:	9085883a 	add	r2,r18,r2
10112d84:	2cc8b03a 	or	r4,r5,r19
10112d88:	00c003c4 	movi	r3,15
10112d8c:	bdacf03a 	xor	r22,r23,r22
10112d90:	12c00044 	addi	r11,r2,1
10112d94:	19009936 	bltu	r3,r4,10112ffc <__muldf3+0x340>
10112d98:	200890ba 	slli	r4,r4,2
10112d9c:	00c40474 	movhi	r3,4113
10112da0:	18cb6c04 	addi	r3,r3,11696
10112da4:	20c9883a 	add	r4,r4,r3
10112da8:	20c00017 	ldw	r3,0(r4)
10112dac:	1800683a 	jmp	r3
10112db0:	10112ffc 	xorhi	zero,r2,17599
10112db4:	10112e10 	cmplti	zero,r2,17592
10112db8:	10112e10 	cmplti	zero,r2,17592
10112dbc:	10112e0c 	andi	zero,r2,17592
10112dc0:	10112fd8 	cmpnei	zero,r2,17599
10112dc4:	10112fd8 	cmpnei	zero,r2,17599
10112dc8:	10112fc0 	call	110112fc <_gp+0xeefd6c>
10112dcc:	10112e0c 	andi	zero,r2,17592
10112dd0:	10112fd8 	cmpnei	zero,r2,17599
10112dd4:	10112fc0 	call	110112fc <_gp+0xeefd6c>
10112dd8:	10112fd8 	cmpnei	zero,r2,17599
10112ddc:	10112e0c 	andi	zero,r2,17592
10112de0:	10112fe8 	cmpgeui	zero,r2,17599
10112de4:	10112fe8 	cmpgeui	zero,r2,17599
10112de8:	10112fe8 	cmpgeui	zero,r2,17599
10112dec:	10113204 	addi	zero,r2,17608
10112df0:	2404b03a 	or	r2,r4,r16
10112df4:	10006f1e 	bne	r2,zero,10112fb4 <__muldf3+0x2f8>
10112df8:	04c00204 	movi	r19,8
10112dfc:	0021883a 	mov	r16,zero
10112e00:	0029883a 	mov	r20,zero
10112e04:	07000084 	movi	fp,2
10112e08:	003fcb06 	br	10112d38 <_gp+0xffff17a8>
10112e0c:	502d883a 	mov	r22,r10
10112e10:	00800084 	movi	r2,2
10112e14:	28805726 	beq	r5,r2,10112f74 <__muldf3+0x2b8>
10112e18:	008000c4 	movi	r2,3
10112e1c:	28816626 	beq	r5,r2,101133b8 <__muldf3+0x6fc>
10112e20:	00800044 	movi	r2,1
10112e24:	2881411e 	bne	r5,r2,1011332c <__muldf3+0x670>
10112e28:	b02b883a 	mov	r21,r22
10112e2c:	0005883a 	mov	r2,zero
10112e30:	000b883a 	mov	r5,zero
10112e34:	0029883a 	mov	r20,zero
10112e38:	1004953a 	slli	r2,r2,20
10112e3c:	a8c03fcc 	andi	r3,r21,255
10112e40:	04400434 	movhi	r17,16
10112e44:	8c7fffc4 	addi	r17,r17,-1
10112e48:	180697fa 	slli	r3,r3,31
10112e4c:	2c4a703a 	and	r5,r5,r17
10112e50:	288ab03a 	or	r5,r5,r2
10112e54:	28c6b03a 	or	r3,r5,r3
10112e58:	a005883a 	mov	r2,r20
10112e5c:	dfc00c17 	ldw	ra,48(sp)
10112e60:	df000b17 	ldw	fp,44(sp)
10112e64:	ddc00a17 	ldw	r23,40(sp)
10112e68:	dd800917 	ldw	r22,36(sp)
10112e6c:	dd400817 	ldw	r21,32(sp)
10112e70:	dd000717 	ldw	r20,28(sp)
10112e74:	dcc00617 	ldw	r19,24(sp)
10112e78:	dc800517 	ldw	r18,20(sp)
10112e7c:	dc400417 	ldw	r17,16(sp)
10112e80:	dc000317 	ldw	r16,12(sp)
10112e84:	dec00d04 	addi	sp,sp,52
10112e88:	f800283a 	ret
10112e8c:	2404b03a 	or	r2,r4,r16
10112e90:	2027883a 	mov	r19,r4
10112e94:	10004226 	beq	r2,zero,10112fa0 <__muldf3+0x2e4>
10112e98:	8000fc26 	beq	r16,zero,1011328c <__muldf3+0x5d0>
10112e9c:	8009883a 	mov	r4,r16
10112ea0:	d9800215 	stw	r6,8(sp)
10112ea4:	d9c00015 	stw	r7,0(sp)
10112ea8:	da400115 	stw	r9,4(sp)
10112eac:	0113ed40 	call	10113ed4 <__clzsi2>
10112eb0:	d9800217 	ldw	r6,8(sp)
10112eb4:	d9c00017 	ldw	r7,0(sp)
10112eb8:	da400117 	ldw	r9,4(sp)
10112ebc:	113ffd44 	addi	r4,r2,-11
10112ec0:	00c00704 	movi	r3,28
10112ec4:	1900ed16 	blt	r3,r4,1011327c <__muldf3+0x5c0>
10112ec8:	00c00744 	movi	r3,29
10112ecc:	147ffe04 	addi	r17,r2,-8
10112ed0:	1907c83a 	sub	r3,r3,r4
10112ed4:	8460983a 	sll	r16,r16,r17
10112ed8:	98c6d83a 	srl	r3,r19,r3
10112edc:	9c68983a 	sll	r20,r19,r17
10112ee0:	1c20b03a 	or	r16,r3,r16
10112ee4:	1080fcc4 	addi	r2,r2,1011
10112ee8:	00a5c83a 	sub	r18,zero,r2
10112eec:	0027883a 	mov	r19,zero
10112ef0:	0039883a 	mov	fp,zero
10112ef4:	003f9006 	br	10112d38 <_gp+0xffff17a8>
10112ef8:	3446b03a 	or	r3,r6,r17
10112efc:	1800261e 	bne	r3,zero,10112f98 <__muldf3+0x2dc>
10112f00:	0023883a 	mov	r17,zero
10112f04:	0011883a 	mov	r8,zero
10112f08:	01400084 	movi	r5,2
10112f0c:	003f9c06 	br	10112d80 <_gp+0xffff17f0>
10112f10:	3446b03a 	or	r3,r6,r17
10112f14:	18001c26 	beq	r3,zero,10112f88 <__muldf3+0x2cc>
10112f18:	8800ce26 	beq	r17,zero,10113254 <__muldf3+0x598>
10112f1c:	8809883a 	mov	r4,r17
10112f20:	d9800215 	stw	r6,8(sp)
10112f24:	da400115 	stw	r9,4(sp)
10112f28:	da800015 	stw	r10,0(sp)
10112f2c:	0113ed40 	call	10113ed4 <__clzsi2>
10112f30:	d9800217 	ldw	r6,8(sp)
10112f34:	da400117 	ldw	r9,4(sp)
10112f38:	da800017 	ldw	r10,0(sp)
10112f3c:	113ffd44 	addi	r4,r2,-11
10112f40:	00c00704 	movi	r3,28
10112f44:	1900bf16 	blt	r3,r4,10113244 <__muldf3+0x588>
10112f48:	00c00744 	movi	r3,29
10112f4c:	123ffe04 	addi	r8,r2,-8
10112f50:	1907c83a 	sub	r3,r3,r4
10112f54:	8a22983a 	sll	r17,r17,r8
10112f58:	30c6d83a 	srl	r3,r6,r3
10112f5c:	3210983a 	sll	r8,r6,r8
10112f60:	1c62b03a 	or	r17,r3,r17
10112f64:	1080fcc4 	addi	r2,r2,1011
10112f68:	0085c83a 	sub	r2,zero,r2
10112f6c:	000b883a 	mov	r5,zero
10112f70:	003f8306 	br	10112d80 <_gp+0xffff17f0>
10112f74:	b02b883a 	mov	r21,r22
10112f78:	0081ffc4 	movi	r2,2047
10112f7c:	000b883a 	mov	r5,zero
10112f80:	0029883a 	mov	r20,zero
10112f84:	003fac06 	br	10112e38 <_gp+0xffff18a8>
10112f88:	0023883a 	mov	r17,zero
10112f8c:	0011883a 	mov	r8,zero
10112f90:	01400044 	movi	r5,1
10112f94:	003f7a06 	br	10112d80 <_gp+0xffff17f0>
10112f98:	014000c4 	movi	r5,3
10112f9c:	003f7806 	br	10112d80 <_gp+0xffff17f0>
10112fa0:	04c00104 	movi	r19,4
10112fa4:	0021883a 	mov	r16,zero
10112fa8:	0029883a 	mov	r20,zero
10112fac:	07000044 	movi	fp,1
10112fb0:	003f6106 	br	10112d38 <_gp+0xffff17a8>
10112fb4:	04c00304 	movi	r19,12
10112fb8:	070000c4 	movi	fp,3
10112fbc:	003f5e06 	br	10112d38 <_gp+0xffff17a8>
10112fc0:	01400434 	movhi	r5,16
10112fc4:	002b883a 	mov	r21,zero
10112fc8:	297fffc4 	addi	r5,r5,-1
10112fcc:	053fffc4 	movi	r20,-1
10112fd0:	0081ffc4 	movi	r2,2047
10112fd4:	003f9806 	br	10112e38 <_gp+0xffff18a8>
10112fd8:	8023883a 	mov	r17,r16
10112fdc:	a011883a 	mov	r8,r20
10112fe0:	e00b883a 	mov	r5,fp
10112fe4:	003f8a06 	br	10112e10 <_gp+0xffff1880>
10112fe8:	8023883a 	mov	r17,r16
10112fec:	a011883a 	mov	r8,r20
10112ff0:	482d883a 	mov	r22,r9
10112ff4:	e00b883a 	mov	r5,fp
10112ff8:	003f8506 	br	10112e10 <_gp+0xffff1880>
10112ffc:	a00ad43a 	srli	r5,r20,16
10113000:	401ad43a 	srli	r13,r8,16
10113004:	a53fffcc 	andi	r20,r20,65535
10113008:	423fffcc 	andi	r8,r8,65535
1011300c:	4519383a 	mul	r12,r8,r20
10113010:	4147383a 	mul	r3,r8,r5
10113014:	6d09383a 	mul	r4,r13,r20
10113018:	600cd43a 	srli	r6,r12,16
1011301c:	2b5d383a 	mul	r14,r5,r13
10113020:	20c9883a 	add	r4,r4,r3
10113024:	310d883a 	add	r6,r6,r4
10113028:	30c0022e 	bgeu	r6,r3,10113034 <__muldf3+0x378>
1011302c:	00c00074 	movhi	r3,1
10113030:	70dd883a 	add	r14,r14,r3
10113034:	8826d43a 	srli	r19,r17,16
10113038:	8bffffcc 	andi	r15,r17,65535
1011303c:	7d23383a 	mul	r17,r15,r20
10113040:	7949383a 	mul	r4,r15,r5
10113044:	9d29383a 	mul	r20,r19,r20
10113048:	8814d43a 	srli	r10,r17,16
1011304c:	3012943a 	slli	r9,r6,16
10113050:	a129883a 	add	r20,r20,r4
10113054:	633fffcc 	andi	r12,r12,65535
10113058:	5515883a 	add	r10,r10,r20
1011305c:	3006d43a 	srli	r3,r6,16
10113060:	4b13883a 	add	r9,r9,r12
10113064:	2ccb383a 	mul	r5,r5,r19
10113068:	5100022e 	bgeu	r10,r4,10113074 <__muldf3+0x3b8>
1011306c:	01000074 	movhi	r4,1
10113070:	290b883a 	add	r5,r5,r4
10113074:	802ad43a 	srli	r21,r16,16
10113078:	843fffcc 	andi	r16,r16,65535
1011307c:	440d383a 	mul	r6,r8,r16
10113080:	4565383a 	mul	r18,r8,r21
10113084:	8349383a 	mul	r4,r16,r13
10113088:	500e943a 	slli	r7,r10,16
1011308c:	3010d43a 	srli	r8,r6,16
10113090:	5028d43a 	srli	r20,r10,16
10113094:	2489883a 	add	r4,r4,r18
10113098:	8abfffcc 	andi	r10,r17,65535
1011309c:	3a95883a 	add	r10,r7,r10
101130a0:	4119883a 	add	r12,r8,r4
101130a4:	a169883a 	add	r20,r20,r5
101130a8:	1a87883a 	add	r3,r3,r10
101130ac:	6d5b383a 	mul	r13,r13,r21
101130b0:	6480022e 	bgeu	r12,r18,101130bc <__muldf3+0x400>
101130b4:	01000074 	movhi	r4,1
101130b8:	691b883a 	add	r13,r13,r4
101130bc:	7c25383a 	mul	r18,r15,r16
101130c0:	7d4b383a 	mul	r5,r15,r21
101130c4:	84cf383a 	mul	r7,r16,r19
101130c8:	901ed43a 	srli	r15,r18,16
101130cc:	6008d43a 	srli	r4,r12,16
101130d0:	6010943a 	slli	r8,r12,16
101130d4:	394f883a 	add	r7,r7,r5
101130d8:	333fffcc 	andi	r12,r6,65535
101130dc:	79df883a 	add	r15,r15,r7
101130e0:	235b883a 	add	r13,r4,r13
101130e4:	9d63383a 	mul	r17,r19,r21
101130e8:	4309883a 	add	r4,r8,r12
101130ec:	7940022e 	bgeu	r15,r5,101130f8 <__muldf3+0x43c>
101130f0:	01400074 	movhi	r5,1
101130f4:	8963883a 	add	r17,r17,r5
101130f8:	780a943a 	slli	r5,r15,16
101130fc:	91bfffcc 	andi	r6,r18,65535
10113100:	70c7883a 	add	r3,r14,r3
10113104:	298d883a 	add	r6,r5,r6
10113108:	1a8f803a 	cmpltu	r7,r3,r10
1011310c:	350b883a 	add	r5,r6,r20
10113110:	20c7883a 	add	r3,r4,r3
10113114:	3955883a 	add	r10,r7,r5
10113118:	1909803a 	cmpltu	r4,r3,r4
1011311c:	6a91883a 	add	r8,r13,r10
10113120:	780cd43a 	srli	r6,r15,16
10113124:	2219883a 	add	r12,r4,r8
10113128:	2d0b803a 	cmpltu	r5,r5,r20
1011312c:	51cf803a 	cmpltu	r7,r10,r7
10113130:	29ceb03a 	or	r7,r5,r7
10113134:	4351803a 	cmpltu	r8,r8,r13
10113138:	610b803a 	cmpltu	r5,r12,r4
1011313c:	4148b03a 	or	r4,r8,r5
10113140:	398f883a 	add	r7,r7,r6
10113144:	3909883a 	add	r4,r7,r4
10113148:	1810927a 	slli	r8,r3,9
1011314c:	2449883a 	add	r4,r4,r17
10113150:	2008927a 	slli	r4,r4,9
10113154:	6022d5fa 	srli	r17,r12,23
10113158:	1806d5fa 	srli	r3,r3,23
1011315c:	4252b03a 	or	r9,r8,r9
10113160:	600a927a 	slli	r5,r12,9
10113164:	4810c03a 	cmpne	r8,r9,zero
10113168:	2462b03a 	or	r17,r4,r17
1011316c:	40c6b03a 	or	r3,r8,r3
10113170:	8900402c 	andhi	r4,r17,256
10113174:	1950b03a 	or	r8,r3,r5
10113178:	20000726 	beq	r4,zero,10113198 <__muldf3+0x4dc>
1011317c:	4006d07a 	srli	r3,r8,1
10113180:	880497fa 	slli	r2,r17,31
10113184:	4200004c 	andi	r8,r8,1
10113188:	8822d07a 	srli	r17,r17,1
1011318c:	1a10b03a 	or	r8,r3,r8
10113190:	1210b03a 	or	r8,r2,r8
10113194:	5805883a 	mov	r2,r11
10113198:	1140ffc4 	addi	r5,r2,1023
1011319c:	0140440e 	bge	zero,r5,101132b0 <__muldf3+0x5f4>
101131a0:	40c001cc 	andi	r3,r8,7
101131a4:	18000726 	beq	r3,zero,101131c4 <__muldf3+0x508>
101131a8:	40c003cc 	andi	r3,r8,15
101131ac:	01000104 	movi	r4,4
101131b0:	19000426 	beq	r3,r4,101131c4 <__muldf3+0x508>
101131b4:	4107883a 	add	r3,r8,r4
101131b8:	1a11803a 	cmpltu	r8,r3,r8
101131bc:	8a23883a 	add	r17,r17,r8
101131c0:	1811883a 	mov	r8,r3
101131c4:	88c0402c 	andhi	r3,r17,256
101131c8:	18000426 	beq	r3,zero,101131dc <__muldf3+0x520>
101131cc:	11410004 	addi	r5,r2,1024
101131d0:	00bfc034 	movhi	r2,65280
101131d4:	10bfffc4 	addi	r2,r2,-1
101131d8:	88a2703a 	and	r17,r17,r2
101131dc:	0081ff84 	movi	r2,2046
101131e0:	117f6416 	blt	r2,r5,10112f74 <_gp+0xffff19e4>
101131e4:	8828977a 	slli	r20,r17,29
101131e8:	4010d0fa 	srli	r8,r8,3
101131ec:	8822927a 	slli	r17,r17,9
101131f0:	2881ffcc 	andi	r2,r5,2047
101131f4:	a228b03a 	or	r20,r20,r8
101131f8:	880ad33a 	srli	r5,r17,12
101131fc:	b02b883a 	mov	r21,r22
10113200:	003f0d06 	br	10112e38 <_gp+0xffff18a8>
10113204:	8080022c 	andhi	r2,r16,8
10113208:	10000926 	beq	r2,zero,10113230 <__muldf3+0x574>
1011320c:	8880022c 	andhi	r2,r17,8
10113210:	1000071e 	bne	r2,zero,10113230 <__muldf3+0x574>
10113214:	00800434 	movhi	r2,16
10113218:	89400234 	orhi	r5,r17,8
1011321c:	10bfffc4 	addi	r2,r2,-1
10113220:	b82b883a 	mov	r21,r23
10113224:	288a703a 	and	r5,r5,r2
10113228:	4029883a 	mov	r20,r8
1011322c:	003f6806 	br	10112fd0 <_gp+0xffff1a40>
10113230:	00800434 	movhi	r2,16
10113234:	81400234 	orhi	r5,r16,8
10113238:	10bfffc4 	addi	r2,r2,-1
1011323c:	288a703a 	and	r5,r5,r2
10113240:	003f6306 	br	10112fd0 <_gp+0xffff1a40>
10113244:	147ff604 	addi	r17,r2,-40
10113248:	3462983a 	sll	r17,r6,r17
1011324c:	0011883a 	mov	r8,zero
10113250:	003f4406 	br	10112f64 <_gp+0xffff19d4>
10113254:	3009883a 	mov	r4,r6
10113258:	d9800215 	stw	r6,8(sp)
1011325c:	da400115 	stw	r9,4(sp)
10113260:	da800015 	stw	r10,0(sp)
10113264:	0113ed40 	call	10113ed4 <__clzsi2>
10113268:	10800804 	addi	r2,r2,32
1011326c:	da800017 	ldw	r10,0(sp)
10113270:	da400117 	ldw	r9,4(sp)
10113274:	d9800217 	ldw	r6,8(sp)
10113278:	003f3006 	br	10112f3c <_gp+0xffff19ac>
1011327c:	143ff604 	addi	r16,r2,-40
10113280:	9c20983a 	sll	r16,r19,r16
10113284:	0029883a 	mov	r20,zero
10113288:	003f1606 	br	10112ee4 <_gp+0xffff1954>
1011328c:	d9800215 	stw	r6,8(sp)
10113290:	d9c00015 	stw	r7,0(sp)
10113294:	da400115 	stw	r9,4(sp)
10113298:	0113ed40 	call	10113ed4 <__clzsi2>
1011329c:	10800804 	addi	r2,r2,32
101132a0:	da400117 	ldw	r9,4(sp)
101132a4:	d9c00017 	ldw	r7,0(sp)
101132a8:	d9800217 	ldw	r6,8(sp)
101132ac:	003f0306 	br	10112ebc <_gp+0xffff192c>
101132b0:	00c00044 	movi	r3,1
101132b4:	1947c83a 	sub	r3,r3,r5
101132b8:	00800e04 	movi	r2,56
101132bc:	10feda16 	blt	r2,r3,10112e28 <_gp+0xffff1898>
101132c0:	008007c4 	movi	r2,31
101132c4:	10c01b16 	blt	r2,r3,10113334 <__muldf3+0x678>
101132c8:	00800804 	movi	r2,32
101132cc:	10c5c83a 	sub	r2,r2,r3
101132d0:	888a983a 	sll	r5,r17,r2
101132d4:	40c8d83a 	srl	r4,r8,r3
101132d8:	4084983a 	sll	r2,r8,r2
101132dc:	88e2d83a 	srl	r17,r17,r3
101132e0:	2906b03a 	or	r3,r5,r4
101132e4:	1004c03a 	cmpne	r2,r2,zero
101132e8:	1886b03a 	or	r3,r3,r2
101132ec:	188001cc 	andi	r2,r3,7
101132f0:	10000726 	beq	r2,zero,10113310 <__muldf3+0x654>
101132f4:	188003cc 	andi	r2,r3,15
101132f8:	01000104 	movi	r4,4
101132fc:	11000426 	beq	r2,r4,10113310 <__muldf3+0x654>
10113300:	1805883a 	mov	r2,r3
10113304:	10c00104 	addi	r3,r2,4
10113308:	1885803a 	cmpltu	r2,r3,r2
1011330c:	88a3883a 	add	r17,r17,r2
10113310:	8880202c 	andhi	r2,r17,128
10113314:	10001c26 	beq	r2,zero,10113388 <__muldf3+0x6cc>
10113318:	b02b883a 	mov	r21,r22
1011331c:	00800044 	movi	r2,1
10113320:	000b883a 	mov	r5,zero
10113324:	0029883a 	mov	r20,zero
10113328:	003ec306 	br	10112e38 <_gp+0xffff18a8>
1011332c:	5805883a 	mov	r2,r11
10113330:	003f9906 	br	10113198 <_gp+0xffff1c08>
10113334:	00bff844 	movi	r2,-31
10113338:	1145c83a 	sub	r2,r2,r5
1011333c:	8888d83a 	srl	r4,r17,r2
10113340:	00800804 	movi	r2,32
10113344:	18801a26 	beq	r3,r2,101133b0 <__muldf3+0x6f4>
10113348:	00801004 	movi	r2,64
1011334c:	10c5c83a 	sub	r2,r2,r3
10113350:	8884983a 	sll	r2,r17,r2
10113354:	1204b03a 	or	r2,r2,r8
10113358:	1004c03a 	cmpne	r2,r2,zero
1011335c:	2084b03a 	or	r2,r4,r2
10113360:	144001cc 	andi	r17,r2,7
10113364:	88000d1e 	bne	r17,zero,1011339c <__muldf3+0x6e0>
10113368:	000b883a 	mov	r5,zero
1011336c:	1028d0fa 	srli	r20,r2,3
10113370:	b02b883a 	mov	r21,r22
10113374:	0005883a 	mov	r2,zero
10113378:	a468b03a 	or	r20,r20,r17
1011337c:	003eae06 	br	10112e38 <_gp+0xffff18a8>
10113380:	1007883a 	mov	r3,r2
10113384:	0023883a 	mov	r17,zero
10113388:	880a927a 	slli	r5,r17,9
1011338c:	1805883a 	mov	r2,r3
10113390:	8822977a 	slli	r17,r17,29
10113394:	280ad33a 	srli	r5,r5,12
10113398:	003ff406 	br	1011336c <_gp+0xffff1ddc>
1011339c:	10c003cc 	andi	r3,r2,15
101133a0:	01000104 	movi	r4,4
101133a4:	193ff626 	beq	r3,r4,10113380 <_gp+0xffff1df0>
101133a8:	0023883a 	mov	r17,zero
101133ac:	003fd506 	br	10113304 <_gp+0xffff1d74>
101133b0:	0005883a 	mov	r2,zero
101133b4:	003fe706 	br	10113354 <_gp+0xffff1dc4>
101133b8:	00800434 	movhi	r2,16
101133bc:	89400234 	orhi	r5,r17,8
101133c0:	10bfffc4 	addi	r2,r2,-1
101133c4:	b02b883a 	mov	r21,r22
101133c8:	288a703a 	and	r5,r5,r2
101133cc:	4029883a 	mov	r20,r8
101133d0:	003eff06 	br	10112fd0 <_gp+0xffff1a40>

101133d4 <__subdf3>:
101133d4:	02000434 	movhi	r8,16
101133d8:	423fffc4 	addi	r8,r8,-1
101133dc:	defffb04 	addi	sp,sp,-20
101133e0:	2a14703a 	and	r10,r5,r8
101133e4:	3812d53a 	srli	r9,r7,20
101133e8:	3a10703a 	and	r8,r7,r8
101133ec:	2006d77a 	srli	r3,r4,29
101133f0:	3004d77a 	srli	r2,r6,29
101133f4:	dc000015 	stw	r16,0(sp)
101133f8:	501490fa 	slli	r10,r10,3
101133fc:	2820d53a 	srli	r16,r5,20
10113400:	401090fa 	slli	r8,r8,3
10113404:	dc800215 	stw	r18,8(sp)
10113408:	dc400115 	stw	r17,4(sp)
1011340c:	dfc00415 	stw	ra,16(sp)
10113410:	202290fa 	slli	r17,r4,3
10113414:	dcc00315 	stw	r19,12(sp)
10113418:	4a41ffcc 	andi	r9,r9,2047
1011341c:	0101ffc4 	movi	r4,2047
10113420:	2824d7fa 	srli	r18,r5,31
10113424:	8401ffcc 	andi	r16,r16,2047
10113428:	50c6b03a 	or	r3,r10,r3
1011342c:	380ed7fa 	srli	r7,r7,31
10113430:	408ab03a 	or	r5,r8,r2
10113434:	300c90fa 	slli	r6,r6,3
10113438:	49009626 	beq	r9,r4,10113694 <__subdf3+0x2c0>
1011343c:	39c0005c 	xori	r7,r7,1
10113440:	8245c83a 	sub	r2,r16,r9
10113444:	3c807426 	beq	r7,r18,10113618 <__subdf3+0x244>
10113448:	0080af0e 	bge	zero,r2,10113708 <__subdf3+0x334>
1011344c:	48002a1e 	bne	r9,zero,101134f8 <__subdf3+0x124>
10113450:	2988b03a 	or	r4,r5,r6
10113454:	20009a1e 	bne	r4,zero,101136c0 <__subdf3+0x2ec>
10113458:	888001cc 	andi	r2,r17,7
1011345c:	10000726 	beq	r2,zero,1011347c <__subdf3+0xa8>
10113460:	888003cc 	andi	r2,r17,15
10113464:	01000104 	movi	r4,4
10113468:	11000426 	beq	r2,r4,1011347c <__subdf3+0xa8>
1011346c:	890b883a 	add	r5,r17,r4
10113470:	2c63803a 	cmpltu	r17,r5,r17
10113474:	1c47883a 	add	r3,r3,r17
10113478:	2823883a 	mov	r17,r5
1011347c:	1880202c 	andhi	r2,r3,128
10113480:	10005926 	beq	r2,zero,101135e8 <__subdf3+0x214>
10113484:	84000044 	addi	r16,r16,1
10113488:	0081ffc4 	movi	r2,2047
1011348c:	8080be26 	beq	r16,r2,10113788 <__subdf3+0x3b4>
10113490:	017fe034 	movhi	r5,65408
10113494:	297fffc4 	addi	r5,r5,-1
10113498:	1946703a 	and	r3,r3,r5
1011349c:	1804977a 	slli	r2,r3,29
101134a0:	1806927a 	slli	r3,r3,9
101134a4:	8822d0fa 	srli	r17,r17,3
101134a8:	8401ffcc 	andi	r16,r16,2047
101134ac:	180ad33a 	srli	r5,r3,12
101134b0:	9100004c 	andi	r4,r18,1
101134b4:	1444b03a 	or	r2,r2,r17
101134b8:	80c1ffcc 	andi	r3,r16,2047
101134bc:	1820953a 	slli	r16,r3,20
101134c0:	20c03fcc 	andi	r3,r4,255
101134c4:	180897fa 	slli	r4,r3,31
101134c8:	00c00434 	movhi	r3,16
101134cc:	18ffffc4 	addi	r3,r3,-1
101134d0:	28c6703a 	and	r3,r5,r3
101134d4:	1c06b03a 	or	r3,r3,r16
101134d8:	1906b03a 	or	r3,r3,r4
101134dc:	dfc00417 	ldw	ra,16(sp)
101134e0:	dcc00317 	ldw	r19,12(sp)
101134e4:	dc800217 	ldw	r18,8(sp)
101134e8:	dc400117 	ldw	r17,4(sp)
101134ec:	dc000017 	ldw	r16,0(sp)
101134f0:	dec00504 	addi	sp,sp,20
101134f4:	f800283a 	ret
101134f8:	0101ffc4 	movi	r4,2047
101134fc:	813fd626 	beq	r16,r4,10113458 <_gp+0xffff1ec8>
10113500:	29402034 	orhi	r5,r5,128
10113504:	01000e04 	movi	r4,56
10113508:	2080a316 	blt	r4,r2,10113798 <__subdf3+0x3c4>
1011350c:	010007c4 	movi	r4,31
10113510:	2080c616 	blt	r4,r2,1011382c <__subdf3+0x458>
10113514:	01000804 	movi	r4,32
10113518:	2089c83a 	sub	r4,r4,r2
1011351c:	2910983a 	sll	r8,r5,r4
10113520:	308ed83a 	srl	r7,r6,r2
10113524:	3108983a 	sll	r4,r6,r4
10113528:	2884d83a 	srl	r2,r5,r2
1011352c:	41ccb03a 	or	r6,r8,r7
10113530:	2008c03a 	cmpne	r4,r4,zero
10113534:	310cb03a 	or	r6,r6,r4
10113538:	898dc83a 	sub	r6,r17,r6
1011353c:	89a3803a 	cmpltu	r17,r17,r6
10113540:	1887c83a 	sub	r3,r3,r2
10113544:	1c47c83a 	sub	r3,r3,r17
10113548:	3023883a 	mov	r17,r6
1011354c:	1880202c 	andhi	r2,r3,128
10113550:	10002326 	beq	r2,zero,101135e0 <__subdf3+0x20c>
10113554:	04c02034 	movhi	r19,128
10113558:	9cffffc4 	addi	r19,r19,-1
1011355c:	1ce6703a 	and	r19,r3,r19
10113560:	98007a26 	beq	r19,zero,1011374c <__subdf3+0x378>
10113564:	9809883a 	mov	r4,r19
10113568:	0113ed40 	call	10113ed4 <__clzsi2>
1011356c:	113ffe04 	addi	r4,r2,-8
10113570:	00c007c4 	movi	r3,31
10113574:	19007b16 	blt	r3,r4,10113764 <__subdf3+0x390>
10113578:	00800804 	movi	r2,32
1011357c:	1105c83a 	sub	r2,r2,r4
10113580:	8884d83a 	srl	r2,r17,r2
10113584:	9906983a 	sll	r3,r19,r4
10113588:	8922983a 	sll	r17,r17,r4
1011358c:	10c4b03a 	or	r2,r2,r3
10113590:	24007816 	blt	r4,r16,10113774 <__subdf3+0x3a0>
10113594:	2421c83a 	sub	r16,r4,r16
10113598:	80c00044 	addi	r3,r16,1
1011359c:	010007c4 	movi	r4,31
101135a0:	20c09516 	blt	r4,r3,101137f8 <__subdf3+0x424>
101135a4:	01400804 	movi	r5,32
101135a8:	28cbc83a 	sub	r5,r5,r3
101135ac:	88c8d83a 	srl	r4,r17,r3
101135b0:	8962983a 	sll	r17,r17,r5
101135b4:	114a983a 	sll	r5,r2,r5
101135b8:	10c6d83a 	srl	r3,r2,r3
101135bc:	8804c03a 	cmpne	r2,r17,zero
101135c0:	290ab03a 	or	r5,r5,r4
101135c4:	28a2b03a 	or	r17,r5,r2
101135c8:	0021883a 	mov	r16,zero
101135cc:	003fa206 	br	10113458 <_gp+0xffff1ec8>
101135d0:	2090b03a 	or	r8,r4,r2
101135d4:	40018e26 	beq	r8,zero,10113c10 <__subdf3+0x83c>
101135d8:	1007883a 	mov	r3,r2
101135dc:	2023883a 	mov	r17,r4
101135e0:	888001cc 	andi	r2,r17,7
101135e4:	103f9e1e 	bne	r2,zero,10113460 <_gp+0xffff1ed0>
101135e8:	1804977a 	slli	r2,r3,29
101135ec:	8822d0fa 	srli	r17,r17,3
101135f0:	1810d0fa 	srli	r8,r3,3
101135f4:	9100004c 	andi	r4,r18,1
101135f8:	1444b03a 	or	r2,r2,r17
101135fc:	00c1ffc4 	movi	r3,2047
10113600:	80c02826 	beq	r16,r3,101136a4 <__subdf3+0x2d0>
10113604:	01400434 	movhi	r5,16
10113608:	297fffc4 	addi	r5,r5,-1
1011360c:	80e0703a 	and	r16,r16,r3
10113610:	414a703a 	and	r5,r8,r5
10113614:	003fa806 	br	101134b8 <_gp+0xffff1f28>
10113618:	0080630e 	bge	zero,r2,101137a8 <__subdf3+0x3d4>
1011361c:	48003026 	beq	r9,zero,101136e0 <__subdf3+0x30c>
10113620:	0101ffc4 	movi	r4,2047
10113624:	813f8c26 	beq	r16,r4,10113458 <_gp+0xffff1ec8>
10113628:	29402034 	orhi	r5,r5,128
1011362c:	01000e04 	movi	r4,56
10113630:	2080a90e 	bge	r4,r2,101138d8 <__subdf3+0x504>
10113634:	298cb03a 	or	r6,r5,r6
10113638:	3012c03a 	cmpne	r9,r6,zero
1011363c:	0005883a 	mov	r2,zero
10113640:	4c53883a 	add	r9,r9,r17
10113644:	4c63803a 	cmpltu	r17,r9,r17
10113648:	10c7883a 	add	r3,r2,r3
1011364c:	88c7883a 	add	r3,r17,r3
10113650:	4823883a 	mov	r17,r9
10113654:	1880202c 	andhi	r2,r3,128
10113658:	1000d026 	beq	r2,zero,1011399c <__subdf3+0x5c8>
1011365c:	84000044 	addi	r16,r16,1
10113660:	0081ffc4 	movi	r2,2047
10113664:	8080fe26 	beq	r16,r2,10113a60 <__subdf3+0x68c>
10113668:	00bfe034 	movhi	r2,65408
1011366c:	10bfffc4 	addi	r2,r2,-1
10113670:	1886703a 	and	r3,r3,r2
10113674:	880ad07a 	srli	r5,r17,1
10113678:	180497fa 	slli	r2,r3,31
1011367c:	8900004c 	andi	r4,r17,1
10113680:	2922b03a 	or	r17,r5,r4
10113684:	1806d07a 	srli	r3,r3,1
10113688:	1462b03a 	or	r17,r2,r17
1011368c:	3825883a 	mov	r18,r7
10113690:	003f7106 	br	10113458 <_gp+0xffff1ec8>
10113694:	2984b03a 	or	r2,r5,r6
10113698:	103f6826 	beq	r2,zero,1011343c <_gp+0xffff1eac>
1011369c:	39c03fcc 	andi	r7,r7,255
101136a0:	003f6706 	br	10113440 <_gp+0xffff1eb0>
101136a4:	4086b03a 	or	r3,r8,r2
101136a8:	18015226 	beq	r3,zero,10113bf4 <__subdf3+0x820>
101136ac:	00c00434 	movhi	r3,16
101136b0:	41400234 	orhi	r5,r8,8
101136b4:	18ffffc4 	addi	r3,r3,-1
101136b8:	28ca703a 	and	r5,r5,r3
101136bc:	003f7e06 	br	101134b8 <_gp+0xffff1f28>
101136c0:	10bfffc4 	addi	r2,r2,-1
101136c4:	1000491e 	bne	r2,zero,101137ec <__subdf3+0x418>
101136c8:	898fc83a 	sub	r7,r17,r6
101136cc:	89e3803a 	cmpltu	r17,r17,r7
101136d0:	1947c83a 	sub	r3,r3,r5
101136d4:	1c47c83a 	sub	r3,r3,r17
101136d8:	3823883a 	mov	r17,r7
101136dc:	003f9b06 	br	1011354c <_gp+0xffff1fbc>
101136e0:	2988b03a 	or	r4,r5,r6
101136e4:	203f5c26 	beq	r4,zero,10113458 <_gp+0xffff1ec8>
101136e8:	10bfffc4 	addi	r2,r2,-1
101136ec:	1000931e 	bne	r2,zero,1011393c <__subdf3+0x568>
101136f0:	898d883a 	add	r6,r17,r6
101136f4:	3463803a 	cmpltu	r17,r6,r17
101136f8:	1947883a 	add	r3,r3,r5
101136fc:	88c7883a 	add	r3,r17,r3
10113700:	3023883a 	mov	r17,r6
10113704:	003fd306 	br	10113654 <_gp+0xffff20c4>
10113708:	1000541e 	bne	r2,zero,1011385c <__subdf3+0x488>
1011370c:	80800044 	addi	r2,r16,1
10113710:	1081ffcc 	andi	r2,r2,2047
10113714:	01000044 	movi	r4,1
10113718:	2080a20e 	bge	r4,r2,101139a4 <__subdf3+0x5d0>
1011371c:	8989c83a 	sub	r4,r17,r6
10113720:	8905803a 	cmpltu	r2,r17,r4
10113724:	1967c83a 	sub	r19,r3,r5
10113728:	98a7c83a 	sub	r19,r19,r2
1011372c:	9880202c 	andhi	r2,r19,128
10113730:	10006326 	beq	r2,zero,101138c0 <__subdf3+0x4ec>
10113734:	3463c83a 	sub	r17,r6,r17
10113738:	28c7c83a 	sub	r3,r5,r3
1011373c:	344d803a 	cmpltu	r6,r6,r17
10113740:	19a7c83a 	sub	r19,r3,r6
10113744:	3825883a 	mov	r18,r7
10113748:	983f861e 	bne	r19,zero,10113564 <_gp+0xffff1fd4>
1011374c:	8809883a 	mov	r4,r17
10113750:	0113ed40 	call	10113ed4 <__clzsi2>
10113754:	10800804 	addi	r2,r2,32
10113758:	113ffe04 	addi	r4,r2,-8
1011375c:	00c007c4 	movi	r3,31
10113760:	193f850e 	bge	r3,r4,10113578 <_gp+0xffff1fe8>
10113764:	10bff604 	addi	r2,r2,-40
10113768:	8884983a 	sll	r2,r17,r2
1011376c:	0023883a 	mov	r17,zero
10113770:	243f880e 	bge	r4,r16,10113594 <_gp+0xffff2004>
10113774:	00ffe034 	movhi	r3,65408
10113778:	18ffffc4 	addi	r3,r3,-1
1011377c:	8121c83a 	sub	r16,r16,r4
10113780:	10c6703a 	and	r3,r2,r3
10113784:	003f3406 	br	10113458 <_gp+0xffff1ec8>
10113788:	9100004c 	andi	r4,r18,1
1011378c:	000b883a 	mov	r5,zero
10113790:	0005883a 	mov	r2,zero
10113794:	003f4806 	br	101134b8 <_gp+0xffff1f28>
10113798:	298cb03a 	or	r6,r5,r6
1011379c:	300cc03a 	cmpne	r6,r6,zero
101137a0:	0005883a 	mov	r2,zero
101137a4:	003f6406 	br	10113538 <_gp+0xffff1fa8>
101137a8:	10009a1e 	bne	r2,zero,10113a14 <__subdf3+0x640>
101137ac:	82400044 	addi	r9,r16,1
101137b0:	4881ffcc 	andi	r2,r9,2047
101137b4:	02800044 	movi	r10,1
101137b8:	5080670e 	bge	r10,r2,10113958 <__subdf3+0x584>
101137bc:	0081ffc4 	movi	r2,2047
101137c0:	4880af26 	beq	r9,r2,10113a80 <__subdf3+0x6ac>
101137c4:	898d883a 	add	r6,r17,r6
101137c8:	1945883a 	add	r2,r3,r5
101137cc:	3447803a 	cmpltu	r3,r6,r17
101137d0:	1887883a 	add	r3,r3,r2
101137d4:	182297fa 	slli	r17,r3,31
101137d8:	300cd07a 	srli	r6,r6,1
101137dc:	1806d07a 	srli	r3,r3,1
101137e0:	4821883a 	mov	r16,r9
101137e4:	89a2b03a 	or	r17,r17,r6
101137e8:	003f1b06 	br	10113458 <_gp+0xffff1ec8>
101137ec:	0101ffc4 	movi	r4,2047
101137f0:	813f441e 	bne	r16,r4,10113504 <_gp+0xffff1f74>
101137f4:	003f1806 	br	10113458 <_gp+0xffff1ec8>
101137f8:	843ff844 	addi	r16,r16,-31
101137fc:	01400804 	movi	r5,32
10113800:	1408d83a 	srl	r4,r2,r16
10113804:	19405026 	beq	r3,r5,10113948 <__subdf3+0x574>
10113808:	01401004 	movi	r5,64
1011380c:	28c7c83a 	sub	r3,r5,r3
10113810:	10c4983a 	sll	r2,r2,r3
10113814:	88a2b03a 	or	r17,r17,r2
10113818:	8822c03a 	cmpne	r17,r17,zero
1011381c:	2462b03a 	or	r17,r4,r17
10113820:	0007883a 	mov	r3,zero
10113824:	0021883a 	mov	r16,zero
10113828:	003f6d06 	br	101135e0 <_gp+0xffff2050>
1011382c:	11fff804 	addi	r7,r2,-32
10113830:	01000804 	movi	r4,32
10113834:	29ced83a 	srl	r7,r5,r7
10113838:	11004526 	beq	r2,r4,10113950 <__subdf3+0x57c>
1011383c:	01001004 	movi	r4,64
10113840:	2089c83a 	sub	r4,r4,r2
10113844:	2904983a 	sll	r2,r5,r4
10113848:	118cb03a 	or	r6,r2,r6
1011384c:	300cc03a 	cmpne	r6,r6,zero
10113850:	398cb03a 	or	r6,r7,r6
10113854:	0005883a 	mov	r2,zero
10113858:	003f3706 	br	10113538 <_gp+0xffff1fa8>
1011385c:	80002a26 	beq	r16,zero,10113908 <__subdf3+0x534>
10113860:	0101ffc4 	movi	r4,2047
10113864:	49006626 	beq	r9,r4,10113a00 <__subdf3+0x62c>
10113868:	0085c83a 	sub	r2,zero,r2
1011386c:	18c02034 	orhi	r3,r3,128
10113870:	01000e04 	movi	r4,56
10113874:	20807e16 	blt	r4,r2,10113a70 <__subdf3+0x69c>
10113878:	010007c4 	movi	r4,31
1011387c:	2080e716 	blt	r4,r2,10113c1c <__subdf3+0x848>
10113880:	01000804 	movi	r4,32
10113884:	2089c83a 	sub	r4,r4,r2
10113888:	1914983a 	sll	r10,r3,r4
1011388c:	8890d83a 	srl	r8,r17,r2
10113890:	8908983a 	sll	r4,r17,r4
10113894:	1884d83a 	srl	r2,r3,r2
10113898:	5222b03a 	or	r17,r10,r8
1011389c:	2006c03a 	cmpne	r3,r4,zero
101138a0:	88e2b03a 	or	r17,r17,r3
101138a4:	3463c83a 	sub	r17,r6,r17
101138a8:	2885c83a 	sub	r2,r5,r2
101138ac:	344d803a 	cmpltu	r6,r6,r17
101138b0:	1187c83a 	sub	r3,r2,r6
101138b4:	4821883a 	mov	r16,r9
101138b8:	3825883a 	mov	r18,r7
101138bc:	003f2306 	br	1011354c <_gp+0xffff1fbc>
101138c0:	24d0b03a 	or	r8,r4,r19
101138c4:	40001b1e 	bne	r8,zero,10113934 <__subdf3+0x560>
101138c8:	0005883a 	mov	r2,zero
101138cc:	0009883a 	mov	r4,zero
101138d0:	0021883a 	mov	r16,zero
101138d4:	003f4906 	br	101135fc <_gp+0xffff206c>
101138d8:	010007c4 	movi	r4,31
101138dc:	20803a16 	blt	r4,r2,101139c8 <__subdf3+0x5f4>
101138e0:	01000804 	movi	r4,32
101138e4:	2089c83a 	sub	r4,r4,r2
101138e8:	2912983a 	sll	r9,r5,r4
101138ec:	3090d83a 	srl	r8,r6,r2
101138f0:	3108983a 	sll	r4,r6,r4
101138f4:	2884d83a 	srl	r2,r5,r2
101138f8:	4a12b03a 	or	r9,r9,r8
101138fc:	2008c03a 	cmpne	r4,r4,zero
10113900:	4912b03a 	or	r9,r9,r4
10113904:	003f4e06 	br	10113640 <_gp+0xffff20b0>
10113908:	1c48b03a 	or	r4,r3,r17
1011390c:	20003c26 	beq	r4,zero,10113a00 <__subdf3+0x62c>
10113910:	0084303a 	nor	r2,zero,r2
10113914:	1000381e 	bne	r2,zero,101139f8 <__subdf3+0x624>
10113918:	3463c83a 	sub	r17,r6,r17
1011391c:	28c5c83a 	sub	r2,r5,r3
10113920:	344d803a 	cmpltu	r6,r6,r17
10113924:	1187c83a 	sub	r3,r2,r6
10113928:	4821883a 	mov	r16,r9
1011392c:	3825883a 	mov	r18,r7
10113930:	003f0606 	br	1011354c <_gp+0xffff1fbc>
10113934:	2023883a 	mov	r17,r4
10113938:	003f0906 	br	10113560 <_gp+0xffff1fd0>
1011393c:	0101ffc4 	movi	r4,2047
10113940:	813f3a1e 	bne	r16,r4,1011362c <_gp+0xffff209c>
10113944:	003ec406 	br	10113458 <_gp+0xffff1ec8>
10113948:	0005883a 	mov	r2,zero
1011394c:	003fb106 	br	10113814 <_gp+0xffff2284>
10113950:	0005883a 	mov	r2,zero
10113954:	003fbc06 	br	10113848 <_gp+0xffff22b8>
10113958:	1c44b03a 	or	r2,r3,r17
1011395c:	80008e1e 	bne	r16,zero,10113b98 <__subdf3+0x7c4>
10113960:	1000c826 	beq	r2,zero,10113c84 <__subdf3+0x8b0>
10113964:	2984b03a 	or	r2,r5,r6
10113968:	103ebb26 	beq	r2,zero,10113458 <_gp+0xffff1ec8>
1011396c:	8989883a 	add	r4,r17,r6
10113970:	1945883a 	add	r2,r3,r5
10113974:	2447803a 	cmpltu	r3,r4,r17
10113978:	1887883a 	add	r3,r3,r2
1011397c:	1880202c 	andhi	r2,r3,128
10113980:	2023883a 	mov	r17,r4
10113984:	103f1626 	beq	r2,zero,101135e0 <_gp+0xffff2050>
10113988:	00bfe034 	movhi	r2,65408
1011398c:	10bfffc4 	addi	r2,r2,-1
10113990:	5021883a 	mov	r16,r10
10113994:	1886703a 	and	r3,r3,r2
10113998:	003eaf06 	br	10113458 <_gp+0xffff1ec8>
1011399c:	3825883a 	mov	r18,r7
101139a0:	003f0f06 	br	101135e0 <_gp+0xffff2050>
101139a4:	1c44b03a 	or	r2,r3,r17
101139a8:	8000251e 	bne	r16,zero,10113a40 <__subdf3+0x66c>
101139ac:	1000661e 	bne	r2,zero,10113b48 <__subdf3+0x774>
101139b0:	2990b03a 	or	r8,r5,r6
101139b4:	40009626 	beq	r8,zero,10113c10 <__subdf3+0x83c>
101139b8:	2807883a 	mov	r3,r5
101139bc:	3023883a 	mov	r17,r6
101139c0:	3825883a 	mov	r18,r7
101139c4:	003ea406 	br	10113458 <_gp+0xffff1ec8>
101139c8:	127ff804 	addi	r9,r2,-32
101139cc:	01000804 	movi	r4,32
101139d0:	2a52d83a 	srl	r9,r5,r9
101139d4:	11008c26 	beq	r2,r4,10113c08 <__subdf3+0x834>
101139d8:	01001004 	movi	r4,64
101139dc:	2085c83a 	sub	r2,r4,r2
101139e0:	2884983a 	sll	r2,r5,r2
101139e4:	118cb03a 	or	r6,r2,r6
101139e8:	300cc03a 	cmpne	r6,r6,zero
101139ec:	4992b03a 	or	r9,r9,r6
101139f0:	0005883a 	mov	r2,zero
101139f4:	003f1206 	br	10113640 <_gp+0xffff20b0>
101139f8:	0101ffc4 	movi	r4,2047
101139fc:	493f9c1e 	bne	r9,r4,10113870 <_gp+0xffff22e0>
10113a00:	2807883a 	mov	r3,r5
10113a04:	3023883a 	mov	r17,r6
10113a08:	4821883a 	mov	r16,r9
10113a0c:	3825883a 	mov	r18,r7
10113a10:	003e9106 	br	10113458 <_gp+0xffff1ec8>
10113a14:	80001f1e 	bne	r16,zero,10113a94 <__subdf3+0x6c0>
10113a18:	1c48b03a 	or	r4,r3,r17
10113a1c:	20005a26 	beq	r4,zero,10113b88 <__subdf3+0x7b4>
10113a20:	0084303a 	nor	r2,zero,r2
10113a24:	1000561e 	bne	r2,zero,10113b80 <__subdf3+0x7ac>
10113a28:	89a3883a 	add	r17,r17,r6
10113a2c:	1945883a 	add	r2,r3,r5
10113a30:	898d803a 	cmpltu	r6,r17,r6
10113a34:	3087883a 	add	r3,r6,r2
10113a38:	4821883a 	mov	r16,r9
10113a3c:	003f0506 	br	10113654 <_gp+0xffff20c4>
10113a40:	10002b1e 	bne	r2,zero,10113af0 <__subdf3+0x71c>
10113a44:	2984b03a 	or	r2,r5,r6
10113a48:	10008026 	beq	r2,zero,10113c4c <__subdf3+0x878>
10113a4c:	2807883a 	mov	r3,r5
10113a50:	3023883a 	mov	r17,r6
10113a54:	3825883a 	mov	r18,r7
10113a58:	0401ffc4 	movi	r16,2047
10113a5c:	003e7e06 	br	10113458 <_gp+0xffff1ec8>
10113a60:	3809883a 	mov	r4,r7
10113a64:	0011883a 	mov	r8,zero
10113a68:	0005883a 	mov	r2,zero
10113a6c:	003ee306 	br	101135fc <_gp+0xffff206c>
10113a70:	1c62b03a 	or	r17,r3,r17
10113a74:	8822c03a 	cmpne	r17,r17,zero
10113a78:	0005883a 	mov	r2,zero
10113a7c:	003f8906 	br	101138a4 <_gp+0xffff2314>
10113a80:	3809883a 	mov	r4,r7
10113a84:	4821883a 	mov	r16,r9
10113a88:	0011883a 	mov	r8,zero
10113a8c:	0005883a 	mov	r2,zero
10113a90:	003eda06 	br	101135fc <_gp+0xffff206c>
10113a94:	0101ffc4 	movi	r4,2047
10113a98:	49003b26 	beq	r9,r4,10113b88 <__subdf3+0x7b4>
10113a9c:	0085c83a 	sub	r2,zero,r2
10113aa0:	18c02034 	orhi	r3,r3,128
10113aa4:	01000e04 	movi	r4,56
10113aa8:	20806e16 	blt	r4,r2,10113c64 <__subdf3+0x890>
10113aac:	010007c4 	movi	r4,31
10113ab0:	20807716 	blt	r4,r2,10113c90 <__subdf3+0x8bc>
10113ab4:	01000804 	movi	r4,32
10113ab8:	2089c83a 	sub	r4,r4,r2
10113abc:	1914983a 	sll	r10,r3,r4
10113ac0:	8890d83a 	srl	r8,r17,r2
10113ac4:	8908983a 	sll	r4,r17,r4
10113ac8:	1884d83a 	srl	r2,r3,r2
10113acc:	5222b03a 	or	r17,r10,r8
10113ad0:	2006c03a 	cmpne	r3,r4,zero
10113ad4:	88e2b03a 	or	r17,r17,r3
10113ad8:	89a3883a 	add	r17,r17,r6
10113adc:	1145883a 	add	r2,r2,r5
10113ae0:	898d803a 	cmpltu	r6,r17,r6
10113ae4:	3087883a 	add	r3,r6,r2
10113ae8:	4821883a 	mov	r16,r9
10113aec:	003ed906 	br	10113654 <_gp+0xffff20c4>
10113af0:	2984b03a 	or	r2,r5,r6
10113af4:	10004226 	beq	r2,zero,10113c00 <__subdf3+0x82c>
10113af8:	1808d0fa 	srli	r4,r3,3
10113afc:	8822d0fa 	srli	r17,r17,3
10113b00:	1806977a 	slli	r3,r3,29
10113b04:	2080022c 	andhi	r2,r4,8
10113b08:	1c62b03a 	or	r17,r3,r17
10113b0c:	10000826 	beq	r2,zero,10113b30 <__subdf3+0x75c>
10113b10:	2812d0fa 	srli	r9,r5,3
10113b14:	4880022c 	andhi	r2,r9,8
10113b18:	1000051e 	bne	r2,zero,10113b30 <__subdf3+0x75c>
10113b1c:	300cd0fa 	srli	r6,r6,3
10113b20:	2804977a 	slli	r2,r5,29
10113b24:	4809883a 	mov	r4,r9
10113b28:	3825883a 	mov	r18,r7
10113b2c:	11a2b03a 	or	r17,r2,r6
10113b30:	8806d77a 	srli	r3,r17,29
10113b34:	200890fa 	slli	r4,r4,3
10113b38:	882290fa 	slli	r17,r17,3
10113b3c:	0401ffc4 	movi	r16,2047
10113b40:	1906b03a 	or	r3,r3,r4
10113b44:	003e4406 	br	10113458 <_gp+0xffff1ec8>
10113b48:	2984b03a 	or	r2,r5,r6
10113b4c:	103e4226 	beq	r2,zero,10113458 <_gp+0xffff1ec8>
10113b50:	8989c83a 	sub	r4,r17,r6
10113b54:	8911803a 	cmpltu	r8,r17,r4
10113b58:	1945c83a 	sub	r2,r3,r5
10113b5c:	1205c83a 	sub	r2,r2,r8
10113b60:	1200202c 	andhi	r8,r2,128
10113b64:	403e9a26 	beq	r8,zero,101135d0 <_gp+0xffff2040>
10113b68:	3463c83a 	sub	r17,r6,r17
10113b6c:	28c5c83a 	sub	r2,r5,r3
10113b70:	344d803a 	cmpltu	r6,r6,r17
10113b74:	1187c83a 	sub	r3,r2,r6
10113b78:	3825883a 	mov	r18,r7
10113b7c:	003e3606 	br	10113458 <_gp+0xffff1ec8>
10113b80:	0101ffc4 	movi	r4,2047
10113b84:	493fc71e 	bne	r9,r4,10113aa4 <_gp+0xffff2514>
10113b88:	2807883a 	mov	r3,r5
10113b8c:	3023883a 	mov	r17,r6
10113b90:	4821883a 	mov	r16,r9
10113b94:	003e3006 	br	10113458 <_gp+0xffff1ec8>
10113b98:	10003626 	beq	r2,zero,10113c74 <__subdf3+0x8a0>
10113b9c:	2984b03a 	or	r2,r5,r6
10113ba0:	10001726 	beq	r2,zero,10113c00 <__subdf3+0x82c>
10113ba4:	1808d0fa 	srli	r4,r3,3
10113ba8:	8822d0fa 	srli	r17,r17,3
10113bac:	1806977a 	slli	r3,r3,29
10113bb0:	2080022c 	andhi	r2,r4,8
10113bb4:	1c62b03a 	or	r17,r3,r17
10113bb8:	10000726 	beq	r2,zero,10113bd8 <__subdf3+0x804>
10113bbc:	2812d0fa 	srli	r9,r5,3
10113bc0:	4880022c 	andhi	r2,r9,8
10113bc4:	1000041e 	bne	r2,zero,10113bd8 <__subdf3+0x804>
10113bc8:	300cd0fa 	srli	r6,r6,3
10113bcc:	2804977a 	slli	r2,r5,29
10113bd0:	4809883a 	mov	r4,r9
10113bd4:	11a2b03a 	or	r17,r2,r6
10113bd8:	8806d77a 	srli	r3,r17,29
10113bdc:	200890fa 	slli	r4,r4,3
10113be0:	882290fa 	slli	r17,r17,3
10113be4:	3825883a 	mov	r18,r7
10113be8:	1906b03a 	or	r3,r3,r4
10113bec:	0401ffc4 	movi	r16,2047
10113bf0:	003e1906 	br	10113458 <_gp+0xffff1ec8>
10113bf4:	000b883a 	mov	r5,zero
10113bf8:	0005883a 	mov	r2,zero
10113bfc:	003e2e06 	br	101134b8 <_gp+0xffff1f28>
10113c00:	0401ffc4 	movi	r16,2047
10113c04:	003e1406 	br	10113458 <_gp+0xffff1ec8>
10113c08:	0005883a 	mov	r2,zero
10113c0c:	003f7506 	br	101139e4 <_gp+0xffff2454>
10113c10:	0005883a 	mov	r2,zero
10113c14:	0009883a 	mov	r4,zero
10113c18:	003e7806 	br	101135fc <_gp+0xffff206c>
10113c1c:	123ff804 	addi	r8,r2,-32
10113c20:	01000804 	movi	r4,32
10113c24:	1a10d83a 	srl	r8,r3,r8
10113c28:	11002526 	beq	r2,r4,10113cc0 <__subdf3+0x8ec>
10113c2c:	01001004 	movi	r4,64
10113c30:	2085c83a 	sub	r2,r4,r2
10113c34:	1884983a 	sll	r2,r3,r2
10113c38:	1444b03a 	or	r2,r2,r17
10113c3c:	1004c03a 	cmpne	r2,r2,zero
10113c40:	40a2b03a 	or	r17,r8,r2
10113c44:	0005883a 	mov	r2,zero
10113c48:	003f1606 	br	101138a4 <_gp+0xffff2314>
10113c4c:	02000434 	movhi	r8,16
10113c50:	0009883a 	mov	r4,zero
10113c54:	423fffc4 	addi	r8,r8,-1
10113c58:	00bfffc4 	movi	r2,-1
10113c5c:	0401ffc4 	movi	r16,2047
10113c60:	003e6606 	br	101135fc <_gp+0xffff206c>
10113c64:	1c62b03a 	or	r17,r3,r17
10113c68:	8822c03a 	cmpne	r17,r17,zero
10113c6c:	0005883a 	mov	r2,zero
10113c70:	003f9906 	br	10113ad8 <_gp+0xffff2548>
10113c74:	2807883a 	mov	r3,r5
10113c78:	3023883a 	mov	r17,r6
10113c7c:	0401ffc4 	movi	r16,2047
10113c80:	003df506 	br	10113458 <_gp+0xffff1ec8>
10113c84:	2807883a 	mov	r3,r5
10113c88:	3023883a 	mov	r17,r6
10113c8c:	003df206 	br	10113458 <_gp+0xffff1ec8>
10113c90:	123ff804 	addi	r8,r2,-32
10113c94:	01000804 	movi	r4,32
10113c98:	1a10d83a 	srl	r8,r3,r8
10113c9c:	11000a26 	beq	r2,r4,10113cc8 <__subdf3+0x8f4>
10113ca0:	01001004 	movi	r4,64
10113ca4:	2085c83a 	sub	r2,r4,r2
10113ca8:	1884983a 	sll	r2,r3,r2
10113cac:	1444b03a 	or	r2,r2,r17
10113cb0:	1004c03a 	cmpne	r2,r2,zero
10113cb4:	40a2b03a 	or	r17,r8,r2
10113cb8:	0005883a 	mov	r2,zero
10113cbc:	003f8606 	br	10113ad8 <_gp+0xffff2548>
10113cc0:	0005883a 	mov	r2,zero
10113cc4:	003fdc06 	br	10113c38 <_gp+0xffff26a8>
10113cc8:	0005883a 	mov	r2,zero
10113ccc:	003ff706 	br	10113cac <_gp+0xffff271c>

10113cd0 <__fixdfsi>:
10113cd0:	280cd53a 	srli	r6,r5,20
10113cd4:	00c00434 	movhi	r3,16
10113cd8:	18ffffc4 	addi	r3,r3,-1
10113cdc:	3181ffcc 	andi	r6,r6,2047
10113ce0:	01c0ff84 	movi	r7,1022
10113ce4:	28c6703a 	and	r3,r5,r3
10113ce8:	280ad7fa 	srli	r5,r5,31
10113cec:	3980120e 	bge	r7,r6,10113d38 <__fixdfsi+0x68>
10113cf0:	00810744 	movi	r2,1053
10113cf4:	11800c16 	blt	r2,r6,10113d28 <__fixdfsi+0x58>
10113cf8:	00810cc4 	movi	r2,1075
10113cfc:	1185c83a 	sub	r2,r2,r6
10113d00:	01c007c4 	movi	r7,31
10113d04:	18c00434 	orhi	r3,r3,16
10113d08:	38800d16 	blt	r7,r2,10113d40 <__fixdfsi+0x70>
10113d0c:	31befb44 	addi	r6,r6,-1043
10113d10:	2084d83a 	srl	r2,r4,r2
10113d14:	1986983a 	sll	r3,r3,r6
10113d18:	1884b03a 	or	r2,r3,r2
10113d1c:	28000726 	beq	r5,zero,10113d3c <__fixdfsi+0x6c>
10113d20:	0085c83a 	sub	r2,zero,r2
10113d24:	f800283a 	ret
10113d28:	00a00034 	movhi	r2,32768
10113d2c:	10bfffc4 	addi	r2,r2,-1
10113d30:	2885883a 	add	r2,r5,r2
10113d34:	f800283a 	ret
10113d38:	0005883a 	mov	r2,zero
10113d3c:	f800283a 	ret
10113d40:	008104c4 	movi	r2,1043
10113d44:	1185c83a 	sub	r2,r2,r6
10113d48:	1884d83a 	srl	r2,r3,r2
10113d4c:	003ff306 	br	10113d1c <_gp+0xffff278c>

10113d50 <__floatsidf>:
10113d50:	defffd04 	addi	sp,sp,-12
10113d54:	dfc00215 	stw	ra,8(sp)
10113d58:	dc400115 	stw	r17,4(sp)
10113d5c:	dc000015 	stw	r16,0(sp)
10113d60:	20002b26 	beq	r4,zero,10113e10 <__floatsidf+0xc0>
10113d64:	2023883a 	mov	r17,r4
10113d68:	2020d7fa 	srli	r16,r4,31
10113d6c:	20002d16 	blt	r4,zero,10113e24 <__floatsidf+0xd4>
10113d70:	8809883a 	mov	r4,r17
10113d74:	0113ed40 	call	10113ed4 <__clzsi2>
10113d78:	01410784 	movi	r5,1054
10113d7c:	288bc83a 	sub	r5,r5,r2
10113d80:	01010cc4 	movi	r4,1075
10113d84:	2149c83a 	sub	r4,r4,r5
10113d88:	00c007c4 	movi	r3,31
10113d8c:	1900160e 	bge	r3,r4,10113de8 <__floatsidf+0x98>
10113d90:	00c104c4 	movi	r3,1043
10113d94:	1947c83a 	sub	r3,r3,r5
10113d98:	88c6983a 	sll	r3,r17,r3
10113d9c:	00800434 	movhi	r2,16
10113da0:	10bfffc4 	addi	r2,r2,-1
10113da4:	1886703a 	and	r3,r3,r2
10113da8:	2941ffcc 	andi	r5,r5,2047
10113dac:	800d883a 	mov	r6,r16
10113db0:	0005883a 	mov	r2,zero
10113db4:	280a953a 	slli	r5,r5,20
10113db8:	31803fcc 	andi	r6,r6,255
10113dbc:	01000434 	movhi	r4,16
10113dc0:	300c97fa 	slli	r6,r6,31
10113dc4:	213fffc4 	addi	r4,r4,-1
10113dc8:	1906703a 	and	r3,r3,r4
10113dcc:	1946b03a 	or	r3,r3,r5
10113dd0:	1986b03a 	or	r3,r3,r6
10113dd4:	dfc00217 	ldw	ra,8(sp)
10113dd8:	dc400117 	ldw	r17,4(sp)
10113ddc:	dc000017 	ldw	r16,0(sp)
10113de0:	dec00304 	addi	sp,sp,12
10113de4:	f800283a 	ret
10113de8:	00c002c4 	movi	r3,11
10113dec:	1887c83a 	sub	r3,r3,r2
10113df0:	88c6d83a 	srl	r3,r17,r3
10113df4:	8904983a 	sll	r2,r17,r4
10113df8:	01000434 	movhi	r4,16
10113dfc:	213fffc4 	addi	r4,r4,-1
10113e00:	2941ffcc 	andi	r5,r5,2047
10113e04:	1906703a 	and	r3,r3,r4
10113e08:	800d883a 	mov	r6,r16
10113e0c:	003fe906 	br	10113db4 <_gp+0xffff2824>
10113e10:	000d883a 	mov	r6,zero
10113e14:	000b883a 	mov	r5,zero
10113e18:	0007883a 	mov	r3,zero
10113e1c:	0005883a 	mov	r2,zero
10113e20:	003fe406 	br	10113db4 <_gp+0xffff2824>
10113e24:	0123c83a 	sub	r17,zero,r4
10113e28:	003fd106 	br	10113d70 <_gp+0xffff27e0>

10113e2c <__floatunsidf>:
10113e2c:	defffe04 	addi	sp,sp,-8
10113e30:	dc000015 	stw	r16,0(sp)
10113e34:	dfc00115 	stw	ra,4(sp)
10113e38:	2021883a 	mov	r16,r4
10113e3c:	20002226 	beq	r4,zero,10113ec8 <__floatunsidf+0x9c>
10113e40:	0113ed40 	call	10113ed4 <__clzsi2>
10113e44:	01010784 	movi	r4,1054
10113e48:	2089c83a 	sub	r4,r4,r2
10113e4c:	01810cc4 	movi	r6,1075
10113e50:	310dc83a 	sub	r6,r6,r4
10113e54:	00c007c4 	movi	r3,31
10113e58:	1980120e 	bge	r3,r6,10113ea4 <__floatunsidf+0x78>
10113e5c:	00c104c4 	movi	r3,1043
10113e60:	1907c83a 	sub	r3,r3,r4
10113e64:	80ca983a 	sll	r5,r16,r3
10113e68:	00800434 	movhi	r2,16
10113e6c:	10bfffc4 	addi	r2,r2,-1
10113e70:	2101ffcc 	andi	r4,r4,2047
10113e74:	0021883a 	mov	r16,zero
10113e78:	288a703a 	and	r5,r5,r2
10113e7c:	2008953a 	slli	r4,r4,20
10113e80:	00c00434 	movhi	r3,16
10113e84:	18ffffc4 	addi	r3,r3,-1
10113e88:	28c6703a 	and	r3,r5,r3
10113e8c:	8005883a 	mov	r2,r16
10113e90:	1906b03a 	or	r3,r3,r4
10113e94:	dfc00117 	ldw	ra,4(sp)
10113e98:	dc000017 	ldw	r16,0(sp)
10113e9c:	dec00204 	addi	sp,sp,8
10113ea0:	f800283a 	ret
10113ea4:	00c002c4 	movi	r3,11
10113ea8:	188bc83a 	sub	r5,r3,r2
10113eac:	814ad83a 	srl	r5,r16,r5
10113eb0:	00c00434 	movhi	r3,16
10113eb4:	18ffffc4 	addi	r3,r3,-1
10113eb8:	81a0983a 	sll	r16,r16,r6
10113ebc:	2101ffcc 	andi	r4,r4,2047
10113ec0:	28ca703a 	and	r5,r5,r3
10113ec4:	003fed06 	br	10113e7c <_gp+0xffff28ec>
10113ec8:	0009883a 	mov	r4,zero
10113ecc:	000b883a 	mov	r5,zero
10113ed0:	003fea06 	br	10113e7c <_gp+0xffff28ec>

10113ed4 <__clzsi2>:
10113ed4:	00bfffd4 	movui	r2,65535
10113ed8:	11000536 	bltu	r2,r4,10113ef0 <__clzsi2+0x1c>
10113edc:	00803fc4 	movi	r2,255
10113ee0:	11000f36 	bltu	r2,r4,10113f20 <__clzsi2+0x4c>
10113ee4:	00800804 	movi	r2,32
10113ee8:	0007883a 	mov	r3,zero
10113eec:	00000506 	br	10113f04 <__clzsi2+0x30>
10113ef0:	00804034 	movhi	r2,256
10113ef4:	10bfffc4 	addi	r2,r2,-1
10113ef8:	11000c2e 	bgeu	r2,r4,10113f2c <__clzsi2+0x58>
10113efc:	00800204 	movi	r2,8
10113f00:	00c00604 	movi	r3,24
10113f04:	20c8d83a 	srl	r4,r4,r3
10113f08:	00c40474 	movhi	r3,4113
10113f0c:	18de5f04 	addi	r3,r3,31100
10113f10:	1909883a 	add	r4,r3,r4
10113f14:	20c00003 	ldbu	r3,0(r4)
10113f18:	10c5c83a 	sub	r2,r2,r3
10113f1c:	f800283a 	ret
10113f20:	00800604 	movi	r2,24
10113f24:	00c00204 	movi	r3,8
10113f28:	003ff606 	br	10113f04 <_gp+0xffff2974>
10113f2c:	00800404 	movi	r2,16
10113f30:	1007883a 	mov	r3,r2
10113f34:	003ff306 	br	10113f04 <_gp+0xffff2974>

10113f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10113f38:	defffe04 	addi	sp,sp,-8
10113f3c:	dfc00115 	stw	ra,4(sp)
10113f40:	df000015 	stw	fp,0(sp)
10113f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10113f48:	d0a00b17 	ldw	r2,-32724(gp)
10113f4c:	10000326 	beq	r2,zero,10113f5c <alt_get_errno+0x24>
10113f50:	d0a00b17 	ldw	r2,-32724(gp)
10113f54:	103ee83a 	callr	r2
10113f58:	00000106 	br	10113f60 <alt_get_errno+0x28>
10113f5c:	d0a6fa04 	addi	r2,gp,-25624
}
10113f60:	e037883a 	mov	sp,fp
10113f64:	dfc00117 	ldw	ra,4(sp)
10113f68:	df000017 	ldw	fp,0(sp)
10113f6c:	dec00204 	addi	sp,sp,8
10113f70:	f800283a 	ret

10113f74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10113f74:	defffb04 	addi	sp,sp,-20
10113f78:	dfc00415 	stw	ra,16(sp)
10113f7c:	df000315 	stw	fp,12(sp)
10113f80:	df000304 	addi	fp,sp,12
10113f84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10113f88:	e0bfff17 	ldw	r2,-4(fp)
10113f8c:	10000616 	blt	r2,zero,10113fa8 <close+0x34>
10113f90:	e0bfff17 	ldw	r2,-4(fp)
10113f94:	10c00324 	muli	r3,r2,12
10113f98:	008404b4 	movhi	r2,4114
10113f9c:	10a0e204 	addi	r2,r2,-31864
10113fa0:	1885883a 	add	r2,r3,r2
10113fa4:	00000106 	br	10113fac <close+0x38>
10113fa8:	0005883a 	mov	r2,zero
10113fac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10113fb0:	e0bffd17 	ldw	r2,-12(fp)
10113fb4:	10001926 	beq	r2,zero,1011401c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10113fb8:	e0bffd17 	ldw	r2,-12(fp)
10113fbc:	10800017 	ldw	r2,0(r2)
10113fc0:	10800417 	ldw	r2,16(r2)
10113fc4:	10000626 	beq	r2,zero,10113fe0 <close+0x6c>
10113fc8:	e0bffd17 	ldw	r2,-12(fp)
10113fcc:	10800017 	ldw	r2,0(r2)
10113fd0:	10800417 	ldw	r2,16(r2)
10113fd4:	e13ffd17 	ldw	r4,-12(fp)
10113fd8:	103ee83a 	callr	r2
10113fdc:	00000106 	br	10113fe4 <close+0x70>
10113fe0:	0005883a 	mov	r2,zero
10113fe4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10113fe8:	e13fff17 	ldw	r4,-4(fp)
10113fec:	0114ea40 	call	10114ea4 <alt_release_fd>
    if (rval < 0)
10113ff0:	e0bffe17 	ldw	r2,-8(fp)
10113ff4:	1000070e 	bge	r2,zero,10114014 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10113ff8:	0113f380 	call	10113f38 <alt_get_errno>
10113ffc:	1007883a 	mov	r3,r2
10114000:	e0bffe17 	ldw	r2,-8(fp)
10114004:	0085c83a 	sub	r2,zero,r2
10114008:	18800015 	stw	r2,0(r3)
      return -1;
1011400c:	00bfffc4 	movi	r2,-1
10114010:	00000706 	br	10114030 <close+0xbc>
    }
    return 0;
10114014:	0005883a 	mov	r2,zero
10114018:	00000506 	br	10114030 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1011401c:	0113f380 	call	10113f38 <alt_get_errno>
10114020:	1007883a 	mov	r3,r2
10114024:	00801444 	movi	r2,81
10114028:	18800015 	stw	r2,0(r3)
    return -1;
1011402c:	00bfffc4 	movi	r2,-1
  }
}
10114030:	e037883a 	mov	sp,fp
10114034:	dfc00117 	ldw	ra,4(sp)
10114038:	df000017 	ldw	fp,0(sp)
1011403c:	dec00204 	addi	sp,sp,8
10114040:	f800283a 	ret

10114044 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10114044:	defffc04 	addi	sp,sp,-16
10114048:	df000315 	stw	fp,12(sp)
1011404c:	df000304 	addi	fp,sp,12
10114050:	e13ffd15 	stw	r4,-12(fp)
10114054:	e17ffe15 	stw	r5,-8(fp)
10114058:	e1bfff15 	stw	r6,-4(fp)
  return len;
1011405c:	e0bfff17 	ldw	r2,-4(fp)
}
10114060:	e037883a 	mov	sp,fp
10114064:	df000017 	ldw	fp,0(sp)
10114068:	dec00104 	addi	sp,sp,4
1011406c:	f800283a 	ret

10114070 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10114070:	defffd04 	addi	sp,sp,-12
10114074:	df000215 	stw	fp,8(sp)
10114078:	df000204 	addi	fp,sp,8
1011407c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10114080:	0001883a 	nop
10114084:	e0bfff17 	ldw	r2,-4(fp)
10114088:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1011408c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10114090:	10000226 	beq	r2,zero,1011409c <_exit+0x2c>
    ALT_SIM_FAIL();
10114094:	002af070 	cmpltui	zero,zero,43969
10114098:	00000106 	br	101140a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1011409c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101140a0:	003fff06 	br	101140a0 <_gp+0xffff2b10>

101140a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101140a4:	defffe04 	addi	sp,sp,-8
101140a8:	dfc00115 	stw	ra,4(sp)
101140ac:	df000015 	stw	fp,0(sp)
101140b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101140b4:	d0a00b17 	ldw	r2,-32724(gp)
101140b8:	10000326 	beq	r2,zero,101140c8 <alt_get_errno+0x24>
101140bc:	d0a00b17 	ldw	r2,-32724(gp)
101140c0:	103ee83a 	callr	r2
101140c4:	00000106 	br	101140cc <alt_get_errno+0x28>
101140c8:	d0a6fa04 	addi	r2,gp,-25624
}
101140cc:	e037883a 	mov	sp,fp
101140d0:	dfc00117 	ldw	ra,4(sp)
101140d4:	df000017 	ldw	fp,0(sp)
101140d8:	dec00204 	addi	sp,sp,8
101140dc:	f800283a 	ret

101140e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
101140e0:	defffb04 	addi	sp,sp,-20
101140e4:	dfc00415 	stw	ra,16(sp)
101140e8:	df000315 	stw	fp,12(sp)
101140ec:	df000304 	addi	fp,sp,12
101140f0:	e13ffe15 	stw	r4,-8(fp)
101140f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101140f8:	e0bffe17 	ldw	r2,-8(fp)
101140fc:	10000616 	blt	r2,zero,10114118 <fstat+0x38>
10114100:	e0bffe17 	ldw	r2,-8(fp)
10114104:	10c00324 	muli	r3,r2,12
10114108:	008404b4 	movhi	r2,4114
1011410c:	10a0e204 	addi	r2,r2,-31864
10114110:	1885883a 	add	r2,r3,r2
10114114:	00000106 	br	1011411c <fstat+0x3c>
10114118:	0005883a 	mov	r2,zero
1011411c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10114120:	e0bffd17 	ldw	r2,-12(fp)
10114124:	10001026 	beq	r2,zero,10114168 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10114128:	e0bffd17 	ldw	r2,-12(fp)
1011412c:	10800017 	ldw	r2,0(r2)
10114130:	10800817 	ldw	r2,32(r2)
10114134:	10000726 	beq	r2,zero,10114154 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10114138:	e0bffd17 	ldw	r2,-12(fp)
1011413c:	10800017 	ldw	r2,0(r2)
10114140:	10800817 	ldw	r2,32(r2)
10114144:	e17fff17 	ldw	r5,-4(fp)
10114148:	e13ffd17 	ldw	r4,-12(fp)
1011414c:	103ee83a 	callr	r2
10114150:	00000a06 	br	1011417c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10114154:	e0bfff17 	ldw	r2,-4(fp)
10114158:	00c80004 	movi	r3,8192
1011415c:	10c00115 	stw	r3,4(r2)
      return 0;
10114160:	0005883a 	mov	r2,zero
10114164:	00000506 	br	1011417c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10114168:	01140a40 	call	101140a4 <alt_get_errno>
1011416c:	1007883a 	mov	r3,r2
10114170:	00801444 	movi	r2,81
10114174:	18800015 	stw	r2,0(r3)
    return -1;
10114178:	00bfffc4 	movi	r2,-1
  }
}
1011417c:	e037883a 	mov	sp,fp
10114180:	dfc00117 	ldw	ra,4(sp)
10114184:	df000017 	ldw	fp,0(sp)
10114188:	dec00204 	addi	sp,sp,8
1011418c:	f800283a 	ret

10114190 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
10114190:	deffff04 	addi	sp,sp,-4
10114194:	df000015 	stw	fp,0(sp)
10114198:	d839883a 	mov	fp,sp
  return 0;
1011419c:	0005883a 	mov	r2,zero
}
101141a0:	e037883a 	mov	sp,fp
101141a4:	df000017 	ldw	fp,0(sp)
101141a8:	dec00104 	addi	sp,sp,4
101141ac:	f800283a 	ret

101141b0 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
101141b0:	defff404 	addi	sp,sp,-48
101141b4:	dfc00b15 	stw	ra,44(sp)
101141b8:	df000a15 	stw	fp,40(sp)
101141bc:	dd000915 	stw	r20,36(sp)
101141c0:	dcc00815 	stw	r19,32(sp)
101141c4:	dc800715 	stw	r18,28(sp)
101141c8:	dc400615 	stw	r17,24(sp)
101141cc:	dc000515 	stw	r16,20(sp)
101141d0:	df000a04 	addi	fp,sp,40
101141d4:	e13ff915 	stw	r4,-28(fp)
101141d8:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
101141dc:	e0bffa17 	ldw	r2,-24(fp)
101141e0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
101141e4:	d0a70917 	ldw	r2,-25564(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
101141e8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
101141ec:	d0a70817 	ldw	r2,-25568(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
101141f0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
101141f4:	e0bff817 	ldw	r2,-32(fp)
101141f8:	10005f26 	beq	r2,zero,10114378 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
101141fc:	d0a70317 	ldw	r2,-25588(gp)
10114200:	1029883a 	mov	r20,r2
10114204:	e17ff817 	ldw	r5,-32(fp)
10114208:	e13ff717 	ldw	r4,-36(fp)
1011420c:	01031000 	call	10103100 <__udivsi3>
10114210:	a085883a 	add	r2,r20,r2
10114214:	1007883a 	mov	r3,r2
10114218:	e0bff917 	ldw	r2,-28(fp)
1011421c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
10114220:	d0a70417 	ldw	r2,-25584(gp)
10114224:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
10114228:	e0bff717 	ldw	r2,-36(fp)
1011422c:	1021883a 	mov	r16,r2
10114230:	0023883a 	mov	r17,zero
10114234:	e17ff817 	ldw	r5,-32(fp)
10114238:	010003f4 	movhi	r4,15
1011423c:	21109004 	addi	r4,r4,16960
10114240:	01031000 	call	10103100 <__udivsi3>
10114244:	1025883a 	mov	r18,r2
10114248:	0027883a 	mov	r19,zero
1011424c:	900d883a 	mov	r6,r18
10114250:	980f883a 	mov	r7,r19
10114254:	8009883a 	mov	r4,r16
10114258:	880b883a 	mov	r5,r17
1011425c:	0110dc00 	call	10110dc0 <__muldi3>
10114260:	1009883a 	mov	r4,r2
10114264:	180b883a 	mov	r5,r3
10114268:	2005883a 	mov	r2,r4
1011426c:	2807883a 	mov	r3,r5
10114270:	018003f4 	movhi	r6,15
10114274:	31909004 	addi	r6,r6,16960
10114278:	000f883a 	mov	r7,zero
1011427c:	1009883a 	mov	r4,r2
10114280:	180b883a 	mov	r5,r3
10114284:	01113980 	call	10111398 <__umoddi3>
10114288:	1009883a 	mov	r4,r2
1011428c:	180b883a 	mov	r5,r3
10114290:	2005883a 	mov	r2,r4
10114294:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
10114298:	a085883a 	add	r2,r20,r2
1011429c:	1007883a 	mov	r3,r2
101142a0:	e0bff917 	ldw	r2,-28(fp)
101142a4:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
101142a8:	00001406 	br	101142fc <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
101142ac:	e0bff917 	ldw	r2,-28(fp)
101142b0:	10800017 	ldw	r2,0(r2)
101142b4:	00800516 	blt	zero,r2,101142cc <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
101142b8:	e0bff917 	ldw	r2,-28(fp)
101142bc:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
101142c0:	e0bff917 	ldw	r2,-28(fp)
101142c4:	10000115 	stw	zero,4(r2)
          break;
101142c8:	00000f06 	br	10114308 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
101142cc:	e0bff917 	ldw	r2,-28(fp)
101142d0:	10800017 	ldw	r2,0(r2)
101142d4:	10ffffc4 	addi	r3,r2,-1
101142d8:	e0bff917 	ldw	r2,-28(fp)
101142dc:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
101142e0:	e0bff917 	ldw	r2,-28(fp)
101142e4:	10c00117 	ldw	r3,4(r2)
101142e8:	008003f4 	movhi	r2,15
101142ec:	10909004 	addi	r2,r2,16960
101142f0:	1887883a 	add	r3,r3,r2
101142f4:	e0bff917 	ldw	r2,-28(fp)
101142f8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
101142fc:	e0bff917 	ldw	r2,-28(fp)
10114300:	10800117 	ldw	r2,4(r2)
10114304:	103fe916 	blt	r2,zero,101142ac <_gp+0xffff2d1c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10114308:	00000c06 	br	1011433c <gettimeofday+0x18c>
      ptimeval->tv_sec++;
1011430c:	e0bff917 	ldw	r2,-28(fp)
10114310:	10800017 	ldw	r2,0(r2)
10114314:	10c00044 	addi	r3,r2,1
10114318:	e0bff917 	ldw	r2,-28(fp)
1011431c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
10114320:	e0bff917 	ldw	r2,-28(fp)
10114324:	10c00117 	ldw	r3,4(r2)
10114328:	00bffc74 	movhi	r2,65521
1011432c:	10af7004 	addi	r2,r2,-16960
10114330:	1887883a 	add	r3,r3,r2
10114334:	e0bff917 	ldw	r2,-28(fp)
10114338:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
1011433c:	e0bff917 	ldw	r2,-28(fp)
10114340:	10c00117 	ldw	r3,4(r2)
10114344:	008003f4 	movhi	r2,15
10114348:	10908fc4 	addi	r2,r2,16959
1011434c:	10ffef16 	blt	r2,r3,1011430c <_gp+0xffff2d7c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
10114350:	e0bff617 	ldw	r2,-40(fp)
10114354:	10000626 	beq	r2,zero,10114370 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10114358:	d0e70117 	ldw	r3,-25596(gp)
1011435c:	e0bff617 	ldw	r2,-40(fp)
10114360:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
10114364:	d0e70217 	ldw	r3,-25592(gp)
10114368:	e0bff617 	ldw	r2,-40(fp)
1011436c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
10114370:	0005883a 	mov	r2,zero
10114374:	00000106 	br	1011437c <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
10114378:	00bfde84 	movi	r2,-134
}
1011437c:	e6fffb04 	addi	sp,fp,-20
10114380:	dfc00617 	ldw	ra,24(sp)
10114384:	df000517 	ldw	fp,20(sp)
10114388:	dd000417 	ldw	r20,16(sp)
1011438c:	dcc00317 	ldw	r19,12(sp)
10114390:	dc800217 	ldw	r18,8(sp)
10114394:	dc400117 	ldw	r17,4(sp)
10114398:	dc000017 	ldw	r16,0(sp)
1011439c:	dec00704 	addi	sp,sp,28
101143a0:	f800283a 	ret

101143a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101143a4:	defffe04 	addi	sp,sp,-8
101143a8:	dfc00115 	stw	ra,4(sp)
101143ac:	df000015 	stw	fp,0(sp)
101143b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101143b4:	d0a00b17 	ldw	r2,-32724(gp)
101143b8:	10000326 	beq	r2,zero,101143c8 <alt_get_errno+0x24>
101143bc:	d0a00b17 	ldw	r2,-32724(gp)
101143c0:	103ee83a 	callr	r2
101143c4:	00000106 	br	101143cc <alt_get_errno+0x28>
101143c8:	d0a6fa04 	addi	r2,gp,-25624
}
101143cc:	e037883a 	mov	sp,fp
101143d0:	dfc00117 	ldw	ra,4(sp)
101143d4:	df000017 	ldw	fp,0(sp)
101143d8:	dec00204 	addi	sp,sp,8
101143dc:	f800283a 	ret

101143e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
101143e0:	deffed04 	addi	sp,sp,-76
101143e4:	dfc01215 	stw	ra,72(sp)
101143e8:	df001115 	stw	fp,68(sp)
101143ec:	df001104 	addi	fp,sp,68
101143f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101143f4:	e0bfff17 	ldw	r2,-4(fp)
101143f8:	10000616 	blt	r2,zero,10114414 <isatty+0x34>
101143fc:	e0bfff17 	ldw	r2,-4(fp)
10114400:	10c00324 	muli	r3,r2,12
10114404:	008404b4 	movhi	r2,4114
10114408:	10a0e204 	addi	r2,r2,-31864
1011440c:	1885883a 	add	r2,r3,r2
10114410:	00000106 	br	10114418 <isatty+0x38>
10114414:	0005883a 	mov	r2,zero
10114418:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1011441c:	e0bfef17 	ldw	r2,-68(fp)
10114420:	10000e26 	beq	r2,zero,1011445c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10114424:	e0bfef17 	ldw	r2,-68(fp)
10114428:	10800017 	ldw	r2,0(r2)
1011442c:	10800817 	ldw	r2,32(r2)
10114430:	1000021e 	bne	r2,zero,1011443c <isatty+0x5c>
    {
      return 1;
10114434:	00800044 	movi	r2,1
10114438:	00000d06 	br	10114470 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1011443c:	e0bff004 	addi	r2,fp,-64
10114440:	100b883a 	mov	r5,r2
10114444:	e13fff17 	ldw	r4,-4(fp)
10114448:	01140e00 	call	101140e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1011444c:	e0bff117 	ldw	r2,-60(fp)
10114450:	10880020 	cmpeqi	r2,r2,8192
10114454:	10803fcc 	andi	r2,r2,255
10114458:	00000506 	br	10114470 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1011445c:	01143a40 	call	101143a4 <alt_get_errno>
10114460:	1007883a 	mov	r3,r2
10114464:	00801444 	movi	r2,81
10114468:	18800015 	stw	r2,0(r3)
    return 0;
1011446c:	0005883a 	mov	r2,zero
  }
}
10114470:	e037883a 	mov	sp,fp
10114474:	dfc00117 	ldw	ra,4(sp)
10114478:	df000017 	ldw	fp,0(sp)
1011447c:	dec00204 	addi	sp,sp,8
10114480:	f800283a 	ret

10114484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10114484:	defffe04 	addi	sp,sp,-8
10114488:	dfc00115 	stw	ra,4(sp)
1011448c:	df000015 	stw	fp,0(sp)
10114490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114494:	d0a00b17 	ldw	r2,-32724(gp)
10114498:	10000326 	beq	r2,zero,101144a8 <alt_get_errno+0x24>
1011449c:	d0a00b17 	ldw	r2,-32724(gp)
101144a0:	103ee83a 	callr	r2
101144a4:	00000106 	br	101144ac <alt_get_errno+0x28>
101144a8:	d0a6fa04 	addi	r2,gp,-25624
}
101144ac:	e037883a 	mov	sp,fp
101144b0:	dfc00117 	ldw	ra,4(sp)
101144b4:	df000017 	ldw	fp,0(sp)
101144b8:	dec00204 	addi	sp,sp,8
101144bc:	f800283a 	ret

101144c0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
101144c0:	defffb04 	addi	sp,sp,-20
101144c4:	dfc00415 	stw	ra,16(sp)
101144c8:	df000315 	stw	fp,12(sp)
101144cc:	df000304 	addi	fp,sp,12
101144d0:	e13ffe15 	stw	r4,-8(fp)
101144d4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
101144d8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
101144dc:	e0bffe17 	ldw	r2,-8(fp)
101144e0:	00802f16 	blt	zero,r2,101145a0 <kill+0xe0>
  {
    switch (sig)
101144e4:	e0bfff17 	ldw	r2,-4(fp)
101144e8:	10800828 	cmpgeui	r2,r2,32
101144ec:	1000291e 	bne	r2,zero,10114594 <kill+0xd4>
101144f0:	e0bfff17 	ldw	r2,-4(fp)
101144f4:	100690ba 	slli	r3,r2,2
101144f8:	00840474 	movhi	r2,4113
101144fc:	10914304 	addi	r2,r2,17676
10114500:	1885883a 	add	r2,r3,r2
10114504:	10800017 	ldw	r2,0(r2)
10114508:	1000683a 	jmp	r2
1011450c:	101145b4 	orhi	zero,r2,17686
10114510:	10114594 	ori	zero,r2,17686
10114514:	10114594 	ori	zero,r2,17686
10114518:	1011458c 	andi	zero,r2,17686
1011451c:	1011458c 	andi	zero,r2,17686
10114520:	1011458c 	andi	zero,r2,17686
10114524:	1011458c 	andi	zero,r2,17686
10114528:	10114594 	ori	zero,r2,17686
1011452c:	1011458c 	andi	zero,r2,17686
10114530:	1011458c 	andi	zero,r2,17686
10114534:	1011458c 	andi	zero,r2,17686
10114538:	1011458c 	andi	zero,r2,17686
1011453c:	1011458c 	andi	zero,r2,17686
10114540:	1011458c 	andi	zero,r2,17686
10114544:	1011458c 	andi	zero,r2,17686
10114548:	1011458c 	andi	zero,r2,17686
1011454c:	101145b4 	orhi	zero,r2,17686
10114550:	10114594 	ori	zero,r2,17686
10114554:	10114594 	ori	zero,r2,17686
10114558:	10114594 	ori	zero,r2,17686
1011455c:	101145b4 	orhi	zero,r2,17686
10114560:	10114594 	ori	zero,r2,17686
10114564:	10114594 	ori	zero,r2,17686
10114568:	1011458c 	andi	zero,r2,17686
1011456c:	1011458c 	andi	zero,r2,17686
10114570:	1011458c 	andi	zero,r2,17686
10114574:	1011458c 	andi	zero,r2,17686
10114578:	1011458c 	andi	zero,r2,17686
1011457c:	10114594 	ori	zero,r2,17686
10114580:	10114594 	ori	zero,r2,17686
10114584:	1011458c 	andi	zero,r2,17686
10114588:	1011458c 	andi	zero,r2,17686
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1011458c:	0009883a 	mov	r4,zero
10114590:	01140700 	call	10114070 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
10114594:	00800584 	movi	r2,22
10114598:	e0bffd15 	stw	r2,-12(fp)
1011459c:	00000606 	br	101145b8 <kill+0xf8>
    }
  }

  else if (pid > 0)
101145a0:	e0bffe17 	ldw	r2,-8(fp)
101145a4:	0080040e 	bge	zero,r2,101145b8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
101145a8:	008000c4 	movi	r2,3
101145ac:	e0bffd15 	stw	r2,-12(fp)
101145b0:	00000106 	br	101145b8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
101145b4:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
101145b8:	e0bffd17 	ldw	r2,-12(fp)
101145bc:	10000626 	beq	r2,zero,101145d8 <kill+0x118>
  {
    ALT_ERRNO = status;
101145c0:	01144840 	call	10114484 <alt_get_errno>
101145c4:	1007883a 	mov	r3,r2
101145c8:	e0bffd17 	ldw	r2,-12(fp)
101145cc:	18800015 	stw	r2,0(r3)
    return -1;
101145d0:	00bfffc4 	movi	r2,-1
101145d4:	00000106 	br	101145dc <kill+0x11c>
  }

  return 0;
101145d8:	0005883a 	mov	r2,zero
}
101145dc:	e037883a 	mov	sp,fp
101145e0:	dfc00117 	ldw	ra,4(sp)
101145e4:	df000017 	ldw	fp,0(sp)
101145e8:	dec00204 	addi	sp,sp,8
101145ec:	f800283a 	ret

101145f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
101145f0:	defffc04 	addi	sp,sp,-16
101145f4:	df000315 	stw	fp,12(sp)
101145f8:	df000304 	addi	fp,sp,12
101145fc:	e13ffd15 	stw	r4,-12(fp)
10114600:	e17ffe15 	stw	r5,-8(fp)
10114604:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10114608:	e0fffe17 	ldw	r3,-8(fp)
1011460c:	e0bffd17 	ldw	r2,-12(fp)
10114610:	18800c26 	beq	r3,r2,10114644 <alt_load_section+0x54>
  {
    while( to != end )
10114614:	00000806 	br	10114638 <alt_load_section+0x48>
    {
      *to++ = *from++;
10114618:	e0bffe17 	ldw	r2,-8(fp)
1011461c:	10c00104 	addi	r3,r2,4
10114620:	e0fffe15 	stw	r3,-8(fp)
10114624:	e0fffd17 	ldw	r3,-12(fp)
10114628:	19000104 	addi	r4,r3,4
1011462c:	e13ffd15 	stw	r4,-12(fp)
10114630:	18c00017 	ldw	r3,0(r3)
10114634:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10114638:	e0fffe17 	ldw	r3,-8(fp)
1011463c:	e0bfff17 	ldw	r2,-4(fp)
10114640:	18bff51e 	bne	r3,r2,10114618 <_gp+0xffff3088>
    {
      *to++ = *from++;
    }
  }
}
10114644:	0001883a 	nop
10114648:	e037883a 	mov	sp,fp
1011464c:	df000017 	ldw	fp,0(sp)
10114650:	dec00104 	addi	sp,sp,4
10114654:	f800283a 	ret

10114658 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10114658:	defffe04 	addi	sp,sp,-8
1011465c:	dfc00115 	stw	ra,4(sp)
10114660:	df000015 	stw	fp,0(sp)
10114664:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10114668:	018404b4 	movhi	r6,4114
1011466c:	31a58604 	addi	r6,r6,-27112
10114670:	01440474 	movhi	r5,4113
10114674:	295eaf04 	addi	r5,r5,31420
10114678:	010404b4 	movhi	r4,4114
1011467c:	21258604 	addi	r4,r4,-27112
10114680:	01145f00 	call	101145f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10114684:	01840434 	movhi	r6,4112
10114688:	31809104 	addi	r6,r6,580
1011468c:	01440434 	movhi	r5,4112
10114690:	29400804 	addi	r5,r5,32
10114694:	01040434 	movhi	r4,4112
10114698:	21000804 	addi	r4,r4,32
1011469c:	01145f00 	call	101145f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
101146a0:	01840474 	movhi	r6,4113
101146a4:	319eaf04 	addi	r6,r6,31420
101146a8:	01440474 	movhi	r5,4113
101146ac:	295cf004 	addi	r5,r5,29632
101146b0:	01040474 	movhi	r4,4113
101146b4:	211cf004 	addi	r4,r4,29632
101146b8:	01145f00 	call	101145f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
101146bc:	01164f00 	call	101164f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
101146c0:	01169940 	call	10116994 <alt_icache_flush_all>
}
101146c4:	0001883a 	nop
101146c8:	e037883a 	mov	sp,fp
101146cc:	dfc00117 	ldw	ra,4(sp)
101146d0:	df000017 	ldw	fp,0(sp)
101146d4:	dec00204 	addi	sp,sp,8
101146d8:	f800283a 	ret

101146dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101146dc:	defffe04 	addi	sp,sp,-8
101146e0:	dfc00115 	stw	ra,4(sp)
101146e4:	df000015 	stw	fp,0(sp)
101146e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101146ec:	d0a00b17 	ldw	r2,-32724(gp)
101146f0:	10000326 	beq	r2,zero,10114700 <alt_get_errno+0x24>
101146f4:	d0a00b17 	ldw	r2,-32724(gp)
101146f8:	103ee83a 	callr	r2
101146fc:	00000106 	br	10114704 <alt_get_errno+0x28>
10114700:	d0a6fa04 	addi	r2,gp,-25624
}
10114704:	e037883a 	mov	sp,fp
10114708:	dfc00117 	ldw	ra,4(sp)
1011470c:	df000017 	ldw	fp,0(sp)
10114710:	dec00204 	addi	sp,sp,8
10114714:	f800283a 	ret

10114718 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10114718:	defff904 	addi	sp,sp,-28
1011471c:	dfc00615 	stw	ra,24(sp)
10114720:	df000515 	stw	fp,20(sp)
10114724:	df000504 	addi	fp,sp,20
10114728:	e13ffd15 	stw	r4,-12(fp)
1011472c:	e17ffe15 	stw	r5,-8(fp)
10114730:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10114734:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114738:	e0bffd17 	ldw	r2,-12(fp)
1011473c:	10000616 	blt	r2,zero,10114758 <lseek+0x40>
10114740:	e0bffd17 	ldw	r2,-12(fp)
10114744:	10c00324 	muli	r3,r2,12
10114748:	008404b4 	movhi	r2,4114
1011474c:	10a0e204 	addi	r2,r2,-31864
10114750:	1885883a 	add	r2,r3,r2
10114754:	00000106 	br	1011475c <lseek+0x44>
10114758:	0005883a 	mov	r2,zero
1011475c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10114760:	e0bffc17 	ldw	r2,-16(fp)
10114764:	10001026 	beq	r2,zero,101147a8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10114768:	e0bffc17 	ldw	r2,-16(fp)
1011476c:	10800017 	ldw	r2,0(r2)
10114770:	10800717 	ldw	r2,28(r2)
10114774:	10000926 	beq	r2,zero,1011479c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10114778:	e0bffc17 	ldw	r2,-16(fp)
1011477c:	10800017 	ldw	r2,0(r2)
10114780:	10800717 	ldw	r2,28(r2)
10114784:	e1bfff17 	ldw	r6,-4(fp)
10114788:	e17ffe17 	ldw	r5,-8(fp)
1011478c:	e13ffc17 	ldw	r4,-16(fp)
10114790:	103ee83a 	callr	r2
10114794:	e0bffb15 	stw	r2,-20(fp)
10114798:	00000506 	br	101147b0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1011479c:	00bfde84 	movi	r2,-134
101147a0:	e0bffb15 	stw	r2,-20(fp)
101147a4:	00000206 	br	101147b0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
101147a8:	00bfebc4 	movi	r2,-81
101147ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
101147b0:	e0bffb17 	ldw	r2,-20(fp)
101147b4:	1000070e 	bge	r2,zero,101147d4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
101147b8:	01146dc0 	call	101146dc <alt_get_errno>
101147bc:	1007883a 	mov	r3,r2
101147c0:	e0bffb17 	ldw	r2,-20(fp)
101147c4:	0085c83a 	sub	r2,zero,r2
101147c8:	18800015 	stw	r2,0(r3)
    rc = -1;
101147cc:	00bfffc4 	movi	r2,-1
101147d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
101147d4:	e0bffb17 	ldw	r2,-20(fp)
}
101147d8:	e037883a 	mov	sp,fp
101147dc:	dfc00117 	ldw	ra,4(sp)
101147e0:	df000017 	ldw	fp,0(sp)
101147e4:	dec00204 	addi	sp,sp,8
101147e8:	f800283a 	ret

101147ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
101147ec:	defffd04 	addi	sp,sp,-12
101147f0:	dfc00215 	stw	ra,8(sp)
101147f4:	df000115 	stw	fp,4(sp)
101147f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
101147fc:	0009883a 	mov	r4,zero
10114800:	01152f40 	call	101152f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10114804:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10114808:	011532c0 	call	1011532c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1011480c:	01840474 	movhi	r6,4113
10114810:	319ea204 	addi	r6,r6,31368
10114814:	01440474 	movhi	r5,4113
10114818:	295ea204 	addi	r5,r5,31368
1011481c:	01040474 	movhi	r4,4113
10114820:	211ea204 	addi	r4,r4,31368
10114824:	0116d2c0 	call	10116d2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10114828:	01166180 	call	10116618 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1011482c:	01040474 	movhi	r4,4113
10114830:	21199e04 	addi	r4,r4,26232
10114834:	0116ef80 	call	10116ef8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10114838:	d0a70517 	ldw	r2,-25580(gp)
1011483c:	d0e70617 	ldw	r3,-25576(gp)
10114840:	d1270717 	ldw	r4,-25572(gp)
10114844:	200d883a 	mov	r6,r4
10114848:	180b883a 	mov	r5,r3
1011484c:	1009883a 	mov	r4,r2
10114850:	01027980 	call	10102798 <main>
10114854:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10114858:	01000044 	movi	r4,1
1011485c:	0113f740 	call	10113f74 <close>
  exit (result);
10114860:	e13fff17 	ldw	r4,-4(fp)
10114864:	0116f0c0 	call	10116f0c <exit>

10114868 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10114868:	defffe04 	addi	sp,sp,-8
1011486c:	df000115 	stw	fp,4(sp)
10114870:	df000104 	addi	fp,sp,4
10114874:	e13fff15 	stw	r4,-4(fp)
}
10114878:	0001883a 	nop
1011487c:	e037883a 	mov	sp,fp
10114880:	df000017 	ldw	fp,0(sp)
10114884:	dec00104 	addi	sp,sp,4
10114888:	f800283a 	ret

1011488c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1011488c:	defffe04 	addi	sp,sp,-8
10114890:	df000115 	stw	fp,4(sp)
10114894:	df000104 	addi	fp,sp,4
10114898:	e13fff15 	stw	r4,-4(fp)
}
1011489c:	0001883a 	nop
101148a0:	e037883a 	mov	sp,fp
101148a4:	df000017 	ldw	fp,0(sp)
101148a8:	dec00104 	addi	sp,sp,4
101148ac:	f800283a 	ret

101148b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101148b0:	defffe04 	addi	sp,sp,-8
101148b4:	dfc00115 	stw	ra,4(sp)
101148b8:	df000015 	stw	fp,0(sp)
101148bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101148c0:	d0a00b17 	ldw	r2,-32724(gp)
101148c4:	10000326 	beq	r2,zero,101148d4 <alt_get_errno+0x24>
101148c8:	d0a00b17 	ldw	r2,-32724(gp)
101148cc:	103ee83a 	callr	r2
101148d0:	00000106 	br	101148d8 <alt_get_errno+0x28>
101148d4:	d0a6fa04 	addi	r2,gp,-25624
}
101148d8:	e037883a 	mov	sp,fp
101148dc:	dfc00117 	ldw	ra,4(sp)
101148e0:	df000017 	ldw	fp,0(sp)
101148e4:	dec00204 	addi	sp,sp,8
101148e8:	f800283a 	ret

101148ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
101148ec:	defffd04 	addi	sp,sp,-12
101148f0:	df000215 	stw	fp,8(sp)
101148f4:	df000204 	addi	fp,sp,8
101148f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
101148fc:	e0bfff17 	ldw	r2,-4(fp)
10114900:	10800217 	ldw	r2,8(r2)
10114904:	10d00034 	orhi	r3,r2,16384
10114908:	e0bfff17 	ldw	r2,-4(fp)
1011490c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10114910:	e03ffe15 	stw	zero,-8(fp)
10114914:	00001d06 	br	1011498c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10114918:	008404b4 	movhi	r2,4114
1011491c:	10a0e204 	addi	r2,r2,-31864
10114920:	e0fffe17 	ldw	r3,-8(fp)
10114924:	18c00324 	muli	r3,r3,12
10114928:	10c5883a 	add	r2,r2,r3
1011492c:	10c00017 	ldw	r3,0(r2)
10114930:	e0bfff17 	ldw	r2,-4(fp)
10114934:	10800017 	ldw	r2,0(r2)
10114938:	1880111e 	bne	r3,r2,10114980 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1011493c:	008404b4 	movhi	r2,4114
10114940:	10a0e204 	addi	r2,r2,-31864
10114944:	e0fffe17 	ldw	r3,-8(fp)
10114948:	18c00324 	muli	r3,r3,12
1011494c:	10c5883a 	add	r2,r2,r3
10114950:	10800204 	addi	r2,r2,8
10114954:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10114958:	1000090e 	bge	r2,zero,10114980 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1011495c:	e0bffe17 	ldw	r2,-8(fp)
10114960:	10c00324 	muli	r3,r2,12
10114964:	008404b4 	movhi	r2,4114
10114968:	10a0e204 	addi	r2,r2,-31864
1011496c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10114970:	e0bfff17 	ldw	r2,-4(fp)
10114974:	18800226 	beq	r3,r2,10114980 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10114978:	00bffcc4 	movi	r2,-13
1011497c:	00000806 	br	101149a0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10114980:	e0bffe17 	ldw	r2,-8(fp)
10114984:	10800044 	addi	r2,r2,1
10114988:	e0bffe15 	stw	r2,-8(fp)
1011498c:	d0a00a17 	ldw	r2,-32728(gp)
10114990:	1007883a 	mov	r3,r2
10114994:	e0bffe17 	ldw	r2,-8(fp)
10114998:	18bfdf2e 	bgeu	r3,r2,10114918 <_gp+0xffff3388>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1011499c:	0005883a 	mov	r2,zero
}
101149a0:	e037883a 	mov	sp,fp
101149a4:	df000017 	ldw	fp,0(sp)
101149a8:	dec00104 	addi	sp,sp,4
101149ac:	f800283a 	ret

101149b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
101149b0:	defff604 	addi	sp,sp,-40
101149b4:	dfc00915 	stw	ra,36(sp)
101149b8:	df000815 	stw	fp,32(sp)
101149bc:	df000804 	addi	fp,sp,32
101149c0:	e13ffd15 	stw	r4,-12(fp)
101149c4:	e17ffe15 	stw	r5,-8(fp)
101149c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
101149cc:	00bfffc4 	movi	r2,-1
101149d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
101149d4:	00bffb44 	movi	r2,-19
101149d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
101149dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
101149e0:	d1600804 	addi	r5,gp,-32736
101149e4:	e13ffd17 	ldw	r4,-12(fp)
101149e8:	01166d80 	call	101166d8 <alt_find_dev>
101149ec:	e0bff815 	stw	r2,-32(fp)
101149f0:	e0bff817 	ldw	r2,-32(fp)
101149f4:	1000051e 	bne	r2,zero,10114a0c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
101149f8:	e13ffd17 	ldw	r4,-12(fp)
101149fc:	01167680 	call	10116768 <alt_find_file>
10114a00:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10114a04:	00800044 	movi	r2,1
10114a08:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10114a0c:	e0bff817 	ldw	r2,-32(fp)
10114a10:	10002926 	beq	r2,zero,10114ab8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10114a14:	e13ff817 	ldw	r4,-32(fp)
10114a18:	01168f00 	call	101168f0 <alt_get_fd>
10114a1c:	e0bff915 	stw	r2,-28(fp)
10114a20:	e0bff917 	ldw	r2,-28(fp)
10114a24:	1000030e 	bge	r2,zero,10114a34 <open+0x84>
    {
      status = index;
10114a28:	e0bff917 	ldw	r2,-28(fp)
10114a2c:	e0bffa15 	stw	r2,-24(fp)
10114a30:	00002306 	br	10114ac0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10114a34:	e0bff917 	ldw	r2,-28(fp)
10114a38:	10c00324 	muli	r3,r2,12
10114a3c:	008404b4 	movhi	r2,4114
10114a40:	10a0e204 	addi	r2,r2,-31864
10114a44:	1885883a 	add	r2,r3,r2
10114a48:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10114a4c:	e0fffe17 	ldw	r3,-8(fp)
10114a50:	00900034 	movhi	r2,16384
10114a54:	10bfffc4 	addi	r2,r2,-1
10114a58:	1886703a 	and	r3,r3,r2
10114a5c:	e0bffc17 	ldw	r2,-16(fp)
10114a60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10114a64:	e0bffb17 	ldw	r2,-20(fp)
10114a68:	1000051e 	bne	r2,zero,10114a80 <open+0xd0>
10114a6c:	e13ffc17 	ldw	r4,-16(fp)
10114a70:	01148ec0 	call	101148ec <alt_file_locked>
10114a74:	e0bffa15 	stw	r2,-24(fp)
10114a78:	e0bffa17 	ldw	r2,-24(fp)
10114a7c:	10001016 	blt	r2,zero,10114ac0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10114a80:	e0bff817 	ldw	r2,-32(fp)
10114a84:	10800317 	ldw	r2,12(r2)
10114a88:	10000826 	beq	r2,zero,10114aac <open+0xfc>
10114a8c:	e0bff817 	ldw	r2,-32(fp)
10114a90:	10800317 	ldw	r2,12(r2)
10114a94:	e1ffff17 	ldw	r7,-4(fp)
10114a98:	e1bffe17 	ldw	r6,-8(fp)
10114a9c:	e17ffd17 	ldw	r5,-12(fp)
10114aa0:	e13ffc17 	ldw	r4,-16(fp)
10114aa4:	103ee83a 	callr	r2
10114aa8:	00000106 	br	10114ab0 <open+0x100>
10114aac:	0005883a 	mov	r2,zero
10114ab0:	e0bffa15 	stw	r2,-24(fp)
10114ab4:	00000206 	br	10114ac0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10114ab8:	00bffb44 	movi	r2,-19
10114abc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10114ac0:	e0bffa17 	ldw	r2,-24(fp)
10114ac4:	1000090e 	bge	r2,zero,10114aec <open+0x13c>
  {
    alt_release_fd (index);  
10114ac8:	e13ff917 	ldw	r4,-28(fp)
10114acc:	0114ea40 	call	10114ea4 <alt_release_fd>
    ALT_ERRNO = -status;
10114ad0:	01148b00 	call	101148b0 <alt_get_errno>
10114ad4:	1007883a 	mov	r3,r2
10114ad8:	e0bffa17 	ldw	r2,-24(fp)
10114adc:	0085c83a 	sub	r2,zero,r2
10114ae0:	18800015 	stw	r2,0(r3)
    return -1;
10114ae4:	00bfffc4 	movi	r2,-1
10114ae8:	00000106 	br	10114af0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10114aec:	e0bff917 	ldw	r2,-28(fp)
}
10114af0:	e037883a 	mov	sp,fp
10114af4:	dfc00117 	ldw	ra,4(sp)
10114af8:	df000017 	ldw	fp,0(sp)
10114afc:	dec00204 	addi	sp,sp,8
10114b00:	f800283a 	ret

10114b04 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
10114b04:	defff204 	addi	sp,sp,-56
10114b08:	dfc00a15 	stw	ra,40(sp)
10114b0c:	df000915 	stw	fp,36(sp)
10114b10:	df000904 	addi	fp,sp,36
10114b14:	e13fff15 	stw	r4,-4(fp)
10114b18:	e1400215 	stw	r5,8(fp)
10114b1c:	e1800315 	stw	r6,12(fp)
10114b20:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
10114b24:	e0800204 	addi	r2,fp,8
10114b28:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
10114b2c:	e0bfff17 	ldw	r2,-4(fp)
10114b30:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
10114b34:	00006f06 	br	10114cf4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
10114b38:	e0bff807 	ldb	r2,-32(fp)
10114b3c:	10800960 	cmpeqi	r2,r2,37
10114b40:	1000041e 	bne	r2,zero,10114b54 <alt_printf+0x50>
        {
            alt_putchar(c);
10114b44:	e0bff807 	ldb	r2,-32(fp)
10114b48:	1009883a 	mov	r4,r2
10114b4c:	0114d300 	call	10114d30 <alt_putchar>
10114b50:	00006806 	br	10114cf4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
10114b54:	e0bff717 	ldw	r2,-36(fp)
10114b58:	10c00044 	addi	r3,r2,1
10114b5c:	e0fff715 	stw	r3,-36(fp)
10114b60:	10800003 	ldbu	r2,0(r2)
10114b64:	e0bff805 	stb	r2,-32(fp)
10114b68:	e0bff807 	ldb	r2,-32(fp)
10114b6c:	10006926 	beq	r2,zero,10114d14 <alt_printf+0x210>
            {
                if (c == '%')
10114b70:	e0bff807 	ldb	r2,-32(fp)
10114b74:	10800958 	cmpnei	r2,r2,37
10114b78:	1000041e 	bne	r2,zero,10114b8c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
10114b7c:	e0bff807 	ldb	r2,-32(fp)
10114b80:	1009883a 	mov	r4,r2
10114b84:	0114d300 	call	10114d30 <alt_putchar>
10114b88:	00005a06 	br	10114cf4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
10114b8c:	e0bff807 	ldb	r2,-32(fp)
10114b90:	108018d8 	cmpnei	r2,r2,99
10114b94:	1000081e 	bne	r2,zero,10114bb8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
10114b98:	e0bffe17 	ldw	r2,-8(fp)
10114b9c:	10c00104 	addi	r3,r2,4
10114ba0:	e0fffe15 	stw	r3,-8(fp)
10114ba4:	10800017 	ldw	r2,0(r2)
10114ba8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
10114bac:	e13ffd17 	ldw	r4,-12(fp)
10114bb0:	0114d300 	call	10114d30 <alt_putchar>
10114bb4:	00004f06 	br	10114cf4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
10114bb8:	e0bff807 	ldb	r2,-32(fp)
10114bbc:	10801e18 	cmpnei	r2,r2,120
10114bc0:	1000341e 	bne	r2,zero,10114c94 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
10114bc4:	e0bffe17 	ldw	r2,-8(fp)
10114bc8:	10c00104 	addi	r3,r2,4
10114bcc:	e0fffe15 	stw	r3,-8(fp)
10114bd0:	10800017 	ldw	r2,0(r2)
10114bd4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
10114bd8:	e0bffb17 	ldw	r2,-20(fp)
10114bdc:	1000031e 	bne	r2,zero,10114bec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
10114be0:	01000c04 	movi	r4,48
10114be4:	0114d300 	call	10114d30 <alt_putchar>
                        continue;
10114be8:	00004206 	br	10114cf4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
10114bec:	00800704 	movi	r2,28
10114bf0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
10114bf4:	00000306 	br	10114c04 <alt_printf+0x100>
                        digit_shift -= 4;
10114bf8:	e0bff917 	ldw	r2,-28(fp)
10114bfc:	10bfff04 	addi	r2,r2,-4
10114c00:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
10114c04:	00c003c4 	movi	r3,15
10114c08:	e0bff917 	ldw	r2,-28(fp)
10114c0c:	1884983a 	sll	r2,r3,r2
10114c10:	1007883a 	mov	r3,r2
10114c14:	e0bffb17 	ldw	r2,-20(fp)
10114c18:	1884703a 	and	r2,r3,r2
10114c1c:	103ff626 	beq	r2,zero,10114bf8 <_gp+0xffff3668>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
10114c20:	00001906 	br	10114c88 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
10114c24:	00c003c4 	movi	r3,15
10114c28:	e0bff917 	ldw	r2,-28(fp)
10114c2c:	1884983a 	sll	r2,r3,r2
10114c30:	1007883a 	mov	r3,r2
10114c34:	e0bffb17 	ldw	r2,-20(fp)
10114c38:	1886703a 	and	r3,r3,r2
10114c3c:	e0bff917 	ldw	r2,-28(fp)
10114c40:	1884d83a 	srl	r2,r3,r2
10114c44:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
10114c48:	e0bffc17 	ldw	r2,-16(fp)
10114c4c:	108002a8 	cmpgeui	r2,r2,10
10114c50:	1000041e 	bne	r2,zero,10114c64 <alt_printf+0x160>
                            c = '0' + digit;
10114c54:	e0bffc17 	ldw	r2,-16(fp)
10114c58:	10800c04 	addi	r2,r2,48
10114c5c:	e0bff805 	stb	r2,-32(fp)
10114c60:	00000306 	br	10114c70 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
10114c64:	e0bffc17 	ldw	r2,-16(fp)
10114c68:	108015c4 	addi	r2,r2,87
10114c6c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
10114c70:	e0bff807 	ldb	r2,-32(fp)
10114c74:	1009883a 	mov	r4,r2
10114c78:	0114d300 	call	10114d30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
10114c7c:	e0bff917 	ldw	r2,-28(fp)
10114c80:	10bfff04 	addi	r2,r2,-4
10114c84:	e0bff915 	stw	r2,-28(fp)
10114c88:	e0bff917 	ldw	r2,-28(fp)
10114c8c:	103fe50e 	bge	r2,zero,10114c24 <_gp+0xffff3694>
10114c90:	00001806 	br	10114cf4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
10114c94:	e0bff807 	ldb	r2,-32(fp)
10114c98:	10801cd8 	cmpnei	r2,r2,115
10114c9c:	1000151e 	bne	r2,zero,10114cf4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
10114ca0:	e0bffe17 	ldw	r2,-8(fp)
10114ca4:	10c00104 	addi	r3,r2,4
10114ca8:	e0fffe15 	stw	r3,-8(fp)
10114cac:	10800017 	ldw	r2,0(r2)
10114cb0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
10114cb4:	00000906 	br	10114cdc <alt_printf+0x1d8>
                      alt_putchar(*s++);
10114cb8:	e0bffa17 	ldw	r2,-24(fp)
10114cbc:	10c00044 	addi	r3,r2,1
10114cc0:	e0fffa15 	stw	r3,-24(fp)
10114cc4:	10800003 	ldbu	r2,0(r2)
10114cc8:	10803fcc 	andi	r2,r2,255
10114ccc:	1080201c 	xori	r2,r2,128
10114cd0:	10bfe004 	addi	r2,r2,-128
10114cd4:	1009883a 	mov	r4,r2
10114cd8:	0114d300 	call	10114d30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
10114cdc:	e0bffa17 	ldw	r2,-24(fp)
10114ce0:	10800003 	ldbu	r2,0(r2)
10114ce4:	10803fcc 	andi	r2,r2,255
10114ce8:	1080201c 	xori	r2,r2,128
10114cec:	10bfe004 	addi	r2,r2,-128
10114cf0:	103ff11e 	bne	r2,zero,10114cb8 <_gp+0xffff3728>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
10114cf4:	e0bff717 	ldw	r2,-36(fp)
10114cf8:	10c00044 	addi	r3,r2,1
10114cfc:	e0fff715 	stw	r3,-36(fp)
10114d00:	10800003 	ldbu	r2,0(r2)
10114d04:	e0bff805 	stb	r2,-32(fp)
10114d08:	e0bff807 	ldb	r2,-32(fp)
10114d0c:	103f8a1e 	bne	r2,zero,10114b38 <_gp+0xffff35a8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
10114d10:	00000106 	br	10114d18 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
10114d14:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
10114d18:	0001883a 	nop
10114d1c:	e037883a 	mov	sp,fp
10114d20:	dfc00117 	ldw	ra,4(sp)
10114d24:	df000017 	ldw	fp,0(sp)
10114d28:	dec00504 	addi	sp,sp,20
10114d2c:	f800283a 	ret

10114d30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
10114d30:	defffd04 	addi	sp,sp,-12
10114d34:	dfc00215 	stw	ra,8(sp)
10114d38:	df000115 	stw	fp,4(sp)
10114d3c:	df000104 	addi	fp,sp,4
10114d40:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
10114d44:	d0a00117 	ldw	r2,-32764(gp)
10114d48:	10800217 	ldw	r2,8(r2)
10114d4c:	100b883a 	mov	r5,r2
10114d50:	e13fff17 	ldw	r4,-4(fp)
10114d54:	01170600 	call	10117060 <putc>
#endif
#endif
}
10114d58:	e037883a 	mov	sp,fp
10114d5c:	dfc00117 	ldw	ra,4(sp)
10114d60:	df000017 	ldw	fp,0(sp)
10114d64:	dec00204 	addi	sp,sp,8
10114d68:	f800283a 	ret

10114d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10114d6c:	defffe04 	addi	sp,sp,-8
10114d70:	dfc00115 	stw	ra,4(sp)
10114d74:	df000015 	stw	fp,0(sp)
10114d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114d7c:	d0a00b17 	ldw	r2,-32724(gp)
10114d80:	10000326 	beq	r2,zero,10114d90 <alt_get_errno+0x24>
10114d84:	d0a00b17 	ldw	r2,-32724(gp)
10114d88:	103ee83a 	callr	r2
10114d8c:	00000106 	br	10114d94 <alt_get_errno+0x28>
10114d90:	d0a6fa04 	addi	r2,gp,-25624
}
10114d94:	e037883a 	mov	sp,fp
10114d98:	dfc00117 	ldw	ra,4(sp)
10114d9c:	df000017 	ldw	fp,0(sp)
10114da0:	dec00204 	addi	sp,sp,8
10114da4:	f800283a 	ret

10114da8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10114da8:	defff904 	addi	sp,sp,-28
10114dac:	dfc00615 	stw	ra,24(sp)
10114db0:	df000515 	stw	fp,20(sp)
10114db4:	df000504 	addi	fp,sp,20
10114db8:	e13ffd15 	stw	r4,-12(fp)
10114dbc:	e17ffe15 	stw	r5,-8(fp)
10114dc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114dc4:	e0bffd17 	ldw	r2,-12(fp)
10114dc8:	10000616 	blt	r2,zero,10114de4 <read+0x3c>
10114dcc:	e0bffd17 	ldw	r2,-12(fp)
10114dd0:	10c00324 	muli	r3,r2,12
10114dd4:	008404b4 	movhi	r2,4114
10114dd8:	10a0e204 	addi	r2,r2,-31864
10114ddc:	1885883a 	add	r2,r3,r2
10114de0:	00000106 	br	10114de8 <read+0x40>
10114de4:	0005883a 	mov	r2,zero
10114de8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10114dec:	e0bffb17 	ldw	r2,-20(fp)
10114df0:	10002226 	beq	r2,zero,10114e7c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10114df4:	e0bffb17 	ldw	r2,-20(fp)
10114df8:	10800217 	ldw	r2,8(r2)
10114dfc:	108000cc 	andi	r2,r2,3
10114e00:	10800060 	cmpeqi	r2,r2,1
10114e04:	1000181e 	bne	r2,zero,10114e68 <read+0xc0>
        (fd->dev->read))
10114e08:	e0bffb17 	ldw	r2,-20(fp)
10114e0c:	10800017 	ldw	r2,0(r2)
10114e10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10114e14:	10001426 	beq	r2,zero,10114e68 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10114e18:	e0bffb17 	ldw	r2,-20(fp)
10114e1c:	10800017 	ldw	r2,0(r2)
10114e20:	10800517 	ldw	r2,20(r2)
10114e24:	e0ffff17 	ldw	r3,-4(fp)
10114e28:	180d883a 	mov	r6,r3
10114e2c:	e17ffe17 	ldw	r5,-8(fp)
10114e30:	e13ffb17 	ldw	r4,-20(fp)
10114e34:	103ee83a 	callr	r2
10114e38:	e0bffc15 	stw	r2,-16(fp)
10114e3c:	e0bffc17 	ldw	r2,-16(fp)
10114e40:	1000070e 	bge	r2,zero,10114e60 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10114e44:	0114d6c0 	call	10114d6c <alt_get_errno>
10114e48:	1007883a 	mov	r3,r2
10114e4c:	e0bffc17 	ldw	r2,-16(fp)
10114e50:	0085c83a 	sub	r2,zero,r2
10114e54:	18800015 	stw	r2,0(r3)
          return -1;
10114e58:	00bfffc4 	movi	r2,-1
10114e5c:	00000c06 	br	10114e90 <read+0xe8>
        }
        return rval;
10114e60:	e0bffc17 	ldw	r2,-16(fp)
10114e64:	00000a06 	br	10114e90 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10114e68:	0114d6c0 	call	10114d6c <alt_get_errno>
10114e6c:	1007883a 	mov	r3,r2
10114e70:	00800344 	movi	r2,13
10114e74:	18800015 	stw	r2,0(r3)
10114e78:	00000406 	br	10114e8c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10114e7c:	0114d6c0 	call	10114d6c <alt_get_errno>
10114e80:	1007883a 	mov	r3,r2
10114e84:	00801444 	movi	r2,81
10114e88:	18800015 	stw	r2,0(r3)
  }
  return -1;
10114e8c:	00bfffc4 	movi	r2,-1
}
10114e90:	e037883a 	mov	sp,fp
10114e94:	dfc00117 	ldw	ra,4(sp)
10114e98:	df000017 	ldw	fp,0(sp)
10114e9c:	dec00204 	addi	sp,sp,8
10114ea0:	f800283a 	ret

10114ea4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10114ea4:	defffe04 	addi	sp,sp,-8
10114ea8:	df000115 	stw	fp,4(sp)
10114eac:	df000104 	addi	fp,sp,4
10114eb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10114eb4:	e0bfff17 	ldw	r2,-4(fp)
10114eb8:	108000d0 	cmplti	r2,r2,3
10114ebc:	10000d1e 	bne	r2,zero,10114ef4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10114ec0:	008404b4 	movhi	r2,4114
10114ec4:	10a0e204 	addi	r2,r2,-31864
10114ec8:	e0ffff17 	ldw	r3,-4(fp)
10114ecc:	18c00324 	muli	r3,r3,12
10114ed0:	10c5883a 	add	r2,r2,r3
10114ed4:	10800204 	addi	r2,r2,8
10114ed8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10114edc:	008404b4 	movhi	r2,4114
10114ee0:	10a0e204 	addi	r2,r2,-31864
10114ee4:	e0ffff17 	ldw	r3,-4(fp)
10114ee8:	18c00324 	muli	r3,r3,12
10114eec:	10c5883a 	add	r2,r2,r3
10114ef0:	10000015 	stw	zero,0(r2)
  }
}
10114ef4:	0001883a 	nop
10114ef8:	e037883a 	mov	sp,fp
10114efc:	df000017 	ldw	fp,0(sp)
10114f00:	dec00104 	addi	sp,sp,4
10114f04:	f800283a 	ret

10114f08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10114f08:	defff904 	addi	sp,sp,-28
10114f0c:	df000615 	stw	fp,24(sp)
10114f10:	df000604 	addi	fp,sp,24
10114f14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10114f18:	0005303a 	rdctl	r2,status
10114f1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10114f20:	e0fffe17 	ldw	r3,-8(fp)
10114f24:	00bfff84 	movi	r2,-2
10114f28:	1884703a 	and	r2,r3,r2
10114f2c:	1001703a 	wrctl	status,r2
  
  return context;
10114f30:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10114f34:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10114f38:	d0a00c17 	ldw	r2,-32720(gp)
10114f3c:	10c000c4 	addi	r3,r2,3
10114f40:	00bfff04 	movi	r2,-4
10114f44:	1884703a 	and	r2,r3,r2
10114f48:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10114f4c:	d0e00c17 	ldw	r3,-32720(gp)
10114f50:	e0bfff17 	ldw	r2,-4(fp)
10114f54:	1887883a 	add	r3,r3,r2
10114f58:	008404b4 	movhi	r2,4114
10114f5c:	10800004 	addi	r2,r2,0
10114f60:	10c0062e 	bgeu	r2,r3,10114f7c <sbrk+0x74>
10114f64:	e0bffb17 	ldw	r2,-20(fp)
10114f68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10114f6c:	e0bffa17 	ldw	r2,-24(fp)
10114f70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10114f74:	00bfffc4 	movi	r2,-1
10114f78:	00000b06 	br	10114fa8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10114f7c:	d0a00c17 	ldw	r2,-32720(gp)
10114f80:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10114f84:	d0e00c17 	ldw	r3,-32720(gp)
10114f88:	e0bfff17 	ldw	r2,-4(fp)
10114f8c:	1885883a 	add	r2,r3,r2
10114f90:	d0a00c15 	stw	r2,-32720(gp)
10114f94:	e0bffb17 	ldw	r2,-20(fp)
10114f98:	e0bffc15 	stw	r2,-16(fp)
10114f9c:	e0bffc17 	ldw	r2,-16(fp)
10114fa0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10114fa4:	e0bffd17 	ldw	r2,-12(fp)
} 
10114fa8:	e037883a 	mov	sp,fp
10114fac:	df000017 	ldw	fp,0(sp)
10114fb0:	dec00104 	addi	sp,sp,4
10114fb4:	f800283a 	ret

10114fb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10114fb8:	defffa04 	addi	sp,sp,-24
10114fbc:	df000515 	stw	fp,20(sp)
10114fc0:	df000504 	addi	fp,sp,20
10114fc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10114fc8:	0005303a 	rdctl	r2,status
10114fcc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10114fd0:	e0fffc17 	ldw	r3,-16(fp)
10114fd4:	00bfff84 	movi	r2,-2
10114fd8:	1884703a 	and	r2,r3,r2
10114fdc:	1001703a 	wrctl	status,r2
  
  return context;
10114fe0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10114fe4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10114fe8:	e0bfff17 	ldw	r2,-4(fp)
10114fec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10114ff0:	e0bffd17 	ldw	r2,-12(fp)
10114ff4:	10800017 	ldw	r2,0(r2)
10114ff8:	e0fffd17 	ldw	r3,-12(fp)
10114ffc:	18c00117 	ldw	r3,4(r3)
10115000:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10115004:	e0bffd17 	ldw	r2,-12(fp)
10115008:	10800117 	ldw	r2,4(r2)
1011500c:	e0fffd17 	ldw	r3,-12(fp)
10115010:	18c00017 	ldw	r3,0(r3)
10115014:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10115018:	e0bffd17 	ldw	r2,-12(fp)
1011501c:	e0fffd17 	ldw	r3,-12(fp)
10115020:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10115024:	e0bffd17 	ldw	r2,-12(fp)
10115028:	e0fffd17 	ldw	r3,-12(fp)
1011502c:	10c00015 	stw	r3,0(r2)
10115030:	e0bffb17 	ldw	r2,-20(fp)
10115034:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115038:	e0bffe17 	ldw	r2,-8(fp)
1011503c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10115040:	0001883a 	nop
10115044:	e037883a 	mov	sp,fp
10115048:	df000017 	ldw	fp,0(sp)
1011504c:	dec00104 	addi	sp,sp,4
10115050:	f800283a 	ret

10115054 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10115054:	defffb04 	addi	sp,sp,-20
10115058:	dfc00415 	stw	ra,16(sp)
1011505c:	df000315 	stw	fp,12(sp)
10115060:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10115064:	d0a00d17 	ldw	r2,-32716(gp)
10115068:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1011506c:	d0a70917 	ldw	r2,-25564(gp)
10115070:	10800044 	addi	r2,r2,1
10115074:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10115078:	00002e06 	br	10115134 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1011507c:	e0bffd17 	ldw	r2,-12(fp)
10115080:	10800017 	ldw	r2,0(r2)
10115084:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10115088:	e0bffd17 	ldw	r2,-12(fp)
1011508c:	10800403 	ldbu	r2,16(r2)
10115090:	10803fcc 	andi	r2,r2,255
10115094:	10000426 	beq	r2,zero,101150a8 <alt_tick+0x54>
10115098:	d0a70917 	ldw	r2,-25564(gp)
1011509c:	1000021e 	bne	r2,zero,101150a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
101150a0:	e0bffd17 	ldw	r2,-12(fp)
101150a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
101150a8:	e0bffd17 	ldw	r2,-12(fp)
101150ac:	10800217 	ldw	r2,8(r2)
101150b0:	d0e70917 	ldw	r3,-25564(gp)
101150b4:	18801d36 	bltu	r3,r2,1011512c <alt_tick+0xd8>
101150b8:	e0bffd17 	ldw	r2,-12(fp)
101150bc:	10800403 	ldbu	r2,16(r2)
101150c0:	10803fcc 	andi	r2,r2,255
101150c4:	1000191e 	bne	r2,zero,1011512c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
101150c8:	e0bffd17 	ldw	r2,-12(fp)
101150cc:	10800317 	ldw	r2,12(r2)
101150d0:	e0fffd17 	ldw	r3,-12(fp)
101150d4:	18c00517 	ldw	r3,20(r3)
101150d8:	1809883a 	mov	r4,r3
101150dc:	103ee83a 	callr	r2
101150e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
101150e4:	e0bfff17 	ldw	r2,-4(fp)
101150e8:	1000031e 	bne	r2,zero,101150f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
101150ec:	e13ffd17 	ldw	r4,-12(fp)
101150f0:	0114fb80 	call	10114fb8 <alt_alarm_stop>
101150f4:	00000d06 	br	1011512c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101150f8:	e0bffd17 	ldw	r2,-12(fp)
101150fc:	10c00217 	ldw	r3,8(r2)
10115100:	e0bfff17 	ldw	r2,-4(fp)
10115104:	1887883a 	add	r3,r3,r2
10115108:	e0bffd17 	ldw	r2,-12(fp)
1011510c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10115110:	e0bffd17 	ldw	r2,-12(fp)
10115114:	10c00217 	ldw	r3,8(r2)
10115118:	d0a70917 	ldw	r2,-25564(gp)
1011511c:	1880032e 	bgeu	r3,r2,1011512c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10115120:	e0bffd17 	ldw	r2,-12(fp)
10115124:	00c00044 	movi	r3,1
10115128:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1011512c:	e0bffe17 	ldw	r2,-8(fp)
10115130:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10115134:	e0fffd17 	ldw	r3,-12(fp)
10115138:	d0a00d04 	addi	r2,gp,-32716
1011513c:	18bfcf1e 	bne	r3,r2,1011507c <_gp+0xffff3aec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10115140:	0001883a 	nop
}
10115144:	0001883a 	nop
10115148:	e037883a 	mov	sp,fp
1011514c:	dfc00117 	ldw	ra,4(sp)
10115150:	df000017 	ldw	fp,0(sp)
10115154:	dec00204 	addi	sp,sp,8
10115158:	f800283a 	ret

1011515c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1011515c:	defffd04 	addi	sp,sp,-12
10115160:	dfc00215 	stw	ra,8(sp)
10115164:	df000115 	stw	fp,4(sp)
10115168:	df000104 	addi	fp,sp,4
1011516c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10115170:	e13fff17 	ldw	r4,-4(fp)
10115174:	01163980 	call	10116398 <alt_busy_sleep>
}
10115178:	e037883a 	mov	sp,fp
1011517c:	dfc00117 	ldw	ra,4(sp)
10115180:	df000017 	ldw	fp,0(sp)
10115184:	dec00204 	addi	sp,sp,8
10115188:	f800283a 	ret

1011518c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1011518c:	defffe04 	addi	sp,sp,-8
10115190:	dfc00115 	stw	ra,4(sp)
10115194:	df000015 	stw	fp,0(sp)
10115198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1011519c:	d0a00b17 	ldw	r2,-32724(gp)
101151a0:	10000326 	beq	r2,zero,101151b0 <alt_get_errno+0x24>
101151a4:	d0a00b17 	ldw	r2,-32724(gp)
101151a8:	103ee83a 	callr	r2
101151ac:	00000106 	br	101151b4 <alt_get_errno+0x28>
101151b0:	d0a6fa04 	addi	r2,gp,-25624
}
101151b4:	e037883a 	mov	sp,fp
101151b8:	dfc00117 	ldw	ra,4(sp)
101151bc:	df000017 	ldw	fp,0(sp)
101151c0:	dec00204 	addi	sp,sp,8
101151c4:	f800283a 	ret

101151c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101151c8:	defff904 	addi	sp,sp,-28
101151cc:	dfc00615 	stw	ra,24(sp)
101151d0:	df000515 	stw	fp,20(sp)
101151d4:	df000504 	addi	fp,sp,20
101151d8:	e13ffd15 	stw	r4,-12(fp)
101151dc:	e17ffe15 	stw	r5,-8(fp)
101151e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101151e4:	e0bffd17 	ldw	r2,-12(fp)
101151e8:	10000616 	blt	r2,zero,10115204 <write+0x3c>
101151ec:	e0bffd17 	ldw	r2,-12(fp)
101151f0:	10c00324 	muli	r3,r2,12
101151f4:	008404b4 	movhi	r2,4114
101151f8:	10a0e204 	addi	r2,r2,-31864
101151fc:	1885883a 	add	r2,r3,r2
10115200:	00000106 	br	10115208 <write+0x40>
10115204:	0005883a 	mov	r2,zero
10115208:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1011520c:	e0bffb17 	ldw	r2,-20(fp)
10115210:	10002126 	beq	r2,zero,10115298 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10115214:	e0bffb17 	ldw	r2,-20(fp)
10115218:	10800217 	ldw	r2,8(r2)
1011521c:	108000cc 	andi	r2,r2,3
10115220:	10001826 	beq	r2,zero,10115284 <write+0xbc>
10115224:	e0bffb17 	ldw	r2,-20(fp)
10115228:	10800017 	ldw	r2,0(r2)
1011522c:	10800617 	ldw	r2,24(r2)
10115230:	10001426 	beq	r2,zero,10115284 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10115234:	e0bffb17 	ldw	r2,-20(fp)
10115238:	10800017 	ldw	r2,0(r2)
1011523c:	10800617 	ldw	r2,24(r2)
10115240:	e0ffff17 	ldw	r3,-4(fp)
10115244:	180d883a 	mov	r6,r3
10115248:	e17ffe17 	ldw	r5,-8(fp)
1011524c:	e13ffb17 	ldw	r4,-20(fp)
10115250:	103ee83a 	callr	r2
10115254:	e0bffc15 	stw	r2,-16(fp)
10115258:	e0bffc17 	ldw	r2,-16(fp)
1011525c:	1000070e 	bge	r2,zero,1011527c <write+0xb4>
      {
        ALT_ERRNO = -rval;
10115260:	011518c0 	call	1011518c <alt_get_errno>
10115264:	1007883a 	mov	r3,r2
10115268:	e0bffc17 	ldw	r2,-16(fp)
1011526c:	0085c83a 	sub	r2,zero,r2
10115270:	18800015 	stw	r2,0(r3)
        return -1;
10115274:	00bfffc4 	movi	r2,-1
10115278:	00000c06 	br	101152ac <write+0xe4>
      }
      return rval;
1011527c:	e0bffc17 	ldw	r2,-16(fp)
10115280:	00000a06 	br	101152ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10115284:	011518c0 	call	1011518c <alt_get_errno>
10115288:	1007883a 	mov	r3,r2
1011528c:	00800344 	movi	r2,13
10115290:	18800015 	stw	r2,0(r3)
10115294:	00000406 	br	101152a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10115298:	011518c0 	call	1011518c <alt_get_errno>
1011529c:	1007883a 	mov	r3,r2
101152a0:	00801444 	movi	r2,81
101152a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
101152a8:	00bfffc4 	movi	r2,-1
}
101152ac:	e037883a 	mov	sp,fp
101152b0:	dfc00117 	ldw	ra,4(sp)
101152b4:	df000017 	ldw	fp,0(sp)
101152b8:	dec00204 	addi	sp,sp,8
101152bc:	f800283a 	ret

101152c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101152c0:	defffd04 	addi	sp,sp,-12
101152c4:	dfc00215 	stw	ra,8(sp)
101152c8:	df000115 	stw	fp,4(sp)
101152cc:	df000104 	addi	fp,sp,4
101152d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
101152d4:	d1600804 	addi	r5,gp,-32736
101152d8:	e13fff17 	ldw	r4,-4(fp)
101152dc:	01165740 	call	10116574 <alt_dev_llist_insert>
}
101152e0:	e037883a 	mov	sp,fp
101152e4:	dfc00117 	ldw	ra,4(sp)
101152e8:	df000017 	ldw	fp,0(sp)
101152ec:	dec00204 	addi	sp,sp,8
101152f0:	f800283a 	ret

101152f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
101152f4:	defffd04 	addi	sp,sp,-12
101152f8:	dfc00215 	stw	ra,8(sp)
101152fc:	df000115 	stw	fp,4(sp)
10115300:	df000104 	addi	fp,sp,4
10115304:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10115308:	0116da80 	call	10116da8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1011530c:	00800044 	movi	r2,1
10115310:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10115314:	0001883a 	nop
10115318:	e037883a 	mov	sp,fp
1011531c:	dfc00117 	ldw	ra,4(sp)
10115320:	df000017 	ldw	fp,0(sp)
10115324:	dec00204 	addi	sp,sp,8
10115328:	f800283a 	ret

1011532c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1011532c:	defffe04 	addi	sp,sp,-8
10115330:	dfc00115 	stw	ra,4(sp)
10115334:	df000015 	stw	fp,0(sp)
10115338:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1011533c:	01800044 	movi	r6,1
10115340:	000b883a 	mov	r5,zero
10115344:	010404b4 	movhi	r4,4114
10115348:	21214c04 	addi	r4,r4,-31440
1011534c:	01154e40 	call	101154e4 <altera_avalon_jtag_uart_init>
10115350:	010404b4 	movhi	r4,4114
10115354:	21214204 	addi	r4,r4,-31480
10115358:	01152c00 	call	101152c0 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1011535c:	010404b4 	movhi	r4,4114
10115360:	21255a04 	addi	r4,r4,-27288
10115364:	01168700 	call	10116870 <alt_fs_reg>
}
10115368:	0001883a 	nop
1011536c:	e037883a 	mov	sp,fp
10115370:	dfc00117 	ldw	ra,4(sp)
10115374:	df000017 	ldw	fp,0(sp)
10115378:	dec00204 	addi	sp,sp,8
1011537c:	f800283a 	ret

10115380 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10115380:	defffa04 	addi	sp,sp,-24
10115384:	dfc00515 	stw	ra,20(sp)
10115388:	df000415 	stw	fp,16(sp)
1011538c:	df000404 	addi	fp,sp,16
10115390:	e13ffd15 	stw	r4,-12(fp)
10115394:	e17ffe15 	stw	r5,-8(fp)
10115398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1011539c:	e0bffd17 	ldw	r2,-12(fp)
101153a0:	10800017 	ldw	r2,0(r2)
101153a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101153a8:	e0bffc17 	ldw	r2,-16(fp)
101153ac:	10c00a04 	addi	r3,r2,40
101153b0:	e0bffd17 	ldw	r2,-12(fp)
101153b4:	10800217 	ldw	r2,8(r2)
101153b8:	100f883a 	mov	r7,r2
101153bc:	e1bfff17 	ldw	r6,-4(fp)
101153c0:	e17ffe17 	ldw	r5,-8(fp)
101153c4:	1809883a 	mov	r4,r3
101153c8:	01159a80 	call	101159a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
101153cc:	e037883a 	mov	sp,fp
101153d0:	dfc00117 	ldw	ra,4(sp)
101153d4:	df000017 	ldw	fp,0(sp)
101153d8:	dec00204 	addi	sp,sp,8
101153dc:	f800283a 	ret

101153e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
101153e0:	defffa04 	addi	sp,sp,-24
101153e4:	dfc00515 	stw	ra,20(sp)
101153e8:	df000415 	stw	fp,16(sp)
101153ec:	df000404 	addi	fp,sp,16
101153f0:	e13ffd15 	stw	r4,-12(fp)
101153f4:	e17ffe15 	stw	r5,-8(fp)
101153f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101153fc:	e0bffd17 	ldw	r2,-12(fp)
10115400:	10800017 	ldw	r2,0(r2)
10115404:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10115408:	e0bffc17 	ldw	r2,-16(fp)
1011540c:	10c00a04 	addi	r3,r2,40
10115410:	e0bffd17 	ldw	r2,-12(fp)
10115414:	10800217 	ldw	r2,8(r2)
10115418:	100f883a 	mov	r7,r2
1011541c:	e1bfff17 	ldw	r6,-4(fp)
10115420:	e17ffe17 	ldw	r5,-8(fp)
10115424:	1809883a 	mov	r4,r3
10115428:	0115bc40 	call	10115bc4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1011542c:	e037883a 	mov	sp,fp
10115430:	dfc00117 	ldw	ra,4(sp)
10115434:	df000017 	ldw	fp,0(sp)
10115438:	dec00204 	addi	sp,sp,8
1011543c:	f800283a 	ret

10115440 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10115440:	defffc04 	addi	sp,sp,-16
10115444:	dfc00315 	stw	ra,12(sp)
10115448:	df000215 	stw	fp,8(sp)
1011544c:	df000204 	addi	fp,sp,8
10115450:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10115454:	e0bfff17 	ldw	r2,-4(fp)
10115458:	10800017 	ldw	r2,0(r2)
1011545c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10115460:	e0bffe17 	ldw	r2,-8(fp)
10115464:	10c00a04 	addi	r3,r2,40
10115468:	e0bfff17 	ldw	r2,-4(fp)
1011546c:	10800217 	ldw	r2,8(r2)
10115470:	100b883a 	mov	r5,r2
10115474:	1809883a 	mov	r4,r3
10115478:	01158500 	call	10115850 <altera_avalon_jtag_uart_close>
}
1011547c:	e037883a 	mov	sp,fp
10115480:	dfc00117 	ldw	ra,4(sp)
10115484:	df000017 	ldw	fp,0(sp)
10115488:	dec00204 	addi	sp,sp,8
1011548c:	f800283a 	ret

10115490 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10115490:	defffa04 	addi	sp,sp,-24
10115494:	dfc00515 	stw	ra,20(sp)
10115498:	df000415 	stw	fp,16(sp)
1011549c:	df000404 	addi	fp,sp,16
101154a0:	e13ffd15 	stw	r4,-12(fp)
101154a4:	e17ffe15 	stw	r5,-8(fp)
101154a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
101154ac:	e0bffd17 	ldw	r2,-12(fp)
101154b0:	10800017 	ldw	r2,0(r2)
101154b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
101154b8:	e0bffc17 	ldw	r2,-16(fp)
101154bc:	10800a04 	addi	r2,r2,40
101154c0:	e1bfff17 	ldw	r6,-4(fp)
101154c4:	e17ffe17 	ldw	r5,-8(fp)
101154c8:	1009883a 	mov	r4,r2
101154cc:	01158b80 	call	101158b8 <altera_avalon_jtag_uart_ioctl>
}
101154d0:	e037883a 	mov	sp,fp
101154d4:	dfc00117 	ldw	ra,4(sp)
101154d8:	df000017 	ldw	fp,0(sp)
101154dc:	dec00204 	addi	sp,sp,8
101154e0:	f800283a 	ret

101154e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
101154e4:	defffa04 	addi	sp,sp,-24
101154e8:	dfc00515 	stw	ra,20(sp)
101154ec:	df000415 	stw	fp,16(sp)
101154f0:	df000404 	addi	fp,sp,16
101154f4:	e13ffd15 	stw	r4,-12(fp)
101154f8:	e17ffe15 	stw	r5,-8(fp)
101154fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10115500:	e0bffd17 	ldw	r2,-12(fp)
10115504:	00c00044 	movi	r3,1
10115508:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1011550c:	e0bffd17 	ldw	r2,-12(fp)
10115510:	10800017 	ldw	r2,0(r2)
10115514:	10800104 	addi	r2,r2,4
10115518:	1007883a 	mov	r3,r2
1011551c:	e0bffd17 	ldw	r2,-12(fp)
10115520:	10800817 	ldw	r2,32(r2)
10115524:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10115528:	e0bffe17 	ldw	r2,-8(fp)
1011552c:	e0ffff17 	ldw	r3,-4(fp)
10115530:	d8000015 	stw	zero,0(sp)
10115534:	e1fffd17 	ldw	r7,-12(fp)
10115538:	01840474 	movhi	r6,4113
1011553c:	31956904 	addi	r6,r6,21924
10115540:	180b883a 	mov	r5,r3
10115544:	1009883a 	mov	r4,r2
10115548:	01169c80 	call	101169c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1011554c:	e0bffd17 	ldw	r2,-12(fp)
10115550:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10115554:	e0bffd17 	ldw	r2,-12(fp)
10115558:	10800204 	addi	r2,r2,8
1011555c:	d0e70817 	ldw	r3,-25568(gp)
10115560:	e1fffd17 	ldw	r7,-12(fp)
10115564:	01840474 	movhi	r6,4113
10115568:	3195ec04 	addi	r6,r6,22448
1011556c:	180b883a 	mov	r5,r3
10115570:	1009883a 	mov	r4,r2
10115574:	011626c0 	call	1011626c <alt_alarm_start>
10115578:	1000040e 	bge	r2,zero,1011558c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1011557c:	e0fffd17 	ldw	r3,-12(fp)
10115580:	00a00034 	movhi	r2,32768
10115584:	10bfffc4 	addi	r2,r2,-1
10115588:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1011558c:	0001883a 	nop
10115590:	e037883a 	mov	sp,fp
10115594:	dfc00117 	ldw	ra,4(sp)
10115598:	df000017 	ldw	fp,0(sp)
1011559c:	dec00204 	addi	sp,sp,8
101155a0:	f800283a 	ret

101155a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
101155a4:	defff804 	addi	sp,sp,-32
101155a8:	df000715 	stw	fp,28(sp)
101155ac:	df000704 	addi	fp,sp,28
101155b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
101155b4:	e0bfff17 	ldw	r2,-4(fp)
101155b8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
101155bc:	e0bffb17 	ldw	r2,-20(fp)
101155c0:	10800017 	ldw	r2,0(r2)
101155c4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101155c8:	e0bffc17 	ldw	r2,-16(fp)
101155cc:	10800104 	addi	r2,r2,4
101155d0:	10800037 	ldwio	r2,0(r2)
101155d4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
101155d8:	e0bffd17 	ldw	r2,-12(fp)
101155dc:	1080c00c 	andi	r2,r2,768
101155e0:	10006d26 	beq	r2,zero,10115798 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
101155e4:	e0bffd17 	ldw	r2,-12(fp)
101155e8:	1080400c 	andi	r2,r2,256
101155ec:	10003526 	beq	r2,zero,101156c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
101155f0:	00800074 	movhi	r2,1
101155f4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101155f8:	e0bffb17 	ldw	r2,-20(fp)
101155fc:	10800a17 	ldw	r2,40(r2)
10115600:	10800044 	addi	r2,r2,1
10115604:	1081ffcc 	andi	r2,r2,2047
10115608:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1011560c:	e0bffb17 	ldw	r2,-20(fp)
10115610:	10c00b17 	ldw	r3,44(r2)
10115614:	e0bffe17 	ldw	r2,-8(fp)
10115618:	18801526 	beq	r3,r2,10115670 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1011561c:	e0bffc17 	ldw	r2,-16(fp)
10115620:	10800037 	ldwio	r2,0(r2)
10115624:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10115628:	e0bff917 	ldw	r2,-28(fp)
1011562c:	10a0000c 	andi	r2,r2,32768
10115630:	10001126 	beq	r2,zero,10115678 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10115634:	e0bffb17 	ldw	r2,-20(fp)
10115638:	10800a17 	ldw	r2,40(r2)
1011563c:	e0fff917 	ldw	r3,-28(fp)
10115640:	1809883a 	mov	r4,r3
10115644:	e0fffb17 	ldw	r3,-20(fp)
10115648:	1885883a 	add	r2,r3,r2
1011564c:	10800e04 	addi	r2,r2,56
10115650:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115654:	e0bffb17 	ldw	r2,-20(fp)
10115658:	10800a17 	ldw	r2,40(r2)
1011565c:	10800044 	addi	r2,r2,1
10115660:	10c1ffcc 	andi	r3,r2,2047
10115664:	e0bffb17 	ldw	r2,-20(fp)
10115668:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1011566c:	003fe206 	br	101155f8 <_gp+0xffff4068>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10115670:	0001883a 	nop
10115674:	00000106 	br	1011567c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10115678:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1011567c:	e0bff917 	ldw	r2,-28(fp)
10115680:	10bfffec 	andhi	r2,r2,65535
10115684:	10000f26 	beq	r2,zero,101156c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10115688:	e0bffb17 	ldw	r2,-20(fp)
1011568c:	10c00817 	ldw	r3,32(r2)
10115690:	00bfff84 	movi	r2,-2
10115694:	1886703a 	and	r3,r3,r2
10115698:	e0bffb17 	ldw	r2,-20(fp)
1011569c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
101156a0:	e0bffc17 	ldw	r2,-16(fp)
101156a4:	10800104 	addi	r2,r2,4
101156a8:	1007883a 	mov	r3,r2
101156ac:	e0bffb17 	ldw	r2,-20(fp)
101156b0:	10800817 	ldw	r2,32(r2)
101156b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101156b8:	e0bffc17 	ldw	r2,-16(fp)
101156bc:	10800104 	addi	r2,r2,4
101156c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
101156c4:	e0bffd17 	ldw	r2,-12(fp)
101156c8:	1080800c 	andi	r2,r2,512
101156cc:	103fbe26 	beq	r2,zero,101155c8 <_gp+0xffff4038>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
101156d0:	e0bffd17 	ldw	r2,-12(fp)
101156d4:	1004d43a 	srli	r2,r2,16
101156d8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
101156dc:	00001406 	br	10115730 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
101156e0:	e0bffc17 	ldw	r2,-16(fp)
101156e4:	e0fffb17 	ldw	r3,-20(fp)
101156e8:	18c00d17 	ldw	r3,52(r3)
101156ec:	e13ffb17 	ldw	r4,-20(fp)
101156f0:	20c7883a 	add	r3,r4,r3
101156f4:	18c20e04 	addi	r3,r3,2104
101156f8:	18c00003 	ldbu	r3,0(r3)
101156fc:	18c03fcc 	andi	r3,r3,255
10115700:	18c0201c 	xori	r3,r3,128
10115704:	18ffe004 	addi	r3,r3,-128
10115708:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1011570c:	e0bffb17 	ldw	r2,-20(fp)
10115710:	10800d17 	ldw	r2,52(r2)
10115714:	10800044 	addi	r2,r2,1
10115718:	10c1ffcc 	andi	r3,r2,2047
1011571c:	e0bffb17 	ldw	r2,-20(fp)
10115720:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10115724:	e0bffa17 	ldw	r2,-24(fp)
10115728:	10bfffc4 	addi	r2,r2,-1
1011572c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10115730:	e0bffa17 	ldw	r2,-24(fp)
10115734:	10000526 	beq	r2,zero,1011574c <altera_avalon_jtag_uart_irq+0x1a8>
10115738:	e0bffb17 	ldw	r2,-20(fp)
1011573c:	10c00d17 	ldw	r3,52(r2)
10115740:	e0bffb17 	ldw	r2,-20(fp)
10115744:	10800c17 	ldw	r2,48(r2)
10115748:	18bfe51e 	bne	r3,r2,101156e0 <_gp+0xffff4150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1011574c:	e0bffa17 	ldw	r2,-24(fp)
10115750:	103f9d26 	beq	r2,zero,101155c8 <_gp+0xffff4038>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10115754:	e0bffb17 	ldw	r2,-20(fp)
10115758:	10c00817 	ldw	r3,32(r2)
1011575c:	00bfff44 	movi	r2,-3
10115760:	1886703a 	and	r3,r3,r2
10115764:	e0bffb17 	ldw	r2,-20(fp)
10115768:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1011576c:	e0bffb17 	ldw	r2,-20(fp)
10115770:	10800017 	ldw	r2,0(r2)
10115774:	10800104 	addi	r2,r2,4
10115778:	1007883a 	mov	r3,r2
1011577c:	e0bffb17 	ldw	r2,-20(fp)
10115780:	10800817 	ldw	r2,32(r2)
10115784:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10115788:	e0bffc17 	ldw	r2,-16(fp)
1011578c:	10800104 	addi	r2,r2,4
10115790:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10115794:	003f8c06 	br	101155c8 <_gp+0xffff4038>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10115798:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1011579c:	0001883a 	nop
101157a0:	e037883a 	mov	sp,fp
101157a4:	df000017 	ldw	fp,0(sp)
101157a8:	dec00104 	addi	sp,sp,4
101157ac:	f800283a 	ret

101157b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
101157b0:	defff804 	addi	sp,sp,-32
101157b4:	df000715 	stw	fp,28(sp)
101157b8:	df000704 	addi	fp,sp,28
101157bc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
101157c0:	e0bffb17 	ldw	r2,-20(fp)
101157c4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
101157c8:	e0bff917 	ldw	r2,-28(fp)
101157cc:	10800017 	ldw	r2,0(r2)
101157d0:	10800104 	addi	r2,r2,4
101157d4:	10800037 	ldwio	r2,0(r2)
101157d8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
101157dc:	e0bffa17 	ldw	r2,-24(fp)
101157e0:	1081000c 	andi	r2,r2,1024
101157e4:	10000b26 	beq	r2,zero,10115814 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
101157e8:	e0bff917 	ldw	r2,-28(fp)
101157ec:	10800017 	ldw	r2,0(r2)
101157f0:	10800104 	addi	r2,r2,4
101157f4:	1007883a 	mov	r3,r2
101157f8:	e0bff917 	ldw	r2,-28(fp)
101157fc:	10800817 	ldw	r2,32(r2)
10115800:	10810014 	ori	r2,r2,1024
10115804:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10115808:	e0bff917 	ldw	r2,-28(fp)
1011580c:	10000915 	stw	zero,36(r2)
10115810:	00000a06 	br	1011583c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10115814:	e0bff917 	ldw	r2,-28(fp)
10115818:	10c00917 	ldw	r3,36(r2)
1011581c:	00a00034 	movhi	r2,32768
10115820:	10bfff04 	addi	r2,r2,-4
10115824:	10c00536 	bltu	r2,r3,1011583c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10115828:	e0bff917 	ldw	r2,-28(fp)
1011582c:	10800917 	ldw	r2,36(r2)
10115830:	10c00044 	addi	r3,r2,1
10115834:	e0bff917 	ldw	r2,-28(fp)
10115838:	10c00915 	stw	r3,36(r2)
1011583c:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10115840:	e037883a 	mov	sp,fp
10115844:	df000017 	ldw	fp,0(sp)
10115848:	dec00104 	addi	sp,sp,4
1011584c:	f800283a 	ret

10115850 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10115850:	defffd04 	addi	sp,sp,-12
10115854:	df000215 	stw	fp,8(sp)
10115858:	df000204 	addi	fp,sp,8
1011585c:	e13ffe15 	stw	r4,-8(fp)
10115860:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10115864:	00000506 	br	1011587c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10115868:	e0bfff17 	ldw	r2,-4(fp)
1011586c:	1090000c 	andi	r2,r2,16384
10115870:	10000226 	beq	r2,zero,1011587c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10115874:	00bffd44 	movi	r2,-11
10115878:	00000b06 	br	101158a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1011587c:	e0bffe17 	ldw	r2,-8(fp)
10115880:	10c00d17 	ldw	r3,52(r2)
10115884:	e0bffe17 	ldw	r2,-8(fp)
10115888:	10800c17 	ldw	r2,48(r2)
1011588c:	18800526 	beq	r3,r2,101158a4 <altera_avalon_jtag_uart_close+0x54>
10115890:	e0bffe17 	ldw	r2,-8(fp)
10115894:	10c00917 	ldw	r3,36(r2)
10115898:	e0bffe17 	ldw	r2,-8(fp)
1011589c:	10800117 	ldw	r2,4(r2)
101158a0:	18bff136 	bltu	r3,r2,10115868 <_gp+0xffff42d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
101158a4:	0005883a 	mov	r2,zero
}
101158a8:	e037883a 	mov	sp,fp
101158ac:	df000017 	ldw	fp,0(sp)
101158b0:	dec00104 	addi	sp,sp,4
101158b4:	f800283a 	ret

101158b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
101158b8:	defffa04 	addi	sp,sp,-24
101158bc:	df000515 	stw	fp,20(sp)
101158c0:	df000504 	addi	fp,sp,20
101158c4:	e13ffd15 	stw	r4,-12(fp)
101158c8:	e17ffe15 	stw	r5,-8(fp)
101158cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
101158d0:	00bff9c4 	movi	r2,-25
101158d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
101158d8:	e0bffe17 	ldw	r2,-8(fp)
101158dc:	10da8060 	cmpeqi	r3,r2,27137
101158e0:	1800031e 	bne	r3,zero,101158f0 <altera_avalon_jtag_uart_ioctl+0x38>
101158e4:	109a80a0 	cmpeqi	r2,r2,27138
101158e8:	1000181e 	bne	r2,zero,1011594c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
101158ec:	00002906 	br	10115994 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
101158f0:	e0bffd17 	ldw	r2,-12(fp)
101158f4:	10c00117 	ldw	r3,4(r2)
101158f8:	00a00034 	movhi	r2,32768
101158fc:	10bfffc4 	addi	r2,r2,-1
10115900:	18802126 	beq	r3,r2,10115988 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10115904:	e0bfff17 	ldw	r2,-4(fp)
10115908:	10800017 	ldw	r2,0(r2)
1011590c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10115910:	e0bffc17 	ldw	r2,-16(fp)
10115914:	10800090 	cmplti	r2,r2,2
10115918:	1000061e 	bne	r2,zero,10115934 <altera_avalon_jtag_uart_ioctl+0x7c>
1011591c:	e0fffc17 	ldw	r3,-16(fp)
10115920:	00a00034 	movhi	r2,32768
10115924:	10bfffc4 	addi	r2,r2,-1
10115928:	18800226 	beq	r3,r2,10115934 <altera_avalon_jtag_uart_ioctl+0x7c>
1011592c:	e0bffc17 	ldw	r2,-16(fp)
10115930:	00000206 	br	1011593c <altera_avalon_jtag_uart_ioctl+0x84>
10115934:	00a00034 	movhi	r2,32768
10115938:	10bfff84 	addi	r2,r2,-2
1011593c:	e0fffd17 	ldw	r3,-12(fp)
10115940:	18800115 	stw	r2,4(r3)
      rc = 0;
10115944:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10115948:	00000f06 	br	10115988 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1011594c:	e0bffd17 	ldw	r2,-12(fp)
10115950:	10c00117 	ldw	r3,4(r2)
10115954:	00a00034 	movhi	r2,32768
10115958:	10bfffc4 	addi	r2,r2,-1
1011595c:	18800c26 	beq	r3,r2,10115990 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10115960:	e0bffd17 	ldw	r2,-12(fp)
10115964:	10c00917 	ldw	r3,36(r2)
10115968:	e0bffd17 	ldw	r2,-12(fp)
1011596c:	10800117 	ldw	r2,4(r2)
10115970:	1885803a 	cmpltu	r2,r3,r2
10115974:	10c03fcc 	andi	r3,r2,255
10115978:	e0bfff17 	ldw	r2,-4(fp)
1011597c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10115980:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10115984:	00000206 	br	10115990 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10115988:	0001883a 	nop
1011598c:	00000106 	br	10115994 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10115990:	0001883a 	nop

  default:
    break;
  }

  return rc;
10115994:	e0bffb17 	ldw	r2,-20(fp)
}
10115998:	e037883a 	mov	sp,fp
1011599c:	df000017 	ldw	fp,0(sp)
101159a0:	dec00104 	addi	sp,sp,4
101159a4:	f800283a 	ret

101159a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
101159a8:	defff304 	addi	sp,sp,-52
101159ac:	dfc00c15 	stw	ra,48(sp)
101159b0:	df000b15 	stw	fp,44(sp)
101159b4:	df000b04 	addi	fp,sp,44
101159b8:	e13ffc15 	stw	r4,-16(fp)
101159bc:	e17ffd15 	stw	r5,-12(fp)
101159c0:	e1bffe15 	stw	r6,-8(fp)
101159c4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101159c8:	e0bffd17 	ldw	r2,-12(fp)
101159cc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101159d0:	00004706 	br	10115af0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101159d4:	e0bffc17 	ldw	r2,-16(fp)
101159d8:	10800a17 	ldw	r2,40(r2)
101159dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
101159e0:	e0bffc17 	ldw	r2,-16(fp)
101159e4:	10800b17 	ldw	r2,44(r2)
101159e8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
101159ec:	e0fff717 	ldw	r3,-36(fp)
101159f0:	e0bff817 	ldw	r2,-32(fp)
101159f4:	18800536 	bltu	r3,r2,10115a0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
101159f8:	e0fff717 	ldw	r3,-36(fp)
101159fc:	e0bff817 	ldw	r2,-32(fp)
10115a00:	1885c83a 	sub	r2,r3,r2
10115a04:	e0bff615 	stw	r2,-40(fp)
10115a08:	00000406 	br	10115a1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10115a0c:	00c20004 	movi	r3,2048
10115a10:	e0bff817 	ldw	r2,-32(fp)
10115a14:	1885c83a 	sub	r2,r3,r2
10115a18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10115a1c:	e0bff617 	ldw	r2,-40(fp)
10115a20:	10001e26 	beq	r2,zero,10115a9c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10115a24:	e0fffe17 	ldw	r3,-8(fp)
10115a28:	e0bff617 	ldw	r2,-40(fp)
10115a2c:	1880022e 	bgeu	r3,r2,10115a38 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10115a30:	e0bffe17 	ldw	r2,-8(fp)
10115a34:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10115a38:	e0bffc17 	ldw	r2,-16(fp)
10115a3c:	10c00e04 	addi	r3,r2,56
10115a40:	e0bff817 	ldw	r2,-32(fp)
10115a44:	1885883a 	add	r2,r3,r2
10115a48:	e1bff617 	ldw	r6,-40(fp)
10115a4c:	100b883a 	mov	r5,r2
10115a50:	e13ff517 	ldw	r4,-44(fp)
10115a54:	010c0a80 	call	1010c0a8 <memcpy>
      ptr   += n;
10115a58:	e0fff517 	ldw	r3,-44(fp)
10115a5c:	e0bff617 	ldw	r2,-40(fp)
10115a60:	1885883a 	add	r2,r3,r2
10115a64:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10115a68:	e0fffe17 	ldw	r3,-8(fp)
10115a6c:	e0bff617 	ldw	r2,-40(fp)
10115a70:	1885c83a 	sub	r2,r3,r2
10115a74:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115a78:	e0fff817 	ldw	r3,-32(fp)
10115a7c:	e0bff617 	ldw	r2,-40(fp)
10115a80:	1885883a 	add	r2,r3,r2
10115a84:	10c1ffcc 	andi	r3,r2,2047
10115a88:	e0bffc17 	ldw	r2,-16(fp)
10115a8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10115a90:	e0bffe17 	ldw	r2,-8(fp)
10115a94:	00bfcf16 	blt	zero,r2,101159d4 <_gp+0xffff4444>
10115a98:	00000106 	br	10115aa0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10115a9c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10115aa0:	e0fff517 	ldw	r3,-44(fp)
10115aa4:	e0bffd17 	ldw	r2,-12(fp)
10115aa8:	1880141e 	bne	r3,r2,10115afc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10115aac:	e0bfff17 	ldw	r2,-4(fp)
10115ab0:	1090000c 	andi	r2,r2,16384
10115ab4:	1000131e 	bne	r2,zero,10115b04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10115ab8:	0001883a 	nop
10115abc:	e0bffc17 	ldw	r2,-16(fp)
10115ac0:	10c00a17 	ldw	r3,40(r2)
10115ac4:	e0bff717 	ldw	r2,-36(fp)
10115ac8:	1880051e 	bne	r3,r2,10115ae0 <altera_avalon_jtag_uart_read+0x138>
10115acc:	e0bffc17 	ldw	r2,-16(fp)
10115ad0:	10c00917 	ldw	r3,36(r2)
10115ad4:	e0bffc17 	ldw	r2,-16(fp)
10115ad8:	10800117 	ldw	r2,4(r2)
10115adc:	18bff736 	bltu	r3,r2,10115abc <_gp+0xffff452c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10115ae0:	e0bffc17 	ldw	r2,-16(fp)
10115ae4:	10c00a17 	ldw	r3,40(r2)
10115ae8:	e0bff717 	ldw	r2,-36(fp)
10115aec:	18800726 	beq	r3,r2,10115b0c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10115af0:	e0bffe17 	ldw	r2,-8(fp)
10115af4:	00bfb716 	blt	zero,r2,101159d4 <_gp+0xffff4444>
10115af8:	00000506 	br	10115b10 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10115afc:	0001883a 	nop
10115b00:	00000306 	br	10115b10 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10115b04:	0001883a 	nop
10115b08:	00000106 	br	10115b10 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10115b0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10115b10:	e0fff517 	ldw	r3,-44(fp)
10115b14:	e0bffd17 	ldw	r2,-12(fp)
10115b18:	18801826 	beq	r3,r2,10115b7c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10115b1c:	0005303a 	rdctl	r2,status
10115b20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10115b24:	e0fffb17 	ldw	r3,-20(fp)
10115b28:	00bfff84 	movi	r2,-2
10115b2c:	1884703a 	and	r2,r3,r2
10115b30:	1001703a 	wrctl	status,r2
  
  return context;
10115b34:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10115b38:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10115b3c:	e0bffc17 	ldw	r2,-16(fp)
10115b40:	10800817 	ldw	r2,32(r2)
10115b44:	10c00054 	ori	r3,r2,1
10115b48:	e0bffc17 	ldw	r2,-16(fp)
10115b4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10115b50:	e0bffc17 	ldw	r2,-16(fp)
10115b54:	10800017 	ldw	r2,0(r2)
10115b58:	10800104 	addi	r2,r2,4
10115b5c:	1007883a 	mov	r3,r2
10115b60:	e0bffc17 	ldw	r2,-16(fp)
10115b64:	10800817 	ldw	r2,32(r2)
10115b68:	18800035 	stwio	r2,0(r3)
10115b6c:	e0bffa17 	ldw	r2,-24(fp)
10115b70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115b74:	e0bff917 	ldw	r2,-28(fp)
10115b78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10115b7c:	e0fff517 	ldw	r3,-44(fp)
10115b80:	e0bffd17 	ldw	r2,-12(fp)
10115b84:	18800426 	beq	r3,r2,10115b98 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10115b88:	e0fff517 	ldw	r3,-44(fp)
10115b8c:	e0bffd17 	ldw	r2,-12(fp)
10115b90:	1885c83a 	sub	r2,r3,r2
10115b94:	00000606 	br	10115bb0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10115b98:	e0bfff17 	ldw	r2,-4(fp)
10115b9c:	1090000c 	andi	r2,r2,16384
10115ba0:	10000226 	beq	r2,zero,10115bac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10115ba4:	00bffd44 	movi	r2,-11
10115ba8:	00000106 	br	10115bb0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10115bac:	00bffec4 	movi	r2,-5
}
10115bb0:	e037883a 	mov	sp,fp
10115bb4:	dfc00117 	ldw	ra,4(sp)
10115bb8:	df000017 	ldw	fp,0(sp)
10115bbc:	dec00204 	addi	sp,sp,8
10115bc0:	f800283a 	ret

10115bc4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10115bc4:	defff304 	addi	sp,sp,-52
10115bc8:	dfc00c15 	stw	ra,48(sp)
10115bcc:	df000b15 	stw	fp,44(sp)
10115bd0:	df000b04 	addi	fp,sp,44
10115bd4:	e13ffc15 	stw	r4,-16(fp)
10115bd8:	e17ffd15 	stw	r5,-12(fp)
10115bdc:	e1bffe15 	stw	r6,-8(fp)
10115be0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10115be4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10115be8:	e0bffd17 	ldw	r2,-12(fp)
10115bec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10115bf0:	00003706 	br	10115cd0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10115bf4:	e0bffc17 	ldw	r2,-16(fp)
10115bf8:	10800c17 	ldw	r2,48(r2)
10115bfc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10115c00:	e0bffc17 	ldw	r2,-16(fp)
10115c04:	10800d17 	ldw	r2,52(r2)
10115c08:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10115c0c:	e0fff917 	ldw	r3,-28(fp)
10115c10:	e0bff517 	ldw	r2,-44(fp)
10115c14:	1880062e 	bgeu	r3,r2,10115c30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10115c18:	e0fff517 	ldw	r3,-44(fp)
10115c1c:	e0bff917 	ldw	r2,-28(fp)
10115c20:	1885c83a 	sub	r2,r3,r2
10115c24:	10bfffc4 	addi	r2,r2,-1
10115c28:	e0bff615 	stw	r2,-40(fp)
10115c2c:	00000b06 	br	10115c5c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10115c30:	e0bff517 	ldw	r2,-44(fp)
10115c34:	10000526 	beq	r2,zero,10115c4c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10115c38:	00c20004 	movi	r3,2048
10115c3c:	e0bff917 	ldw	r2,-28(fp)
10115c40:	1885c83a 	sub	r2,r3,r2
10115c44:	e0bff615 	stw	r2,-40(fp)
10115c48:	00000406 	br	10115c5c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10115c4c:	00c1ffc4 	movi	r3,2047
10115c50:	e0bff917 	ldw	r2,-28(fp)
10115c54:	1885c83a 	sub	r2,r3,r2
10115c58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10115c5c:	e0bff617 	ldw	r2,-40(fp)
10115c60:	10001e26 	beq	r2,zero,10115cdc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10115c64:	e0fffe17 	ldw	r3,-8(fp)
10115c68:	e0bff617 	ldw	r2,-40(fp)
10115c6c:	1880022e 	bgeu	r3,r2,10115c78 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10115c70:	e0bffe17 	ldw	r2,-8(fp)
10115c74:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10115c78:	e0bffc17 	ldw	r2,-16(fp)
10115c7c:	10c20e04 	addi	r3,r2,2104
10115c80:	e0bff917 	ldw	r2,-28(fp)
10115c84:	1885883a 	add	r2,r3,r2
10115c88:	e1bff617 	ldw	r6,-40(fp)
10115c8c:	e17ffd17 	ldw	r5,-12(fp)
10115c90:	1009883a 	mov	r4,r2
10115c94:	010c0a80 	call	1010c0a8 <memcpy>
      ptr   += n;
10115c98:	e0fffd17 	ldw	r3,-12(fp)
10115c9c:	e0bff617 	ldw	r2,-40(fp)
10115ca0:	1885883a 	add	r2,r3,r2
10115ca4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10115ca8:	e0fffe17 	ldw	r3,-8(fp)
10115cac:	e0bff617 	ldw	r2,-40(fp)
10115cb0:	1885c83a 	sub	r2,r3,r2
10115cb4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115cb8:	e0fff917 	ldw	r3,-28(fp)
10115cbc:	e0bff617 	ldw	r2,-40(fp)
10115cc0:	1885883a 	add	r2,r3,r2
10115cc4:	10c1ffcc 	andi	r3,r2,2047
10115cc8:	e0bffc17 	ldw	r2,-16(fp)
10115ccc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10115cd0:	e0bffe17 	ldw	r2,-8(fp)
10115cd4:	00bfc716 	blt	zero,r2,10115bf4 <_gp+0xffff4664>
10115cd8:	00000106 	br	10115ce0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10115cdc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10115ce0:	0005303a 	rdctl	r2,status
10115ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10115ce8:	e0fffb17 	ldw	r3,-20(fp)
10115cec:	00bfff84 	movi	r2,-2
10115cf0:	1884703a 	and	r2,r3,r2
10115cf4:	1001703a 	wrctl	status,r2
  
  return context;
10115cf8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10115cfc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10115d00:	e0bffc17 	ldw	r2,-16(fp)
10115d04:	10800817 	ldw	r2,32(r2)
10115d08:	10c00094 	ori	r3,r2,2
10115d0c:	e0bffc17 	ldw	r2,-16(fp)
10115d10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10115d14:	e0bffc17 	ldw	r2,-16(fp)
10115d18:	10800017 	ldw	r2,0(r2)
10115d1c:	10800104 	addi	r2,r2,4
10115d20:	1007883a 	mov	r3,r2
10115d24:	e0bffc17 	ldw	r2,-16(fp)
10115d28:	10800817 	ldw	r2,32(r2)
10115d2c:	18800035 	stwio	r2,0(r3)
10115d30:	e0bffa17 	ldw	r2,-24(fp)
10115d34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115d38:	e0bff817 	ldw	r2,-32(fp)
10115d3c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10115d40:	e0bffe17 	ldw	r2,-8(fp)
10115d44:	0080100e 	bge	zero,r2,10115d88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10115d48:	e0bfff17 	ldw	r2,-4(fp)
10115d4c:	1090000c 	andi	r2,r2,16384
10115d50:	1000101e 	bne	r2,zero,10115d94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10115d54:	0001883a 	nop
10115d58:	e0bffc17 	ldw	r2,-16(fp)
10115d5c:	10c00d17 	ldw	r3,52(r2)
10115d60:	e0bff517 	ldw	r2,-44(fp)
10115d64:	1880051e 	bne	r3,r2,10115d7c <altera_avalon_jtag_uart_write+0x1b8>
10115d68:	e0bffc17 	ldw	r2,-16(fp)
10115d6c:	10c00917 	ldw	r3,36(r2)
10115d70:	e0bffc17 	ldw	r2,-16(fp)
10115d74:	10800117 	ldw	r2,4(r2)
10115d78:	18bff736 	bltu	r3,r2,10115d58 <_gp+0xffff47c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10115d7c:	e0bffc17 	ldw	r2,-16(fp)
10115d80:	10800917 	ldw	r2,36(r2)
10115d84:	1000051e 	bne	r2,zero,10115d9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10115d88:	e0bffe17 	ldw	r2,-8(fp)
10115d8c:	00bfd016 	blt	zero,r2,10115cd0 <_gp+0xffff4740>
10115d90:	00000306 	br	10115da0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10115d94:	0001883a 	nop
10115d98:	00000106 	br	10115da0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10115d9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10115da0:	e0fffd17 	ldw	r3,-12(fp)
10115da4:	e0bff717 	ldw	r2,-36(fp)
10115da8:	18800426 	beq	r3,r2,10115dbc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10115dac:	e0fffd17 	ldw	r3,-12(fp)
10115db0:	e0bff717 	ldw	r2,-36(fp)
10115db4:	1885c83a 	sub	r2,r3,r2
10115db8:	00000606 	br	10115dd4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10115dbc:	e0bfff17 	ldw	r2,-4(fp)
10115dc0:	1090000c 	andi	r2,r2,16384
10115dc4:	10000226 	beq	r2,zero,10115dd0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10115dc8:	00bffd44 	movi	r2,-11
10115dcc:	00000106 	br	10115dd4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10115dd0:	00bffec4 	movi	r2,-5
}
10115dd4:	e037883a 	mov	sp,fp
10115dd8:	dfc00117 	ldw	ra,4(sp)
10115ddc:	df000017 	ldw	fp,0(sp)
10115de0:	dec00204 	addi	sp,sp,8
10115de4:	f800283a 	ret

10115de8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10115de8:	defff404 	addi	sp,sp,-48
10115dec:	df000b15 	stw	fp,44(sp)
10115df0:	df000b04 	addi	fp,sp,44
10115df4:	e13ffc15 	stw	r4,-16(fp)
10115df8:	e17ffd15 	stw	r5,-12(fp)
10115dfc:	e1bffe15 	stw	r6,-8(fp)
10115e00:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10115e04:	e0bffc17 	ldw	r2,-16(fp)
10115e08:	10800017 	ldw	r2,0(r2)
10115e0c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10115e10:	e0bff517 	ldw	r2,-44(fp)
10115e14:	10800217 	ldw	r2,8(r2)
10115e18:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10115e1c:	e0bff617 	ldw	r2,-40(fp)
10115e20:	10bfffc4 	addi	r2,r2,-1
10115e24:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10115e28:	e0bffb17 	ldw	r2,-20(fp)
10115e2c:	10800044 	addi	r2,r2,1
10115e30:	e0bffb15 	stw	r2,-20(fp)
10115e34:	e0bffb17 	ldw	r2,-20(fp)
10115e38:	10800003 	ldbu	r2,0(r2)
10115e3c:	10803fcc 	andi	r2,r2,255
10115e40:	1080201c 	xori	r2,r2,128
10115e44:	10bfe004 	addi	r2,r2,-128
10115e48:	103ff71e 	bne	r2,zero,10115e28 <_gp+0xffff4898>
    ;

  return ptr - string;
10115e4c:	e0fffb17 	ldw	r3,-20(fp)
10115e50:	e0bff617 	ldw	r2,-40(fp)
10115e54:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10115e58:	10800044 	addi	r2,r2,1
10115e5c:	1007883a 	mov	r3,r2
10115e60:	e0bffd17 	ldw	r2,-12(fp)
10115e64:	10c5883a 	add	r2,r2,r3
10115e68:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10115e6c:	d0a00f04 	addi	r2,gp,-32708
10115e70:	1007883a 	mov	r3,r2
  r4 = (int)name;
10115e74:	e0bffd17 	ldw	r2,-12(fp)
10115e78:	1009883a 	mov	r4,r2
  r5 = flags;
10115e7c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10115e80:	e1bfff17 	ldw	r6,-4(fp)
10115e84:	e0bffd17 	ldw	r2,-12(fp)
10115e88:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10115e8c:	e0bff917 	ldw	r2,-28(fp)
10115e90:	10bfffc4 	addi	r2,r2,-1
10115e94:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10115e98:	e0bffa17 	ldw	r2,-24(fp)
10115e9c:	10800044 	addi	r2,r2,1
10115ea0:	e0bffa15 	stw	r2,-24(fp)
10115ea4:	e0bffa17 	ldw	r2,-24(fp)
10115ea8:	10800003 	ldbu	r2,0(r2)
10115eac:	10803fcc 	andi	r2,r2,255
10115eb0:	1080201c 	xori	r2,r2,128
10115eb4:	10bfe004 	addi	r2,r2,-128
10115eb8:	103ff71e 	bne	r2,zero,10115e98 <_gp+0xffff4908>
    ;

  return ptr - string;
10115ebc:	e1fffa17 	ldw	r7,-24(fp)
10115ec0:	e0bff917 	ldw	r2,-28(fp)
10115ec4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10115ec8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10115ecc:	003da07a 	break	1

  handle = (void *)r2;
10115ed0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10115ed4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10115ed8:	e0bff817 	ldw	r2,-32(fp)
10115edc:	1000031e 	bne	r2,zero,10115eec <alt_hostfs_open+0x104>
    fd->priv = handle;
10115ee0:	e0bffc17 	ldw	r2,-16(fp)
10115ee4:	e0fff717 	ldw	r3,-36(fp)
10115ee8:	10c00115 	stw	r3,4(r2)

  return -error;
10115eec:	e0bff817 	ldw	r2,-32(fp)
10115ef0:	0085c83a 	sub	r2,zero,r2
}
10115ef4:	e037883a 	mov	sp,fp
10115ef8:	df000017 	ldw	fp,0(sp)
10115efc:	dec00104 	addi	sp,sp,4
10115f00:	f800283a 	ret

10115f04 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10115f04:	defffd04 	addi	sp,sp,-12
10115f08:	df000215 	stw	fp,8(sp)
10115f0c:	df000204 	addi	fp,sp,8
10115f10:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10115f14:	d0a01204 	addi	r2,gp,-32696
10115f18:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10115f1c:	e0bfff17 	ldw	r2,-4(fp)
10115f20:	10800117 	ldw	r2,4(r2)
10115f24:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10115f28:	003da07a 	break	1

  error = r3;
10115f2c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10115f30:	e0bffe17 	ldw	r2,-8(fp)
10115f34:	0085c83a 	sub	r2,zero,r2
}
10115f38:	e037883a 	mov	sp,fp
10115f3c:	df000017 	ldw	fp,0(sp)
10115f40:	dec00104 	addi	sp,sp,4
10115f44:	f800283a 	ret

10115f48 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10115f48:	defffa04 	addi	sp,sp,-24
10115f4c:	df000515 	stw	fp,20(sp)
10115f50:	df000504 	addi	fp,sp,20
10115f54:	e13ffd15 	stw	r4,-12(fp)
10115f58:	e17ffe15 	stw	r5,-8(fp)
10115f5c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10115f60:	d0a01504 	addi	r2,gp,-32684
10115f64:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10115f68:	e0bffd17 	ldw	r2,-12(fp)
10115f6c:	10800117 	ldw	r2,4(r2)
10115f70:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10115f74:	e0bffe17 	ldw	r2,-8(fp)
10115f78:	100b883a 	mov	r5,r2
  r6 = len;
10115f7c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10115f80:	003da07a 	break	1

  rc = r2;
10115f84:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10115f88:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10115f8c:	e0bffc17 	ldw	r2,-16(fp)
10115f90:	10000326 	beq	r2,zero,10115fa0 <alt_hostfs_read+0x58>
10115f94:	e0bffc17 	ldw	r2,-16(fp)
10115f98:	0085c83a 	sub	r2,zero,r2
10115f9c:	00000106 	br	10115fa4 <alt_hostfs_read+0x5c>
10115fa0:	e0bffb17 	ldw	r2,-20(fp)
}
10115fa4:	e037883a 	mov	sp,fp
10115fa8:	df000017 	ldw	fp,0(sp)
10115fac:	dec00104 	addi	sp,sp,4
10115fb0:	f800283a 	ret

10115fb4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10115fb4:	defffa04 	addi	sp,sp,-24
10115fb8:	df000515 	stw	fp,20(sp)
10115fbc:	df000504 	addi	fp,sp,20
10115fc0:	e13ffd15 	stw	r4,-12(fp)
10115fc4:	e17ffe15 	stw	r5,-8(fp)
10115fc8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10115fcc:	d0a01804 	addi	r2,gp,-32672
10115fd0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10115fd4:	e0bffd17 	ldw	r2,-12(fp)
10115fd8:	10800117 	ldw	r2,4(r2)
10115fdc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10115fe0:	e0bffe17 	ldw	r2,-8(fp)
10115fe4:	100b883a 	mov	r5,r2
  r6 = len;
10115fe8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10115fec:	003da07a 	break	1

  rc = r2;
10115ff0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10115ff4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10115ff8:	e0bffc17 	ldw	r2,-16(fp)
10115ffc:	10000326 	beq	r2,zero,1011600c <alt_hostfs_write+0x58>
10116000:	e0bffc17 	ldw	r2,-16(fp)
10116004:	0085c83a 	sub	r2,zero,r2
10116008:	00000106 	br	10116010 <alt_hostfs_write+0x5c>
1011600c:	e0bffb17 	ldw	r2,-20(fp)
}
10116010:	e037883a 	mov	sp,fp
10116014:	df000017 	ldw	fp,0(sp)
10116018:	dec00104 	addi	sp,sp,4
1011601c:	f800283a 	ret

10116020 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10116020:	defffa04 	addi	sp,sp,-24
10116024:	df000515 	stw	fp,20(sp)
10116028:	df000504 	addi	fp,sp,20
1011602c:	e13ffd15 	stw	r4,-12(fp)
10116030:	e17ffe15 	stw	r5,-8(fp)
10116034:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10116038:	d0a01b04 	addi	r2,gp,-32660
1011603c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10116040:	e0bffd17 	ldw	r2,-12(fp)
10116044:	10800117 	ldw	r2,4(r2)
10116048:	1009883a 	mov	r4,r2
  r5 = ptr;
1011604c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10116050:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10116054:	003da07a 	break	1

  rc = r2;
10116058:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1011605c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10116060:	e0bffc17 	ldw	r2,-16(fp)
10116064:	10000326 	beq	r2,zero,10116074 <alt_hostfs_seek+0x54>
10116068:	e0bffc17 	ldw	r2,-16(fp)
1011606c:	0085c83a 	sub	r2,zero,r2
10116070:	00000106 	br	10116078 <alt_hostfs_seek+0x58>
10116074:	e0bffb17 	ldw	r2,-20(fp)
}
10116078:	e037883a 	mov	sp,fp
1011607c:	df000017 	ldw	fp,0(sp)
10116080:	dec00104 	addi	sp,sp,4
10116084:	f800283a 	ret

10116088 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10116088:	deffe904 	addi	sp,sp,-92
1011608c:	df001615 	stw	fp,88(sp)
10116090:	df001604 	addi	fp,sp,88
10116094:	e13ffe15 	stw	r4,-8(fp)
10116098:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1011609c:	d0a01e04 	addi	r2,gp,-32648
101160a0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101160a4:	e0bffe17 	ldw	r2,-8(fp)
101160a8:	10800117 	ldw	r2,4(r2)
101160ac:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
101160b0:	e0bfee04 	addi	r2,fp,-72
101160b4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
101160b8:	003da07a 	break	1

  rc = r2;
101160bc:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
101160c0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
101160c4:	e0bfec17 	ldw	r2,-80(fp)
101160c8:	1000621e 	bne	r2,zero,10116254 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
101160cc:	e0bfee04 	addi	r2,fp,-72
101160d0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
101160d4:	e0bfea17 	ldw	r2,-88(fp)
101160d8:	10801004 	addi	r2,r2,64
101160dc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
101160e0:	00001606 	br	1011613c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
101160e4:	e0bfea17 	ldw	r2,-88(fp)
101160e8:	10800017 	ldw	r2,0(r2)
101160ec:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
101160f0:	e0bfea17 	ldw	r2,-88(fp)
101160f4:	10800017 	ldw	r2,0(r2)
101160f8:	10803fec 	andhi	r2,r2,255
101160fc:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10116100:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10116104:	e0bfea17 	ldw	r2,-88(fp)
10116108:	10800017 	ldw	r2,0(r2)
1011610c:	10bfc00c 	andi	r2,r2,65280
10116110:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10116114:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10116118:	e0bfea17 	ldw	r2,-88(fp)
1011611c:	10800017 	ldw	r2,0(r2)
10116120:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10116124:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10116128:	e0bfea17 	ldw	r2,-88(fp)
1011612c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10116130:	e0bfea17 	ldw	r2,-88(fp)
10116134:	10800104 	addi	r2,r2,4
10116138:	e0bfea15 	stw	r2,-88(fp)
1011613c:	e0ffea17 	ldw	r3,-88(fp)
10116140:	e0bfed17 	ldw	r2,-76(fp)
10116144:	18bfe736 	bltu	r3,r2,101160e4 <_gp+0xffff4b54>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10116148:	e0bfff17 	ldw	r2,-4(fp)
1011614c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10116150:	e0bfea17 	ldw	r2,-88(fp)
10116154:	10800f04 	addi	r2,r2,60
10116158:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1011615c:	00000506 	br	10116174 <alt_hostfs_fstat+0xec>
      *ptr = 0;
10116160:	e0bfea17 	ldw	r2,-88(fp)
10116164:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10116168:	e0bfea17 	ldw	r2,-88(fp)
1011616c:	10800104 	addi	r2,r2,4
10116170:	e0bfea15 	stw	r2,-88(fp)
10116174:	e0ffea17 	ldw	r3,-88(fp)
10116178:	e0bfed17 	ldw	r2,-76(fp)
1011617c:	18bff836 	bltu	r3,r2,10116160 <_gp+0xffff4bd0>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10116180:	e0bfee17 	ldw	r2,-72(fp)
10116184:	1007883a 	mov	r3,r2
10116188:	e0bfff17 	ldw	r2,-4(fp)
1011618c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
10116190:	e0bfef17 	ldw	r2,-68(fp)
10116194:	1007883a 	mov	r3,r2
10116198:	e0bfff17 	ldw	r2,-4(fp)
1011619c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101161a0:	e0fff017 	ldw	r3,-64(fp)
101161a4:	e0bfff17 	ldw	r2,-4(fp)
101161a8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101161ac:	e0bff117 	ldw	r2,-60(fp)
101161b0:	1007883a 	mov	r3,r2
101161b4:	e0bfff17 	ldw	r2,-4(fp)
101161b8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
101161bc:	e0bff217 	ldw	r2,-56(fp)
101161c0:	1007883a 	mov	r3,r2
101161c4:	e0bfff17 	ldw	r2,-4(fp)
101161c8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
101161cc:	e0bff317 	ldw	r2,-52(fp)
101161d0:	1007883a 	mov	r3,r2
101161d4:	e0bfff17 	ldw	r2,-4(fp)
101161d8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
101161dc:	e0bff417 	ldw	r2,-48(fp)
101161e0:	1007883a 	mov	r3,r2
101161e4:	e0bfff17 	ldw	r2,-4(fp)
101161e8:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
101161ec:	e0bff617 	ldw	r2,-40(fp)
101161f0:	1007883a 	mov	r3,r2
101161f4:	e0bfff17 	ldw	r2,-4(fp)
101161f8:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
101161fc:	e0bffb17 	ldw	r2,-20(fp)
10116200:	1007883a 	mov	r3,r2
10116204:	e0bfff17 	ldw	r2,-4(fp)
10116208:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1011620c:	e0bffc17 	ldw	r2,-16(fp)
10116210:	1007883a 	mov	r3,r2
10116214:	e0bfff17 	ldw	r2,-4(fp)
10116218:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1011621c:	e0bffd17 	ldw	r2,-12(fp)
10116220:	1007883a 	mov	r3,r2
10116224:	e0bfff17 	ldw	r2,-4(fp)
10116228:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1011622c:	e0bff817 	ldw	r2,-32(fp)
10116230:	1007883a 	mov	r3,r2
10116234:	e0bfff17 	ldw	r2,-4(fp)
10116238:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1011623c:	e0bffa17 	ldw	r2,-24(fp)
10116240:	1007883a 	mov	r3,r2
10116244:	e0bfff17 	ldw	r2,-4(fp)
10116248:	10c00c15 	stw	r3,48(r2)

    return rc;
1011624c:	e0bfeb17 	ldw	r2,-84(fp)
10116250:	00000206 	br	1011625c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10116254:	e0bfec17 	ldw	r2,-80(fp)
10116258:	0085c83a 	sub	r2,zero,r2
}
1011625c:	e037883a 	mov	sp,fp
10116260:	df000017 	ldw	fp,0(sp)
10116264:	dec00104 	addi	sp,sp,4
10116268:	f800283a 	ret

1011626c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1011626c:	defff504 	addi	sp,sp,-44
10116270:	df000a15 	stw	fp,40(sp)
10116274:	df000a04 	addi	fp,sp,40
10116278:	e13ffc15 	stw	r4,-16(fp)
1011627c:	e17ffd15 	stw	r5,-12(fp)
10116280:	e1bffe15 	stw	r6,-8(fp)
10116284:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10116288:	e03ff615 	stw	zero,-40(fp)
1011628c:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
10116290:	10003c26 	beq	r2,zero,10116384 <alt_alarm_start+0x118>
  {
    if (alarm)
10116294:	e0bffc17 	ldw	r2,-16(fp)
10116298:	10003826 	beq	r2,zero,1011637c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1011629c:	e0bffc17 	ldw	r2,-16(fp)
101162a0:	e0fffe17 	ldw	r3,-8(fp)
101162a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101162a8:	e0bffc17 	ldw	r2,-16(fp)
101162ac:	e0ffff17 	ldw	r3,-4(fp)
101162b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101162b4:	0005303a 	rdctl	r2,status
101162b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101162bc:	e0fff917 	ldw	r3,-28(fp)
101162c0:	00bfff84 	movi	r2,-2
101162c4:	1884703a 	and	r2,r3,r2
101162c8:	1001703a 	wrctl	status,r2
  
  return context;
101162cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
101162d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
101162d4:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
101162d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
101162dc:	e0fffd17 	ldw	r3,-12(fp)
101162e0:	e0bff617 	ldw	r2,-40(fp)
101162e4:	1885883a 	add	r2,r3,r2
101162e8:	10c00044 	addi	r3,r2,1
101162ec:	e0bffc17 	ldw	r2,-16(fp)
101162f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
101162f4:	e0bffc17 	ldw	r2,-16(fp)
101162f8:	10c00217 	ldw	r3,8(r2)
101162fc:	e0bff617 	ldw	r2,-40(fp)
10116300:	1880042e 	bgeu	r3,r2,10116314 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10116304:	e0bffc17 	ldw	r2,-16(fp)
10116308:	00c00044 	movi	r3,1
1011630c:	10c00405 	stb	r3,16(r2)
10116310:	00000206 	br	1011631c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10116314:	e0bffc17 	ldw	r2,-16(fp)
10116318:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1011631c:	e0bffc17 	ldw	r2,-16(fp)
10116320:	d0e00d04 	addi	r3,gp,-32716
10116324:	e0fffa15 	stw	r3,-24(fp)
10116328:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1011632c:	e0bffb17 	ldw	r2,-20(fp)
10116330:	e0fffa17 	ldw	r3,-24(fp)
10116334:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10116338:	e0bffa17 	ldw	r2,-24(fp)
1011633c:	10c00017 	ldw	r3,0(r2)
10116340:	e0bffb17 	ldw	r2,-20(fp)
10116344:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10116348:	e0bffa17 	ldw	r2,-24(fp)
1011634c:	10800017 	ldw	r2,0(r2)
10116350:	e0fffb17 	ldw	r3,-20(fp)
10116354:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10116358:	e0bffa17 	ldw	r2,-24(fp)
1011635c:	e0fffb17 	ldw	r3,-20(fp)
10116360:	10c00015 	stw	r3,0(r2)
10116364:	e0bff817 	ldw	r2,-32(fp)
10116368:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1011636c:	e0bff717 	ldw	r2,-36(fp)
10116370:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10116374:	0005883a 	mov	r2,zero
10116378:	00000306 	br	10116388 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1011637c:	00bffa84 	movi	r2,-22
10116380:	00000106 	br	10116388 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10116384:	00bfde84 	movi	r2,-134
  }
}
10116388:	e037883a 	mov	sp,fp
1011638c:	df000017 	ldw	fp,0(sp)
10116390:	dec00104 	addi	sp,sp,4
10116394:	f800283a 	ret

10116398 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10116398:	defffa04 	addi	sp,sp,-24
1011639c:	dfc00515 	stw	ra,20(sp)
101163a0:	df000415 	stw	fp,16(sp)
101163a4:	df000404 	addi	fp,sp,16
101163a8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
101163ac:	008000c4 	movi	r2,3
101163b0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
101163b4:	e0fffd17 	ldw	r3,-12(fp)
101163b8:	008003f4 	movhi	r2,15
101163bc:	10909004 	addi	r2,r2,16960
101163c0:	1885383a 	mul	r2,r3,r2
101163c4:	100b883a 	mov	r5,r2
101163c8:	0100bef4 	movhi	r4,763
101163cc:	213c2004 	addi	r4,r4,-3968
101163d0:	01031000 	call	10103100 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
101163d4:	100b883a 	mov	r5,r2
101163d8:	01200034 	movhi	r4,32768
101163dc:	213fffc4 	addi	r4,r4,-1
101163e0:	01031000 	call	10103100 <__udivsi3>
101163e4:	100b883a 	mov	r5,r2
101163e8:	e13fff17 	ldw	r4,-4(fp)
101163ec:	01031000 	call	10103100 <__udivsi3>
101163f0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
101163f4:	e0bffe17 	ldw	r2,-8(fp)
101163f8:	10002a26 	beq	r2,zero,101164a4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
101163fc:	e03ffc15 	stw	zero,-16(fp)
10116400:	00001706 	br	10116460 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10116404:	00a00034 	movhi	r2,32768
10116408:	10bfffc4 	addi	r2,r2,-1
1011640c:	10bfffc4 	addi	r2,r2,-1
10116410:	103ffe1e 	bne	r2,zero,1011640c <_gp+0xffff4e7c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10116414:	e0fffd17 	ldw	r3,-12(fp)
10116418:	008003f4 	movhi	r2,15
1011641c:	10909004 	addi	r2,r2,16960
10116420:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10116424:	100b883a 	mov	r5,r2
10116428:	0100bef4 	movhi	r4,763
1011642c:	213c2004 	addi	r4,r4,-3968
10116430:	01031000 	call	10103100 <__udivsi3>
10116434:	100b883a 	mov	r5,r2
10116438:	01200034 	movhi	r4,32768
1011643c:	213fffc4 	addi	r4,r4,-1
10116440:	01031000 	call	10103100 <__udivsi3>
10116444:	1007883a 	mov	r3,r2
10116448:	e0bfff17 	ldw	r2,-4(fp)
1011644c:	10c5c83a 	sub	r2,r2,r3
10116450:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10116454:	e0bffc17 	ldw	r2,-16(fp)
10116458:	10800044 	addi	r2,r2,1
1011645c:	e0bffc15 	stw	r2,-16(fp)
10116460:	e0fffc17 	ldw	r3,-16(fp)
10116464:	e0bffe17 	ldw	r2,-8(fp)
10116468:	18bfe616 	blt	r3,r2,10116404 <_gp+0xffff4e74>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1011646c:	e0fffd17 	ldw	r3,-12(fp)
10116470:	008003f4 	movhi	r2,15
10116474:	10909004 	addi	r2,r2,16960
10116478:	1885383a 	mul	r2,r3,r2
1011647c:	100b883a 	mov	r5,r2
10116480:	0100bef4 	movhi	r4,763
10116484:	213c2004 	addi	r4,r4,-3968
10116488:	01031000 	call	10103100 <__udivsi3>
1011648c:	1007883a 	mov	r3,r2
10116490:	e0bfff17 	ldw	r2,-4(fp)
10116494:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10116498:	10bfffc4 	addi	r2,r2,-1
1011649c:	103ffe1e 	bne	r2,zero,10116498 <_gp+0xffff4f08>
101164a0:	00000d06 	br	101164d8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101164a4:	e0fffd17 	ldw	r3,-12(fp)
101164a8:	008003f4 	movhi	r2,15
101164ac:	10909004 	addi	r2,r2,16960
101164b0:	1885383a 	mul	r2,r3,r2
101164b4:	100b883a 	mov	r5,r2
101164b8:	0100bef4 	movhi	r4,763
101164bc:	213c2004 	addi	r4,r4,-3968
101164c0:	01031000 	call	10103100 <__udivsi3>
101164c4:	1007883a 	mov	r3,r2
101164c8:	e0bfff17 	ldw	r2,-4(fp)
101164cc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101164d0:	10bfffc4 	addi	r2,r2,-1
101164d4:	00bffe16 	blt	zero,r2,101164d0 <_gp+0xffff4f40>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
101164d8:	0005883a 	mov	r2,zero
}
101164dc:	e037883a 	mov	sp,fp
101164e0:	dfc00117 	ldw	ra,4(sp)
101164e4:	df000017 	ldw	fp,0(sp)
101164e8:	dec00204 	addi	sp,sp,8
101164ec:	f800283a 	ret

101164f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101164f0:	defffe04 	addi	sp,sp,-8
101164f4:	df000115 	stw	fp,4(sp)
101164f8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101164fc:	e03fff15 	stw	zero,-4(fp)
10116500:	00000506 	br	10116518 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10116504:	e0bfff17 	ldw	r2,-4(fp)
10116508:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1011650c:	e0bfff17 	ldw	r2,-4(fp)
10116510:	10800804 	addi	r2,r2,32
10116514:	e0bfff15 	stw	r2,-4(fp)
10116518:	e0bfff17 	ldw	r2,-4(fp)
1011651c:	10820030 	cmpltui	r2,r2,2048
10116520:	103ff81e 	bne	r2,zero,10116504 <_gp+0xffff4f74>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10116524:	0001883a 	nop
10116528:	e037883a 	mov	sp,fp
1011652c:	df000017 	ldw	fp,0(sp)
10116530:	dec00104 	addi	sp,sp,4
10116534:	f800283a 	ret

10116538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10116538:	defffe04 	addi	sp,sp,-8
1011653c:	dfc00115 	stw	ra,4(sp)
10116540:	df000015 	stw	fp,0(sp)
10116544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10116548:	d0a00b17 	ldw	r2,-32724(gp)
1011654c:	10000326 	beq	r2,zero,1011655c <alt_get_errno+0x24>
10116550:	d0a00b17 	ldw	r2,-32724(gp)
10116554:	103ee83a 	callr	r2
10116558:	00000106 	br	10116560 <alt_get_errno+0x28>
1011655c:	d0a6fa04 	addi	r2,gp,-25624
}
10116560:	e037883a 	mov	sp,fp
10116564:	dfc00117 	ldw	ra,4(sp)
10116568:	df000017 	ldw	fp,0(sp)
1011656c:	dec00204 	addi	sp,sp,8
10116570:	f800283a 	ret

10116574 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10116574:	defffa04 	addi	sp,sp,-24
10116578:	dfc00515 	stw	ra,20(sp)
1011657c:	df000415 	stw	fp,16(sp)
10116580:	df000404 	addi	fp,sp,16
10116584:	e13ffe15 	stw	r4,-8(fp)
10116588:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1011658c:	e0bffe17 	ldw	r2,-8(fp)
10116590:	10000326 	beq	r2,zero,101165a0 <alt_dev_llist_insert+0x2c>
10116594:	e0bffe17 	ldw	r2,-8(fp)
10116598:	10800217 	ldw	r2,8(r2)
1011659c:	1000061e 	bne	r2,zero,101165b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101165a0:	01165380 	call	10116538 <alt_get_errno>
101165a4:	1007883a 	mov	r3,r2
101165a8:	00800584 	movi	r2,22
101165ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101165b0:	00bffa84 	movi	r2,-22
101165b4:	00001306 	br	10116604 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101165b8:	e0bffe17 	ldw	r2,-8(fp)
101165bc:	e0ffff17 	ldw	r3,-4(fp)
101165c0:	e0fffc15 	stw	r3,-16(fp)
101165c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101165c8:	e0bffd17 	ldw	r2,-12(fp)
101165cc:	e0fffc17 	ldw	r3,-16(fp)
101165d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101165d4:	e0bffc17 	ldw	r2,-16(fp)
101165d8:	10c00017 	ldw	r3,0(r2)
101165dc:	e0bffd17 	ldw	r2,-12(fp)
101165e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101165e4:	e0bffc17 	ldw	r2,-16(fp)
101165e8:	10800017 	ldw	r2,0(r2)
101165ec:	e0fffd17 	ldw	r3,-12(fp)
101165f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101165f4:	e0bffc17 	ldw	r2,-16(fp)
101165f8:	e0fffd17 	ldw	r3,-12(fp)
101165fc:	10c00015 	stw	r3,0(r2)

  return 0;  
10116600:	0005883a 	mov	r2,zero
}
10116604:	e037883a 	mov	sp,fp
10116608:	dfc00117 	ldw	ra,4(sp)
1011660c:	df000017 	ldw	fp,0(sp)
10116610:	dec00204 	addi	sp,sp,8
10116614:	f800283a 	ret

10116618 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10116618:	defffd04 	addi	sp,sp,-12
1011661c:	dfc00215 	stw	ra,8(sp)
10116620:	df000115 	stw	fp,4(sp)
10116624:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10116628:	00840474 	movhi	r2,4113
1011662c:	109cef04 	addi	r2,r2,29628
10116630:	e0bfff15 	stw	r2,-4(fp)
10116634:	00000606 	br	10116650 <_do_ctors+0x38>
        (*ctor) (); 
10116638:	e0bfff17 	ldw	r2,-4(fp)
1011663c:	10800017 	ldw	r2,0(r2)
10116640:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10116644:	e0bfff17 	ldw	r2,-4(fp)
10116648:	10bfff04 	addi	r2,r2,-4
1011664c:	e0bfff15 	stw	r2,-4(fp)
10116650:	e0ffff17 	ldw	r3,-4(fp)
10116654:	00840474 	movhi	r2,4113
10116658:	109cf004 	addi	r2,r2,29632
1011665c:	18bff62e 	bgeu	r3,r2,10116638 <_gp+0xffff50a8>
        (*ctor) (); 
}
10116660:	0001883a 	nop
10116664:	e037883a 	mov	sp,fp
10116668:	dfc00117 	ldw	ra,4(sp)
1011666c:	df000017 	ldw	fp,0(sp)
10116670:	dec00204 	addi	sp,sp,8
10116674:	f800283a 	ret

10116678 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10116678:	defffd04 	addi	sp,sp,-12
1011667c:	dfc00215 	stw	ra,8(sp)
10116680:	df000115 	stw	fp,4(sp)
10116684:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10116688:	00840474 	movhi	r2,4113
1011668c:	109cef04 	addi	r2,r2,29628
10116690:	e0bfff15 	stw	r2,-4(fp)
10116694:	00000606 	br	101166b0 <_do_dtors+0x38>
        (*dtor) (); 
10116698:	e0bfff17 	ldw	r2,-4(fp)
1011669c:	10800017 	ldw	r2,0(r2)
101166a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101166a4:	e0bfff17 	ldw	r2,-4(fp)
101166a8:	10bfff04 	addi	r2,r2,-4
101166ac:	e0bfff15 	stw	r2,-4(fp)
101166b0:	e0ffff17 	ldw	r3,-4(fp)
101166b4:	00840474 	movhi	r2,4113
101166b8:	109cf004 	addi	r2,r2,29632
101166bc:	18bff62e 	bgeu	r3,r2,10116698 <_gp+0xffff5108>
        (*dtor) (); 
}
101166c0:	0001883a 	nop
101166c4:	e037883a 	mov	sp,fp
101166c8:	dfc00117 	ldw	ra,4(sp)
101166cc:	df000017 	ldw	fp,0(sp)
101166d0:	dec00204 	addi	sp,sp,8
101166d4:	f800283a 	ret

101166d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
101166d8:	defffa04 	addi	sp,sp,-24
101166dc:	dfc00515 	stw	ra,20(sp)
101166e0:	df000415 	stw	fp,16(sp)
101166e4:	df000404 	addi	fp,sp,16
101166e8:	e13ffe15 	stw	r4,-8(fp)
101166ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
101166f0:	e0bfff17 	ldw	r2,-4(fp)
101166f4:	10800017 	ldw	r2,0(r2)
101166f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
101166fc:	e13ffe17 	ldw	r4,-8(fp)
10116700:	01058200 	call	10105820 <strlen>
10116704:	10800044 	addi	r2,r2,1
10116708:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1011670c:	00000d06 	br	10116744 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10116710:	e0bffc17 	ldw	r2,-16(fp)
10116714:	10800217 	ldw	r2,8(r2)
10116718:	e0fffd17 	ldw	r3,-12(fp)
1011671c:	180d883a 	mov	r6,r3
10116720:	e17ffe17 	ldw	r5,-8(fp)
10116724:	1009883a 	mov	r4,r2
10116728:	0116f440 	call	10116f44 <memcmp>
1011672c:	1000021e 	bne	r2,zero,10116738 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10116730:	e0bffc17 	ldw	r2,-16(fp)
10116734:	00000706 	br	10116754 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10116738:	e0bffc17 	ldw	r2,-16(fp)
1011673c:	10800017 	ldw	r2,0(r2)
10116740:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10116744:	e0fffc17 	ldw	r3,-16(fp)
10116748:	e0bfff17 	ldw	r2,-4(fp)
1011674c:	18bff01e 	bne	r3,r2,10116710 <_gp+0xffff5180>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10116750:	0005883a 	mov	r2,zero
}
10116754:	e037883a 	mov	sp,fp
10116758:	dfc00117 	ldw	ra,4(sp)
1011675c:	df000017 	ldw	fp,0(sp)
10116760:	dec00204 	addi	sp,sp,8
10116764:	f800283a 	ret

10116768 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10116768:	defffb04 	addi	sp,sp,-20
1011676c:	dfc00415 	stw	ra,16(sp)
10116770:	df000315 	stw	fp,12(sp)
10116774:	df000304 	addi	fp,sp,12
10116778:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1011677c:	d0a00617 	ldw	r2,-32744(gp)
10116780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10116784:	00003106 	br	1011684c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10116788:	e0bffd17 	ldw	r2,-12(fp)
1011678c:	10800217 	ldw	r2,8(r2)
10116790:	1009883a 	mov	r4,r2
10116794:	01058200 	call	10105820 <strlen>
10116798:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1011679c:	e0bffd17 	ldw	r2,-12(fp)
101167a0:	10c00217 	ldw	r3,8(r2)
101167a4:	e0bffe17 	ldw	r2,-8(fp)
101167a8:	10bfffc4 	addi	r2,r2,-1
101167ac:	1885883a 	add	r2,r3,r2
101167b0:	10800003 	ldbu	r2,0(r2)
101167b4:	10803fcc 	andi	r2,r2,255
101167b8:	1080201c 	xori	r2,r2,128
101167bc:	10bfe004 	addi	r2,r2,-128
101167c0:	10800bd8 	cmpnei	r2,r2,47
101167c4:	1000031e 	bne	r2,zero,101167d4 <alt_find_file+0x6c>
    {
      len -= 1;
101167c8:	e0bffe17 	ldw	r2,-8(fp)
101167cc:	10bfffc4 	addi	r2,r2,-1
101167d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101167d4:	e0bffe17 	ldw	r2,-8(fp)
101167d8:	e0ffff17 	ldw	r3,-4(fp)
101167dc:	1885883a 	add	r2,r3,r2
101167e0:	10800003 	ldbu	r2,0(r2)
101167e4:	10803fcc 	andi	r2,r2,255
101167e8:	1080201c 	xori	r2,r2,128
101167ec:	10bfe004 	addi	r2,r2,-128
101167f0:	10800be0 	cmpeqi	r2,r2,47
101167f4:	1000081e 	bne	r2,zero,10116818 <alt_find_file+0xb0>
101167f8:	e0bffe17 	ldw	r2,-8(fp)
101167fc:	e0ffff17 	ldw	r3,-4(fp)
10116800:	1885883a 	add	r2,r3,r2
10116804:	10800003 	ldbu	r2,0(r2)
10116808:	10803fcc 	andi	r2,r2,255
1011680c:	1080201c 	xori	r2,r2,128
10116810:	10bfe004 	addi	r2,r2,-128
10116814:	10000a1e 	bne	r2,zero,10116840 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10116818:	e0bffd17 	ldw	r2,-12(fp)
1011681c:	10800217 	ldw	r2,8(r2)
10116820:	e0fffe17 	ldw	r3,-8(fp)
10116824:	180d883a 	mov	r6,r3
10116828:	e17fff17 	ldw	r5,-4(fp)
1011682c:	1009883a 	mov	r4,r2
10116830:	0116f440 	call	10116f44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10116834:	1000021e 	bne	r2,zero,10116840 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10116838:	e0bffd17 	ldw	r2,-12(fp)
1011683c:	00000706 	br	1011685c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10116840:	e0bffd17 	ldw	r2,-12(fp)
10116844:	10800017 	ldw	r2,0(r2)
10116848:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1011684c:	e0fffd17 	ldw	r3,-12(fp)
10116850:	d0a00604 	addi	r2,gp,-32744
10116854:	18bfcc1e 	bne	r3,r2,10116788 <_gp+0xffff51f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10116858:	0005883a 	mov	r2,zero
}
1011685c:	e037883a 	mov	sp,fp
10116860:	dfc00117 	ldw	ra,4(sp)
10116864:	df000017 	ldw	fp,0(sp)
10116868:	dec00204 	addi	sp,sp,8
1011686c:	f800283a 	ret

10116870 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10116870:	defffc04 	addi	sp,sp,-16
10116874:	df000315 	stw	fp,12(sp)
10116878:	df000304 	addi	fp,sp,12
1011687c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10116880:	e0bfff17 	ldw	r2,-4(fp)
10116884:	10800217 	ldw	r2,8(r2)
10116888:	1000021e 	bne	r2,zero,10116894 <alt_fs_reg+0x24>
  {
    return -ENODEV;
1011688c:	00bffb44 	movi	r2,-19
10116890:	00001306 	br	101168e0 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10116894:	e0bfff17 	ldw	r2,-4(fp)
10116898:	d0e00604 	addi	r3,gp,-32744
1011689c:	e0fffd15 	stw	r3,-12(fp)
101168a0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101168a4:	e0bffe17 	ldw	r2,-8(fp)
101168a8:	e0fffd17 	ldw	r3,-12(fp)
101168ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101168b0:	e0bffd17 	ldw	r2,-12(fp)
101168b4:	10c00017 	ldw	r3,0(r2)
101168b8:	e0bffe17 	ldw	r2,-8(fp)
101168bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101168c0:	e0bffd17 	ldw	r2,-12(fp)
101168c4:	10800017 	ldw	r2,0(r2)
101168c8:	e0fffe17 	ldw	r3,-8(fp)
101168cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101168d0:	e0bffd17 	ldw	r2,-12(fp)
101168d4:	e0fffe17 	ldw	r3,-8(fp)
101168d8:	10c00015 	stw	r3,0(r2)

  return 0;
101168dc:	0005883a 	mov	r2,zero
} 
101168e0:	e037883a 	mov	sp,fp
101168e4:	df000017 	ldw	fp,0(sp)
101168e8:	dec00104 	addi	sp,sp,4
101168ec:	f800283a 	ret

101168f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101168f0:	defffc04 	addi	sp,sp,-16
101168f4:	df000315 	stw	fp,12(sp)
101168f8:	df000304 	addi	fp,sp,12
101168fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10116900:	00bffa04 	movi	r2,-24
10116904:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10116908:	e03ffd15 	stw	zero,-12(fp)
1011690c:	00001906 	br	10116974 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10116910:	008404b4 	movhi	r2,4114
10116914:	10a0e204 	addi	r2,r2,-31864
10116918:	e0fffd17 	ldw	r3,-12(fp)
1011691c:	18c00324 	muli	r3,r3,12
10116920:	10c5883a 	add	r2,r2,r3
10116924:	10800017 	ldw	r2,0(r2)
10116928:	10000f1e 	bne	r2,zero,10116968 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1011692c:	008404b4 	movhi	r2,4114
10116930:	10a0e204 	addi	r2,r2,-31864
10116934:	e0fffd17 	ldw	r3,-12(fp)
10116938:	18c00324 	muli	r3,r3,12
1011693c:	10c5883a 	add	r2,r2,r3
10116940:	e0ffff17 	ldw	r3,-4(fp)
10116944:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10116948:	d0e00a17 	ldw	r3,-32728(gp)
1011694c:	e0bffd17 	ldw	r2,-12(fp)
10116950:	1880020e 	bge	r3,r2,1011695c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10116954:	e0bffd17 	ldw	r2,-12(fp)
10116958:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
1011695c:	e0bffd17 	ldw	r2,-12(fp)
10116960:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10116964:	00000606 	br	10116980 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10116968:	e0bffd17 	ldw	r2,-12(fp)
1011696c:	10800044 	addi	r2,r2,1
10116970:	e0bffd15 	stw	r2,-12(fp)
10116974:	e0bffd17 	ldw	r2,-12(fp)
10116978:	10800810 	cmplti	r2,r2,32
1011697c:	103fe41e 	bne	r2,zero,10116910 <_gp+0xffff5380>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10116980:	e0bffe17 	ldw	r2,-8(fp)
}
10116984:	e037883a 	mov	sp,fp
10116988:	df000017 	ldw	fp,0(sp)
1011698c:	dec00104 	addi	sp,sp,4
10116990:	f800283a 	ret

10116994 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10116994:	defffe04 	addi	sp,sp,-8
10116998:	dfc00115 	stw	ra,4(sp)
1011699c:	df000015 	stw	fp,0(sp)
101169a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
101169a4:	01440004 	movi	r5,4096
101169a8:	0009883a 	mov	r4,zero
101169ac:	0116dcc0 	call	10116dcc <alt_icache_flush>
#endif
}
101169b0:	0001883a 	nop
101169b4:	e037883a 	mov	sp,fp
101169b8:	dfc00117 	ldw	ra,4(sp)
101169bc:	df000017 	ldw	fp,0(sp)
101169c0:	dec00204 	addi	sp,sp,8
101169c4:	f800283a 	ret

101169c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101169c8:	defff904 	addi	sp,sp,-28
101169cc:	dfc00615 	stw	ra,24(sp)
101169d0:	df000515 	stw	fp,20(sp)
101169d4:	df000504 	addi	fp,sp,20
101169d8:	e13ffc15 	stw	r4,-16(fp)
101169dc:	e17ffd15 	stw	r5,-12(fp)
101169e0:	e1bffe15 	stw	r6,-8(fp)
101169e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
101169e8:	e0800217 	ldw	r2,8(fp)
101169ec:	d8800015 	stw	r2,0(sp)
101169f0:	e1ffff17 	ldw	r7,-4(fp)
101169f4:	e1bffe17 	ldw	r6,-8(fp)
101169f8:	e17ffd17 	ldw	r5,-12(fp)
101169fc:	e13ffc17 	ldw	r4,-16(fp)
10116a00:	0116b780 	call	10116b78 <alt_iic_isr_register>
}  
10116a04:	e037883a 	mov	sp,fp
10116a08:	dfc00117 	ldw	ra,4(sp)
10116a0c:	df000017 	ldw	fp,0(sp)
10116a10:	dec00204 	addi	sp,sp,8
10116a14:	f800283a 	ret

10116a18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10116a18:	defff904 	addi	sp,sp,-28
10116a1c:	df000615 	stw	fp,24(sp)
10116a20:	df000604 	addi	fp,sp,24
10116a24:	e13ffe15 	stw	r4,-8(fp)
10116a28:	e17fff15 	stw	r5,-4(fp)
10116a2c:	e0bfff17 	ldw	r2,-4(fp)
10116a30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116a34:	0005303a 	rdctl	r2,status
10116a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116a3c:	e0fffb17 	ldw	r3,-20(fp)
10116a40:	00bfff84 	movi	r2,-2
10116a44:	1884703a 	and	r2,r3,r2
10116a48:	1001703a 	wrctl	status,r2
  
  return context;
10116a4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10116a50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10116a54:	00c00044 	movi	r3,1
10116a58:	e0bffa17 	ldw	r2,-24(fp)
10116a5c:	1884983a 	sll	r2,r3,r2
10116a60:	1007883a 	mov	r3,r2
10116a64:	d0a70a17 	ldw	r2,-25560(gp)
10116a68:	1884b03a 	or	r2,r3,r2
10116a6c:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10116a70:	d0a70a17 	ldw	r2,-25560(gp)
10116a74:	100170fa 	wrctl	ienable,r2
10116a78:	e0bffc17 	ldw	r2,-16(fp)
10116a7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116a80:	e0bffd17 	ldw	r2,-12(fp)
10116a84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10116a88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10116a8c:	0001883a 	nop
}
10116a90:	e037883a 	mov	sp,fp
10116a94:	df000017 	ldw	fp,0(sp)
10116a98:	dec00104 	addi	sp,sp,4
10116a9c:	f800283a 	ret

10116aa0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10116aa0:	defff904 	addi	sp,sp,-28
10116aa4:	df000615 	stw	fp,24(sp)
10116aa8:	df000604 	addi	fp,sp,24
10116aac:	e13ffe15 	stw	r4,-8(fp)
10116ab0:	e17fff15 	stw	r5,-4(fp)
10116ab4:	e0bfff17 	ldw	r2,-4(fp)
10116ab8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116abc:	0005303a 	rdctl	r2,status
10116ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116ac4:	e0fffb17 	ldw	r3,-20(fp)
10116ac8:	00bfff84 	movi	r2,-2
10116acc:	1884703a 	and	r2,r3,r2
10116ad0:	1001703a 	wrctl	status,r2
  
  return context;
10116ad4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10116ad8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10116adc:	00c00044 	movi	r3,1
10116ae0:	e0bffa17 	ldw	r2,-24(fp)
10116ae4:	1884983a 	sll	r2,r3,r2
10116ae8:	0084303a 	nor	r2,zero,r2
10116aec:	1007883a 	mov	r3,r2
10116af0:	d0a70a17 	ldw	r2,-25560(gp)
10116af4:	1884703a 	and	r2,r3,r2
10116af8:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10116afc:	d0a70a17 	ldw	r2,-25560(gp)
10116b00:	100170fa 	wrctl	ienable,r2
10116b04:	e0bffc17 	ldw	r2,-16(fp)
10116b08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116b0c:	e0bffd17 	ldw	r2,-12(fp)
10116b10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10116b14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10116b18:	0001883a 	nop
}
10116b1c:	e037883a 	mov	sp,fp
10116b20:	df000017 	ldw	fp,0(sp)
10116b24:	dec00104 	addi	sp,sp,4
10116b28:	f800283a 	ret

10116b2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10116b2c:	defffc04 	addi	sp,sp,-16
10116b30:	df000315 	stw	fp,12(sp)
10116b34:	df000304 	addi	fp,sp,12
10116b38:	e13ffe15 	stw	r4,-8(fp)
10116b3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10116b40:	000530fa 	rdctl	r2,ienable
10116b44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10116b48:	00c00044 	movi	r3,1
10116b4c:	e0bfff17 	ldw	r2,-4(fp)
10116b50:	1884983a 	sll	r2,r3,r2
10116b54:	1007883a 	mov	r3,r2
10116b58:	e0bffd17 	ldw	r2,-12(fp)
10116b5c:	1884703a 	and	r2,r3,r2
10116b60:	1004c03a 	cmpne	r2,r2,zero
10116b64:	10803fcc 	andi	r2,r2,255
}
10116b68:	e037883a 	mov	sp,fp
10116b6c:	df000017 	ldw	fp,0(sp)
10116b70:	dec00104 	addi	sp,sp,4
10116b74:	f800283a 	ret

10116b78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10116b78:	defff504 	addi	sp,sp,-44
10116b7c:	dfc00a15 	stw	ra,40(sp)
10116b80:	df000915 	stw	fp,36(sp)
10116b84:	df000904 	addi	fp,sp,36
10116b88:	e13ffc15 	stw	r4,-16(fp)
10116b8c:	e17ffd15 	stw	r5,-12(fp)
10116b90:	e1bffe15 	stw	r6,-8(fp)
10116b94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10116b98:	00bffa84 	movi	r2,-22
10116b9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10116ba0:	e0bffd17 	ldw	r2,-12(fp)
10116ba4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10116ba8:	e0bff817 	ldw	r2,-32(fp)
10116bac:	10800808 	cmpgei	r2,r2,32
10116bb0:	1000271e 	bne	r2,zero,10116c50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116bb4:	0005303a 	rdctl	r2,status
10116bb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116bbc:	e0fffb17 	ldw	r3,-20(fp)
10116bc0:	00bfff84 	movi	r2,-2
10116bc4:	1884703a 	and	r2,r3,r2
10116bc8:	1001703a 	wrctl	status,r2
  
  return context;
10116bcc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10116bd0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10116bd4:	008404b4 	movhi	r2,4114
10116bd8:	10ac7e04 	addi	r2,r2,-19976
10116bdc:	e0fff817 	ldw	r3,-32(fp)
10116be0:	180690fa 	slli	r3,r3,3
10116be4:	10c5883a 	add	r2,r2,r3
10116be8:	e0fffe17 	ldw	r3,-8(fp)
10116bec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10116bf0:	008404b4 	movhi	r2,4114
10116bf4:	10ac7e04 	addi	r2,r2,-19976
10116bf8:	e0fff817 	ldw	r3,-32(fp)
10116bfc:	180690fa 	slli	r3,r3,3
10116c00:	10c5883a 	add	r2,r2,r3
10116c04:	10800104 	addi	r2,r2,4
10116c08:	e0ffff17 	ldw	r3,-4(fp)
10116c0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10116c10:	e0bffe17 	ldw	r2,-8(fp)
10116c14:	10000526 	beq	r2,zero,10116c2c <alt_iic_isr_register+0xb4>
10116c18:	e0bff817 	ldw	r2,-32(fp)
10116c1c:	100b883a 	mov	r5,r2
10116c20:	e13ffc17 	ldw	r4,-16(fp)
10116c24:	0116a180 	call	10116a18 <alt_ic_irq_enable>
10116c28:	00000406 	br	10116c3c <alt_iic_isr_register+0xc4>
10116c2c:	e0bff817 	ldw	r2,-32(fp)
10116c30:	100b883a 	mov	r5,r2
10116c34:	e13ffc17 	ldw	r4,-16(fp)
10116c38:	0116aa00 	call	10116aa0 <alt_ic_irq_disable>
10116c3c:	e0bff715 	stw	r2,-36(fp)
10116c40:	e0bffa17 	ldw	r2,-24(fp)
10116c44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116c48:	e0bff917 	ldw	r2,-28(fp)
10116c4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10116c50:	e0bff717 	ldw	r2,-36(fp)
}
10116c54:	e037883a 	mov	sp,fp
10116c58:	dfc00117 	ldw	ra,4(sp)
10116c5c:	df000017 	ldw	fp,0(sp)
10116c60:	dec00204 	addi	sp,sp,8
10116c64:	f800283a 	ret

10116c68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10116c68:	defff904 	addi	sp,sp,-28
10116c6c:	dfc00615 	stw	ra,24(sp)
10116c70:	df000515 	stw	fp,20(sp)
10116c74:	df000504 	addi	fp,sp,20
10116c78:	e13ffc15 	stw	r4,-16(fp)
10116c7c:	e17ffd15 	stw	r5,-12(fp)
10116c80:	e1bffe15 	stw	r6,-8(fp)
10116c84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10116c88:	e1bfff17 	ldw	r6,-4(fp)
10116c8c:	e17ffe17 	ldw	r5,-8(fp)
10116c90:	e13ffd17 	ldw	r4,-12(fp)
10116c94:	01149b00 	call	101149b0 <open>
10116c98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10116c9c:	e0bffb17 	ldw	r2,-20(fp)
10116ca0:	10001c16 	blt	r2,zero,10116d14 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10116ca4:	008404b4 	movhi	r2,4114
10116ca8:	10a0e204 	addi	r2,r2,-31864
10116cac:	e0fffb17 	ldw	r3,-20(fp)
10116cb0:	18c00324 	muli	r3,r3,12
10116cb4:	10c5883a 	add	r2,r2,r3
10116cb8:	10c00017 	ldw	r3,0(r2)
10116cbc:	e0bffc17 	ldw	r2,-16(fp)
10116cc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10116cc4:	008404b4 	movhi	r2,4114
10116cc8:	10a0e204 	addi	r2,r2,-31864
10116ccc:	e0fffb17 	ldw	r3,-20(fp)
10116cd0:	18c00324 	muli	r3,r3,12
10116cd4:	10c5883a 	add	r2,r2,r3
10116cd8:	10800104 	addi	r2,r2,4
10116cdc:	10c00017 	ldw	r3,0(r2)
10116ce0:	e0bffc17 	ldw	r2,-16(fp)
10116ce4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10116ce8:	008404b4 	movhi	r2,4114
10116cec:	10a0e204 	addi	r2,r2,-31864
10116cf0:	e0fffb17 	ldw	r3,-20(fp)
10116cf4:	18c00324 	muli	r3,r3,12
10116cf8:	10c5883a 	add	r2,r2,r3
10116cfc:	10800204 	addi	r2,r2,8
10116d00:	10c00017 	ldw	r3,0(r2)
10116d04:	e0bffc17 	ldw	r2,-16(fp)
10116d08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10116d0c:	e13ffb17 	ldw	r4,-20(fp)
10116d10:	0114ea40 	call	10114ea4 <alt_release_fd>
  }
} 
10116d14:	0001883a 	nop
10116d18:	e037883a 	mov	sp,fp
10116d1c:	dfc00117 	ldw	ra,4(sp)
10116d20:	df000017 	ldw	fp,0(sp)
10116d24:	dec00204 	addi	sp,sp,8
10116d28:	f800283a 	ret

10116d2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10116d2c:	defffb04 	addi	sp,sp,-20
10116d30:	dfc00415 	stw	ra,16(sp)
10116d34:	df000315 	stw	fp,12(sp)
10116d38:	df000304 	addi	fp,sp,12
10116d3c:	e13ffd15 	stw	r4,-12(fp)
10116d40:	e17ffe15 	stw	r5,-8(fp)
10116d44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10116d48:	01c07fc4 	movi	r7,511
10116d4c:	01800044 	movi	r6,1
10116d50:	e17ffd17 	ldw	r5,-12(fp)
10116d54:	010404b4 	movhi	r4,4114
10116d58:	2120e504 	addi	r4,r4,-31852
10116d5c:	0116c680 	call	10116c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10116d60:	01c07fc4 	movi	r7,511
10116d64:	000d883a 	mov	r6,zero
10116d68:	e17ffe17 	ldw	r5,-8(fp)
10116d6c:	010404b4 	movhi	r4,4114
10116d70:	2120e204 	addi	r4,r4,-31864
10116d74:	0116c680 	call	10116c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10116d78:	01c07fc4 	movi	r7,511
10116d7c:	01800044 	movi	r6,1
10116d80:	e17fff17 	ldw	r5,-4(fp)
10116d84:	010404b4 	movhi	r4,4114
10116d88:	2120e804 	addi	r4,r4,-31840
10116d8c:	0116c680 	call	10116c68 <alt_open_fd>
}  
10116d90:	0001883a 	nop
10116d94:	e037883a 	mov	sp,fp
10116d98:	dfc00117 	ldw	ra,4(sp)
10116d9c:	df000017 	ldw	fp,0(sp)
10116da0:	dec00204 	addi	sp,sp,8
10116da4:	f800283a 	ret

10116da8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10116da8:	deffff04 	addi	sp,sp,-4
10116dac:	df000015 	stw	fp,0(sp)
10116db0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10116db4:	000170fa 	wrctl	ienable,zero
}
10116db8:	0001883a 	nop
10116dbc:	e037883a 	mov	sp,fp
10116dc0:	df000017 	ldw	fp,0(sp)
10116dc4:	dec00104 	addi	sp,sp,4
10116dc8:	f800283a 	ret

10116dcc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10116dcc:	defffb04 	addi	sp,sp,-20
10116dd0:	df000415 	stw	fp,16(sp)
10116dd4:	df000404 	addi	fp,sp,16
10116dd8:	e13ffe15 	stw	r4,-8(fp)
10116ddc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10116de0:	e0bfff17 	ldw	r2,-4(fp)
10116de4:	10840070 	cmpltui	r2,r2,4097
10116de8:	1000021e 	bne	r2,zero,10116df4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10116dec:	00840004 	movi	r2,4096
10116df0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10116df4:	e0fffe17 	ldw	r3,-8(fp)
10116df8:	e0bfff17 	ldw	r2,-4(fp)
10116dfc:	1885883a 	add	r2,r3,r2
10116e00:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10116e04:	e0bffe17 	ldw	r2,-8(fp)
10116e08:	e0bffc15 	stw	r2,-16(fp)
10116e0c:	00000506 	br	10116e24 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10116e10:	e0bffc17 	ldw	r2,-16(fp)
10116e14:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10116e18:	e0bffc17 	ldw	r2,-16(fp)
10116e1c:	10800804 	addi	r2,r2,32
10116e20:	e0bffc15 	stw	r2,-16(fp)
10116e24:	e0fffc17 	ldw	r3,-16(fp)
10116e28:	e0bffd17 	ldw	r2,-12(fp)
10116e2c:	18bff836 	bltu	r3,r2,10116e10 <_gp+0xffff5880>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10116e30:	e0bffe17 	ldw	r2,-8(fp)
10116e34:	108007cc 	andi	r2,r2,31
10116e38:	10000226 	beq	r2,zero,10116e44 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10116e3c:	e0bffc17 	ldw	r2,-16(fp)
10116e40:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10116e44:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10116e48:	0001883a 	nop
10116e4c:	e037883a 	mov	sp,fp
10116e50:	df000017 	ldw	fp,0(sp)
10116e54:	dec00104 	addi	sp,sp,4
10116e58:	f800283a 	ret

10116e5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10116e5c:	defffe04 	addi	sp,sp,-8
10116e60:	df000115 	stw	fp,4(sp)
10116e64:	df000104 	addi	fp,sp,4
10116e68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10116e6c:	e0bfff17 	ldw	r2,-4(fp)
10116e70:	10bffe84 	addi	r2,r2,-6
10116e74:	10c00428 	cmpgeui	r3,r2,16
10116e78:	18001a1e 	bne	r3,zero,10116ee4 <alt_exception_cause_generated_bad_addr+0x88>
10116e7c:	100690ba 	slli	r3,r2,2
10116e80:	00840474 	movhi	r2,4113
10116e84:	109ba504 	addi	r2,r2,28308
10116e88:	1885883a 	add	r2,r3,r2
10116e8c:	10800017 	ldw	r2,0(r2)
10116e90:	1000683a 	jmp	r2
10116e94:	10116ed4 	ori	zero,r2,17851
10116e98:	10116ed4 	ori	zero,r2,17851
10116e9c:	10116ee4 	muli	zero,r2,17851
10116ea0:	10116ee4 	muli	zero,r2,17851
10116ea4:	10116ee4 	muli	zero,r2,17851
10116ea8:	10116ed4 	ori	zero,r2,17851
10116eac:	10116edc 	xori	zero,r2,17851
10116eb0:	10116ee4 	muli	zero,r2,17851
10116eb4:	10116ed4 	ori	zero,r2,17851
10116eb8:	10116ed4 	ori	zero,r2,17851
10116ebc:	10116ee4 	muli	zero,r2,17851
10116ec0:	10116ed4 	ori	zero,r2,17851
10116ec4:	10116edc 	xori	zero,r2,17851
10116ec8:	10116ee4 	muli	zero,r2,17851
10116ecc:	10116ee4 	muli	zero,r2,17851
10116ed0:	10116ed4 	ori	zero,r2,17851
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10116ed4:	00800044 	movi	r2,1
10116ed8:	00000306 	br	10116ee8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10116edc:	0005883a 	mov	r2,zero
10116ee0:	00000106 	br	10116ee8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10116ee4:	0005883a 	mov	r2,zero
  }
}
10116ee8:	e037883a 	mov	sp,fp
10116eec:	df000017 	ldw	fp,0(sp)
10116ef0:	dec00104 	addi	sp,sp,4
10116ef4:	f800283a 	ret

10116ef8 <atexit>:
10116ef8:	200b883a 	mov	r5,r4
10116efc:	000f883a 	mov	r7,zero
10116f00:	000d883a 	mov	r6,zero
10116f04:	0009883a 	mov	r4,zero
10116f08:	01171281 	jmpi	10117128 <__register_exitproc>

10116f0c <exit>:
10116f0c:	defffe04 	addi	sp,sp,-8
10116f10:	000b883a 	mov	r5,zero
10116f14:	dc000015 	stw	r16,0(sp)
10116f18:	dfc00115 	stw	ra,4(sp)
10116f1c:	2021883a 	mov	r16,r4
10116f20:	01172400 	call	10117240 <__call_exitprocs>
10116f24:	008404b4 	movhi	r2,4114
10116f28:	10a56404 	addi	r2,r2,-27248
10116f2c:	11000017 	ldw	r4,0(r2)
10116f30:	20800f17 	ldw	r2,60(r4)
10116f34:	10000126 	beq	r2,zero,10116f3c <exit+0x30>
10116f38:	103ee83a 	callr	r2
10116f3c:	8009883a 	mov	r4,r16
10116f40:	01140700 	call	10114070 <_exit>

10116f44 <memcmp>:
10116f44:	01c000c4 	movi	r7,3
10116f48:	3980192e 	bgeu	r7,r6,10116fb0 <memcmp+0x6c>
10116f4c:	2144b03a 	or	r2,r4,r5
10116f50:	11c4703a 	and	r2,r2,r7
10116f54:	10000f26 	beq	r2,zero,10116f94 <memcmp+0x50>
10116f58:	20800003 	ldbu	r2,0(r4)
10116f5c:	28c00003 	ldbu	r3,0(r5)
10116f60:	10c0151e 	bne	r2,r3,10116fb8 <memcmp+0x74>
10116f64:	31bfff84 	addi	r6,r6,-2
10116f68:	01ffffc4 	movi	r7,-1
10116f6c:	00000406 	br	10116f80 <memcmp+0x3c>
10116f70:	20800003 	ldbu	r2,0(r4)
10116f74:	28c00003 	ldbu	r3,0(r5)
10116f78:	31bfffc4 	addi	r6,r6,-1
10116f7c:	10c00e1e 	bne	r2,r3,10116fb8 <memcmp+0x74>
10116f80:	21000044 	addi	r4,r4,1
10116f84:	29400044 	addi	r5,r5,1
10116f88:	31fff91e 	bne	r6,r7,10116f70 <_gp+0xffff59e0>
10116f8c:	0005883a 	mov	r2,zero
10116f90:	f800283a 	ret
10116f94:	20c00017 	ldw	r3,0(r4)
10116f98:	28800017 	ldw	r2,0(r5)
10116f9c:	18bfee1e 	bne	r3,r2,10116f58 <_gp+0xffff59c8>
10116fa0:	31bfff04 	addi	r6,r6,-4
10116fa4:	21000104 	addi	r4,r4,4
10116fa8:	29400104 	addi	r5,r5,4
10116fac:	39bff936 	bltu	r7,r6,10116f94 <_gp+0xffff5a04>
10116fb0:	303fe91e 	bne	r6,zero,10116f58 <_gp+0xffff59c8>
10116fb4:	003ff506 	br	10116f8c <_gp+0xffff59fc>
10116fb8:	10c5c83a 	sub	r2,r2,r3
10116fbc:	f800283a 	ret

10116fc0 <_putc_r>:
10116fc0:	defffc04 	addi	sp,sp,-16
10116fc4:	dc000215 	stw	r16,8(sp)
10116fc8:	dfc00315 	stw	ra,12(sp)
10116fcc:	2021883a 	mov	r16,r4
10116fd0:	20000226 	beq	r4,zero,10116fdc <_putc_r+0x1c>
10116fd4:	20800e17 	ldw	r2,56(r4)
10116fd8:	10001b26 	beq	r2,zero,10117048 <_putc_r+0x88>
10116fdc:	30800217 	ldw	r2,8(r6)
10116fe0:	10bfffc4 	addi	r2,r2,-1
10116fe4:	30800215 	stw	r2,8(r6)
10116fe8:	10000a16 	blt	r2,zero,10117014 <_putc_r+0x54>
10116fec:	30800017 	ldw	r2,0(r6)
10116ff0:	11400005 	stb	r5,0(r2)
10116ff4:	30800017 	ldw	r2,0(r6)
10116ff8:	10c00044 	addi	r3,r2,1
10116ffc:	30c00015 	stw	r3,0(r6)
10117000:	10800003 	ldbu	r2,0(r2)
10117004:	dfc00317 	ldw	ra,12(sp)
10117008:	dc000217 	ldw	r16,8(sp)
1011700c:	dec00404 	addi	sp,sp,16
10117010:	f800283a 	ret
10117014:	30c00617 	ldw	r3,24(r6)
10117018:	10c00616 	blt	r2,r3,10117034 <_putc_r+0x74>
1011701c:	30800017 	ldw	r2,0(r6)
10117020:	00c00284 	movi	r3,10
10117024:	11400005 	stb	r5,0(r2)
10117028:	30800017 	ldw	r2,0(r6)
1011702c:	11400003 	ldbu	r5,0(r2)
10117030:	28fff11e 	bne	r5,r3,10116ff8 <_gp+0xffff5a68>
10117034:	8009883a 	mov	r4,r16
10117038:	dfc00317 	ldw	ra,12(sp)
1011703c:	dc000217 	ldw	r16,8(sp)
10117040:	dec00404 	addi	sp,sp,16
10117044:	0110a801 	jmpi	10110a80 <__swbuf_r>
10117048:	d9400015 	stw	r5,0(sp)
1011704c:	d9800115 	stw	r6,4(sp)
10117050:	01039340 	call	10103934 <__sinit>
10117054:	d9800117 	ldw	r6,4(sp)
10117058:	d9400017 	ldw	r5,0(sp)
1011705c:	003fdf06 	br	10116fdc <_gp+0xffff5a4c>

10117060 <putc>:
10117060:	008404b4 	movhi	r2,4114
10117064:	defffc04 	addi	sp,sp,-16
10117068:	10a56504 	addi	r2,r2,-27244
1011706c:	dc000115 	stw	r16,4(sp)
10117070:	14000017 	ldw	r16,0(r2)
10117074:	dc400215 	stw	r17,8(sp)
10117078:	dfc00315 	stw	ra,12(sp)
1011707c:	2023883a 	mov	r17,r4
10117080:	80000226 	beq	r16,zero,1011708c <putc+0x2c>
10117084:	80800e17 	ldw	r2,56(r16)
10117088:	10001a26 	beq	r2,zero,101170f4 <putc+0x94>
1011708c:	28800217 	ldw	r2,8(r5)
10117090:	10bfffc4 	addi	r2,r2,-1
10117094:	28800215 	stw	r2,8(r5)
10117098:	10000b16 	blt	r2,zero,101170c8 <putc+0x68>
1011709c:	28800017 	ldw	r2,0(r5)
101170a0:	14400005 	stb	r17,0(r2)
101170a4:	28800017 	ldw	r2,0(r5)
101170a8:	10c00044 	addi	r3,r2,1
101170ac:	28c00015 	stw	r3,0(r5)
101170b0:	10800003 	ldbu	r2,0(r2)
101170b4:	dfc00317 	ldw	ra,12(sp)
101170b8:	dc400217 	ldw	r17,8(sp)
101170bc:	dc000117 	ldw	r16,4(sp)
101170c0:	dec00404 	addi	sp,sp,16
101170c4:	f800283a 	ret
101170c8:	28c00617 	ldw	r3,24(r5)
101170cc:	10c00e16 	blt	r2,r3,10117108 <putc+0xa8>
101170d0:	28800017 	ldw	r2,0(r5)
101170d4:	01000284 	movi	r4,10
101170d8:	14400005 	stb	r17,0(r2)
101170dc:	28800017 	ldw	r2,0(r5)
101170e0:	10c00003 	ldbu	r3,0(r2)
101170e4:	193ff01e 	bne	r3,r4,101170a8 <_gp+0xffff5b18>
101170e8:	280d883a 	mov	r6,r5
101170ec:	180b883a 	mov	r5,r3
101170f0:	00000706 	br	10117110 <putc+0xb0>
101170f4:	8009883a 	mov	r4,r16
101170f8:	d9400015 	stw	r5,0(sp)
101170fc:	01039340 	call	10103934 <__sinit>
10117100:	d9400017 	ldw	r5,0(sp)
10117104:	003fe106 	br	1011708c <_gp+0xffff5afc>
10117108:	280d883a 	mov	r6,r5
1011710c:	880b883a 	mov	r5,r17
10117110:	8009883a 	mov	r4,r16
10117114:	dfc00317 	ldw	ra,12(sp)
10117118:	dc400217 	ldw	r17,8(sp)
1011711c:	dc000117 	ldw	r16,4(sp)
10117120:	dec00404 	addi	sp,sp,16
10117124:	0110a801 	jmpi	10110a80 <__swbuf_r>

10117128 <__register_exitproc>:
10117128:	defffa04 	addi	sp,sp,-24
1011712c:	dc000315 	stw	r16,12(sp)
10117130:	040404b4 	movhi	r16,4114
10117134:	84256404 	addi	r16,r16,-27248
10117138:	80c00017 	ldw	r3,0(r16)
1011713c:	dc400415 	stw	r17,16(sp)
10117140:	dfc00515 	stw	ra,20(sp)
10117144:	18805217 	ldw	r2,328(r3)
10117148:	2023883a 	mov	r17,r4
1011714c:	10003726 	beq	r2,zero,1011722c <__register_exitproc+0x104>
10117150:	10c00117 	ldw	r3,4(r2)
10117154:	010007c4 	movi	r4,31
10117158:	20c00e16 	blt	r4,r3,10117194 <__register_exitproc+0x6c>
1011715c:	1a000044 	addi	r8,r3,1
10117160:	8800221e 	bne	r17,zero,101171ec <__register_exitproc+0xc4>
10117164:	18c00084 	addi	r3,r3,2
10117168:	18c7883a 	add	r3,r3,r3
1011716c:	18c7883a 	add	r3,r3,r3
10117170:	12000115 	stw	r8,4(r2)
10117174:	10c7883a 	add	r3,r2,r3
10117178:	19400015 	stw	r5,0(r3)
1011717c:	0005883a 	mov	r2,zero
10117180:	dfc00517 	ldw	ra,20(sp)
10117184:	dc400417 	ldw	r17,16(sp)
10117188:	dc000317 	ldw	r16,12(sp)
1011718c:	dec00604 	addi	sp,sp,24
10117190:	f800283a 	ret
10117194:	00800034 	movhi	r2,0
10117198:	10800004 	addi	r2,r2,0
1011719c:	10002626 	beq	r2,zero,10117238 <__register_exitproc+0x110>
101171a0:	01006404 	movi	r4,400
101171a4:	d9400015 	stw	r5,0(sp)
101171a8:	d9800115 	stw	r6,4(sp)
101171ac:	d9c00215 	stw	r7,8(sp)
101171b0:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101171b4:	d9400017 	ldw	r5,0(sp)
101171b8:	d9800117 	ldw	r6,4(sp)
101171bc:	d9c00217 	ldw	r7,8(sp)
101171c0:	10001d26 	beq	r2,zero,10117238 <__register_exitproc+0x110>
101171c4:	81000017 	ldw	r4,0(r16)
101171c8:	10000115 	stw	zero,4(r2)
101171cc:	02000044 	movi	r8,1
101171d0:	22405217 	ldw	r9,328(r4)
101171d4:	0007883a 	mov	r3,zero
101171d8:	12400015 	stw	r9,0(r2)
101171dc:	20805215 	stw	r2,328(r4)
101171e0:	10006215 	stw	zero,392(r2)
101171e4:	10006315 	stw	zero,396(r2)
101171e8:	883fde26 	beq	r17,zero,10117164 <_gp+0xffff5bd4>
101171ec:	18c9883a 	add	r4,r3,r3
101171f0:	2109883a 	add	r4,r4,r4
101171f4:	1109883a 	add	r4,r2,r4
101171f8:	21802215 	stw	r6,136(r4)
101171fc:	01800044 	movi	r6,1
10117200:	12406217 	ldw	r9,392(r2)
10117204:	30cc983a 	sll	r6,r6,r3
10117208:	4992b03a 	or	r9,r9,r6
1011720c:	12406215 	stw	r9,392(r2)
10117210:	21c04215 	stw	r7,264(r4)
10117214:	01000084 	movi	r4,2
10117218:	893fd21e 	bne	r17,r4,10117164 <_gp+0xffff5bd4>
1011721c:	11006317 	ldw	r4,396(r2)
10117220:	218cb03a 	or	r6,r4,r6
10117224:	11806315 	stw	r6,396(r2)
10117228:	003fce06 	br	10117164 <_gp+0xffff5bd4>
1011722c:	18805304 	addi	r2,r3,332
10117230:	18805215 	stw	r2,328(r3)
10117234:	003fc606 	br	10117150 <_gp+0xffff5bc0>
10117238:	00bfffc4 	movi	r2,-1
1011723c:	003fd006 	br	10117180 <_gp+0xffff5bf0>

10117240 <__call_exitprocs>:
10117240:	defff504 	addi	sp,sp,-44
10117244:	df000915 	stw	fp,36(sp)
10117248:	dd400615 	stw	r21,24(sp)
1011724c:	dc800315 	stw	r18,12(sp)
10117250:	dfc00a15 	stw	ra,40(sp)
10117254:	ddc00815 	stw	r23,32(sp)
10117258:	dd800715 	stw	r22,28(sp)
1011725c:	dd000515 	stw	r20,20(sp)
10117260:	dcc00415 	stw	r19,16(sp)
10117264:	dc400215 	stw	r17,8(sp)
10117268:	dc000115 	stw	r16,4(sp)
1011726c:	d9000015 	stw	r4,0(sp)
10117270:	2839883a 	mov	fp,r5
10117274:	04800044 	movi	r18,1
10117278:	057fffc4 	movi	r21,-1
1011727c:	008404b4 	movhi	r2,4114
10117280:	10a56404 	addi	r2,r2,-27248
10117284:	12000017 	ldw	r8,0(r2)
10117288:	45005217 	ldw	r20,328(r8)
1011728c:	44c05204 	addi	r19,r8,328
10117290:	a0001c26 	beq	r20,zero,10117304 <__call_exitprocs+0xc4>
10117294:	a0800117 	ldw	r2,4(r20)
10117298:	15ffffc4 	addi	r23,r2,-1
1011729c:	b8000d16 	blt	r23,zero,101172d4 <__call_exitprocs+0x94>
101172a0:	14000044 	addi	r16,r2,1
101172a4:	8421883a 	add	r16,r16,r16
101172a8:	8421883a 	add	r16,r16,r16
101172ac:	84402004 	addi	r17,r16,128
101172b0:	a463883a 	add	r17,r20,r17
101172b4:	a421883a 	add	r16,r20,r16
101172b8:	e0001e26 	beq	fp,zero,10117334 <__call_exitprocs+0xf4>
101172bc:	80804017 	ldw	r2,256(r16)
101172c0:	e0801c26 	beq	fp,r2,10117334 <__call_exitprocs+0xf4>
101172c4:	bdffffc4 	addi	r23,r23,-1
101172c8:	843fff04 	addi	r16,r16,-4
101172cc:	8c7fff04 	addi	r17,r17,-4
101172d0:	bd7ff91e 	bne	r23,r21,101172b8 <_gp+0xffff5d28>
101172d4:	00800034 	movhi	r2,0
101172d8:	10800004 	addi	r2,r2,0
101172dc:	10000926 	beq	r2,zero,10117304 <__call_exitprocs+0xc4>
101172e0:	a0800117 	ldw	r2,4(r20)
101172e4:	1000301e 	bne	r2,zero,101173a8 <__call_exitprocs+0x168>
101172e8:	a0800017 	ldw	r2,0(r20)
101172ec:	10003226 	beq	r2,zero,101173b8 <__call_exitprocs+0x178>
101172f0:	a009883a 	mov	r4,r20
101172f4:	98800015 	stw	r2,0(r19)
101172f8:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101172fc:	9d000017 	ldw	r20,0(r19)
10117300:	a03fe41e 	bne	r20,zero,10117294 <_gp+0xffff5d04>
10117304:	dfc00a17 	ldw	ra,40(sp)
10117308:	df000917 	ldw	fp,36(sp)
1011730c:	ddc00817 	ldw	r23,32(sp)
10117310:	dd800717 	ldw	r22,28(sp)
10117314:	dd400617 	ldw	r21,24(sp)
10117318:	dd000517 	ldw	r20,20(sp)
1011731c:	dcc00417 	ldw	r19,16(sp)
10117320:	dc800317 	ldw	r18,12(sp)
10117324:	dc400217 	ldw	r17,8(sp)
10117328:	dc000117 	ldw	r16,4(sp)
1011732c:	dec00b04 	addi	sp,sp,44
10117330:	f800283a 	ret
10117334:	a0800117 	ldw	r2,4(r20)
10117338:	80c00017 	ldw	r3,0(r16)
1011733c:	10bfffc4 	addi	r2,r2,-1
10117340:	15c01426 	beq	r2,r23,10117394 <__call_exitprocs+0x154>
10117344:	80000015 	stw	zero,0(r16)
10117348:	183fde26 	beq	r3,zero,101172c4 <_gp+0xffff5d34>
1011734c:	95c8983a 	sll	r4,r18,r23
10117350:	a0806217 	ldw	r2,392(r20)
10117354:	a5800117 	ldw	r22,4(r20)
10117358:	2084703a 	and	r2,r4,r2
1011735c:	10000b26 	beq	r2,zero,1011738c <__call_exitprocs+0x14c>
10117360:	a0806317 	ldw	r2,396(r20)
10117364:	2088703a 	and	r4,r4,r2
10117368:	20000c1e 	bne	r4,zero,1011739c <__call_exitprocs+0x15c>
1011736c:	89400017 	ldw	r5,0(r17)
10117370:	d9000017 	ldw	r4,0(sp)
10117374:	183ee83a 	callr	r3
10117378:	a0800117 	ldw	r2,4(r20)
1011737c:	15bfbf1e 	bne	r2,r22,1011727c <_gp+0xffff5cec>
10117380:	98800017 	ldw	r2,0(r19)
10117384:	153fcf26 	beq	r2,r20,101172c4 <_gp+0xffff5d34>
10117388:	003fbc06 	br	1011727c <_gp+0xffff5cec>
1011738c:	183ee83a 	callr	r3
10117390:	003ff906 	br	10117378 <_gp+0xffff5de8>
10117394:	a5c00115 	stw	r23,4(r20)
10117398:	003feb06 	br	10117348 <_gp+0xffff5db8>
1011739c:	89000017 	ldw	r4,0(r17)
101173a0:	183ee83a 	callr	r3
101173a4:	003ff406 	br	10117378 <_gp+0xffff5de8>
101173a8:	a0800017 	ldw	r2,0(r20)
101173ac:	a027883a 	mov	r19,r20
101173b0:	1029883a 	mov	r20,r2
101173b4:	003fb606 	br	10117290 <_gp+0xffff5d00>
101173b8:	0005883a 	mov	r2,zero
101173bc:	003ffb06 	br	101173ac <_gp+0xffff5e1c>
