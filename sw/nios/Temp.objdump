
Temp.elf:     file format elf32-littlenios2
Temp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00005748 memsz 0x00005748 flags r-x
    LOAD off    0x00006768 vaddr 0x10105768 paddr 0x101071d4 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c40 vaddr 0x10108c40 paddr 0x10108c40 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054d4  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  10105718  10105718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  10105768  101071d4  00006768  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10108c40  10108c40  00008c40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10108d94  10108d94  000081d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  000081f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016289  00000000  00000000  00008c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005eea  00000000  00000000  0001ee91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000067ea  00000000  00000000  00024d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001530  00000000  00000000  0002b568  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002657  00000000  00000000  0002ca98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003668e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00036691  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003669d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003669e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003669f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000366b5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000366c0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000048  00000000  00000000  000366ca  2**0
                  CONTENTS, READONLY
 26 .jdi          0000512a  00000000  00000000  00036712  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00280b0f  00000000  00000000  0003b83c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10105718 l    d  .rodata	00000000 .rodata
10105768 l    d  .rwdata	00000000 .rwdata
10108c40 l    d  .bss	00000000 .bss
10108d94 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/EPFL_CycloneV_Cortex_A9_Camera_Web_Server/sw/Temp_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
1010041c l     F .text	00000008 __fp_unlock
10100430 l     F .text	0000019c __sinit.part.1
101005cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10105768 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
10103078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10103184 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
101031b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010329c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010337c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10103468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1010363c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
101071c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10103888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101039bc l     F .text	00000034 alt_dev_reg
1010613c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10103c94 l     F .text	0000020c altera_avalon_jtag_uart_irq
10103ea0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010464c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10104ac0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10104c00 l     F .text	0000003c alt_get_errno
10104c3c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10108c68 g     O .bss	00000004 alt_instruction_exception_handler
10102e70 g     F .text	00000054 _isatty_r
10103578 g     F .text	0000007c alt_main
101002b0 g     F .text	000000c0 _puts_r
10108c94 g     O .bss	00000100 alt_irq
10102b98 g     F .text	00000060 _lseek_r
101071d4 g       *ABS*	00000000 __flash_rwdata_start
10108d94 g       *ABS*	00000000 __alt_heap_start
1010214c g     F .text	0000005c __sseek
1010076c g     F .text	00000010 __sinit
101005d4 g     F .text	00000068 __sfmoreglue
10103618 g     F .text	00000024 __malloc_unlock
10101838 g     F .text	0000015c memmove
10100754 g     F .text	00000018 _cleanup
10104ff8 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102e14 g     F .text	0000005c _fstat_r
10108c4c g     O .bss	00000004 errno
101020c8 g     F .text	00000008 __seofread
10108c54 g     O .bss	00000004 alt_argv
1010f19c g       *ABS*	00000000 _gp
10105fbc g     O .rwdata	00000180 alt_fd_list
1010501c g     F .text	00000090 alt_find_dev
101016f0 g     F .text	00000148 memcpy
10100424 g     F .text	0000000c _cleanup_r
10104b84 g     F .text	0000007c alt_io_redirect
10105718 g       *ABS*	00000000 __DTOR_END__
10100370 g     F .text	00000014 puts
101052e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10104098 g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10102fbc g     F .text	00000064 .hidden __udivsi3
101032d8 g     F .text	000000a4 isatty
10105258 g     F .text	00000090 alt_icache_flush
10108c48 g     O .bss	00000004 __malloc_top_pad
101007bc g     F .text	000004bc __sfvwrite_r
10102020 g     F .text	00000054 _sbrk_r
10102db4 g     F .text	00000060 _read_r
101071bc g     O .rwdata	00000004 alt_max_fd
101023b8 g     F .text	000000f0 _fclose_r
10102734 g     F .text	00000030 fflush
10108c44 g     O .bss	00000004 __malloc_max_sbrked_mem
101034a4 g     F .text	000000d4 lseek
1010719c g     O .rwdata	00000004 _global_impure_ptr
10101abc g     F .text	00000564 _realloc_r
10108d94 g       *ABS*	00000000 __bss_end
101049d0 g     F .text	000000f0 alt_iic_isr_register
10104ef0 g     F .text	00000108 alt_tick
1010078c g     F .text	00000018 __fp_lock_all
10104984 g     F .text	0000004c alt_ic_irq_enabled
10104e54 g     F .text	0000009c alt_alarm_stop
10108c5c g     O .bss	00000004 alt_irq_active
101000fc g     F .exceptions	000000d4 alt_irq_handler
10105f94 g     O .rwdata	00000028 alt_dev_null
10104604 g     F .text	00000048 alt_dcache_flush_all
101071d4 g       *ABS*	00000000 __ram_rwdata_end
101071b4 g     O .rwdata	00000008 alt_dev_list
101038c4 g     F .text	000000f8 write
10105768 g       *ABS*	00000000 __ram_rodata_end
101031ec g     F .text	000000b0 fstat
10103020 g     F .text	00000058 .hidden __umodsi3
10108d94 g       *ABS*	00000000 end
10103bd4 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10105718 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
101042b4 g     F .text	00000224 altera_avalon_jtag_uart_write
1010077c g     F .text	00000004 __sfp_lock_acquire
1010160c g     F .text	000000e4 memchr
10102888 g     F .text	00000310 _free_r
10105564 g     F .text	00000180 __call_exitprocs
101071a4 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10108c60 g     O .bss	00000004 _alt_tick_rate
10108c64 g     O .bss	00000004 _alt_nticks
10103678 g     F .text	000000fc read
10103a28 g     F .text	00000048 alt_sys_init
1010544c g     F .text	00000118 __register_exitproc
10103f40 g     F .text	00000068 altera_avalon_jtag_uart_close
10105768 g       *ABS*	00000000 __ram_rwdata_start
10105718 g       *ABS*	00000000 __ram_rodata_start
10108c6c g     O .bss	00000028 __malloc_current_mallinfo
10103a70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101051b4 g     F .text	000000a4 alt_get_fd
10102364 g     F .text	00000054 _close_r
101053d0 g     F .text	0000007c memcmp
10103b30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10108d94 g       *ABS*	00000000 __alt_stack_base
10103b80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102210 g     F .text	00000154 __swsetup_r
1010063c g     F .text	00000118 __sfp
10105b8c g     O .rwdata	00000408 __malloc_av_
10100788 g     F .text	00000004 __sinit_lock_release
10102074 g     F .text	00000054 __sread
101050ac g     F .text	00000108 alt_find_file
10104688 g     F .text	000000a4 alt_dev_llist_insert
101035f4 g     F .text	00000024 __malloc_lock
101037d8 g     F .text	000000b0 sbrk
101026d8 g     F .text	0000005c _fflush_r
10108c40 g       *ABS*	00000000 __bss_start
10101994 g     F .text	00000128 memset
10100290 g     F .text	00000020 main
10108c58 g     O .bss	00000004 alt_envp
10108c40 g     O .bss	00000004 __malloc_max_total_mem
10103ad0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101021a8 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
101024a8 g     F .text	00000014 fclose
10100e00 g     F .text	0000080c _malloc_r
101071c0 g     O .rwdata	00000004 alt_errno
10100c78 g     F .text	000000c4 _fwalk
10102ec4 g     F .text	00000084 .hidden __divsi3
10102764 g     F .text	00000124 _malloc_trim_r
10105718 g       *ABS*	00000000 __CTOR_END__
10105718 g       *ABS*	00000000 __flash_rodata_start
10105718 g       *ABS*	00000000 __DTOR_LIST__
101039f0 g     F .text	00000038 alt_irq_init
10103774 g     F .text	00000064 alt_release_fd
10105384 g     F .text	00000014 atexit
101021b0 g     F .text	00000060 _write_r
101071a0 g     O .rwdata	00000004 _impure_ptr
10108c50 g     O .bss	00000004 alt_argc
101024bc g     F .text	0000021c __sflush_r
1010478c g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
101007a4 g     F .text	00000018 __fp_unlock_all
101071ac g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
10104820 g     F .text	00000050 alt_ic_isr_register
101071d4 g       *ABS*	00000000 _edata
10108d94 g       *ABS*	00000000 _end
10100244 g       *ABS*	00000000 __ram_exceptions_end
10103fa8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
101048f8 g     F .text	0000008c alt_ic_irq_disable
101020d0 g     F .text	0000007c __swrite
101071a8 g     O .rwdata	00000004 __malloc_trim_threshold
10105398 g     F .text	00000038 exit
10100d3c g     F .text	000000c4 _fwalk_reent
10102f48 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10100780 g     F .text	00000004 __sfp_lock_release
101056e4 g     F .text	00000034 _exit
101044d8 g     F .text	0000012c alt_alarm_start
10102bf8 g     F .text	000001bc __smakebuf_r
10100384 g     F .text	00000098 strlen
10104d00 g     F .text	00000154 open
101047ec g     F .text	00000034 alt_icache_flush_all
101071c8 g     O .rwdata	00000004 alt_priority_mask
10104870 g     F .text	00000088 alt_ic_irq_enable
101071cc g     O .rwdata	00000008 alt_alarm_list
1010472c g     F .text	00000060 _do_ctors
101030b4 g     F .text	000000d0 close
101033e4 g     F .text	00000084 alt_load
10100784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10a32504 	addi	r2,r2,-29548
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10a32504 	addi	r2,r2,-29548
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6b317 	ldw	r2,-25908(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6b317 	ldw	r2,-25908(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100260:	d6bc6714 	ori	gp,gp,61852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100268:	10a31014 	ori	r2,r2,35904

    movhi r3, %hi(__bss_end)
1010026c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100270:	18e36514 	ori	r3,r3,36244

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	01033e40 	call	101033e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	01035780 	call	10103578 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <main>:
 */

#include <stdio.h>

int main()
{
10100290:	defffe04 	addi	sp,sp,-8
10100294:	dfc00115 	stw	ra,4(sp)
10100298:	df000015 	stw	fp,0(sp)
1010029c:	d839883a 	mov	fp,sp

	while(1)
		{
		printf("Hello from Nios II!\n");
101002a0:	01040434 	movhi	r4,4112
101002a4:	2115c604 	addi	r4,r4,22296
101002a8:	01003700 	call	10100370 <puts>
		}
101002ac:	003ffc06 	br	101002a0 <__alt_data_end+0xfffe02a0>

101002b0 <_puts_r>:
101002b0:	defff604 	addi	sp,sp,-40
101002b4:	dc000715 	stw	r16,28(sp)
101002b8:	2021883a 	mov	r16,r4
101002bc:	2809883a 	mov	r4,r5
101002c0:	dc400815 	stw	r17,32(sp)
101002c4:	dfc00915 	stw	ra,36(sp)
101002c8:	2823883a 	mov	r17,r5
101002cc:	01003840 	call	10100384 <strlen>
101002d0:	10c00044 	addi	r3,r2,1
101002d4:	d8800115 	stw	r2,4(sp)
101002d8:	00840434 	movhi	r2,4112
101002dc:	1095cb04 	addi	r2,r2,22316
101002e0:	d8800215 	stw	r2,8(sp)
101002e4:	00800044 	movi	r2,1
101002e8:	d8800315 	stw	r2,12(sp)
101002ec:	00800084 	movi	r2,2
101002f0:	dc400015 	stw	r17,0(sp)
101002f4:	d8c00615 	stw	r3,24(sp)
101002f8:	dec00415 	stw	sp,16(sp)
101002fc:	d8800515 	stw	r2,20(sp)
10100300:	80000226 	beq	r16,zero,1010030c <_puts_r+0x5c>
10100304:	80800e17 	ldw	r2,56(r16)
10100308:	10001426 	beq	r2,zero,1010035c <_puts_r+0xac>
1010030c:	81400217 	ldw	r5,8(r16)
10100310:	2880030b 	ldhu	r2,12(r5)
10100314:	10c8000c 	andi	r3,r2,8192
10100318:	1800061e 	bne	r3,zero,10100334 <_puts_r+0x84>
1010031c:	29001917 	ldw	r4,100(r5)
10100320:	00f7ffc4 	movi	r3,-8193
10100324:	10880014 	ori	r2,r2,8192
10100328:	20c6703a 	and	r3,r4,r3
1010032c:	2880030d 	sth	r2,12(r5)
10100330:	28c01915 	stw	r3,100(r5)
10100334:	d9800404 	addi	r6,sp,16
10100338:	8009883a 	mov	r4,r16
1010033c:	01007bc0 	call	101007bc <__sfvwrite_r>
10100340:	1000091e 	bne	r2,zero,10100368 <_puts_r+0xb8>
10100344:	00800284 	movi	r2,10
10100348:	dfc00917 	ldw	ra,36(sp)
1010034c:	dc400817 	ldw	r17,32(sp)
10100350:	dc000717 	ldw	r16,28(sp)
10100354:	dec00a04 	addi	sp,sp,40
10100358:	f800283a 	ret
1010035c:	8009883a 	mov	r4,r16
10100360:	010076c0 	call	1010076c <__sinit>
10100364:	003fe906 	br	1010030c <__alt_data_end+0xfffe030c>
10100368:	00bfffc4 	movi	r2,-1
1010036c:	003ff606 	br	10100348 <__alt_data_end+0xfffe0348>

10100370 <puts>:
10100370:	00840434 	movhi	r2,4112
10100374:	109c6804 	addi	r2,r2,29088
10100378:	200b883a 	mov	r5,r4
1010037c:	11000017 	ldw	r4,0(r2)
10100380:	01002b01 	jmpi	101002b0 <_puts_r>

10100384 <strlen>:
10100384:	208000cc 	andi	r2,r4,3
10100388:	10002026 	beq	r2,zero,1010040c <strlen+0x88>
1010038c:	20800007 	ldb	r2,0(r4)
10100390:	10002026 	beq	r2,zero,10100414 <strlen+0x90>
10100394:	2005883a 	mov	r2,r4
10100398:	00000206 	br	101003a4 <strlen+0x20>
1010039c:	10c00007 	ldb	r3,0(r2)
101003a0:	18001826 	beq	r3,zero,10100404 <strlen+0x80>
101003a4:	10800044 	addi	r2,r2,1
101003a8:	10c000cc 	andi	r3,r2,3
101003ac:	183ffb1e 	bne	r3,zero,1010039c <__alt_data_end+0xfffe039c>
101003b0:	10c00017 	ldw	r3,0(r2)
101003b4:	01ffbff4 	movhi	r7,65279
101003b8:	39ffbfc4 	addi	r7,r7,-257
101003bc:	00ca303a 	nor	r5,zero,r3
101003c0:	01a02074 	movhi	r6,32897
101003c4:	19c7883a 	add	r3,r3,r7
101003c8:	31a02004 	addi	r6,r6,-32640
101003cc:	1946703a 	and	r3,r3,r5
101003d0:	1986703a 	and	r3,r3,r6
101003d4:	1800091e 	bne	r3,zero,101003fc <strlen+0x78>
101003d8:	10800104 	addi	r2,r2,4
101003dc:	10c00017 	ldw	r3,0(r2)
101003e0:	19cb883a 	add	r5,r3,r7
101003e4:	00c6303a 	nor	r3,zero,r3
101003e8:	28c6703a 	and	r3,r5,r3
101003ec:	1986703a 	and	r3,r3,r6
101003f0:	183ff926 	beq	r3,zero,101003d8 <__alt_data_end+0xfffe03d8>
101003f4:	00000106 	br	101003fc <strlen+0x78>
101003f8:	10800044 	addi	r2,r2,1
101003fc:	10c00007 	ldb	r3,0(r2)
10100400:	183ffd1e 	bne	r3,zero,101003f8 <__alt_data_end+0xfffe03f8>
10100404:	1105c83a 	sub	r2,r2,r4
10100408:	f800283a 	ret
1010040c:	2005883a 	mov	r2,r4
10100410:	003fe706 	br	101003b0 <__alt_data_end+0xfffe03b0>
10100414:	0005883a 	mov	r2,zero
10100418:	f800283a 	ret

1010041c <__fp_unlock>:
1010041c:	0005883a 	mov	r2,zero
10100420:	f800283a 	ret

10100424 <_cleanup_r>:
10100424:	01440434 	movhi	r5,4112
10100428:	2948ee04 	addi	r5,r5,9144
1010042c:	0100d3c1 	jmpi	10100d3c <_fwalk_reent>

10100430 <__sinit.part.1>:
10100430:	defff704 	addi	sp,sp,-36
10100434:	00c40434 	movhi	r3,4112
10100438:	dfc00815 	stw	ra,32(sp)
1010043c:	ddc00715 	stw	r23,28(sp)
10100440:	dd800615 	stw	r22,24(sp)
10100444:	dd400515 	stw	r21,20(sp)
10100448:	dd000415 	stw	r20,16(sp)
1010044c:	dcc00315 	stw	r19,12(sp)
10100450:	dc800215 	stw	r18,8(sp)
10100454:	dc400115 	stw	r17,4(sp)
10100458:	dc000015 	stw	r16,0(sp)
1010045c:	18c10904 	addi	r3,r3,1060
10100460:	24000117 	ldw	r16,4(r4)
10100464:	20c00f15 	stw	r3,60(r4)
10100468:	2080bb04 	addi	r2,r4,748
1010046c:	00c000c4 	movi	r3,3
10100470:	20c0b915 	stw	r3,740(r4)
10100474:	2080ba15 	stw	r2,744(r4)
10100478:	2000b815 	stw	zero,736(r4)
1010047c:	05c00204 	movi	r23,8
10100480:	00800104 	movi	r2,4
10100484:	2025883a 	mov	r18,r4
10100488:	b80d883a 	mov	r6,r23
1010048c:	81001704 	addi	r4,r16,92
10100490:	000b883a 	mov	r5,zero
10100494:	80000015 	stw	zero,0(r16)
10100498:	80000115 	stw	zero,4(r16)
1010049c:	80000215 	stw	zero,8(r16)
101004a0:	8080030d 	sth	r2,12(r16)
101004a4:	80001915 	stw	zero,100(r16)
101004a8:	8000038d 	sth	zero,14(r16)
101004ac:	80000415 	stw	zero,16(r16)
101004b0:	80000515 	stw	zero,20(r16)
101004b4:	80000615 	stw	zero,24(r16)
101004b8:	01019940 	call	10101994 <memset>
101004bc:	05840434 	movhi	r22,4112
101004c0:	94400217 	ldw	r17,8(r18)
101004c4:	05440434 	movhi	r21,4112
101004c8:	05040434 	movhi	r20,4112
101004cc:	04c40434 	movhi	r19,4112
101004d0:	b5881d04 	addi	r22,r22,8308
101004d4:	ad483404 	addi	r21,r21,8400
101004d8:	a5085304 	addi	r20,r20,8524
101004dc:	9cc86a04 	addi	r19,r19,8616
101004e0:	85800815 	stw	r22,32(r16)
101004e4:	85400915 	stw	r21,36(r16)
101004e8:	85000a15 	stw	r20,40(r16)
101004ec:	84c00b15 	stw	r19,44(r16)
101004f0:	84000715 	stw	r16,28(r16)
101004f4:	00800284 	movi	r2,10
101004f8:	8880030d 	sth	r2,12(r17)
101004fc:	00800044 	movi	r2,1
10100500:	b80d883a 	mov	r6,r23
10100504:	89001704 	addi	r4,r17,92
10100508:	000b883a 	mov	r5,zero
1010050c:	88000015 	stw	zero,0(r17)
10100510:	88000115 	stw	zero,4(r17)
10100514:	88000215 	stw	zero,8(r17)
10100518:	88001915 	stw	zero,100(r17)
1010051c:	8880038d 	sth	r2,14(r17)
10100520:	88000415 	stw	zero,16(r17)
10100524:	88000515 	stw	zero,20(r17)
10100528:	88000615 	stw	zero,24(r17)
1010052c:	01019940 	call	10101994 <memset>
10100530:	94000317 	ldw	r16,12(r18)
10100534:	00800484 	movi	r2,18
10100538:	8c400715 	stw	r17,28(r17)
1010053c:	8d800815 	stw	r22,32(r17)
10100540:	8d400915 	stw	r21,36(r17)
10100544:	8d000a15 	stw	r20,40(r17)
10100548:	8cc00b15 	stw	r19,44(r17)
1010054c:	8080030d 	sth	r2,12(r16)
10100550:	00800084 	movi	r2,2
10100554:	80000015 	stw	zero,0(r16)
10100558:	80000115 	stw	zero,4(r16)
1010055c:	80000215 	stw	zero,8(r16)
10100560:	80001915 	stw	zero,100(r16)
10100564:	8080038d 	sth	r2,14(r16)
10100568:	80000415 	stw	zero,16(r16)
1010056c:	80000515 	stw	zero,20(r16)
10100570:	80000615 	stw	zero,24(r16)
10100574:	b80d883a 	mov	r6,r23
10100578:	000b883a 	mov	r5,zero
1010057c:	81001704 	addi	r4,r16,92
10100580:	01019940 	call	10101994 <memset>
10100584:	00800044 	movi	r2,1
10100588:	84000715 	stw	r16,28(r16)
1010058c:	85800815 	stw	r22,32(r16)
10100590:	85400915 	stw	r21,36(r16)
10100594:	85000a15 	stw	r20,40(r16)
10100598:	84c00b15 	stw	r19,44(r16)
1010059c:	90800e15 	stw	r2,56(r18)
101005a0:	dfc00817 	ldw	ra,32(sp)
101005a4:	ddc00717 	ldw	r23,28(sp)
101005a8:	dd800617 	ldw	r22,24(sp)
101005ac:	dd400517 	ldw	r21,20(sp)
101005b0:	dd000417 	ldw	r20,16(sp)
101005b4:	dcc00317 	ldw	r19,12(sp)
101005b8:	dc800217 	ldw	r18,8(sp)
101005bc:	dc400117 	ldw	r17,4(sp)
101005c0:	dc000017 	ldw	r16,0(sp)
101005c4:	dec00904 	addi	sp,sp,36
101005c8:	f800283a 	ret

101005cc <__fp_lock>:
101005cc:	0005883a 	mov	r2,zero
101005d0:	f800283a 	ret

101005d4 <__sfmoreglue>:
101005d4:	defffc04 	addi	sp,sp,-16
101005d8:	dc400115 	stw	r17,4(sp)
101005dc:	2c7fffc4 	addi	r17,r5,-1
101005e0:	8c401a24 	muli	r17,r17,104
101005e4:	dc800215 	stw	r18,8(sp)
101005e8:	2825883a 	mov	r18,r5
101005ec:	89401d04 	addi	r5,r17,116
101005f0:	dc000015 	stw	r16,0(sp)
101005f4:	dfc00315 	stw	ra,12(sp)
101005f8:	0100e000 	call	10100e00 <_malloc_r>
101005fc:	1021883a 	mov	r16,r2
10100600:	10000726 	beq	r2,zero,10100620 <__sfmoreglue+0x4c>
10100604:	11000304 	addi	r4,r2,12
10100608:	10000015 	stw	zero,0(r2)
1010060c:	14800115 	stw	r18,4(r2)
10100610:	11000215 	stw	r4,8(r2)
10100614:	89801a04 	addi	r6,r17,104
10100618:	000b883a 	mov	r5,zero
1010061c:	01019940 	call	10101994 <memset>
10100620:	8005883a 	mov	r2,r16
10100624:	dfc00317 	ldw	ra,12(sp)
10100628:	dc800217 	ldw	r18,8(sp)
1010062c:	dc400117 	ldw	r17,4(sp)
10100630:	dc000017 	ldw	r16,0(sp)
10100634:	dec00404 	addi	sp,sp,16
10100638:	f800283a 	ret

1010063c <__sfp>:
1010063c:	defffb04 	addi	sp,sp,-20
10100640:	dc000015 	stw	r16,0(sp)
10100644:	04040434 	movhi	r16,4112
10100648:	841c6704 	addi	r16,r16,29084
1010064c:	dcc00315 	stw	r19,12(sp)
10100650:	2027883a 	mov	r19,r4
10100654:	81000017 	ldw	r4,0(r16)
10100658:	dfc00415 	stw	ra,16(sp)
1010065c:	dc800215 	stw	r18,8(sp)
10100660:	20800e17 	ldw	r2,56(r4)
10100664:	dc400115 	stw	r17,4(sp)
10100668:	1000021e 	bne	r2,zero,10100674 <__sfp+0x38>
1010066c:	01004300 	call	10100430 <__sinit.part.1>
10100670:	81000017 	ldw	r4,0(r16)
10100674:	2480b804 	addi	r18,r4,736
10100678:	047fffc4 	movi	r17,-1
1010067c:	91000117 	ldw	r4,4(r18)
10100680:	94000217 	ldw	r16,8(r18)
10100684:	213fffc4 	addi	r4,r4,-1
10100688:	20000a16 	blt	r4,zero,101006b4 <__sfp+0x78>
1010068c:	8080030f 	ldh	r2,12(r16)
10100690:	10000c26 	beq	r2,zero,101006c4 <__sfp+0x88>
10100694:	80c01d04 	addi	r3,r16,116
10100698:	00000206 	br	101006a4 <__sfp+0x68>
1010069c:	18bfe60f 	ldh	r2,-104(r3)
101006a0:	10000826 	beq	r2,zero,101006c4 <__sfp+0x88>
101006a4:	213fffc4 	addi	r4,r4,-1
101006a8:	1c3ffd04 	addi	r16,r3,-12
101006ac:	18c01a04 	addi	r3,r3,104
101006b0:	247ffa1e 	bne	r4,r17,1010069c <__alt_data_end+0xfffe069c>
101006b4:	90800017 	ldw	r2,0(r18)
101006b8:	10001d26 	beq	r2,zero,10100730 <__sfp+0xf4>
101006bc:	1025883a 	mov	r18,r2
101006c0:	003fee06 	br	1010067c <__alt_data_end+0xfffe067c>
101006c4:	00bfffc4 	movi	r2,-1
101006c8:	8080038d 	sth	r2,14(r16)
101006cc:	00800044 	movi	r2,1
101006d0:	8080030d 	sth	r2,12(r16)
101006d4:	80001915 	stw	zero,100(r16)
101006d8:	80000015 	stw	zero,0(r16)
101006dc:	80000215 	stw	zero,8(r16)
101006e0:	80000115 	stw	zero,4(r16)
101006e4:	80000415 	stw	zero,16(r16)
101006e8:	80000515 	stw	zero,20(r16)
101006ec:	80000615 	stw	zero,24(r16)
101006f0:	01800204 	movi	r6,8
101006f4:	000b883a 	mov	r5,zero
101006f8:	81001704 	addi	r4,r16,92
101006fc:	01019940 	call	10101994 <memset>
10100700:	8005883a 	mov	r2,r16
10100704:	80000c15 	stw	zero,48(r16)
10100708:	80000d15 	stw	zero,52(r16)
1010070c:	80001115 	stw	zero,68(r16)
10100710:	80001215 	stw	zero,72(r16)
10100714:	dfc00417 	ldw	ra,16(sp)
10100718:	dcc00317 	ldw	r19,12(sp)
1010071c:	dc800217 	ldw	r18,8(sp)
10100720:	dc400117 	ldw	r17,4(sp)
10100724:	dc000017 	ldw	r16,0(sp)
10100728:	dec00504 	addi	sp,sp,20
1010072c:	f800283a 	ret
10100730:	01400104 	movi	r5,4
10100734:	9809883a 	mov	r4,r19
10100738:	01005d40 	call	101005d4 <__sfmoreglue>
1010073c:	90800015 	stw	r2,0(r18)
10100740:	103fde1e 	bne	r2,zero,101006bc <__alt_data_end+0xfffe06bc>
10100744:	00800304 	movi	r2,12
10100748:	98800015 	stw	r2,0(r19)
1010074c:	0005883a 	mov	r2,zero
10100750:	003ff006 	br	10100714 <__alt_data_end+0xfffe0714>

10100754 <_cleanup>:
10100754:	00840434 	movhi	r2,4112
10100758:	109c6704 	addi	r2,r2,29084
1010075c:	11000017 	ldw	r4,0(r2)
10100760:	01440434 	movhi	r5,4112
10100764:	2948ee04 	addi	r5,r5,9144
10100768:	0100d3c1 	jmpi	10100d3c <_fwalk_reent>

1010076c <__sinit>:
1010076c:	20800e17 	ldw	r2,56(r4)
10100770:	10000126 	beq	r2,zero,10100778 <__sinit+0xc>
10100774:	f800283a 	ret
10100778:	01004301 	jmpi	10100430 <__sinit.part.1>

1010077c <__sfp_lock_acquire>:
1010077c:	f800283a 	ret

10100780 <__sfp_lock_release>:
10100780:	f800283a 	ret

10100784 <__sinit_lock_acquire>:
10100784:	f800283a 	ret

10100788 <__sinit_lock_release>:
10100788:	f800283a 	ret

1010078c <__fp_lock_all>:
1010078c:	00840434 	movhi	r2,4112
10100790:	109c6804 	addi	r2,r2,29088
10100794:	11000017 	ldw	r4,0(r2)
10100798:	01440434 	movhi	r5,4112
1010079c:	29417304 	addi	r5,r5,1484
101007a0:	0100c781 	jmpi	10100c78 <_fwalk>

101007a4 <__fp_unlock_all>:
101007a4:	00840434 	movhi	r2,4112
101007a8:	109c6804 	addi	r2,r2,29088
101007ac:	11000017 	ldw	r4,0(r2)
101007b0:	01440434 	movhi	r5,4112
101007b4:	29410704 	addi	r5,r5,1052
101007b8:	0100c781 	jmpi	10100c78 <_fwalk>

101007bc <__sfvwrite_r>:
101007bc:	30800217 	ldw	r2,8(r6)
101007c0:	10006726 	beq	r2,zero,10100960 <__sfvwrite_r+0x1a4>
101007c4:	28c0030b 	ldhu	r3,12(r5)
101007c8:	defff404 	addi	sp,sp,-48
101007cc:	dd400715 	stw	r21,28(sp)
101007d0:	dd000615 	stw	r20,24(sp)
101007d4:	dc000215 	stw	r16,8(sp)
101007d8:	dfc00b15 	stw	ra,44(sp)
101007dc:	df000a15 	stw	fp,40(sp)
101007e0:	ddc00915 	stw	r23,36(sp)
101007e4:	dd800815 	stw	r22,32(sp)
101007e8:	dcc00515 	stw	r19,20(sp)
101007ec:	dc800415 	stw	r18,16(sp)
101007f0:	dc400315 	stw	r17,12(sp)
101007f4:	1880020c 	andi	r2,r3,8
101007f8:	2821883a 	mov	r16,r5
101007fc:	202b883a 	mov	r21,r4
10100800:	3029883a 	mov	r20,r6
10100804:	10002726 	beq	r2,zero,101008a4 <__sfvwrite_r+0xe8>
10100808:	28800417 	ldw	r2,16(r5)
1010080c:	10002526 	beq	r2,zero,101008a4 <__sfvwrite_r+0xe8>
10100810:	1880008c 	andi	r2,r3,2
10100814:	a4400017 	ldw	r17,0(r20)
10100818:	10002a26 	beq	r2,zero,101008c4 <__sfvwrite_r+0x108>
1010081c:	05a00034 	movhi	r22,32768
10100820:	0027883a 	mov	r19,zero
10100824:	0025883a 	mov	r18,zero
10100828:	b5bf0004 	addi	r22,r22,-1024
1010082c:	980d883a 	mov	r6,r19
10100830:	a809883a 	mov	r4,r21
10100834:	90004626 	beq	r18,zero,10100950 <__sfvwrite_r+0x194>
10100838:	900f883a 	mov	r7,r18
1010083c:	b480022e 	bgeu	r22,r18,10100848 <__sfvwrite_r+0x8c>
10100840:	01e00034 	movhi	r7,32768
10100844:	39ff0004 	addi	r7,r7,-1024
10100848:	80800917 	ldw	r2,36(r16)
1010084c:	81400717 	ldw	r5,28(r16)
10100850:	103ee83a 	callr	r2
10100854:	0080570e 	bge	zero,r2,101009b4 <__sfvwrite_r+0x1f8>
10100858:	a0c00217 	ldw	r3,8(r20)
1010085c:	98a7883a 	add	r19,r19,r2
10100860:	90a5c83a 	sub	r18,r18,r2
10100864:	1885c83a 	sub	r2,r3,r2
10100868:	a0800215 	stw	r2,8(r20)
1010086c:	103fef1e 	bne	r2,zero,1010082c <__alt_data_end+0xfffe082c>
10100870:	0005883a 	mov	r2,zero
10100874:	dfc00b17 	ldw	ra,44(sp)
10100878:	df000a17 	ldw	fp,40(sp)
1010087c:	ddc00917 	ldw	r23,36(sp)
10100880:	dd800817 	ldw	r22,32(sp)
10100884:	dd400717 	ldw	r21,28(sp)
10100888:	dd000617 	ldw	r20,24(sp)
1010088c:	dcc00517 	ldw	r19,20(sp)
10100890:	dc800417 	ldw	r18,16(sp)
10100894:	dc400317 	ldw	r17,12(sp)
10100898:	dc000217 	ldw	r16,8(sp)
1010089c:	dec00c04 	addi	sp,sp,48
101008a0:	f800283a 	ret
101008a4:	800b883a 	mov	r5,r16
101008a8:	a809883a 	mov	r4,r21
101008ac:	01022100 	call	10102210 <__swsetup_r>
101008b0:	1000eb1e 	bne	r2,zero,10100c60 <__sfvwrite_r+0x4a4>
101008b4:	80c0030b 	ldhu	r3,12(r16)
101008b8:	a4400017 	ldw	r17,0(r20)
101008bc:	1880008c 	andi	r2,r3,2
101008c0:	103fd61e 	bne	r2,zero,1010081c <__alt_data_end+0xfffe081c>
101008c4:	1880004c 	andi	r2,r3,1
101008c8:	10003f1e 	bne	r2,zero,101009c8 <__sfvwrite_r+0x20c>
101008cc:	0039883a 	mov	fp,zero
101008d0:	0025883a 	mov	r18,zero
101008d4:	90001a26 	beq	r18,zero,10100940 <__sfvwrite_r+0x184>
101008d8:	1880800c 	andi	r2,r3,512
101008dc:	84c00217 	ldw	r19,8(r16)
101008e0:	10002126 	beq	r2,zero,10100968 <__sfvwrite_r+0x1ac>
101008e4:	982f883a 	mov	r23,r19
101008e8:	94c09336 	bltu	r18,r19,10100b38 <__sfvwrite_r+0x37c>
101008ec:	1881200c 	andi	r2,r3,1152
101008f0:	10009e1e 	bne	r2,zero,10100b6c <__sfvwrite_r+0x3b0>
101008f4:	81000017 	ldw	r4,0(r16)
101008f8:	b80d883a 	mov	r6,r23
101008fc:	e00b883a 	mov	r5,fp
10100900:	01018380 	call	10101838 <memmove>
10100904:	80c00217 	ldw	r3,8(r16)
10100908:	81000017 	ldw	r4,0(r16)
1010090c:	9005883a 	mov	r2,r18
10100910:	1ce7c83a 	sub	r19,r3,r19
10100914:	25cf883a 	add	r7,r4,r23
10100918:	84c00215 	stw	r19,8(r16)
1010091c:	81c00015 	stw	r7,0(r16)
10100920:	a0c00217 	ldw	r3,8(r20)
10100924:	e0b9883a 	add	fp,fp,r2
10100928:	90a5c83a 	sub	r18,r18,r2
1010092c:	18a7c83a 	sub	r19,r3,r2
10100930:	a4c00215 	stw	r19,8(r20)
10100934:	983fce26 	beq	r19,zero,10100870 <__alt_data_end+0xfffe0870>
10100938:	80c0030b 	ldhu	r3,12(r16)
1010093c:	903fe61e 	bne	r18,zero,101008d8 <__alt_data_end+0xfffe08d8>
10100940:	8f000017 	ldw	fp,0(r17)
10100944:	8c800117 	ldw	r18,4(r17)
10100948:	8c400204 	addi	r17,r17,8
1010094c:	003fe106 	br	101008d4 <__alt_data_end+0xfffe08d4>
10100950:	8cc00017 	ldw	r19,0(r17)
10100954:	8c800117 	ldw	r18,4(r17)
10100958:	8c400204 	addi	r17,r17,8
1010095c:	003fb306 	br	1010082c <__alt_data_end+0xfffe082c>
10100960:	0005883a 	mov	r2,zero
10100964:	f800283a 	ret
10100968:	81000017 	ldw	r4,0(r16)
1010096c:	80800417 	ldw	r2,16(r16)
10100970:	11005736 	bltu	r2,r4,10100ad0 <__sfvwrite_r+0x314>
10100974:	85c00517 	ldw	r23,20(r16)
10100978:	95c05536 	bltu	r18,r23,10100ad0 <__sfvwrite_r+0x314>
1010097c:	00a00034 	movhi	r2,32768
10100980:	10bfffc4 	addi	r2,r2,-1
10100984:	9009883a 	mov	r4,r18
10100988:	1480012e 	bgeu	r2,r18,10100990 <__sfvwrite_r+0x1d4>
1010098c:	1009883a 	mov	r4,r2
10100990:	b80b883a 	mov	r5,r23
10100994:	0102ec40 	call	10102ec4 <__divsi3>
10100998:	15cf383a 	mul	r7,r2,r23
1010099c:	81400717 	ldw	r5,28(r16)
101009a0:	80800917 	ldw	r2,36(r16)
101009a4:	e00d883a 	mov	r6,fp
101009a8:	a809883a 	mov	r4,r21
101009ac:	103ee83a 	callr	r2
101009b0:	00bfdb16 	blt	zero,r2,10100920 <__alt_data_end+0xfffe0920>
101009b4:	8080030b 	ldhu	r2,12(r16)
101009b8:	10801014 	ori	r2,r2,64
101009bc:	8080030d 	sth	r2,12(r16)
101009c0:	00bfffc4 	movi	r2,-1
101009c4:	003fab06 	br	10100874 <__alt_data_end+0xfffe0874>
101009c8:	0027883a 	mov	r19,zero
101009cc:	0011883a 	mov	r8,zero
101009d0:	0039883a 	mov	fp,zero
101009d4:	0025883a 	mov	r18,zero
101009d8:	90001f26 	beq	r18,zero,10100a58 <__sfvwrite_r+0x29c>
101009dc:	40005a26 	beq	r8,zero,10100b48 <__sfvwrite_r+0x38c>
101009e0:	982d883a 	mov	r22,r19
101009e4:	94c0012e 	bgeu	r18,r19,101009ec <__sfvwrite_r+0x230>
101009e8:	902d883a 	mov	r22,r18
101009ec:	81000017 	ldw	r4,0(r16)
101009f0:	80800417 	ldw	r2,16(r16)
101009f4:	b02f883a 	mov	r23,r22
101009f8:	81c00517 	ldw	r7,20(r16)
101009fc:	1100032e 	bgeu	r2,r4,10100a0c <__sfvwrite_r+0x250>
10100a00:	80c00217 	ldw	r3,8(r16)
10100a04:	38c7883a 	add	r3,r7,r3
10100a08:	1d801816 	blt	r3,r22,10100a6c <__sfvwrite_r+0x2b0>
10100a0c:	b1c03e16 	blt	r22,r7,10100b08 <__sfvwrite_r+0x34c>
10100a10:	80800917 	ldw	r2,36(r16)
10100a14:	81400717 	ldw	r5,28(r16)
10100a18:	e00d883a 	mov	r6,fp
10100a1c:	da000115 	stw	r8,4(sp)
10100a20:	a809883a 	mov	r4,r21
10100a24:	103ee83a 	callr	r2
10100a28:	102f883a 	mov	r23,r2
10100a2c:	da000117 	ldw	r8,4(sp)
10100a30:	00bfe00e 	bge	zero,r2,101009b4 <__alt_data_end+0xfffe09b4>
10100a34:	9de7c83a 	sub	r19,r19,r23
10100a38:	98001f26 	beq	r19,zero,10100ab8 <__sfvwrite_r+0x2fc>
10100a3c:	a0800217 	ldw	r2,8(r20)
10100a40:	e5f9883a 	add	fp,fp,r23
10100a44:	95e5c83a 	sub	r18,r18,r23
10100a48:	15efc83a 	sub	r23,r2,r23
10100a4c:	a5c00215 	stw	r23,8(r20)
10100a50:	b83f8726 	beq	r23,zero,10100870 <__alt_data_end+0xfffe0870>
10100a54:	903fe11e 	bne	r18,zero,101009dc <__alt_data_end+0xfffe09dc>
10100a58:	8f000017 	ldw	fp,0(r17)
10100a5c:	8c800117 	ldw	r18,4(r17)
10100a60:	0011883a 	mov	r8,zero
10100a64:	8c400204 	addi	r17,r17,8
10100a68:	003fdb06 	br	101009d8 <__alt_data_end+0xfffe09d8>
10100a6c:	180d883a 	mov	r6,r3
10100a70:	e00b883a 	mov	r5,fp
10100a74:	da000115 	stw	r8,4(sp)
10100a78:	d8c00015 	stw	r3,0(sp)
10100a7c:	01018380 	call	10101838 <memmove>
10100a80:	d8c00017 	ldw	r3,0(sp)
10100a84:	80800017 	ldw	r2,0(r16)
10100a88:	800b883a 	mov	r5,r16
10100a8c:	a809883a 	mov	r4,r21
10100a90:	10c5883a 	add	r2,r2,r3
10100a94:	80800015 	stw	r2,0(r16)
10100a98:	d8c00015 	stw	r3,0(sp)
10100a9c:	01026d80 	call	101026d8 <_fflush_r>
10100aa0:	d8c00017 	ldw	r3,0(sp)
10100aa4:	da000117 	ldw	r8,4(sp)
10100aa8:	103fc21e 	bne	r2,zero,101009b4 <__alt_data_end+0xfffe09b4>
10100aac:	182f883a 	mov	r23,r3
10100ab0:	9de7c83a 	sub	r19,r19,r23
10100ab4:	983fe11e 	bne	r19,zero,10100a3c <__alt_data_end+0xfffe0a3c>
10100ab8:	800b883a 	mov	r5,r16
10100abc:	a809883a 	mov	r4,r21
10100ac0:	01026d80 	call	101026d8 <_fflush_r>
10100ac4:	103fbb1e 	bne	r2,zero,101009b4 <__alt_data_end+0xfffe09b4>
10100ac8:	0011883a 	mov	r8,zero
10100acc:	003fdb06 	br	10100a3c <__alt_data_end+0xfffe0a3c>
10100ad0:	94c0012e 	bgeu	r18,r19,10100ad8 <__sfvwrite_r+0x31c>
10100ad4:	9027883a 	mov	r19,r18
10100ad8:	980d883a 	mov	r6,r19
10100adc:	e00b883a 	mov	r5,fp
10100ae0:	01018380 	call	10101838 <memmove>
10100ae4:	80800217 	ldw	r2,8(r16)
10100ae8:	80c00017 	ldw	r3,0(r16)
10100aec:	14c5c83a 	sub	r2,r2,r19
10100af0:	1cc7883a 	add	r3,r3,r19
10100af4:	80800215 	stw	r2,8(r16)
10100af8:	80c00015 	stw	r3,0(r16)
10100afc:	10004326 	beq	r2,zero,10100c0c <__sfvwrite_r+0x450>
10100b00:	9805883a 	mov	r2,r19
10100b04:	003f8606 	br	10100920 <__alt_data_end+0xfffe0920>
10100b08:	b00d883a 	mov	r6,r22
10100b0c:	e00b883a 	mov	r5,fp
10100b10:	da000115 	stw	r8,4(sp)
10100b14:	01018380 	call	10101838 <memmove>
10100b18:	80800217 	ldw	r2,8(r16)
10100b1c:	80c00017 	ldw	r3,0(r16)
10100b20:	da000117 	ldw	r8,4(sp)
10100b24:	1585c83a 	sub	r2,r2,r22
10100b28:	1dad883a 	add	r22,r3,r22
10100b2c:	80800215 	stw	r2,8(r16)
10100b30:	85800015 	stw	r22,0(r16)
10100b34:	003fbf06 	br	10100a34 <__alt_data_end+0xfffe0a34>
10100b38:	81000017 	ldw	r4,0(r16)
10100b3c:	9027883a 	mov	r19,r18
10100b40:	902f883a 	mov	r23,r18
10100b44:	003f6c06 	br	101008f8 <__alt_data_end+0xfffe08f8>
10100b48:	900d883a 	mov	r6,r18
10100b4c:	01400284 	movi	r5,10
10100b50:	e009883a 	mov	r4,fp
10100b54:	010160c0 	call	1010160c <memchr>
10100b58:	10003e26 	beq	r2,zero,10100c54 <__sfvwrite_r+0x498>
10100b5c:	10800044 	addi	r2,r2,1
10100b60:	1727c83a 	sub	r19,r2,fp
10100b64:	02000044 	movi	r8,1
10100b68:	003f9d06 	br	101009e0 <__alt_data_end+0xfffe09e0>
10100b6c:	80800517 	ldw	r2,20(r16)
10100b70:	81400417 	ldw	r5,16(r16)
10100b74:	81c00017 	ldw	r7,0(r16)
10100b78:	10a7883a 	add	r19,r2,r2
10100b7c:	9885883a 	add	r2,r19,r2
10100b80:	1026d7fa 	srli	r19,r2,31
10100b84:	396dc83a 	sub	r22,r7,r5
10100b88:	b1000044 	addi	r4,r22,1
10100b8c:	9885883a 	add	r2,r19,r2
10100b90:	1027d07a 	srai	r19,r2,1
10100b94:	2485883a 	add	r2,r4,r18
10100b98:	980d883a 	mov	r6,r19
10100b9c:	9880022e 	bgeu	r19,r2,10100ba8 <__sfvwrite_r+0x3ec>
10100ba0:	1027883a 	mov	r19,r2
10100ba4:	100d883a 	mov	r6,r2
10100ba8:	18c1000c 	andi	r3,r3,1024
10100bac:	18001c26 	beq	r3,zero,10100c20 <__sfvwrite_r+0x464>
10100bb0:	300b883a 	mov	r5,r6
10100bb4:	a809883a 	mov	r4,r21
10100bb8:	0100e000 	call	10100e00 <_malloc_r>
10100bbc:	102f883a 	mov	r23,r2
10100bc0:	10002926 	beq	r2,zero,10100c68 <__sfvwrite_r+0x4ac>
10100bc4:	81400417 	ldw	r5,16(r16)
10100bc8:	b00d883a 	mov	r6,r22
10100bcc:	1009883a 	mov	r4,r2
10100bd0:	01016f00 	call	101016f0 <memcpy>
10100bd4:	8080030b 	ldhu	r2,12(r16)
10100bd8:	00fedfc4 	movi	r3,-1153
10100bdc:	10c4703a 	and	r2,r2,r3
10100be0:	10802014 	ori	r2,r2,128
10100be4:	8080030d 	sth	r2,12(r16)
10100be8:	bd89883a 	add	r4,r23,r22
10100bec:	9d8fc83a 	sub	r7,r19,r22
10100bf0:	85c00415 	stw	r23,16(r16)
10100bf4:	84c00515 	stw	r19,20(r16)
10100bf8:	81000015 	stw	r4,0(r16)
10100bfc:	9027883a 	mov	r19,r18
10100c00:	81c00215 	stw	r7,8(r16)
10100c04:	902f883a 	mov	r23,r18
10100c08:	003f3b06 	br	101008f8 <__alt_data_end+0xfffe08f8>
10100c0c:	800b883a 	mov	r5,r16
10100c10:	a809883a 	mov	r4,r21
10100c14:	01026d80 	call	101026d8 <_fflush_r>
10100c18:	103fb926 	beq	r2,zero,10100b00 <__alt_data_end+0xfffe0b00>
10100c1c:	003f6506 	br	101009b4 <__alt_data_end+0xfffe09b4>
10100c20:	a809883a 	mov	r4,r21
10100c24:	0101abc0 	call	10101abc <_realloc_r>
10100c28:	102f883a 	mov	r23,r2
10100c2c:	103fee1e 	bne	r2,zero,10100be8 <__alt_data_end+0xfffe0be8>
10100c30:	81400417 	ldw	r5,16(r16)
10100c34:	a809883a 	mov	r4,r21
10100c38:	01028880 	call	10102888 <_free_r>
10100c3c:	8080030b 	ldhu	r2,12(r16)
10100c40:	00ffdfc4 	movi	r3,-129
10100c44:	1884703a 	and	r2,r3,r2
10100c48:	00c00304 	movi	r3,12
10100c4c:	a8c00015 	stw	r3,0(r21)
10100c50:	003f5906 	br	101009b8 <__alt_data_end+0xfffe09b8>
10100c54:	94c00044 	addi	r19,r18,1
10100c58:	02000044 	movi	r8,1
10100c5c:	003f6006 	br	101009e0 <__alt_data_end+0xfffe09e0>
10100c60:	00bfffc4 	movi	r2,-1
10100c64:	003f0306 	br	10100874 <__alt_data_end+0xfffe0874>
10100c68:	00800304 	movi	r2,12
10100c6c:	a8800015 	stw	r2,0(r21)
10100c70:	8080030b 	ldhu	r2,12(r16)
10100c74:	003f5006 	br	101009b8 <__alt_data_end+0xfffe09b8>

10100c78 <_fwalk>:
10100c78:	defff704 	addi	sp,sp,-36
10100c7c:	dd000415 	stw	r20,16(sp)
10100c80:	dfc00815 	stw	ra,32(sp)
10100c84:	ddc00715 	stw	r23,28(sp)
10100c88:	dd800615 	stw	r22,24(sp)
10100c8c:	dd400515 	stw	r21,20(sp)
10100c90:	dcc00315 	stw	r19,12(sp)
10100c94:	dc800215 	stw	r18,8(sp)
10100c98:	dc400115 	stw	r17,4(sp)
10100c9c:	dc000015 	stw	r16,0(sp)
10100ca0:	2500b804 	addi	r20,r4,736
10100ca4:	a0002326 	beq	r20,zero,10100d34 <_fwalk+0xbc>
10100ca8:	282b883a 	mov	r21,r5
10100cac:	002f883a 	mov	r23,zero
10100cb0:	05800044 	movi	r22,1
10100cb4:	04ffffc4 	movi	r19,-1
10100cb8:	a4400117 	ldw	r17,4(r20)
10100cbc:	a4800217 	ldw	r18,8(r20)
10100cc0:	8c7fffc4 	addi	r17,r17,-1
10100cc4:	88000d16 	blt	r17,zero,10100cfc <_fwalk+0x84>
10100cc8:	94000304 	addi	r16,r18,12
10100ccc:	94800384 	addi	r18,r18,14
10100cd0:	8080000b 	ldhu	r2,0(r16)
10100cd4:	8c7fffc4 	addi	r17,r17,-1
10100cd8:	813ffd04 	addi	r4,r16,-12
10100cdc:	b080042e 	bgeu	r22,r2,10100cf0 <_fwalk+0x78>
10100ce0:	9080000f 	ldh	r2,0(r18)
10100ce4:	14c00226 	beq	r2,r19,10100cf0 <_fwalk+0x78>
10100ce8:	a83ee83a 	callr	r21
10100cec:	b8aeb03a 	or	r23,r23,r2
10100cf0:	84001a04 	addi	r16,r16,104
10100cf4:	94801a04 	addi	r18,r18,104
10100cf8:	8cfff51e 	bne	r17,r19,10100cd0 <__alt_data_end+0xfffe0cd0>
10100cfc:	a5000017 	ldw	r20,0(r20)
10100d00:	a03fed1e 	bne	r20,zero,10100cb8 <__alt_data_end+0xfffe0cb8>
10100d04:	b805883a 	mov	r2,r23
10100d08:	dfc00817 	ldw	ra,32(sp)
10100d0c:	ddc00717 	ldw	r23,28(sp)
10100d10:	dd800617 	ldw	r22,24(sp)
10100d14:	dd400517 	ldw	r21,20(sp)
10100d18:	dd000417 	ldw	r20,16(sp)
10100d1c:	dcc00317 	ldw	r19,12(sp)
10100d20:	dc800217 	ldw	r18,8(sp)
10100d24:	dc400117 	ldw	r17,4(sp)
10100d28:	dc000017 	ldw	r16,0(sp)
10100d2c:	dec00904 	addi	sp,sp,36
10100d30:	f800283a 	ret
10100d34:	002f883a 	mov	r23,zero
10100d38:	003ff206 	br	10100d04 <__alt_data_end+0xfffe0d04>

10100d3c <_fwalk_reent>:
10100d3c:	defff704 	addi	sp,sp,-36
10100d40:	dd000415 	stw	r20,16(sp)
10100d44:	dfc00815 	stw	ra,32(sp)
10100d48:	ddc00715 	stw	r23,28(sp)
10100d4c:	dd800615 	stw	r22,24(sp)
10100d50:	dd400515 	stw	r21,20(sp)
10100d54:	dcc00315 	stw	r19,12(sp)
10100d58:	dc800215 	stw	r18,8(sp)
10100d5c:	dc400115 	stw	r17,4(sp)
10100d60:	dc000015 	stw	r16,0(sp)
10100d64:	2500b804 	addi	r20,r4,736
10100d68:	a0002326 	beq	r20,zero,10100df8 <_fwalk_reent+0xbc>
10100d6c:	282b883a 	mov	r21,r5
10100d70:	2027883a 	mov	r19,r4
10100d74:	002f883a 	mov	r23,zero
10100d78:	05800044 	movi	r22,1
10100d7c:	04bfffc4 	movi	r18,-1
10100d80:	a4400117 	ldw	r17,4(r20)
10100d84:	a4000217 	ldw	r16,8(r20)
10100d88:	8c7fffc4 	addi	r17,r17,-1
10100d8c:	88000c16 	blt	r17,zero,10100dc0 <_fwalk_reent+0x84>
10100d90:	84000304 	addi	r16,r16,12
10100d94:	8080000b 	ldhu	r2,0(r16)
10100d98:	8c7fffc4 	addi	r17,r17,-1
10100d9c:	817ffd04 	addi	r5,r16,-12
10100da0:	b080052e 	bgeu	r22,r2,10100db8 <_fwalk_reent+0x7c>
10100da4:	8080008f 	ldh	r2,2(r16)
10100da8:	9809883a 	mov	r4,r19
10100dac:	14800226 	beq	r2,r18,10100db8 <_fwalk_reent+0x7c>
10100db0:	a83ee83a 	callr	r21
10100db4:	b8aeb03a 	or	r23,r23,r2
10100db8:	84001a04 	addi	r16,r16,104
10100dbc:	8cbff51e 	bne	r17,r18,10100d94 <__alt_data_end+0xfffe0d94>
10100dc0:	a5000017 	ldw	r20,0(r20)
10100dc4:	a03fee1e 	bne	r20,zero,10100d80 <__alt_data_end+0xfffe0d80>
10100dc8:	b805883a 	mov	r2,r23
10100dcc:	dfc00817 	ldw	ra,32(sp)
10100dd0:	ddc00717 	ldw	r23,28(sp)
10100dd4:	dd800617 	ldw	r22,24(sp)
10100dd8:	dd400517 	ldw	r21,20(sp)
10100ddc:	dd000417 	ldw	r20,16(sp)
10100de0:	dcc00317 	ldw	r19,12(sp)
10100de4:	dc800217 	ldw	r18,8(sp)
10100de8:	dc400117 	ldw	r17,4(sp)
10100dec:	dc000017 	ldw	r16,0(sp)
10100df0:	dec00904 	addi	sp,sp,36
10100df4:	f800283a 	ret
10100df8:	002f883a 	mov	r23,zero
10100dfc:	003ff206 	br	10100dc8 <__alt_data_end+0xfffe0dc8>

10100e00 <_malloc_r>:
10100e00:	defff504 	addi	sp,sp,-44
10100e04:	dc800315 	stw	r18,12(sp)
10100e08:	dfc00a15 	stw	ra,40(sp)
10100e0c:	df000915 	stw	fp,36(sp)
10100e10:	ddc00815 	stw	r23,32(sp)
10100e14:	dd800715 	stw	r22,28(sp)
10100e18:	dd400615 	stw	r21,24(sp)
10100e1c:	dd000515 	stw	r20,20(sp)
10100e20:	dcc00415 	stw	r19,16(sp)
10100e24:	dc400215 	stw	r17,8(sp)
10100e28:	dc000115 	stw	r16,4(sp)
10100e2c:	288002c4 	addi	r2,r5,11
10100e30:	00c00584 	movi	r3,22
10100e34:	2025883a 	mov	r18,r4
10100e38:	18807f2e 	bgeu	r3,r2,10101038 <_malloc_r+0x238>
10100e3c:	047ffe04 	movi	r17,-8
10100e40:	1462703a 	and	r17,r2,r17
10100e44:	8800a316 	blt	r17,zero,101010d4 <_malloc_r+0x2d4>
10100e48:	8940a236 	bltu	r17,r5,101010d4 <_malloc_r+0x2d4>
10100e4c:	01035f40 	call	101035f4 <__malloc_lock>
10100e50:	00807dc4 	movi	r2,503
10100e54:	1441e92e 	bgeu	r2,r17,101015fc <_malloc_r+0x7fc>
10100e58:	8804d27a 	srli	r2,r17,9
10100e5c:	1000a126 	beq	r2,zero,101010e4 <_malloc_r+0x2e4>
10100e60:	00c00104 	movi	r3,4
10100e64:	18811e36 	bltu	r3,r2,101012e0 <_malloc_r+0x4e0>
10100e68:	8804d1ba 	srli	r2,r17,6
10100e6c:	12000e44 	addi	r8,r2,57
10100e70:	11c00e04 	addi	r7,r2,56
10100e74:	4209883a 	add	r4,r8,r8
10100e78:	04c40434 	movhi	r19,4112
10100e7c:	2109883a 	add	r4,r4,r4
10100e80:	9cd6e304 	addi	r19,r19,23436
10100e84:	2109883a 	add	r4,r4,r4
10100e88:	9909883a 	add	r4,r19,r4
10100e8c:	24000117 	ldw	r16,4(r4)
10100e90:	213ffe04 	addi	r4,r4,-8
10100e94:	24009726 	beq	r4,r16,101010f4 <_malloc_r+0x2f4>
10100e98:	80800117 	ldw	r2,4(r16)
10100e9c:	01bfff04 	movi	r6,-4
10100ea0:	014003c4 	movi	r5,15
10100ea4:	1184703a 	and	r2,r2,r6
10100ea8:	1447c83a 	sub	r3,r2,r17
10100eac:	28c00716 	blt	r5,r3,10100ecc <_malloc_r+0xcc>
10100eb0:	1800920e 	bge	r3,zero,101010fc <_malloc_r+0x2fc>
10100eb4:	84000317 	ldw	r16,12(r16)
10100eb8:	24008e26 	beq	r4,r16,101010f4 <_malloc_r+0x2f4>
10100ebc:	80800117 	ldw	r2,4(r16)
10100ec0:	1184703a 	and	r2,r2,r6
10100ec4:	1447c83a 	sub	r3,r2,r17
10100ec8:	28fff90e 	bge	r5,r3,10100eb0 <__alt_data_end+0xfffe0eb0>
10100ecc:	3809883a 	mov	r4,r7
10100ed0:	01840434 	movhi	r6,4112
10100ed4:	9c000417 	ldw	r16,16(r19)
10100ed8:	3196e304 	addi	r6,r6,23436
10100edc:	32000204 	addi	r8,r6,8
10100ee0:	82013426 	beq	r16,r8,101013b4 <_malloc_r+0x5b4>
10100ee4:	80c00117 	ldw	r3,4(r16)
10100ee8:	00bfff04 	movi	r2,-4
10100eec:	188e703a 	and	r7,r3,r2
10100ef0:	3c45c83a 	sub	r2,r7,r17
10100ef4:	00c003c4 	movi	r3,15
10100ef8:	18811f16 	blt	r3,r2,10101378 <_malloc_r+0x578>
10100efc:	32000515 	stw	r8,20(r6)
10100f00:	32000415 	stw	r8,16(r6)
10100f04:	10007f0e 	bge	r2,zero,10101104 <_malloc_r+0x304>
10100f08:	00807fc4 	movi	r2,511
10100f0c:	11c0fd36 	bltu	r2,r7,10101304 <_malloc_r+0x504>
10100f10:	3806d0fa 	srli	r3,r7,3
10100f14:	01c00044 	movi	r7,1
10100f18:	30800117 	ldw	r2,4(r6)
10100f1c:	19400044 	addi	r5,r3,1
10100f20:	294b883a 	add	r5,r5,r5
10100f24:	1807d0ba 	srai	r3,r3,2
10100f28:	294b883a 	add	r5,r5,r5
10100f2c:	294b883a 	add	r5,r5,r5
10100f30:	298b883a 	add	r5,r5,r6
10100f34:	38c6983a 	sll	r3,r7,r3
10100f38:	29c00017 	ldw	r7,0(r5)
10100f3c:	2a7ffe04 	addi	r9,r5,-8
10100f40:	1886b03a 	or	r3,r3,r2
10100f44:	82400315 	stw	r9,12(r16)
10100f48:	81c00215 	stw	r7,8(r16)
10100f4c:	30c00115 	stw	r3,4(r6)
10100f50:	2c000015 	stw	r16,0(r5)
10100f54:	3c000315 	stw	r16,12(r7)
10100f58:	2005d0ba 	srai	r2,r4,2
10100f5c:	01400044 	movi	r5,1
10100f60:	288a983a 	sll	r5,r5,r2
10100f64:	19406f36 	bltu	r3,r5,10101124 <_malloc_r+0x324>
10100f68:	28c4703a 	and	r2,r5,r3
10100f6c:	10000a1e 	bne	r2,zero,10100f98 <_malloc_r+0x198>
10100f70:	00bfff04 	movi	r2,-4
10100f74:	294b883a 	add	r5,r5,r5
10100f78:	2088703a 	and	r4,r4,r2
10100f7c:	28c4703a 	and	r2,r5,r3
10100f80:	21000104 	addi	r4,r4,4
10100f84:	1000041e 	bne	r2,zero,10100f98 <_malloc_r+0x198>
10100f88:	294b883a 	add	r5,r5,r5
10100f8c:	28c4703a 	and	r2,r5,r3
10100f90:	21000104 	addi	r4,r4,4
10100f94:	103ffc26 	beq	r2,zero,10100f88 <__alt_data_end+0xfffe0f88>
10100f98:	02bfff04 	movi	r10,-4
10100f9c:	024003c4 	movi	r9,15
10100fa0:	21800044 	addi	r6,r4,1
10100fa4:	318d883a 	add	r6,r6,r6
10100fa8:	318d883a 	add	r6,r6,r6
10100fac:	318d883a 	add	r6,r6,r6
10100fb0:	998d883a 	add	r6,r19,r6
10100fb4:	333ffe04 	addi	r12,r6,-8
10100fb8:	2017883a 	mov	r11,r4
10100fbc:	31800104 	addi	r6,r6,4
10100fc0:	34000017 	ldw	r16,0(r6)
10100fc4:	31fffd04 	addi	r7,r6,-12
10100fc8:	81c0041e 	bne	r16,r7,10100fdc <_malloc_r+0x1dc>
10100fcc:	0000fb06 	br	101013bc <_malloc_r+0x5bc>
10100fd0:	1801030e 	bge	r3,zero,101013e0 <_malloc_r+0x5e0>
10100fd4:	84000317 	ldw	r16,12(r16)
10100fd8:	81c0f826 	beq	r16,r7,101013bc <_malloc_r+0x5bc>
10100fdc:	80800117 	ldw	r2,4(r16)
10100fe0:	1284703a 	and	r2,r2,r10
10100fe4:	1447c83a 	sub	r3,r2,r17
10100fe8:	48fff90e 	bge	r9,r3,10100fd0 <__alt_data_end+0xfffe0fd0>
10100fec:	80800317 	ldw	r2,12(r16)
10100ff0:	81000217 	ldw	r4,8(r16)
10100ff4:	89400054 	ori	r5,r17,1
10100ff8:	81400115 	stw	r5,4(r16)
10100ffc:	20800315 	stw	r2,12(r4)
10101000:	11000215 	stw	r4,8(r2)
10101004:	8463883a 	add	r17,r16,r17
10101008:	9c400515 	stw	r17,20(r19)
1010100c:	9c400415 	stw	r17,16(r19)
10101010:	18800054 	ori	r2,r3,1
10101014:	88800115 	stw	r2,4(r17)
10101018:	8a000315 	stw	r8,12(r17)
1010101c:	8a000215 	stw	r8,8(r17)
10101020:	88e3883a 	add	r17,r17,r3
10101024:	88c00015 	stw	r3,0(r17)
10101028:	9009883a 	mov	r4,r18
1010102c:	01036180 	call	10103618 <__malloc_unlock>
10101030:	80800204 	addi	r2,r16,8
10101034:	00001b06 	br	101010a4 <_malloc_r+0x2a4>
10101038:	04400404 	movi	r17,16
1010103c:	89402536 	bltu	r17,r5,101010d4 <_malloc_r+0x2d4>
10101040:	01035f40 	call	101035f4 <__malloc_lock>
10101044:	00800184 	movi	r2,6
10101048:	01000084 	movi	r4,2
1010104c:	04c40434 	movhi	r19,4112
10101050:	1085883a 	add	r2,r2,r2
10101054:	9cd6e304 	addi	r19,r19,23436
10101058:	1085883a 	add	r2,r2,r2
1010105c:	9885883a 	add	r2,r19,r2
10101060:	14000117 	ldw	r16,4(r2)
10101064:	10fffe04 	addi	r3,r2,-8
10101068:	80c0d926 	beq	r16,r3,101013d0 <_malloc_r+0x5d0>
1010106c:	80c00117 	ldw	r3,4(r16)
10101070:	81000317 	ldw	r4,12(r16)
10101074:	00bfff04 	movi	r2,-4
10101078:	1884703a 	and	r2,r3,r2
1010107c:	81400217 	ldw	r5,8(r16)
10101080:	8085883a 	add	r2,r16,r2
10101084:	10c00117 	ldw	r3,4(r2)
10101088:	29000315 	stw	r4,12(r5)
1010108c:	21400215 	stw	r5,8(r4)
10101090:	18c00054 	ori	r3,r3,1
10101094:	10c00115 	stw	r3,4(r2)
10101098:	9009883a 	mov	r4,r18
1010109c:	01036180 	call	10103618 <__malloc_unlock>
101010a0:	80800204 	addi	r2,r16,8
101010a4:	dfc00a17 	ldw	ra,40(sp)
101010a8:	df000917 	ldw	fp,36(sp)
101010ac:	ddc00817 	ldw	r23,32(sp)
101010b0:	dd800717 	ldw	r22,28(sp)
101010b4:	dd400617 	ldw	r21,24(sp)
101010b8:	dd000517 	ldw	r20,20(sp)
101010bc:	dcc00417 	ldw	r19,16(sp)
101010c0:	dc800317 	ldw	r18,12(sp)
101010c4:	dc400217 	ldw	r17,8(sp)
101010c8:	dc000117 	ldw	r16,4(sp)
101010cc:	dec00b04 	addi	sp,sp,44
101010d0:	f800283a 	ret
101010d4:	00800304 	movi	r2,12
101010d8:	90800015 	stw	r2,0(r18)
101010dc:	0005883a 	mov	r2,zero
101010e0:	003ff006 	br	101010a4 <__alt_data_end+0xfffe10a4>
101010e4:	01002004 	movi	r4,128
101010e8:	02001004 	movi	r8,64
101010ec:	01c00fc4 	movi	r7,63
101010f0:	003f6106 	br	10100e78 <__alt_data_end+0xfffe0e78>
101010f4:	4009883a 	mov	r4,r8
101010f8:	003f7506 	br	10100ed0 <__alt_data_end+0xfffe0ed0>
101010fc:	81000317 	ldw	r4,12(r16)
10101100:	003fde06 	br	1010107c <__alt_data_end+0xfffe107c>
10101104:	81c5883a 	add	r2,r16,r7
10101108:	11400117 	ldw	r5,4(r2)
1010110c:	9009883a 	mov	r4,r18
10101110:	29400054 	ori	r5,r5,1
10101114:	11400115 	stw	r5,4(r2)
10101118:	01036180 	call	10103618 <__malloc_unlock>
1010111c:	80800204 	addi	r2,r16,8
10101120:	003fe006 	br	101010a4 <__alt_data_end+0xfffe10a4>
10101124:	9c000217 	ldw	r16,8(r19)
10101128:	00bfff04 	movi	r2,-4
1010112c:	85800117 	ldw	r22,4(r16)
10101130:	b0ac703a 	and	r22,r22,r2
10101134:	b4400336 	bltu	r22,r17,10101144 <_malloc_r+0x344>
10101138:	b445c83a 	sub	r2,r22,r17
1010113c:	00c003c4 	movi	r3,15
10101140:	18805d16 	blt	r3,r2,101012b8 <_malloc_r+0x4b8>
10101144:	05c40434 	movhi	r23,4112
10101148:	00840474 	movhi	r2,4113
1010114c:	10a31204 	addi	r2,r2,-29624
10101150:	bddc6904 	addi	r23,r23,29092
10101154:	15400017 	ldw	r21,0(r2)
10101158:	b8c00017 	ldw	r3,0(r23)
1010115c:	00bfffc4 	movi	r2,-1
10101160:	858d883a 	add	r6,r16,r22
10101164:	8d6b883a 	add	r21,r17,r21
10101168:	1880ea26 	beq	r3,r2,10101514 <_malloc_r+0x714>
1010116c:	ad4403c4 	addi	r21,r21,4111
10101170:	00bc0004 	movi	r2,-4096
10101174:	a8aa703a 	and	r21,r21,r2
10101178:	a80b883a 	mov	r5,r21
1010117c:	9009883a 	mov	r4,r18
10101180:	d9800015 	stw	r6,0(sp)
10101184:	01020200 	call	10102020 <_sbrk_r>
10101188:	1029883a 	mov	r20,r2
1010118c:	00bfffc4 	movi	r2,-1
10101190:	d9800017 	ldw	r6,0(sp)
10101194:	a080e826 	beq	r20,r2,10101538 <_malloc_r+0x738>
10101198:	a180a636 	bltu	r20,r6,10101434 <_malloc_r+0x634>
1010119c:	07040474 	movhi	fp,4113
101011a0:	e7231b04 	addi	fp,fp,-29588
101011a4:	e0800017 	ldw	r2,0(fp)
101011a8:	a887883a 	add	r3,r21,r2
101011ac:	e0c00015 	stw	r3,0(fp)
101011b0:	3500e626 	beq	r6,r20,1010154c <_malloc_r+0x74c>
101011b4:	b9000017 	ldw	r4,0(r23)
101011b8:	00bfffc4 	movi	r2,-1
101011bc:	2080ee26 	beq	r4,r2,10101578 <_malloc_r+0x778>
101011c0:	a185c83a 	sub	r2,r20,r6
101011c4:	10c5883a 	add	r2,r2,r3
101011c8:	e0800015 	stw	r2,0(fp)
101011cc:	a0c001cc 	andi	r3,r20,7
101011d0:	1800bc26 	beq	r3,zero,101014c4 <_malloc_r+0x6c4>
101011d4:	a0e9c83a 	sub	r20,r20,r3
101011d8:	00840204 	movi	r2,4104
101011dc:	a5000204 	addi	r20,r20,8
101011e0:	10c7c83a 	sub	r3,r2,r3
101011e4:	a545883a 	add	r2,r20,r21
101011e8:	1083ffcc 	andi	r2,r2,4095
101011ec:	18abc83a 	sub	r21,r3,r2
101011f0:	a80b883a 	mov	r5,r21
101011f4:	9009883a 	mov	r4,r18
101011f8:	01020200 	call	10102020 <_sbrk_r>
101011fc:	00ffffc4 	movi	r3,-1
10101200:	10c0e126 	beq	r2,r3,10101588 <_malloc_r+0x788>
10101204:	1505c83a 	sub	r2,r2,r20
10101208:	1545883a 	add	r2,r2,r21
1010120c:	10800054 	ori	r2,r2,1
10101210:	e0c00017 	ldw	r3,0(fp)
10101214:	9d000215 	stw	r20,8(r19)
10101218:	a0800115 	stw	r2,4(r20)
1010121c:	a8c7883a 	add	r3,r21,r3
10101220:	e0c00015 	stw	r3,0(fp)
10101224:	84c00e26 	beq	r16,r19,10101260 <_malloc_r+0x460>
10101228:	018003c4 	movi	r6,15
1010122c:	3580a72e 	bgeu	r6,r22,101014cc <_malloc_r+0x6cc>
10101230:	81400117 	ldw	r5,4(r16)
10101234:	013ffe04 	movi	r4,-8
10101238:	b0bffd04 	addi	r2,r22,-12
1010123c:	1104703a 	and	r2,r2,r4
10101240:	2900004c 	andi	r4,r5,1
10101244:	2088b03a 	or	r4,r4,r2
10101248:	81000115 	stw	r4,4(r16)
1010124c:	01400144 	movi	r5,5
10101250:	8089883a 	add	r4,r16,r2
10101254:	21400115 	stw	r5,4(r4)
10101258:	21400215 	stw	r5,8(r4)
1010125c:	3080cd36 	bltu	r6,r2,10101594 <_malloc_r+0x794>
10101260:	00840474 	movhi	r2,4113
10101264:	10a31104 	addi	r2,r2,-29628
10101268:	11000017 	ldw	r4,0(r2)
1010126c:	20c0012e 	bgeu	r4,r3,10101274 <_malloc_r+0x474>
10101270:	10c00015 	stw	r3,0(r2)
10101274:	00840474 	movhi	r2,4113
10101278:	10a31004 	addi	r2,r2,-29632
1010127c:	11000017 	ldw	r4,0(r2)
10101280:	9c000217 	ldw	r16,8(r19)
10101284:	20c0012e 	bgeu	r4,r3,1010128c <_malloc_r+0x48c>
10101288:	10c00015 	stw	r3,0(r2)
1010128c:	80c00117 	ldw	r3,4(r16)
10101290:	00bfff04 	movi	r2,-4
10101294:	1886703a 	and	r3,r3,r2
10101298:	1c45c83a 	sub	r2,r3,r17
1010129c:	1c400236 	bltu	r3,r17,101012a8 <_malloc_r+0x4a8>
101012a0:	00c003c4 	movi	r3,15
101012a4:	18800416 	blt	r3,r2,101012b8 <_malloc_r+0x4b8>
101012a8:	9009883a 	mov	r4,r18
101012ac:	01036180 	call	10103618 <__malloc_unlock>
101012b0:	0005883a 	mov	r2,zero
101012b4:	003f7b06 	br	101010a4 <__alt_data_end+0xfffe10a4>
101012b8:	88c00054 	ori	r3,r17,1
101012bc:	80c00115 	stw	r3,4(r16)
101012c0:	8463883a 	add	r17,r16,r17
101012c4:	10800054 	ori	r2,r2,1
101012c8:	9c400215 	stw	r17,8(r19)
101012cc:	88800115 	stw	r2,4(r17)
101012d0:	9009883a 	mov	r4,r18
101012d4:	01036180 	call	10103618 <__malloc_unlock>
101012d8:	80800204 	addi	r2,r16,8
101012dc:	003f7106 	br	101010a4 <__alt_data_end+0xfffe10a4>
101012e0:	00c00504 	movi	r3,20
101012e4:	18804a2e 	bgeu	r3,r2,10101410 <_malloc_r+0x610>
101012e8:	00c01504 	movi	r3,84
101012ec:	18806e36 	bltu	r3,r2,101014a8 <_malloc_r+0x6a8>
101012f0:	8804d33a 	srli	r2,r17,12
101012f4:	12001bc4 	addi	r8,r2,111
101012f8:	11c01b84 	addi	r7,r2,110
101012fc:	4209883a 	add	r4,r8,r8
10101300:	003edd06 	br	10100e78 <__alt_data_end+0xfffe0e78>
10101304:	3804d27a 	srli	r2,r7,9
10101308:	00c00104 	movi	r3,4
1010130c:	1880442e 	bgeu	r3,r2,10101420 <_malloc_r+0x620>
10101310:	00c00504 	movi	r3,20
10101314:	18808136 	bltu	r3,r2,1010151c <_malloc_r+0x71c>
10101318:	11401704 	addi	r5,r2,92
1010131c:	10c016c4 	addi	r3,r2,91
10101320:	294b883a 	add	r5,r5,r5
10101324:	294b883a 	add	r5,r5,r5
10101328:	294b883a 	add	r5,r5,r5
1010132c:	994b883a 	add	r5,r19,r5
10101330:	28800017 	ldw	r2,0(r5)
10101334:	01840434 	movhi	r6,4112
10101338:	297ffe04 	addi	r5,r5,-8
1010133c:	3196e304 	addi	r6,r6,23436
10101340:	28806526 	beq	r5,r2,101014d8 <_malloc_r+0x6d8>
10101344:	01bfff04 	movi	r6,-4
10101348:	10c00117 	ldw	r3,4(r2)
1010134c:	1986703a 	and	r3,r3,r6
10101350:	38c0022e 	bgeu	r7,r3,1010135c <_malloc_r+0x55c>
10101354:	10800217 	ldw	r2,8(r2)
10101358:	28bffb1e 	bne	r5,r2,10101348 <__alt_data_end+0xfffe1348>
1010135c:	11400317 	ldw	r5,12(r2)
10101360:	98c00117 	ldw	r3,4(r19)
10101364:	81400315 	stw	r5,12(r16)
10101368:	80800215 	stw	r2,8(r16)
1010136c:	2c000215 	stw	r16,8(r5)
10101370:	14000315 	stw	r16,12(r2)
10101374:	003ef806 	br	10100f58 <__alt_data_end+0xfffe0f58>
10101378:	88c00054 	ori	r3,r17,1
1010137c:	80c00115 	stw	r3,4(r16)
10101380:	8463883a 	add	r17,r16,r17
10101384:	34400515 	stw	r17,20(r6)
10101388:	34400415 	stw	r17,16(r6)
1010138c:	10c00054 	ori	r3,r2,1
10101390:	8a000315 	stw	r8,12(r17)
10101394:	8a000215 	stw	r8,8(r17)
10101398:	88c00115 	stw	r3,4(r17)
1010139c:	88a3883a 	add	r17,r17,r2
101013a0:	88800015 	stw	r2,0(r17)
101013a4:	9009883a 	mov	r4,r18
101013a8:	01036180 	call	10103618 <__malloc_unlock>
101013ac:	80800204 	addi	r2,r16,8
101013b0:	003f3c06 	br	101010a4 <__alt_data_end+0xfffe10a4>
101013b4:	30c00117 	ldw	r3,4(r6)
101013b8:	003ee706 	br	10100f58 <__alt_data_end+0xfffe0f58>
101013bc:	5ac00044 	addi	r11,r11,1
101013c0:	588000cc 	andi	r2,r11,3
101013c4:	31800204 	addi	r6,r6,8
101013c8:	103efd1e 	bne	r2,zero,10100fc0 <__alt_data_end+0xfffe0fc0>
101013cc:	00002406 	br	10101460 <_malloc_r+0x660>
101013d0:	14000317 	ldw	r16,12(r2)
101013d4:	143f251e 	bne	r2,r16,1010106c <__alt_data_end+0xfffe106c>
101013d8:	21000084 	addi	r4,r4,2
101013dc:	003ebc06 	br	10100ed0 <__alt_data_end+0xfffe0ed0>
101013e0:	8085883a 	add	r2,r16,r2
101013e4:	10c00117 	ldw	r3,4(r2)
101013e8:	81000317 	ldw	r4,12(r16)
101013ec:	81400217 	ldw	r5,8(r16)
101013f0:	18c00054 	ori	r3,r3,1
101013f4:	10c00115 	stw	r3,4(r2)
101013f8:	29000315 	stw	r4,12(r5)
101013fc:	21400215 	stw	r5,8(r4)
10101400:	9009883a 	mov	r4,r18
10101404:	01036180 	call	10103618 <__malloc_unlock>
10101408:	80800204 	addi	r2,r16,8
1010140c:	003f2506 	br	101010a4 <__alt_data_end+0xfffe10a4>
10101410:	12001704 	addi	r8,r2,92
10101414:	11c016c4 	addi	r7,r2,91
10101418:	4209883a 	add	r4,r8,r8
1010141c:	003e9606 	br	10100e78 <__alt_data_end+0xfffe0e78>
10101420:	3804d1ba 	srli	r2,r7,6
10101424:	11400e44 	addi	r5,r2,57
10101428:	10c00e04 	addi	r3,r2,56
1010142c:	294b883a 	add	r5,r5,r5
10101430:	003fbc06 	br	10101324 <__alt_data_end+0xfffe1324>
10101434:	84ff5926 	beq	r16,r19,1010119c <__alt_data_end+0xfffe119c>
10101438:	00840434 	movhi	r2,4112
1010143c:	1096e304 	addi	r2,r2,23436
10101440:	14000217 	ldw	r16,8(r2)
10101444:	00bfff04 	movi	r2,-4
10101448:	80c00117 	ldw	r3,4(r16)
1010144c:	1886703a 	and	r3,r3,r2
10101450:	003f9106 	br	10101298 <__alt_data_end+0xfffe1298>
10101454:	60800217 	ldw	r2,8(r12)
10101458:	213fffc4 	addi	r4,r4,-1
1010145c:	1300651e 	bne	r2,r12,101015f4 <_malloc_r+0x7f4>
10101460:	208000cc 	andi	r2,r4,3
10101464:	633ffe04 	addi	r12,r12,-8
10101468:	103ffa1e 	bne	r2,zero,10101454 <__alt_data_end+0xfffe1454>
1010146c:	98800117 	ldw	r2,4(r19)
10101470:	0146303a 	nor	r3,zero,r5
10101474:	1884703a 	and	r2,r3,r2
10101478:	98800115 	stw	r2,4(r19)
1010147c:	294b883a 	add	r5,r5,r5
10101480:	117f2836 	bltu	r2,r5,10101124 <__alt_data_end+0xfffe1124>
10101484:	283f2726 	beq	r5,zero,10101124 <__alt_data_end+0xfffe1124>
10101488:	2886703a 	and	r3,r5,r2
1010148c:	5809883a 	mov	r4,r11
10101490:	183ec31e 	bne	r3,zero,10100fa0 <__alt_data_end+0xfffe0fa0>
10101494:	294b883a 	add	r5,r5,r5
10101498:	2886703a 	and	r3,r5,r2
1010149c:	21000104 	addi	r4,r4,4
101014a0:	183ffc26 	beq	r3,zero,10101494 <__alt_data_end+0xfffe1494>
101014a4:	003ebe06 	br	10100fa0 <__alt_data_end+0xfffe0fa0>
101014a8:	00c05504 	movi	r3,340
101014ac:	18801236 	bltu	r3,r2,101014f8 <_malloc_r+0x6f8>
101014b0:	8804d3fa 	srli	r2,r17,15
101014b4:	12001e04 	addi	r8,r2,120
101014b8:	11c01dc4 	addi	r7,r2,119
101014bc:	4209883a 	add	r4,r8,r8
101014c0:	003e6d06 	br	10100e78 <__alt_data_end+0xfffe0e78>
101014c4:	00c40004 	movi	r3,4096
101014c8:	003f4606 	br	101011e4 <__alt_data_end+0xfffe11e4>
101014cc:	00800044 	movi	r2,1
101014d0:	a0800115 	stw	r2,4(r20)
101014d4:	003f7406 	br	101012a8 <__alt_data_end+0xfffe12a8>
101014d8:	1805d0ba 	srai	r2,r3,2
101014dc:	01c00044 	movi	r7,1
101014e0:	30c00117 	ldw	r3,4(r6)
101014e4:	388e983a 	sll	r7,r7,r2
101014e8:	2805883a 	mov	r2,r5
101014ec:	38c6b03a 	or	r3,r7,r3
101014f0:	30c00115 	stw	r3,4(r6)
101014f4:	003f9b06 	br	10101364 <__alt_data_end+0xfffe1364>
101014f8:	00c15504 	movi	r3,1364
101014fc:	18801a36 	bltu	r3,r2,10101568 <_malloc_r+0x768>
10101500:	8804d4ba 	srli	r2,r17,18
10101504:	12001f44 	addi	r8,r2,125
10101508:	11c01f04 	addi	r7,r2,124
1010150c:	4209883a 	add	r4,r8,r8
10101510:	003e5906 	br	10100e78 <__alt_data_end+0xfffe0e78>
10101514:	ad400404 	addi	r21,r21,16
10101518:	003f1706 	br	10101178 <__alt_data_end+0xfffe1178>
1010151c:	00c01504 	movi	r3,84
10101520:	18802336 	bltu	r3,r2,101015b0 <_malloc_r+0x7b0>
10101524:	3804d33a 	srli	r2,r7,12
10101528:	11401bc4 	addi	r5,r2,111
1010152c:	10c01b84 	addi	r3,r2,110
10101530:	294b883a 	add	r5,r5,r5
10101534:	003f7b06 	br	10101324 <__alt_data_end+0xfffe1324>
10101538:	9c000217 	ldw	r16,8(r19)
1010153c:	00bfff04 	movi	r2,-4
10101540:	80c00117 	ldw	r3,4(r16)
10101544:	1886703a 	and	r3,r3,r2
10101548:	003f5306 	br	10101298 <__alt_data_end+0xfffe1298>
1010154c:	3083ffcc 	andi	r2,r6,4095
10101550:	103f181e 	bne	r2,zero,101011b4 <__alt_data_end+0xfffe11b4>
10101554:	99000217 	ldw	r4,8(r19)
10101558:	b545883a 	add	r2,r22,r21
1010155c:	10800054 	ori	r2,r2,1
10101560:	20800115 	stw	r2,4(r4)
10101564:	003f3e06 	br	10101260 <__alt_data_end+0xfffe1260>
10101568:	01003f84 	movi	r4,254
1010156c:	02001fc4 	movi	r8,127
10101570:	01c01f84 	movi	r7,126
10101574:	003e4006 	br	10100e78 <__alt_data_end+0xfffe0e78>
10101578:	00840434 	movhi	r2,4112
1010157c:	109c6904 	addi	r2,r2,29092
10101580:	15000015 	stw	r20,0(r2)
10101584:	003f1106 	br	101011cc <__alt_data_end+0xfffe11cc>
10101588:	00800044 	movi	r2,1
1010158c:	002b883a 	mov	r21,zero
10101590:	003f1f06 	br	10101210 <__alt_data_end+0xfffe1210>
10101594:	81400204 	addi	r5,r16,8
10101598:	9009883a 	mov	r4,r18
1010159c:	01028880 	call	10102888 <_free_r>
101015a0:	00840474 	movhi	r2,4113
101015a4:	10a31b04 	addi	r2,r2,-29588
101015a8:	10c00017 	ldw	r3,0(r2)
101015ac:	003f2c06 	br	10101260 <__alt_data_end+0xfffe1260>
101015b0:	00c05504 	movi	r3,340
101015b4:	18800536 	bltu	r3,r2,101015cc <_malloc_r+0x7cc>
101015b8:	3804d3fa 	srli	r2,r7,15
101015bc:	11401e04 	addi	r5,r2,120
101015c0:	10c01dc4 	addi	r3,r2,119
101015c4:	294b883a 	add	r5,r5,r5
101015c8:	003f5606 	br	10101324 <__alt_data_end+0xfffe1324>
101015cc:	00c15504 	movi	r3,1364
101015d0:	18800536 	bltu	r3,r2,101015e8 <_malloc_r+0x7e8>
101015d4:	3804d4ba 	srli	r2,r7,18
101015d8:	11401f44 	addi	r5,r2,125
101015dc:	10c01f04 	addi	r3,r2,124
101015e0:	294b883a 	add	r5,r5,r5
101015e4:	003f4f06 	br	10101324 <__alt_data_end+0xfffe1324>
101015e8:	01403f84 	movi	r5,254
101015ec:	00c01f84 	movi	r3,126
101015f0:	003f4c06 	br	10101324 <__alt_data_end+0xfffe1324>
101015f4:	98800117 	ldw	r2,4(r19)
101015f8:	003fa006 	br	1010147c <__alt_data_end+0xfffe147c>
101015fc:	8808d0fa 	srli	r4,r17,3
10101600:	20800044 	addi	r2,r4,1
10101604:	1085883a 	add	r2,r2,r2
10101608:	003e9006 	br	1010104c <__alt_data_end+0xfffe104c>

1010160c <memchr>:
1010160c:	208000cc 	andi	r2,r4,3
10101610:	280f883a 	mov	r7,r5
10101614:	10003426 	beq	r2,zero,101016e8 <memchr+0xdc>
10101618:	30bfffc4 	addi	r2,r6,-1
1010161c:	30001a26 	beq	r6,zero,10101688 <memchr+0x7c>
10101620:	20c00003 	ldbu	r3,0(r4)
10101624:	29803fcc 	andi	r6,r5,255
10101628:	30c0051e 	bne	r6,r3,10101640 <memchr+0x34>
1010162c:	00001806 	br	10101690 <memchr+0x84>
10101630:	10001526 	beq	r2,zero,10101688 <memchr+0x7c>
10101634:	20c00003 	ldbu	r3,0(r4)
10101638:	10bfffc4 	addi	r2,r2,-1
1010163c:	30c01426 	beq	r6,r3,10101690 <memchr+0x84>
10101640:	21000044 	addi	r4,r4,1
10101644:	20c000cc 	andi	r3,r4,3
10101648:	183ff91e 	bne	r3,zero,10101630 <__alt_data_end+0xfffe1630>
1010164c:	020000c4 	movi	r8,3
10101650:	40801136 	bltu	r8,r2,10101698 <memchr+0x8c>
10101654:	10000c26 	beq	r2,zero,10101688 <memchr+0x7c>
10101658:	20c00003 	ldbu	r3,0(r4)
1010165c:	29403fcc 	andi	r5,r5,255
10101660:	28c00b26 	beq	r5,r3,10101690 <memchr+0x84>
10101664:	20c00044 	addi	r3,r4,1
10101668:	39803fcc 	andi	r6,r7,255
1010166c:	2089883a 	add	r4,r4,r2
10101670:	00000306 	br	10101680 <memchr+0x74>
10101674:	18c00044 	addi	r3,r3,1
10101678:	197fffc3 	ldbu	r5,-1(r3)
1010167c:	31400526 	beq	r6,r5,10101694 <memchr+0x88>
10101680:	1805883a 	mov	r2,r3
10101684:	20fffb1e 	bne	r4,r3,10101674 <__alt_data_end+0xfffe1674>
10101688:	0005883a 	mov	r2,zero
1010168c:	f800283a 	ret
10101690:	2005883a 	mov	r2,r4
10101694:	f800283a 	ret
10101698:	28c03fcc 	andi	r3,r5,255
1010169c:	1812923a 	slli	r9,r3,8
101016a0:	02ffbff4 	movhi	r11,65279
101016a4:	02a02074 	movhi	r10,32897
101016a8:	48d2b03a 	or	r9,r9,r3
101016ac:	4806943a 	slli	r3,r9,16
101016b0:	5affbfc4 	addi	r11,r11,-257
101016b4:	52a02004 	addi	r10,r10,-32640
101016b8:	48d2b03a 	or	r9,r9,r3
101016bc:	20c00017 	ldw	r3,0(r4)
101016c0:	48c6f03a 	xor	r3,r9,r3
101016c4:	1acd883a 	add	r6,r3,r11
101016c8:	00c6303a 	nor	r3,zero,r3
101016cc:	30c6703a 	and	r3,r6,r3
101016d0:	1a86703a 	and	r3,r3,r10
101016d4:	183fe01e 	bne	r3,zero,10101658 <__alt_data_end+0xfffe1658>
101016d8:	10bfff04 	addi	r2,r2,-4
101016dc:	21000104 	addi	r4,r4,4
101016e0:	40bff636 	bltu	r8,r2,101016bc <__alt_data_end+0xfffe16bc>
101016e4:	003fdb06 	br	10101654 <__alt_data_end+0xfffe1654>
101016e8:	3005883a 	mov	r2,r6
101016ec:	003fd706 	br	1010164c <__alt_data_end+0xfffe164c>

101016f0 <memcpy>:
101016f0:	defffd04 	addi	sp,sp,-12
101016f4:	dfc00215 	stw	ra,8(sp)
101016f8:	dc400115 	stw	r17,4(sp)
101016fc:	dc000015 	stw	r16,0(sp)
10101700:	00c003c4 	movi	r3,15
10101704:	2005883a 	mov	r2,r4
10101708:	1980452e 	bgeu	r3,r6,10101820 <memcpy+0x130>
1010170c:	2906b03a 	or	r3,r5,r4
10101710:	18c000cc 	andi	r3,r3,3
10101714:	1800441e 	bne	r3,zero,10101828 <memcpy+0x138>
10101718:	347ffc04 	addi	r17,r6,-16
1010171c:	8822d13a 	srli	r17,r17,4
10101720:	28c00104 	addi	r3,r5,4
10101724:	23400104 	addi	r13,r4,4
10101728:	8820913a 	slli	r16,r17,4
1010172c:	2b000204 	addi	r12,r5,8
10101730:	22c00204 	addi	r11,r4,8
10101734:	84000504 	addi	r16,r16,20
10101738:	2a800304 	addi	r10,r5,12
1010173c:	22400304 	addi	r9,r4,12
10101740:	2c21883a 	add	r16,r5,r16
10101744:	2811883a 	mov	r8,r5
10101748:	200f883a 	mov	r7,r4
1010174c:	41000017 	ldw	r4,0(r8)
10101750:	1fc00017 	ldw	ra,0(r3)
10101754:	63c00017 	ldw	r15,0(r12)
10101758:	39000015 	stw	r4,0(r7)
1010175c:	53800017 	ldw	r14,0(r10)
10101760:	6fc00015 	stw	ra,0(r13)
10101764:	5bc00015 	stw	r15,0(r11)
10101768:	4b800015 	stw	r14,0(r9)
1010176c:	18c00404 	addi	r3,r3,16
10101770:	39c00404 	addi	r7,r7,16
10101774:	42000404 	addi	r8,r8,16
10101778:	6b400404 	addi	r13,r13,16
1010177c:	63000404 	addi	r12,r12,16
10101780:	5ac00404 	addi	r11,r11,16
10101784:	52800404 	addi	r10,r10,16
10101788:	4a400404 	addi	r9,r9,16
1010178c:	1c3fef1e 	bne	r3,r16,1010174c <__alt_data_end+0xfffe174c>
10101790:	89c00044 	addi	r7,r17,1
10101794:	380e913a 	slli	r7,r7,4
10101798:	310003cc 	andi	r4,r6,15
1010179c:	02c000c4 	movi	r11,3
101017a0:	11c7883a 	add	r3,r2,r7
101017a4:	29cb883a 	add	r5,r5,r7
101017a8:	5900212e 	bgeu	r11,r4,10101830 <memcpy+0x140>
101017ac:	1813883a 	mov	r9,r3
101017b0:	2811883a 	mov	r8,r5
101017b4:	200f883a 	mov	r7,r4
101017b8:	42800017 	ldw	r10,0(r8)
101017bc:	4a400104 	addi	r9,r9,4
101017c0:	39ffff04 	addi	r7,r7,-4
101017c4:	4abfff15 	stw	r10,-4(r9)
101017c8:	42000104 	addi	r8,r8,4
101017cc:	59fffa36 	bltu	r11,r7,101017b8 <__alt_data_end+0xfffe17b8>
101017d0:	213fff04 	addi	r4,r4,-4
101017d4:	2008d0ba 	srli	r4,r4,2
101017d8:	318000cc 	andi	r6,r6,3
101017dc:	21000044 	addi	r4,r4,1
101017e0:	2109883a 	add	r4,r4,r4
101017e4:	2109883a 	add	r4,r4,r4
101017e8:	1907883a 	add	r3,r3,r4
101017ec:	290b883a 	add	r5,r5,r4
101017f0:	30000626 	beq	r6,zero,1010180c <memcpy+0x11c>
101017f4:	198d883a 	add	r6,r3,r6
101017f8:	29c00003 	ldbu	r7,0(r5)
101017fc:	18c00044 	addi	r3,r3,1
10101800:	29400044 	addi	r5,r5,1
10101804:	19ffffc5 	stb	r7,-1(r3)
10101808:	19bffb1e 	bne	r3,r6,101017f8 <__alt_data_end+0xfffe17f8>
1010180c:	dfc00217 	ldw	ra,8(sp)
10101810:	dc400117 	ldw	r17,4(sp)
10101814:	dc000017 	ldw	r16,0(sp)
10101818:	dec00304 	addi	sp,sp,12
1010181c:	f800283a 	ret
10101820:	2007883a 	mov	r3,r4
10101824:	003ff206 	br	101017f0 <__alt_data_end+0xfffe17f0>
10101828:	2007883a 	mov	r3,r4
1010182c:	003ff106 	br	101017f4 <__alt_data_end+0xfffe17f4>
10101830:	200d883a 	mov	r6,r4
10101834:	003fee06 	br	101017f0 <__alt_data_end+0xfffe17f0>

10101838 <memmove>:
10101838:	2005883a 	mov	r2,r4
1010183c:	29000b2e 	bgeu	r5,r4,1010186c <memmove+0x34>
10101840:	298f883a 	add	r7,r5,r6
10101844:	21c0092e 	bgeu	r4,r7,1010186c <memmove+0x34>
10101848:	2187883a 	add	r3,r4,r6
1010184c:	198bc83a 	sub	r5,r3,r6
10101850:	30004826 	beq	r6,zero,10101974 <memmove+0x13c>
10101854:	39ffffc4 	addi	r7,r7,-1
10101858:	39000003 	ldbu	r4,0(r7)
1010185c:	18ffffc4 	addi	r3,r3,-1
10101860:	19000005 	stb	r4,0(r3)
10101864:	28fffb1e 	bne	r5,r3,10101854 <__alt_data_end+0xfffe1854>
10101868:	f800283a 	ret
1010186c:	00c003c4 	movi	r3,15
10101870:	1980412e 	bgeu	r3,r6,10101978 <memmove+0x140>
10101874:	2886b03a 	or	r3,r5,r2
10101878:	18c000cc 	andi	r3,r3,3
1010187c:	1800401e 	bne	r3,zero,10101980 <memmove+0x148>
10101880:	33fffc04 	addi	r15,r6,-16
10101884:	781ed13a 	srli	r15,r15,4
10101888:	28c00104 	addi	r3,r5,4
1010188c:	13400104 	addi	r13,r2,4
10101890:	781c913a 	slli	r14,r15,4
10101894:	2b000204 	addi	r12,r5,8
10101898:	12c00204 	addi	r11,r2,8
1010189c:	73800504 	addi	r14,r14,20
101018a0:	2a800304 	addi	r10,r5,12
101018a4:	12400304 	addi	r9,r2,12
101018a8:	2b9d883a 	add	r14,r5,r14
101018ac:	2811883a 	mov	r8,r5
101018b0:	100f883a 	mov	r7,r2
101018b4:	41000017 	ldw	r4,0(r8)
101018b8:	39c00404 	addi	r7,r7,16
101018bc:	18c00404 	addi	r3,r3,16
101018c0:	393ffc15 	stw	r4,-16(r7)
101018c4:	193ffc17 	ldw	r4,-16(r3)
101018c8:	6b400404 	addi	r13,r13,16
101018cc:	5ac00404 	addi	r11,r11,16
101018d0:	693ffc15 	stw	r4,-16(r13)
101018d4:	61000017 	ldw	r4,0(r12)
101018d8:	4a400404 	addi	r9,r9,16
101018dc:	42000404 	addi	r8,r8,16
101018e0:	593ffc15 	stw	r4,-16(r11)
101018e4:	51000017 	ldw	r4,0(r10)
101018e8:	63000404 	addi	r12,r12,16
101018ec:	52800404 	addi	r10,r10,16
101018f0:	493ffc15 	stw	r4,-16(r9)
101018f4:	1bbfef1e 	bne	r3,r14,101018b4 <__alt_data_end+0xfffe18b4>
101018f8:	79000044 	addi	r4,r15,1
101018fc:	2008913a 	slli	r4,r4,4
10101900:	328003cc 	andi	r10,r6,15
10101904:	02c000c4 	movi	r11,3
10101908:	1107883a 	add	r3,r2,r4
1010190c:	290b883a 	add	r5,r5,r4
10101910:	5a801e2e 	bgeu	r11,r10,1010198c <memmove+0x154>
10101914:	1813883a 	mov	r9,r3
10101918:	2811883a 	mov	r8,r5
1010191c:	500f883a 	mov	r7,r10
10101920:	41000017 	ldw	r4,0(r8)
10101924:	4a400104 	addi	r9,r9,4
10101928:	39ffff04 	addi	r7,r7,-4
1010192c:	493fff15 	stw	r4,-4(r9)
10101930:	42000104 	addi	r8,r8,4
10101934:	59fffa36 	bltu	r11,r7,10101920 <__alt_data_end+0xfffe1920>
10101938:	513fff04 	addi	r4,r10,-4
1010193c:	2008d0ba 	srli	r4,r4,2
10101940:	318000cc 	andi	r6,r6,3
10101944:	21000044 	addi	r4,r4,1
10101948:	2109883a 	add	r4,r4,r4
1010194c:	2109883a 	add	r4,r4,r4
10101950:	1907883a 	add	r3,r3,r4
10101954:	290b883a 	add	r5,r5,r4
10101958:	30000b26 	beq	r6,zero,10101988 <memmove+0x150>
1010195c:	198d883a 	add	r6,r3,r6
10101960:	29c00003 	ldbu	r7,0(r5)
10101964:	18c00044 	addi	r3,r3,1
10101968:	29400044 	addi	r5,r5,1
1010196c:	19ffffc5 	stb	r7,-1(r3)
10101970:	19bffb1e 	bne	r3,r6,10101960 <__alt_data_end+0xfffe1960>
10101974:	f800283a 	ret
10101978:	1007883a 	mov	r3,r2
1010197c:	003ff606 	br	10101958 <__alt_data_end+0xfffe1958>
10101980:	1007883a 	mov	r3,r2
10101984:	003ff506 	br	1010195c <__alt_data_end+0xfffe195c>
10101988:	f800283a 	ret
1010198c:	500d883a 	mov	r6,r10
10101990:	003ff106 	br	10101958 <__alt_data_end+0xfffe1958>

10101994 <memset>:
10101994:	20c000cc 	andi	r3,r4,3
10101998:	2005883a 	mov	r2,r4
1010199c:	18004426 	beq	r3,zero,10101ab0 <memset+0x11c>
101019a0:	31ffffc4 	addi	r7,r6,-1
101019a4:	30004026 	beq	r6,zero,10101aa8 <memset+0x114>
101019a8:	2813883a 	mov	r9,r5
101019ac:	200d883a 	mov	r6,r4
101019b0:	2007883a 	mov	r3,r4
101019b4:	00000406 	br	101019c8 <memset+0x34>
101019b8:	3a3fffc4 	addi	r8,r7,-1
101019bc:	31800044 	addi	r6,r6,1
101019c0:	38003926 	beq	r7,zero,10101aa8 <memset+0x114>
101019c4:	400f883a 	mov	r7,r8
101019c8:	18c00044 	addi	r3,r3,1
101019cc:	32400005 	stb	r9,0(r6)
101019d0:	1a0000cc 	andi	r8,r3,3
101019d4:	403ff81e 	bne	r8,zero,101019b8 <__alt_data_end+0xfffe19b8>
101019d8:	010000c4 	movi	r4,3
101019dc:	21c02d2e 	bgeu	r4,r7,10101a94 <memset+0x100>
101019e0:	29003fcc 	andi	r4,r5,255
101019e4:	200c923a 	slli	r6,r4,8
101019e8:	3108b03a 	or	r4,r6,r4
101019ec:	200c943a 	slli	r6,r4,16
101019f0:	218cb03a 	or	r6,r4,r6
101019f4:	010003c4 	movi	r4,15
101019f8:	21c0182e 	bgeu	r4,r7,10101a5c <memset+0xc8>
101019fc:	3b3ffc04 	addi	r12,r7,-16
10101a00:	6018d13a 	srli	r12,r12,4
10101a04:	1a000104 	addi	r8,r3,4
10101a08:	1ac00204 	addi	r11,r3,8
10101a0c:	6008913a 	slli	r4,r12,4
10101a10:	1a800304 	addi	r10,r3,12
10101a14:	1813883a 	mov	r9,r3
10101a18:	21000504 	addi	r4,r4,20
10101a1c:	1909883a 	add	r4,r3,r4
10101a20:	49800015 	stw	r6,0(r9)
10101a24:	41800015 	stw	r6,0(r8)
10101a28:	59800015 	stw	r6,0(r11)
10101a2c:	51800015 	stw	r6,0(r10)
10101a30:	42000404 	addi	r8,r8,16
10101a34:	4a400404 	addi	r9,r9,16
10101a38:	5ac00404 	addi	r11,r11,16
10101a3c:	52800404 	addi	r10,r10,16
10101a40:	413ff71e 	bne	r8,r4,10101a20 <__alt_data_end+0xfffe1a20>
10101a44:	63000044 	addi	r12,r12,1
10101a48:	6018913a 	slli	r12,r12,4
10101a4c:	39c003cc 	andi	r7,r7,15
10101a50:	010000c4 	movi	r4,3
10101a54:	1b07883a 	add	r3,r3,r12
10101a58:	21c00e2e 	bgeu	r4,r7,10101a94 <memset+0x100>
10101a5c:	1813883a 	mov	r9,r3
10101a60:	3811883a 	mov	r8,r7
10101a64:	010000c4 	movi	r4,3
10101a68:	49800015 	stw	r6,0(r9)
10101a6c:	423fff04 	addi	r8,r8,-4
10101a70:	4a400104 	addi	r9,r9,4
10101a74:	223ffc36 	bltu	r4,r8,10101a68 <__alt_data_end+0xfffe1a68>
10101a78:	393fff04 	addi	r4,r7,-4
10101a7c:	2008d0ba 	srli	r4,r4,2
10101a80:	39c000cc 	andi	r7,r7,3
10101a84:	21000044 	addi	r4,r4,1
10101a88:	2109883a 	add	r4,r4,r4
10101a8c:	2109883a 	add	r4,r4,r4
10101a90:	1907883a 	add	r3,r3,r4
10101a94:	38000526 	beq	r7,zero,10101aac <memset+0x118>
10101a98:	19cf883a 	add	r7,r3,r7
10101a9c:	19400005 	stb	r5,0(r3)
10101aa0:	18c00044 	addi	r3,r3,1
10101aa4:	38fffd1e 	bne	r7,r3,10101a9c <__alt_data_end+0xfffe1a9c>
10101aa8:	f800283a 	ret
10101aac:	f800283a 	ret
10101ab0:	2007883a 	mov	r3,r4
10101ab4:	300f883a 	mov	r7,r6
10101ab8:	003fc706 	br	101019d8 <__alt_data_end+0xfffe19d8>

10101abc <_realloc_r>:
10101abc:	defff604 	addi	sp,sp,-40
10101ac0:	dc800215 	stw	r18,8(sp)
10101ac4:	dfc00915 	stw	ra,36(sp)
10101ac8:	df000815 	stw	fp,32(sp)
10101acc:	ddc00715 	stw	r23,28(sp)
10101ad0:	dd800615 	stw	r22,24(sp)
10101ad4:	dd400515 	stw	r21,20(sp)
10101ad8:	dd000415 	stw	r20,16(sp)
10101adc:	dcc00315 	stw	r19,12(sp)
10101ae0:	dc400115 	stw	r17,4(sp)
10101ae4:	dc000015 	stw	r16,0(sp)
10101ae8:	3025883a 	mov	r18,r6
10101aec:	2800b726 	beq	r5,zero,10101dcc <_realloc_r+0x310>
10101af0:	282b883a 	mov	r21,r5
10101af4:	2029883a 	mov	r20,r4
10101af8:	01035f40 	call	101035f4 <__malloc_lock>
10101afc:	a8bfff17 	ldw	r2,-4(r21)
10101b00:	043fff04 	movi	r16,-4
10101b04:	90c002c4 	addi	r3,r18,11
10101b08:	01000584 	movi	r4,22
10101b0c:	acfffe04 	addi	r19,r21,-8
10101b10:	1420703a 	and	r16,r2,r16
10101b14:	20c0332e 	bgeu	r4,r3,10101be4 <_realloc_r+0x128>
10101b18:	047ffe04 	movi	r17,-8
10101b1c:	1c62703a 	and	r17,r3,r17
10101b20:	8807883a 	mov	r3,r17
10101b24:	88005816 	blt	r17,zero,10101c88 <_realloc_r+0x1cc>
10101b28:	8c805736 	bltu	r17,r18,10101c88 <_realloc_r+0x1cc>
10101b2c:	80c0300e 	bge	r16,r3,10101bf0 <_realloc_r+0x134>
10101b30:	07040434 	movhi	fp,4112
10101b34:	e716e304 	addi	fp,fp,23436
10101b38:	e1c00217 	ldw	r7,8(fp)
10101b3c:	9c09883a 	add	r4,r19,r16
10101b40:	22000117 	ldw	r8,4(r4)
10101b44:	21c06326 	beq	r4,r7,10101cd4 <_realloc_r+0x218>
10101b48:	017fff84 	movi	r5,-2
10101b4c:	414a703a 	and	r5,r8,r5
10101b50:	214b883a 	add	r5,r4,r5
10101b54:	29800117 	ldw	r6,4(r5)
10101b58:	3180004c 	andi	r6,r6,1
10101b5c:	30003f26 	beq	r6,zero,10101c5c <_realloc_r+0x1a0>
10101b60:	1080004c 	andi	r2,r2,1
10101b64:	10008326 	beq	r2,zero,10101d74 <_realloc_r+0x2b8>
10101b68:	900b883a 	mov	r5,r18
10101b6c:	a009883a 	mov	r4,r20
10101b70:	0100e000 	call	10100e00 <_malloc_r>
10101b74:	1025883a 	mov	r18,r2
10101b78:	10011e26 	beq	r2,zero,10101ff4 <_realloc_r+0x538>
10101b7c:	a93fff17 	ldw	r4,-4(r21)
10101b80:	10fffe04 	addi	r3,r2,-8
10101b84:	00bfff84 	movi	r2,-2
10101b88:	2084703a 	and	r2,r4,r2
10101b8c:	9885883a 	add	r2,r19,r2
10101b90:	1880ee26 	beq	r3,r2,10101f4c <_realloc_r+0x490>
10101b94:	81bfff04 	addi	r6,r16,-4
10101b98:	00800904 	movi	r2,36
10101b9c:	1180b836 	bltu	r2,r6,10101e80 <_realloc_r+0x3c4>
10101ba0:	00c004c4 	movi	r3,19
10101ba4:	19809636 	bltu	r3,r6,10101e00 <_realloc_r+0x344>
10101ba8:	9005883a 	mov	r2,r18
10101bac:	a807883a 	mov	r3,r21
10101bb0:	19000017 	ldw	r4,0(r3)
10101bb4:	11000015 	stw	r4,0(r2)
10101bb8:	19000117 	ldw	r4,4(r3)
10101bbc:	11000115 	stw	r4,4(r2)
10101bc0:	18c00217 	ldw	r3,8(r3)
10101bc4:	10c00215 	stw	r3,8(r2)
10101bc8:	a80b883a 	mov	r5,r21
10101bcc:	a009883a 	mov	r4,r20
10101bd0:	01028880 	call	10102888 <_free_r>
10101bd4:	a009883a 	mov	r4,r20
10101bd8:	01036180 	call	10103618 <__malloc_unlock>
10101bdc:	9005883a 	mov	r2,r18
10101be0:	00001206 	br	10101c2c <_realloc_r+0x170>
10101be4:	00c00404 	movi	r3,16
10101be8:	1823883a 	mov	r17,r3
10101bec:	003fce06 	br	10101b28 <__alt_data_end+0xfffe1b28>
10101bf0:	a825883a 	mov	r18,r21
10101bf4:	8445c83a 	sub	r2,r16,r17
10101bf8:	00c003c4 	movi	r3,15
10101bfc:	18802636 	bltu	r3,r2,10101c98 <_realloc_r+0x1dc>
10101c00:	99800117 	ldw	r6,4(r19)
10101c04:	9c07883a 	add	r3,r19,r16
10101c08:	3180004c 	andi	r6,r6,1
10101c0c:	3420b03a 	or	r16,r6,r16
10101c10:	9c000115 	stw	r16,4(r19)
10101c14:	18800117 	ldw	r2,4(r3)
10101c18:	10800054 	ori	r2,r2,1
10101c1c:	18800115 	stw	r2,4(r3)
10101c20:	a009883a 	mov	r4,r20
10101c24:	01036180 	call	10103618 <__malloc_unlock>
10101c28:	9005883a 	mov	r2,r18
10101c2c:	dfc00917 	ldw	ra,36(sp)
10101c30:	df000817 	ldw	fp,32(sp)
10101c34:	ddc00717 	ldw	r23,28(sp)
10101c38:	dd800617 	ldw	r22,24(sp)
10101c3c:	dd400517 	ldw	r21,20(sp)
10101c40:	dd000417 	ldw	r20,16(sp)
10101c44:	dcc00317 	ldw	r19,12(sp)
10101c48:	dc800217 	ldw	r18,8(sp)
10101c4c:	dc400117 	ldw	r17,4(sp)
10101c50:	dc000017 	ldw	r16,0(sp)
10101c54:	dec00a04 	addi	sp,sp,40
10101c58:	f800283a 	ret
10101c5c:	017fff04 	movi	r5,-4
10101c60:	414a703a 	and	r5,r8,r5
10101c64:	814d883a 	add	r6,r16,r5
10101c68:	30c01f16 	blt	r6,r3,10101ce8 <_realloc_r+0x22c>
10101c6c:	20800317 	ldw	r2,12(r4)
10101c70:	20c00217 	ldw	r3,8(r4)
10101c74:	a825883a 	mov	r18,r21
10101c78:	3021883a 	mov	r16,r6
10101c7c:	18800315 	stw	r2,12(r3)
10101c80:	10c00215 	stw	r3,8(r2)
10101c84:	003fdb06 	br	10101bf4 <__alt_data_end+0xfffe1bf4>
10101c88:	00800304 	movi	r2,12
10101c8c:	a0800015 	stw	r2,0(r20)
10101c90:	0005883a 	mov	r2,zero
10101c94:	003fe506 	br	10101c2c <__alt_data_end+0xfffe1c2c>
10101c98:	98c00117 	ldw	r3,4(r19)
10101c9c:	9c4b883a 	add	r5,r19,r17
10101ca0:	11000054 	ori	r4,r2,1
10101ca4:	18c0004c 	andi	r3,r3,1
10101ca8:	1c62b03a 	or	r17,r3,r17
10101cac:	9c400115 	stw	r17,4(r19)
10101cb0:	29000115 	stw	r4,4(r5)
10101cb4:	2885883a 	add	r2,r5,r2
10101cb8:	10c00117 	ldw	r3,4(r2)
10101cbc:	29400204 	addi	r5,r5,8
10101cc0:	a009883a 	mov	r4,r20
10101cc4:	18c00054 	ori	r3,r3,1
10101cc8:	10c00115 	stw	r3,4(r2)
10101ccc:	01028880 	call	10102888 <_free_r>
10101cd0:	003fd306 	br	10101c20 <__alt_data_end+0xfffe1c20>
10101cd4:	017fff04 	movi	r5,-4
10101cd8:	414a703a 	and	r5,r8,r5
10101cdc:	89800404 	addi	r6,r17,16
10101ce0:	8151883a 	add	r8,r16,r5
10101ce4:	4180590e 	bge	r8,r6,10101e4c <_realloc_r+0x390>
10101ce8:	1080004c 	andi	r2,r2,1
10101cec:	103f9e1e 	bne	r2,zero,10101b68 <__alt_data_end+0xfffe1b68>
10101cf0:	adbffe17 	ldw	r22,-8(r21)
10101cf4:	00bfff04 	movi	r2,-4
10101cf8:	9dadc83a 	sub	r22,r19,r22
10101cfc:	b1800117 	ldw	r6,4(r22)
10101d00:	3084703a 	and	r2,r6,r2
10101d04:	20002026 	beq	r4,zero,10101d88 <_realloc_r+0x2cc>
10101d08:	80af883a 	add	r23,r16,r2
10101d0c:	b96f883a 	add	r23,r23,r5
10101d10:	21c05f26 	beq	r4,r7,10101e90 <_realloc_r+0x3d4>
10101d14:	b8c01c16 	blt	r23,r3,10101d88 <_realloc_r+0x2cc>
10101d18:	20800317 	ldw	r2,12(r4)
10101d1c:	20c00217 	ldw	r3,8(r4)
10101d20:	81bfff04 	addi	r6,r16,-4
10101d24:	01000904 	movi	r4,36
10101d28:	18800315 	stw	r2,12(r3)
10101d2c:	10c00215 	stw	r3,8(r2)
10101d30:	b0c00217 	ldw	r3,8(r22)
10101d34:	b0800317 	ldw	r2,12(r22)
10101d38:	b4800204 	addi	r18,r22,8
10101d3c:	18800315 	stw	r2,12(r3)
10101d40:	10c00215 	stw	r3,8(r2)
10101d44:	21801b36 	bltu	r4,r6,10101db4 <_realloc_r+0x2f8>
10101d48:	008004c4 	movi	r2,19
10101d4c:	1180352e 	bgeu	r2,r6,10101e24 <_realloc_r+0x368>
10101d50:	a8800017 	ldw	r2,0(r21)
10101d54:	b0800215 	stw	r2,8(r22)
10101d58:	a8800117 	ldw	r2,4(r21)
10101d5c:	b0800315 	stw	r2,12(r22)
10101d60:	008006c4 	movi	r2,27
10101d64:	11807f36 	bltu	r2,r6,10101f64 <_realloc_r+0x4a8>
10101d68:	b0800404 	addi	r2,r22,16
10101d6c:	ad400204 	addi	r21,r21,8
10101d70:	00002d06 	br	10101e28 <_realloc_r+0x36c>
10101d74:	adbffe17 	ldw	r22,-8(r21)
10101d78:	00bfff04 	movi	r2,-4
10101d7c:	9dadc83a 	sub	r22,r19,r22
10101d80:	b1000117 	ldw	r4,4(r22)
10101d84:	2084703a 	and	r2,r4,r2
10101d88:	b03f7726 	beq	r22,zero,10101b68 <__alt_data_end+0xfffe1b68>
10101d8c:	80af883a 	add	r23,r16,r2
10101d90:	b8ff7516 	blt	r23,r3,10101b68 <__alt_data_end+0xfffe1b68>
10101d94:	b0800317 	ldw	r2,12(r22)
10101d98:	b0c00217 	ldw	r3,8(r22)
10101d9c:	81bfff04 	addi	r6,r16,-4
10101da0:	01000904 	movi	r4,36
10101da4:	18800315 	stw	r2,12(r3)
10101da8:	10c00215 	stw	r3,8(r2)
10101dac:	b4800204 	addi	r18,r22,8
10101db0:	21bfe52e 	bgeu	r4,r6,10101d48 <__alt_data_end+0xfffe1d48>
10101db4:	a80b883a 	mov	r5,r21
10101db8:	9009883a 	mov	r4,r18
10101dbc:	01018380 	call	10101838 <memmove>
10101dc0:	b821883a 	mov	r16,r23
10101dc4:	b027883a 	mov	r19,r22
10101dc8:	003f8a06 	br	10101bf4 <__alt_data_end+0xfffe1bf4>
10101dcc:	300b883a 	mov	r5,r6
10101dd0:	dfc00917 	ldw	ra,36(sp)
10101dd4:	df000817 	ldw	fp,32(sp)
10101dd8:	ddc00717 	ldw	r23,28(sp)
10101ddc:	dd800617 	ldw	r22,24(sp)
10101de0:	dd400517 	ldw	r21,20(sp)
10101de4:	dd000417 	ldw	r20,16(sp)
10101de8:	dcc00317 	ldw	r19,12(sp)
10101dec:	dc800217 	ldw	r18,8(sp)
10101df0:	dc400117 	ldw	r17,4(sp)
10101df4:	dc000017 	ldw	r16,0(sp)
10101df8:	dec00a04 	addi	sp,sp,40
10101dfc:	0100e001 	jmpi	10100e00 <_malloc_r>
10101e00:	a8c00017 	ldw	r3,0(r21)
10101e04:	90c00015 	stw	r3,0(r18)
10101e08:	a8c00117 	ldw	r3,4(r21)
10101e0c:	90c00115 	stw	r3,4(r18)
10101e10:	00c006c4 	movi	r3,27
10101e14:	19804536 	bltu	r3,r6,10101f2c <_realloc_r+0x470>
10101e18:	90800204 	addi	r2,r18,8
10101e1c:	a8c00204 	addi	r3,r21,8
10101e20:	003f6306 	br	10101bb0 <__alt_data_end+0xfffe1bb0>
10101e24:	9005883a 	mov	r2,r18
10101e28:	a8c00017 	ldw	r3,0(r21)
10101e2c:	b821883a 	mov	r16,r23
10101e30:	b027883a 	mov	r19,r22
10101e34:	10c00015 	stw	r3,0(r2)
10101e38:	a8c00117 	ldw	r3,4(r21)
10101e3c:	10c00115 	stw	r3,4(r2)
10101e40:	a8c00217 	ldw	r3,8(r21)
10101e44:	10c00215 	stw	r3,8(r2)
10101e48:	003f6a06 	br	10101bf4 <__alt_data_end+0xfffe1bf4>
10101e4c:	9c67883a 	add	r19,r19,r17
10101e50:	4445c83a 	sub	r2,r8,r17
10101e54:	e4c00215 	stw	r19,8(fp)
10101e58:	10800054 	ori	r2,r2,1
10101e5c:	98800115 	stw	r2,4(r19)
10101e60:	a8bfff17 	ldw	r2,-4(r21)
10101e64:	a009883a 	mov	r4,r20
10101e68:	1080004c 	andi	r2,r2,1
10101e6c:	1462b03a 	or	r17,r2,r17
10101e70:	ac7fff15 	stw	r17,-4(r21)
10101e74:	01036180 	call	10103618 <__malloc_unlock>
10101e78:	a805883a 	mov	r2,r21
10101e7c:	003f6b06 	br	10101c2c <__alt_data_end+0xfffe1c2c>
10101e80:	a80b883a 	mov	r5,r21
10101e84:	9009883a 	mov	r4,r18
10101e88:	01018380 	call	10101838 <memmove>
10101e8c:	003f4e06 	br	10101bc8 <__alt_data_end+0xfffe1bc8>
10101e90:	89000404 	addi	r4,r17,16
10101e94:	b93fbc16 	blt	r23,r4,10101d88 <__alt_data_end+0xfffe1d88>
10101e98:	b0800317 	ldw	r2,12(r22)
10101e9c:	b0c00217 	ldw	r3,8(r22)
10101ea0:	81bfff04 	addi	r6,r16,-4
10101ea4:	01000904 	movi	r4,36
10101ea8:	18800315 	stw	r2,12(r3)
10101eac:	10c00215 	stw	r3,8(r2)
10101eb0:	b4800204 	addi	r18,r22,8
10101eb4:	21804336 	bltu	r4,r6,10101fc4 <_realloc_r+0x508>
10101eb8:	008004c4 	movi	r2,19
10101ebc:	11803f2e 	bgeu	r2,r6,10101fbc <_realloc_r+0x500>
10101ec0:	a8800017 	ldw	r2,0(r21)
10101ec4:	b0800215 	stw	r2,8(r22)
10101ec8:	a8800117 	ldw	r2,4(r21)
10101ecc:	b0800315 	stw	r2,12(r22)
10101ed0:	008006c4 	movi	r2,27
10101ed4:	11803f36 	bltu	r2,r6,10101fd4 <_realloc_r+0x518>
10101ed8:	b0800404 	addi	r2,r22,16
10101edc:	ad400204 	addi	r21,r21,8
10101ee0:	a8c00017 	ldw	r3,0(r21)
10101ee4:	10c00015 	stw	r3,0(r2)
10101ee8:	a8c00117 	ldw	r3,4(r21)
10101eec:	10c00115 	stw	r3,4(r2)
10101ef0:	a8c00217 	ldw	r3,8(r21)
10101ef4:	10c00215 	stw	r3,8(r2)
10101ef8:	b447883a 	add	r3,r22,r17
10101efc:	bc45c83a 	sub	r2,r23,r17
10101f00:	e0c00215 	stw	r3,8(fp)
10101f04:	10800054 	ori	r2,r2,1
10101f08:	18800115 	stw	r2,4(r3)
10101f0c:	b0800117 	ldw	r2,4(r22)
10101f10:	a009883a 	mov	r4,r20
10101f14:	1080004c 	andi	r2,r2,1
10101f18:	1462b03a 	or	r17,r2,r17
10101f1c:	b4400115 	stw	r17,4(r22)
10101f20:	01036180 	call	10103618 <__malloc_unlock>
10101f24:	9005883a 	mov	r2,r18
10101f28:	003f4006 	br	10101c2c <__alt_data_end+0xfffe1c2c>
10101f2c:	a8c00217 	ldw	r3,8(r21)
10101f30:	90c00215 	stw	r3,8(r18)
10101f34:	a8c00317 	ldw	r3,12(r21)
10101f38:	90c00315 	stw	r3,12(r18)
10101f3c:	30801126 	beq	r6,r2,10101f84 <_realloc_r+0x4c8>
10101f40:	90800404 	addi	r2,r18,16
10101f44:	a8c00404 	addi	r3,r21,16
10101f48:	003f1906 	br	10101bb0 <__alt_data_end+0xfffe1bb0>
10101f4c:	90ffff17 	ldw	r3,-4(r18)
10101f50:	00bfff04 	movi	r2,-4
10101f54:	a825883a 	mov	r18,r21
10101f58:	1884703a 	and	r2,r3,r2
10101f5c:	80a1883a 	add	r16,r16,r2
10101f60:	003f2406 	br	10101bf4 <__alt_data_end+0xfffe1bf4>
10101f64:	a8800217 	ldw	r2,8(r21)
10101f68:	b0800415 	stw	r2,16(r22)
10101f6c:	a8800317 	ldw	r2,12(r21)
10101f70:	b0800515 	stw	r2,20(r22)
10101f74:	31000a26 	beq	r6,r4,10101fa0 <_realloc_r+0x4e4>
10101f78:	b0800604 	addi	r2,r22,24
10101f7c:	ad400404 	addi	r21,r21,16
10101f80:	003fa906 	br	10101e28 <__alt_data_end+0xfffe1e28>
10101f84:	a9000417 	ldw	r4,16(r21)
10101f88:	90800604 	addi	r2,r18,24
10101f8c:	a8c00604 	addi	r3,r21,24
10101f90:	91000415 	stw	r4,16(r18)
10101f94:	a9000517 	ldw	r4,20(r21)
10101f98:	91000515 	stw	r4,20(r18)
10101f9c:	003f0406 	br	10101bb0 <__alt_data_end+0xfffe1bb0>
10101fa0:	a8c00417 	ldw	r3,16(r21)
10101fa4:	ad400604 	addi	r21,r21,24
10101fa8:	b0800804 	addi	r2,r22,32
10101fac:	b0c00615 	stw	r3,24(r22)
10101fb0:	a8ffff17 	ldw	r3,-4(r21)
10101fb4:	b0c00715 	stw	r3,28(r22)
10101fb8:	003f9b06 	br	10101e28 <__alt_data_end+0xfffe1e28>
10101fbc:	9005883a 	mov	r2,r18
10101fc0:	003fc706 	br	10101ee0 <__alt_data_end+0xfffe1ee0>
10101fc4:	a80b883a 	mov	r5,r21
10101fc8:	9009883a 	mov	r4,r18
10101fcc:	01018380 	call	10101838 <memmove>
10101fd0:	003fc906 	br	10101ef8 <__alt_data_end+0xfffe1ef8>
10101fd4:	a8800217 	ldw	r2,8(r21)
10101fd8:	b0800415 	stw	r2,16(r22)
10101fdc:	a8800317 	ldw	r2,12(r21)
10101fe0:	b0800515 	stw	r2,20(r22)
10101fe4:	31000726 	beq	r6,r4,10102004 <_realloc_r+0x548>
10101fe8:	b0800604 	addi	r2,r22,24
10101fec:	ad400404 	addi	r21,r21,16
10101ff0:	003fbb06 	br	10101ee0 <__alt_data_end+0xfffe1ee0>
10101ff4:	a009883a 	mov	r4,r20
10101ff8:	01036180 	call	10103618 <__malloc_unlock>
10101ffc:	0005883a 	mov	r2,zero
10102000:	003f0a06 	br	10101c2c <__alt_data_end+0xfffe1c2c>
10102004:	a8c00417 	ldw	r3,16(r21)
10102008:	ad400604 	addi	r21,r21,24
1010200c:	b0800804 	addi	r2,r22,32
10102010:	b0c00615 	stw	r3,24(r22)
10102014:	a8ffff17 	ldw	r3,-4(r21)
10102018:	b0c00715 	stw	r3,28(r22)
1010201c:	003fb006 	br	10101ee0 <__alt_data_end+0xfffe1ee0>

10102020 <_sbrk_r>:
10102020:	defffd04 	addi	sp,sp,-12
10102024:	dc000015 	stw	r16,0(sp)
10102028:	04040474 	movhi	r16,4113
1010202c:	dc400115 	stw	r17,4(sp)
10102030:	84231304 	addi	r16,r16,-29620
10102034:	2023883a 	mov	r17,r4
10102038:	2809883a 	mov	r4,r5
1010203c:	dfc00215 	stw	ra,8(sp)
10102040:	80000015 	stw	zero,0(r16)
10102044:	01037d80 	call	101037d8 <sbrk>
10102048:	00ffffc4 	movi	r3,-1
1010204c:	10c00526 	beq	r2,r3,10102064 <_sbrk_r+0x44>
10102050:	dfc00217 	ldw	ra,8(sp)
10102054:	dc400117 	ldw	r17,4(sp)
10102058:	dc000017 	ldw	r16,0(sp)
1010205c:	dec00304 	addi	sp,sp,12
10102060:	f800283a 	ret
10102064:	80c00017 	ldw	r3,0(r16)
10102068:	183ff926 	beq	r3,zero,10102050 <__alt_data_end+0xfffe2050>
1010206c:	88c00015 	stw	r3,0(r17)
10102070:	003ff706 	br	10102050 <__alt_data_end+0xfffe2050>

10102074 <__sread>:
10102074:	defffe04 	addi	sp,sp,-8
10102078:	dc000015 	stw	r16,0(sp)
1010207c:	2821883a 	mov	r16,r5
10102080:	2940038f 	ldh	r5,14(r5)
10102084:	dfc00115 	stw	ra,4(sp)
10102088:	0102db40 	call	10102db4 <_read_r>
1010208c:	10000716 	blt	r2,zero,101020ac <__sread+0x38>
10102090:	80c01417 	ldw	r3,80(r16)
10102094:	1887883a 	add	r3,r3,r2
10102098:	80c01415 	stw	r3,80(r16)
1010209c:	dfc00117 	ldw	ra,4(sp)
101020a0:	dc000017 	ldw	r16,0(sp)
101020a4:	dec00204 	addi	sp,sp,8
101020a8:	f800283a 	ret
101020ac:	80c0030b 	ldhu	r3,12(r16)
101020b0:	18fbffcc 	andi	r3,r3,61439
101020b4:	80c0030d 	sth	r3,12(r16)
101020b8:	dfc00117 	ldw	ra,4(sp)
101020bc:	dc000017 	ldw	r16,0(sp)
101020c0:	dec00204 	addi	sp,sp,8
101020c4:	f800283a 	ret

101020c8 <__seofread>:
101020c8:	0005883a 	mov	r2,zero
101020cc:	f800283a 	ret

101020d0 <__swrite>:
101020d0:	2880030b 	ldhu	r2,12(r5)
101020d4:	defffb04 	addi	sp,sp,-20
101020d8:	dcc00315 	stw	r19,12(sp)
101020dc:	dc800215 	stw	r18,8(sp)
101020e0:	dc400115 	stw	r17,4(sp)
101020e4:	dc000015 	stw	r16,0(sp)
101020e8:	dfc00415 	stw	ra,16(sp)
101020ec:	10c0400c 	andi	r3,r2,256
101020f0:	2821883a 	mov	r16,r5
101020f4:	2023883a 	mov	r17,r4
101020f8:	3025883a 	mov	r18,r6
101020fc:	3827883a 	mov	r19,r7
10102100:	18000526 	beq	r3,zero,10102118 <__swrite+0x48>
10102104:	2940038f 	ldh	r5,14(r5)
10102108:	01c00084 	movi	r7,2
1010210c:	000d883a 	mov	r6,zero
10102110:	0102b980 	call	10102b98 <_lseek_r>
10102114:	8080030b 	ldhu	r2,12(r16)
10102118:	8140038f 	ldh	r5,14(r16)
1010211c:	10bbffcc 	andi	r2,r2,61439
10102120:	980f883a 	mov	r7,r19
10102124:	900d883a 	mov	r6,r18
10102128:	8809883a 	mov	r4,r17
1010212c:	8080030d 	sth	r2,12(r16)
10102130:	dfc00417 	ldw	ra,16(sp)
10102134:	dcc00317 	ldw	r19,12(sp)
10102138:	dc800217 	ldw	r18,8(sp)
1010213c:	dc400117 	ldw	r17,4(sp)
10102140:	dc000017 	ldw	r16,0(sp)
10102144:	dec00504 	addi	sp,sp,20
10102148:	01021b01 	jmpi	101021b0 <_write_r>

1010214c <__sseek>:
1010214c:	defffe04 	addi	sp,sp,-8
10102150:	dc000015 	stw	r16,0(sp)
10102154:	2821883a 	mov	r16,r5
10102158:	2940038f 	ldh	r5,14(r5)
1010215c:	dfc00115 	stw	ra,4(sp)
10102160:	0102b980 	call	10102b98 <_lseek_r>
10102164:	00ffffc4 	movi	r3,-1
10102168:	10c00826 	beq	r2,r3,1010218c <__sseek+0x40>
1010216c:	80c0030b 	ldhu	r3,12(r16)
10102170:	80801415 	stw	r2,80(r16)
10102174:	18c40014 	ori	r3,r3,4096
10102178:	80c0030d 	sth	r3,12(r16)
1010217c:	dfc00117 	ldw	ra,4(sp)
10102180:	dc000017 	ldw	r16,0(sp)
10102184:	dec00204 	addi	sp,sp,8
10102188:	f800283a 	ret
1010218c:	80c0030b 	ldhu	r3,12(r16)
10102190:	18fbffcc 	andi	r3,r3,61439
10102194:	80c0030d 	sth	r3,12(r16)
10102198:	dfc00117 	ldw	ra,4(sp)
1010219c:	dc000017 	ldw	r16,0(sp)
101021a0:	dec00204 	addi	sp,sp,8
101021a4:	f800283a 	ret

101021a8 <__sclose>:
101021a8:	2940038f 	ldh	r5,14(r5)
101021ac:	01023641 	jmpi	10102364 <_close_r>

101021b0 <_write_r>:
101021b0:	defffd04 	addi	sp,sp,-12
101021b4:	2805883a 	mov	r2,r5
101021b8:	dc000015 	stw	r16,0(sp)
101021bc:	04040474 	movhi	r16,4113
101021c0:	dc400115 	stw	r17,4(sp)
101021c4:	300b883a 	mov	r5,r6
101021c8:	84231304 	addi	r16,r16,-29620
101021cc:	2023883a 	mov	r17,r4
101021d0:	380d883a 	mov	r6,r7
101021d4:	1009883a 	mov	r4,r2
101021d8:	dfc00215 	stw	ra,8(sp)
101021dc:	80000015 	stw	zero,0(r16)
101021e0:	01038c40 	call	101038c4 <write>
101021e4:	00ffffc4 	movi	r3,-1
101021e8:	10c00526 	beq	r2,r3,10102200 <_write_r+0x50>
101021ec:	dfc00217 	ldw	ra,8(sp)
101021f0:	dc400117 	ldw	r17,4(sp)
101021f4:	dc000017 	ldw	r16,0(sp)
101021f8:	dec00304 	addi	sp,sp,12
101021fc:	f800283a 	ret
10102200:	80c00017 	ldw	r3,0(r16)
10102204:	183ff926 	beq	r3,zero,101021ec <__alt_data_end+0xfffe21ec>
10102208:	88c00015 	stw	r3,0(r17)
1010220c:	003ff706 	br	101021ec <__alt_data_end+0xfffe21ec>

10102210 <__swsetup_r>:
10102210:	00840434 	movhi	r2,4112
10102214:	defffd04 	addi	sp,sp,-12
10102218:	109c6804 	addi	r2,r2,29088
1010221c:	dc400115 	stw	r17,4(sp)
10102220:	2023883a 	mov	r17,r4
10102224:	11000017 	ldw	r4,0(r2)
10102228:	dc000015 	stw	r16,0(sp)
1010222c:	dfc00215 	stw	ra,8(sp)
10102230:	2821883a 	mov	r16,r5
10102234:	20000226 	beq	r4,zero,10102240 <__swsetup_r+0x30>
10102238:	20800e17 	ldw	r2,56(r4)
1010223c:	10003126 	beq	r2,zero,10102304 <__swsetup_r+0xf4>
10102240:	8080030b 	ldhu	r2,12(r16)
10102244:	10c0020c 	andi	r3,r2,8
10102248:	1009883a 	mov	r4,r2
1010224c:	18000f26 	beq	r3,zero,1010228c <__swsetup_r+0x7c>
10102250:	80c00417 	ldw	r3,16(r16)
10102254:	18001526 	beq	r3,zero,101022ac <__swsetup_r+0x9c>
10102258:	1100004c 	andi	r4,r2,1
1010225c:	20001c1e 	bne	r4,zero,101022d0 <__swsetup_r+0xc0>
10102260:	1080008c 	andi	r2,r2,2
10102264:	1000291e 	bne	r2,zero,1010230c <__swsetup_r+0xfc>
10102268:	80800517 	ldw	r2,20(r16)
1010226c:	80800215 	stw	r2,8(r16)
10102270:	18001c26 	beq	r3,zero,101022e4 <__swsetup_r+0xd4>
10102274:	0005883a 	mov	r2,zero
10102278:	dfc00217 	ldw	ra,8(sp)
1010227c:	dc400117 	ldw	r17,4(sp)
10102280:	dc000017 	ldw	r16,0(sp)
10102284:	dec00304 	addi	sp,sp,12
10102288:	f800283a 	ret
1010228c:	2080040c 	andi	r2,r4,16
10102290:	10002e26 	beq	r2,zero,1010234c <__swsetup_r+0x13c>
10102294:	2080010c 	andi	r2,r4,4
10102298:	10001e1e 	bne	r2,zero,10102314 <__swsetup_r+0x104>
1010229c:	80c00417 	ldw	r3,16(r16)
101022a0:	20800214 	ori	r2,r4,8
101022a4:	8080030d 	sth	r2,12(r16)
101022a8:	183feb1e 	bne	r3,zero,10102258 <__alt_data_end+0xfffe2258>
101022ac:	1100a00c 	andi	r4,r2,640
101022b0:	01408004 	movi	r5,512
101022b4:	217fe826 	beq	r4,r5,10102258 <__alt_data_end+0xfffe2258>
101022b8:	800b883a 	mov	r5,r16
101022bc:	8809883a 	mov	r4,r17
101022c0:	0102bf80 	call	10102bf8 <__smakebuf_r>
101022c4:	8080030b 	ldhu	r2,12(r16)
101022c8:	80c00417 	ldw	r3,16(r16)
101022cc:	003fe206 	br	10102258 <__alt_data_end+0xfffe2258>
101022d0:	80800517 	ldw	r2,20(r16)
101022d4:	80000215 	stw	zero,8(r16)
101022d8:	0085c83a 	sub	r2,zero,r2
101022dc:	80800615 	stw	r2,24(r16)
101022e0:	183fe41e 	bne	r3,zero,10102274 <__alt_data_end+0xfffe2274>
101022e4:	80c0030b 	ldhu	r3,12(r16)
101022e8:	0005883a 	mov	r2,zero
101022ec:	1900200c 	andi	r4,r3,128
101022f0:	203fe126 	beq	r4,zero,10102278 <__alt_data_end+0xfffe2278>
101022f4:	18c01014 	ori	r3,r3,64
101022f8:	80c0030d 	sth	r3,12(r16)
101022fc:	00bfffc4 	movi	r2,-1
10102300:	003fdd06 	br	10102278 <__alt_data_end+0xfffe2278>
10102304:	010076c0 	call	1010076c <__sinit>
10102308:	003fcd06 	br	10102240 <__alt_data_end+0xfffe2240>
1010230c:	0005883a 	mov	r2,zero
10102310:	003fd606 	br	1010226c <__alt_data_end+0xfffe226c>
10102314:	81400c17 	ldw	r5,48(r16)
10102318:	28000626 	beq	r5,zero,10102334 <__swsetup_r+0x124>
1010231c:	80801004 	addi	r2,r16,64
10102320:	28800326 	beq	r5,r2,10102330 <__swsetup_r+0x120>
10102324:	8809883a 	mov	r4,r17
10102328:	01028880 	call	10102888 <_free_r>
1010232c:	8100030b 	ldhu	r4,12(r16)
10102330:	80000c15 	stw	zero,48(r16)
10102334:	80c00417 	ldw	r3,16(r16)
10102338:	00bff6c4 	movi	r2,-37
1010233c:	1108703a 	and	r4,r2,r4
10102340:	80000115 	stw	zero,4(r16)
10102344:	80c00015 	stw	r3,0(r16)
10102348:	003fd506 	br	101022a0 <__alt_data_end+0xfffe22a0>
1010234c:	00800244 	movi	r2,9
10102350:	88800015 	stw	r2,0(r17)
10102354:	20801014 	ori	r2,r4,64
10102358:	8080030d 	sth	r2,12(r16)
1010235c:	00bfffc4 	movi	r2,-1
10102360:	003fc506 	br	10102278 <__alt_data_end+0xfffe2278>

10102364 <_close_r>:
10102364:	defffd04 	addi	sp,sp,-12
10102368:	dc000015 	stw	r16,0(sp)
1010236c:	04040474 	movhi	r16,4113
10102370:	dc400115 	stw	r17,4(sp)
10102374:	84231304 	addi	r16,r16,-29620
10102378:	2023883a 	mov	r17,r4
1010237c:	2809883a 	mov	r4,r5
10102380:	dfc00215 	stw	ra,8(sp)
10102384:	80000015 	stw	zero,0(r16)
10102388:	01030b40 	call	101030b4 <close>
1010238c:	00ffffc4 	movi	r3,-1
10102390:	10c00526 	beq	r2,r3,101023a8 <_close_r+0x44>
10102394:	dfc00217 	ldw	ra,8(sp)
10102398:	dc400117 	ldw	r17,4(sp)
1010239c:	dc000017 	ldw	r16,0(sp)
101023a0:	dec00304 	addi	sp,sp,12
101023a4:	f800283a 	ret
101023a8:	80c00017 	ldw	r3,0(r16)
101023ac:	183ff926 	beq	r3,zero,10102394 <__alt_data_end+0xfffe2394>
101023b0:	88c00015 	stw	r3,0(r17)
101023b4:	003ff706 	br	10102394 <__alt_data_end+0xfffe2394>

101023b8 <_fclose_r>:
101023b8:	28003926 	beq	r5,zero,101024a0 <_fclose_r+0xe8>
101023bc:	defffc04 	addi	sp,sp,-16
101023c0:	dc400115 	stw	r17,4(sp)
101023c4:	dc000015 	stw	r16,0(sp)
101023c8:	dfc00315 	stw	ra,12(sp)
101023cc:	dc800215 	stw	r18,8(sp)
101023d0:	2023883a 	mov	r17,r4
101023d4:	2821883a 	mov	r16,r5
101023d8:	20000226 	beq	r4,zero,101023e4 <_fclose_r+0x2c>
101023dc:	20800e17 	ldw	r2,56(r4)
101023e0:	10002726 	beq	r2,zero,10102480 <_fclose_r+0xc8>
101023e4:	8080030f 	ldh	r2,12(r16)
101023e8:	1000071e 	bne	r2,zero,10102408 <_fclose_r+0x50>
101023ec:	0005883a 	mov	r2,zero
101023f0:	dfc00317 	ldw	ra,12(sp)
101023f4:	dc800217 	ldw	r18,8(sp)
101023f8:	dc400117 	ldw	r17,4(sp)
101023fc:	dc000017 	ldw	r16,0(sp)
10102400:	dec00404 	addi	sp,sp,16
10102404:	f800283a 	ret
10102408:	800b883a 	mov	r5,r16
1010240c:	8809883a 	mov	r4,r17
10102410:	01024bc0 	call	101024bc <__sflush_r>
10102414:	1025883a 	mov	r18,r2
10102418:	80800b17 	ldw	r2,44(r16)
1010241c:	10000426 	beq	r2,zero,10102430 <_fclose_r+0x78>
10102420:	81400717 	ldw	r5,28(r16)
10102424:	8809883a 	mov	r4,r17
10102428:	103ee83a 	callr	r2
1010242c:	10001616 	blt	r2,zero,10102488 <_fclose_r+0xd0>
10102430:	8080030b 	ldhu	r2,12(r16)
10102434:	1080200c 	andi	r2,r2,128
10102438:	1000151e 	bne	r2,zero,10102490 <_fclose_r+0xd8>
1010243c:	81400c17 	ldw	r5,48(r16)
10102440:	28000526 	beq	r5,zero,10102458 <_fclose_r+0xa0>
10102444:	80801004 	addi	r2,r16,64
10102448:	28800226 	beq	r5,r2,10102454 <_fclose_r+0x9c>
1010244c:	8809883a 	mov	r4,r17
10102450:	01028880 	call	10102888 <_free_r>
10102454:	80000c15 	stw	zero,48(r16)
10102458:	81401117 	ldw	r5,68(r16)
1010245c:	28000326 	beq	r5,zero,1010246c <_fclose_r+0xb4>
10102460:	8809883a 	mov	r4,r17
10102464:	01028880 	call	10102888 <_free_r>
10102468:	80001115 	stw	zero,68(r16)
1010246c:	010077c0 	call	1010077c <__sfp_lock_acquire>
10102470:	8000030d 	sth	zero,12(r16)
10102474:	01007800 	call	10100780 <__sfp_lock_release>
10102478:	9005883a 	mov	r2,r18
1010247c:	003fdc06 	br	101023f0 <__alt_data_end+0xfffe23f0>
10102480:	010076c0 	call	1010076c <__sinit>
10102484:	003fd706 	br	101023e4 <__alt_data_end+0xfffe23e4>
10102488:	04bfffc4 	movi	r18,-1
1010248c:	003fe806 	br	10102430 <__alt_data_end+0xfffe2430>
10102490:	81400417 	ldw	r5,16(r16)
10102494:	8809883a 	mov	r4,r17
10102498:	01028880 	call	10102888 <_free_r>
1010249c:	003fe706 	br	1010243c <__alt_data_end+0xfffe243c>
101024a0:	0005883a 	mov	r2,zero
101024a4:	f800283a 	ret

101024a8 <fclose>:
101024a8:	00840434 	movhi	r2,4112
101024ac:	109c6804 	addi	r2,r2,29088
101024b0:	200b883a 	mov	r5,r4
101024b4:	11000017 	ldw	r4,0(r2)
101024b8:	01023b81 	jmpi	101023b8 <_fclose_r>

101024bc <__sflush_r>:
101024bc:	2880030b 	ldhu	r2,12(r5)
101024c0:	defffb04 	addi	sp,sp,-20
101024c4:	dcc00315 	stw	r19,12(sp)
101024c8:	dc400115 	stw	r17,4(sp)
101024cc:	dfc00415 	stw	ra,16(sp)
101024d0:	dc800215 	stw	r18,8(sp)
101024d4:	dc000015 	stw	r16,0(sp)
101024d8:	10c0020c 	andi	r3,r2,8
101024dc:	2823883a 	mov	r17,r5
101024e0:	2027883a 	mov	r19,r4
101024e4:	1800311e 	bne	r3,zero,101025ac <__sflush_r+0xf0>
101024e8:	28c00117 	ldw	r3,4(r5)
101024ec:	10820014 	ori	r2,r2,2048
101024f0:	2880030d 	sth	r2,12(r5)
101024f4:	00c04b0e 	bge	zero,r3,10102624 <__sflush_r+0x168>
101024f8:	8a000a17 	ldw	r8,40(r17)
101024fc:	40002326 	beq	r8,zero,1010258c <__sflush_r+0xd0>
10102500:	9c000017 	ldw	r16,0(r19)
10102504:	10c4000c 	andi	r3,r2,4096
10102508:	98000015 	stw	zero,0(r19)
1010250c:	18004826 	beq	r3,zero,10102630 <__sflush_r+0x174>
10102510:	89801417 	ldw	r6,80(r17)
10102514:	10c0010c 	andi	r3,r2,4
10102518:	18000626 	beq	r3,zero,10102534 <__sflush_r+0x78>
1010251c:	88c00117 	ldw	r3,4(r17)
10102520:	88800c17 	ldw	r2,48(r17)
10102524:	30cdc83a 	sub	r6,r6,r3
10102528:	10000226 	beq	r2,zero,10102534 <__sflush_r+0x78>
1010252c:	88800f17 	ldw	r2,60(r17)
10102530:	308dc83a 	sub	r6,r6,r2
10102534:	89400717 	ldw	r5,28(r17)
10102538:	000f883a 	mov	r7,zero
1010253c:	9809883a 	mov	r4,r19
10102540:	403ee83a 	callr	r8
10102544:	00ffffc4 	movi	r3,-1
10102548:	10c04426 	beq	r2,r3,1010265c <__sflush_r+0x1a0>
1010254c:	88c0030b 	ldhu	r3,12(r17)
10102550:	89000417 	ldw	r4,16(r17)
10102554:	88000115 	stw	zero,4(r17)
10102558:	197dffcc 	andi	r5,r3,63487
1010255c:	8940030d 	sth	r5,12(r17)
10102560:	89000015 	stw	r4,0(r17)
10102564:	18c4000c 	andi	r3,r3,4096
10102568:	18002c1e 	bne	r3,zero,1010261c <__sflush_r+0x160>
1010256c:	89400c17 	ldw	r5,48(r17)
10102570:	9c000015 	stw	r16,0(r19)
10102574:	28000526 	beq	r5,zero,1010258c <__sflush_r+0xd0>
10102578:	88801004 	addi	r2,r17,64
1010257c:	28800226 	beq	r5,r2,10102588 <__sflush_r+0xcc>
10102580:	9809883a 	mov	r4,r19
10102584:	01028880 	call	10102888 <_free_r>
10102588:	88000c15 	stw	zero,48(r17)
1010258c:	0005883a 	mov	r2,zero
10102590:	dfc00417 	ldw	ra,16(sp)
10102594:	dcc00317 	ldw	r19,12(sp)
10102598:	dc800217 	ldw	r18,8(sp)
1010259c:	dc400117 	ldw	r17,4(sp)
101025a0:	dc000017 	ldw	r16,0(sp)
101025a4:	dec00504 	addi	sp,sp,20
101025a8:	f800283a 	ret
101025ac:	2c800417 	ldw	r18,16(r5)
101025b0:	903ff626 	beq	r18,zero,1010258c <__alt_data_end+0xfffe258c>
101025b4:	2c000017 	ldw	r16,0(r5)
101025b8:	108000cc 	andi	r2,r2,3
101025bc:	2c800015 	stw	r18,0(r5)
101025c0:	84a1c83a 	sub	r16,r16,r18
101025c4:	1000131e 	bne	r2,zero,10102614 <__sflush_r+0x158>
101025c8:	28800517 	ldw	r2,20(r5)
101025cc:	88800215 	stw	r2,8(r17)
101025d0:	04000316 	blt	zero,r16,101025e0 <__sflush_r+0x124>
101025d4:	003fed06 	br	1010258c <__alt_data_end+0xfffe258c>
101025d8:	90a5883a 	add	r18,r18,r2
101025dc:	043feb0e 	bge	zero,r16,1010258c <__alt_data_end+0xfffe258c>
101025e0:	88800917 	ldw	r2,36(r17)
101025e4:	89400717 	ldw	r5,28(r17)
101025e8:	800f883a 	mov	r7,r16
101025ec:	900d883a 	mov	r6,r18
101025f0:	9809883a 	mov	r4,r19
101025f4:	103ee83a 	callr	r2
101025f8:	80a1c83a 	sub	r16,r16,r2
101025fc:	00bff616 	blt	zero,r2,101025d8 <__alt_data_end+0xfffe25d8>
10102600:	88c0030b 	ldhu	r3,12(r17)
10102604:	00bfffc4 	movi	r2,-1
10102608:	18c01014 	ori	r3,r3,64
1010260c:	88c0030d 	sth	r3,12(r17)
10102610:	003fdf06 	br	10102590 <__alt_data_end+0xfffe2590>
10102614:	0005883a 	mov	r2,zero
10102618:	003fec06 	br	101025cc <__alt_data_end+0xfffe25cc>
1010261c:	88801415 	stw	r2,80(r17)
10102620:	003fd206 	br	1010256c <__alt_data_end+0xfffe256c>
10102624:	28c00f17 	ldw	r3,60(r5)
10102628:	00ffb316 	blt	zero,r3,101024f8 <__alt_data_end+0xfffe24f8>
1010262c:	003fd706 	br	1010258c <__alt_data_end+0xfffe258c>
10102630:	89400717 	ldw	r5,28(r17)
10102634:	000d883a 	mov	r6,zero
10102638:	01c00044 	movi	r7,1
1010263c:	9809883a 	mov	r4,r19
10102640:	403ee83a 	callr	r8
10102644:	100d883a 	mov	r6,r2
10102648:	00bfffc4 	movi	r2,-1
1010264c:	30801426 	beq	r6,r2,101026a0 <__sflush_r+0x1e4>
10102650:	8880030b 	ldhu	r2,12(r17)
10102654:	8a000a17 	ldw	r8,40(r17)
10102658:	003fae06 	br	10102514 <__alt_data_end+0xfffe2514>
1010265c:	98c00017 	ldw	r3,0(r19)
10102660:	183fba26 	beq	r3,zero,1010254c <__alt_data_end+0xfffe254c>
10102664:	01000744 	movi	r4,29
10102668:	19000626 	beq	r3,r4,10102684 <__sflush_r+0x1c8>
1010266c:	01000584 	movi	r4,22
10102670:	19000426 	beq	r3,r4,10102684 <__sflush_r+0x1c8>
10102674:	88c0030b 	ldhu	r3,12(r17)
10102678:	18c01014 	ori	r3,r3,64
1010267c:	88c0030d 	sth	r3,12(r17)
10102680:	003fc306 	br	10102590 <__alt_data_end+0xfffe2590>
10102684:	8880030b 	ldhu	r2,12(r17)
10102688:	88c00417 	ldw	r3,16(r17)
1010268c:	88000115 	stw	zero,4(r17)
10102690:	10bdffcc 	andi	r2,r2,63487
10102694:	8880030d 	sth	r2,12(r17)
10102698:	88c00015 	stw	r3,0(r17)
1010269c:	003fb306 	br	1010256c <__alt_data_end+0xfffe256c>
101026a0:	98800017 	ldw	r2,0(r19)
101026a4:	103fea26 	beq	r2,zero,10102650 <__alt_data_end+0xfffe2650>
101026a8:	00c00744 	movi	r3,29
101026ac:	10c00226 	beq	r2,r3,101026b8 <__sflush_r+0x1fc>
101026b0:	00c00584 	movi	r3,22
101026b4:	10c0031e 	bne	r2,r3,101026c4 <__sflush_r+0x208>
101026b8:	9c000015 	stw	r16,0(r19)
101026bc:	0005883a 	mov	r2,zero
101026c0:	003fb306 	br	10102590 <__alt_data_end+0xfffe2590>
101026c4:	88c0030b 	ldhu	r3,12(r17)
101026c8:	3005883a 	mov	r2,r6
101026cc:	18c01014 	ori	r3,r3,64
101026d0:	88c0030d 	sth	r3,12(r17)
101026d4:	003fae06 	br	10102590 <__alt_data_end+0xfffe2590>

101026d8 <_fflush_r>:
101026d8:	defffd04 	addi	sp,sp,-12
101026dc:	dc000115 	stw	r16,4(sp)
101026e0:	dfc00215 	stw	ra,8(sp)
101026e4:	2021883a 	mov	r16,r4
101026e8:	20000226 	beq	r4,zero,101026f4 <_fflush_r+0x1c>
101026ec:	20800e17 	ldw	r2,56(r4)
101026f0:	10000c26 	beq	r2,zero,10102724 <_fflush_r+0x4c>
101026f4:	2880030f 	ldh	r2,12(r5)
101026f8:	1000051e 	bne	r2,zero,10102710 <_fflush_r+0x38>
101026fc:	0005883a 	mov	r2,zero
10102700:	dfc00217 	ldw	ra,8(sp)
10102704:	dc000117 	ldw	r16,4(sp)
10102708:	dec00304 	addi	sp,sp,12
1010270c:	f800283a 	ret
10102710:	8009883a 	mov	r4,r16
10102714:	dfc00217 	ldw	ra,8(sp)
10102718:	dc000117 	ldw	r16,4(sp)
1010271c:	dec00304 	addi	sp,sp,12
10102720:	01024bc1 	jmpi	101024bc <__sflush_r>
10102724:	d9400015 	stw	r5,0(sp)
10102728:	010076c0 	call	1010076c <__sinit>
1010272c:	d9400017 	ldw	r5,0(sp)
10102730:	003ff006 	br	101026f4 <__alt_data_end+0xfffe26f4>

10102734 <fflush>:
10102734:	20000526 	beq	r4,zero,1010274c <fflush+0x18>
10102738:	00840434 	movhi	r2,4112
1010273c:	109c6804 	addi	r2,r2,29088
10102740:	200b883a 	mov	r5,r4
10102744:	11000017 	ldw	r4,0(r2)
10102748:	01026d81 	jmpi	101026d8 <_fflush_r>
1010274c:	00840434 	movhi	r2,4112
10102750:	109c6704 	addi	r2,r2,29084
10102754:	11000017 	ldw	r4,0(r2)
10102758:	01440434 	movhi	r5,4112
1010275c:	2949b604 	addi	r5,r5,9944
10102760:	0100d3c1 	jmpi	10100d3c <_fwalk_reent>

10102764 <_malloc_trim_r>:
10102764:	defffb04 	addi	sp,sp,-20
10102768:	dcc00315 	stw	r19,12(sp)
1010276c:	04c40434 	movhi	r19,4112
10102770:	dc800215 	stw	r18,8(sp)
10102774:	dc400115 	stw	r17,4(sp)
10102778:	dc000015 	stw	r16,0(sp)
1010277c:	dfc00415 	stw	ra,16(sp)
10102780:	2821883a 	mov	r16,r5
10102784:	9cd6e304 	addi	r19,r19,23436
10102788:	2025883a 	mov	r18,r4
1010278c:	01035f40 	call	101035f4 <__malloc_lock>
10102790:	98800217 	ldw	r2,8(r19)
10102794:	14400117 	ldw	r17,4(r2)
10102798:	00bfff04 	movi	r2,-4
1010279c:	88a2703a 	and	r17,r17,r2
101027a0:	8c21c83a 	sub	r16,r17,r16
101027a4:	8403fbc4 	addi	r16,r16,4079
101027a8:	8020d33a 	srli	r16,r16,12
101027ac:	0083ffc4 	movi	r2,4095
101027b0:	843fffc4 	addi	r16,r16,-1
101027b4:	8020933a 	slli	r16,r16,12
101027b8:	1400060e 	bge	r2,r16,101027d4 <_malloc_trim_r+0x70>
101027bc:	000b883a 	mov	r5,zero
101027c0:	9009883a 	mov	r4,r18
101027c4:	01020200 	call	10102020 <_sbrk_r>
101027c8:	98c00217 	ldw	r3,8(r19)
101027cc:	1c47883a 	add	r3,r3,r17
101027d0:	10c00a26 	beq	r2,r3,101027fc <_malloc_trim_r+0x98>
101027d4:	9009883a 	mov	r4,r18
101027d8:	01036180 	call	10103618 <__malloc_unlock>
101027dc:	0005883a 	mov	r2,zero
101027e0:	dfc00417 	ldw	ra,16(sp)
101027e4:	dcc00317 	ldw	r19,12(sp)
101027e8:	dc800217 	ldw	r18,8(sp)
101027ec:	dc400117 	ldw	r17,4(sp)
101027f0:	dc000017 	ldw	r16,0(sp)
101027f4:	dec00504 	addi	sp,sp,20
101027f8:	f800283a 	ret
101027fc:	040bc83a 	sub	r5,zero,r16
10102800:	9009883a 	mov	r4,r18
10102804:	01020200 	call	10102020 <_sbrk_r>
10102808:	00ffffc4 	movi	r3,-1
1010280c:	10c00d26 	beq	r2,r3,10102844 <_malloc_trim_r+0xe0>
10102810:	00c40474 	movhi	r3,4113
10102814:	18e31b04 	addi	r3,r3,-29588
10102818:	18800017 	ldw	r2,0(r3)
1010281c:	99000217 	ldw	r4,8(r19)
10102820:	8c23c83a 	sub	r17,r17,r16
10102824:	8c400054 	ori	r17,r17,1
10102828:	1421c83a 	sub	r16,r2,r16
1010282c:	24400115 	stw	r17,4(r4)
10102830:	9009883a 	mov	r4,r18
10102834:	1c000015 	stw	r16,0(r3)
10102838:	01036180 	call	10103618 <__malloc_unlock>
1010283c:	00800044 	movi	r2,1
10102840:	003fe706 	br	101027e0 <__alt_data_end+0xfffe27e0>
10102844:	000b883a 	mov	r5,zero
10102848:	9009883a 	mov	r4,r18
1010284c:	01020200 	call	10102020 <_sbrk_r>
10102850:	99000217 	ldw	r4,8(r19)
10102854:	014003c4 	movi	r5,15
10102858:	1107c83a 	sub	r3,r2,r4
1010285c:	28ffdd0e 	bge	r5,r3,101027d4 <__alt_data_end+0xfffe27d4>
10102860:	01440434 	movhi	r5,4112
10102864:	295c6904 	addi	r5,r5,29092
10102868:	29400017 	ldw	r5,0(r5)
1010286c:	18c00054 	ori	r3,r3,1
10102870:	20c00115 	stw	r3,4(r4)
10102874:	00c40474 	movhi	r3,4113
10102878:	1145c83a 	sub	r2,r2,r5
1010287c:	18e31b04 	addi	r3,r3,-29588
10102880:	18800015 	stw	r2,0(r3)
10102884:	003fd306 	br	101027d4 <__alt_data_end+0xfffe27d4>

10102888 <_free_r>:
10102888:	28004126 	beq	r5,zero,10102990 <_free_r+0x108>
1010288c:	defffd04 	addi	sp,sp,-12
10102890:	dc400115 	stw	r17,4(sp)
10102894:	dc000015 	stw	r16,0(sp)
10102898:	2023883a 	mov	r17,r4
1010289c:	2821883a 	mov	r16,r5
101028a0:	dfc00215 	stw	ra,8(sp)
101028a4:	01035f40 	call	101035f4 <__malloc_lock>
101028a8:	81ffff17 	ldw	r7,-4(r16)
101028ac:	00bfff84 	movi	r2,-2
101028b0:	01040434 	movhi	r4,4112
101028b4:	81bffe04 	addi	r6,r16,-8
101028b8:	3884703a 	and	r2,r7,r2
101028bc:	2116e304 	addi	r4,r4,23436
101028c0:	308b883a 	add	r5,r6,r2
101028c4:	2a400117 	ldw	r9,4(r5)
101028c8:	22000217 	ldw	r8,8(r4)
101028cc:	00ffff04 	movi	r3,-4
101028d0:	48c6703a 	and	r3,r9,r3
101028d4:	2a005726 	beq	r5,r8,10102a34 <_free_r+0x1ac>
101028d8:	28c00115 	stw	r3,4(r5)
101028dc:	39c0004c 	andi	r7,r7,1
101028e0:	3800091e 	bne	r7,zero,10102908 <_free_r+0x80>
101028e4:	823ffe17 	ldw	r8,-8(r16)
101028e8:	22400204 	addi	r9,r4,8
101028ec:	320dc83a 	sub	r6,r6,r8
101028f0:	31c00217 	ldw	r7,8(r6)
101028f4:	1205883a 	add	r2,r2,r8
101028f8:	3a406526 	beq	r7,r9,10102a90 <_free_r+0x208>
101028fc:	32000317 	ldw	r8,12(r6)
10102900:	3a000315 	stw	r8,12(r7)
10102904:	41c00215 	stw	r7,8(r8)
10102908:	28cf883a 	add	r7,r5,r3
1010290c:	39c00117 	ldw	r7,4(r7)
10102910:	39c0004c 	andi	r7,r7,1
10102914:	38003a26 	beq	r7,zero,10102a00 <_free_r+0x178>
10102918:	10c00054 	ori	r3,r2,1
1010291c:	30c00115 	stw	r3,4(r6)
10102920:	3087883a 	add	r3,r6,r2
10102924:	18800015 	stw	r2,0(r3)
10102928:	00c07fc4 	movi	r3,511
1010292c:	18801936 	bltu	r3,r2,10102994 <_free_r+0x10c>
10102930:	1004d0fa 	srli	r2,r2,3
10102934:	01c00044 	movi	r7,1
10102938:	21400117 	ldw	r5,4(r4)
1010293c:	10c00044 	addi	r3,r2,1
10102940:	18c7883a 	add	r3,r3,r3
10102944:	1005d0ba 	srai	r2,r2,2
10102948:	18c7883a 	add	r3,r3,r3
1010294c:	18c7883a 	add	r3,r3,r3
10102950:	1907883a 	add	r3,r3,r4
10102954:	3884983a 	sll	r2,r7,r2
10102958:	19c00017 	ldw	r7,0(r3)
1010295c:	1a3ffe04 	addi	r8,r3,-8
10102960:	1144b03a 	or	r2,r2,r5
10102964:	32000315 	stw	r8,12(r6)
10102968:	31c00215 	stw	r7,8(r6)
1010296c:	20800115 	stw	r2,4(r4)
10102970:	19800015 	stw	r6,0(r3)
10102974:	39800315 	stw	r6,12(r7)
10102978:	8809883a 	mov	r4,r17
1010297c:	dfc00217 	ldw	ra,8(sp)
10102980:	dc400117 	ldw	r17,4(sp)
10102984:	dc000017 	ldw	r16,0(sp)
10102988:	dec00304 	addi	sp,sp,12
1010298c:	01036181 	jmpi	10103618 <__malloc_unlock>
10102990:	f800283a 	ret
10102994:	100ad27a 	srli	r5,r2,9
10102998:	00c00104 	movi	r3,4
1010299c:	19404a36 	bltu	r3,r5,10102ac8 <_free_r+0x240>
101029a0:	100ad1ba 	srli	r5,r2,6
101029a4:	28c00e44 	addi	r3,r5,57
101029a8:	18c7883a 	add	r3,r3,r3
101029ac:	29400e04 	addi	r5,r5,56
101029b0:	18c7883a 	add	r3,r3,r3
101029b4:	18c7883a 	add	r3,r3,r3
101029b8:	1909883a 	add	r4,r3,r4
101029bc:	20c00017 	ldw	r3,0(r4)
101029c0:	01c40434 	movhi	r7,4112
101029c4:	213ffe04 	addi	r4,r4,-8
101029c8:	39d6e304 	addi	r7,r7,23436
101029cc:	20c04426 	beq	r4,r3,10102ae0 <_free_r+0x258>
101029d0:	01ffff04 	movi	r7,-4
101029d4:	19400117 	ldw	r5,4(r3)
101029d8:	29ca703a 	and	r5,r5,r7
101029dc:	1140022e 	bgeu	r2,r5,101029e8 <_free_r+0x160>
101029e0:	18c00217 	ldw	r3,8(r3)
101029e4:	20fffb1e 	bne	r4,r3,101029d4 <__alt_data_end+0xfffe29d4>
101029e8:	19000317 	ldw	r4,12(r3)
101029ec:	31000315 	stw	r4,12(r6)
101029f0:	30c00215 	stw	r3,8(r6)
101029f4:	21800215 	stw	r6,8(r4)
101029f8:	19800315 	stw	r6,12(r3)
101029fc:	003fde06 	br	10102978 <__alt_data_end+0xfffe2978>
10102a00:	29c00217 	ldw	r7,8(r5)
10102a04:	10c5883a 	add	r2,r2,r3
10102a08:	00c40434 	movhi	r3,4112
10102a0c:	18d6e504 	addi	r3,r3,23444
10102a10:	38c03b26 	beq	r7,r3,10102b00 <_free_r+0x278>
10102a14:	2a000317 	ldw	r8,12(r5)
10102a18:	11400054 	ori	r5,r2,1
10102a1c:	3087883a 	add	r3,r6,r2
10102a20:	3a000315 	stw	r8,12(r7)
10102a24:	41c00215 	stw	r7,8(r8)
10102a28:	31400115 	stw	r5,4(r6)
10102a2c:	18800015 	stw	r2,0(r3)
10102a30:	003fbd06 	br	10102928 <__alt_data_end+0xfffe2928>
10102a34:	39c0004c 	andi	r7,r7,1
10102a38:	10c5883a 	add	r2,r2,r3
10102a3c:	3800071e 	bne	r7,zero,10102a5c <_free_r+0x1d4>
10102a40:	81fffe17 	ldw	r7,-8(r16)
10102a44:	31cdc83a 	sub	r6,r6,r7
10102a48:	30c00317 	ldw	r3,12(r6)
10102a4c:	31400217 	ldw	r5,8(r6)
10102a50:	11c5883a 	add	r2,r2,r7
10102a54:	28c00315 	stw	r3,12(r5)
10102a58:	19400215 	stw	r5,8(r3)
10102a5c:	10c00054 	ori	r3,r2,1
10102a60:	30c00115 	stw	r3,4(r6)
10102a64:	00c40434 	movhi	r3,4112
10102a68:	18dc6a04 	addi	r3,r3,29096
10102a6c:	18c00017 	ldw	r3,0(r3)
10102a70:	21800215 	stw	r6,8(r4)
10102a74:	10ffc036 	bltu	r2,r3,10102978 <__alt_data_end+0xfffe2978>
10102a78:	00840474 	movhi	r2,4113
10102a7c:	10a31204 	addi	r2,r2,-29624
10102a80:	11400017 	ldw	r5,0(r2)
10102a84:	8809883a 	mov	r4,r17
10102a88:	01027640 	call	10102764 <_malloc_trim_r>
10102a8c:	003fba06 	br	10102978 <__alt_data_end+0xfffe2978>
10102a90:	28c9883a 	add	r4,r5,r3
10102a94:	21000117 	ldw	r4,4(r4)
10102a98:	2100004c 	andi	r4,r4,1
10102a9c:	2000391e 	bne	r4,zero,10102b84 <_free_r+0x2fc>
10102aa0:	29c00217 	ldw	r7,8(r5)
10102aa4:	29000317 	ldw	r4,12(r5)
10102aa8:	1885883a 	add	r2,r3,r2
10102aac:	10c00054 	ori	r3,r2,1
10102ab0:	39000315 	stw	r4,12(r7)
10102ab4:	21c00215 	stw	r7,8(r4)
10102ab8:	30c00115 	stw	r3,4(r6)
10102abc:	308d883a 	add	r6,r6,r2
10102ac0:	30800015 	stw	r2,0(r6)
10102ac4:	003fac06 	br	10102978 <__alt_data_end+0xfffe2978>
10102ac8:	00c00504 	movi	r3,20
10102acc:	19401536 	bltu	r3,r5,10102b24 <_free_r+0x29c>
10102ad0:	28c01704 	addi	r3,r5,92
10102ad4:	18c7883a 	add	r3,r3,r3
10102ad8:	294016c4 	addi	r5,r5,91
10102adc:	003fb406 	br	101029b0 <__alt_data_end+0xfffe29b0>
10102ae0:	280bd0ba 	srai	r5,r5,2
10102ae4:	00c00044 	movi	r3,1
10102ae8:	38800117 	ldw	r2,4(r7)
10102aec:	194a983a 	sll	r5,r3,r5
10102af0:	2007883a 	mov	r3,r4
10102af4:	2884b03a 	or	r2,r5,r2
10102af8:	38800115 	stw	r2,4(r7)
10102afc:	003fbb06 	br	101029ec <__alt_data_end+0xfffe29ec>
10102b00:	21800515 	stw	r6,20(r4)
10102b04:	21800415 	stw	r6,16(r4)
10102b08:	10c00054 	ori	r3,r2,1
10102b0c:	31c00315 	stw	r7,12(r6)
10102b10:	31c00215 	stw	r7,8(r6)
10102b14:	30c00115 	stw	r3,4(r6)
10102b18:	308d883a 	add	r6,r6,r2
10102b1c:	30800015 	stw	r2,0(r6)
10102b20:	003f9506 	br	10102978 <__alt_data_end+0xfffe2978>
10102b24:	00c01504 	movi	r3,84
10102b28:	19400536 	bltu	r3,r5,10102b40 <_free_r+0x2b8>
10102b2c:	100ad33a 	srli	r5,r2,12
10102b30:	28c01bc4 	addi	r3,r5,111
10102b34:	18c7883a 	add	r3,r3,r3
10102b38:	29401b84 	addi	r5,r5,110
10102b3c:	003f9c06 	br	101029b0 <__alt_data_end+0xfffe29b0>
10102b40:	00c05504 	movi	r3,340
10102b44:	19400536 	bltu	r3,r5,10102b5c <_free_r+0x2d4>
10102b48:	100ad3fa 	srli	r5,r2,15
10102b4c:	28c01e04 	addi	r3,r5,120
10102b50:	18c7883a 	add	r3,r3,r3
10102b54:	29401dc4 	addi	r5,r5,119
10102b58:	003f9506 	br	101029b0 <__alt_data_end+0xfffe29b0>
10102b5c:	00c15504 	movi	r3,1364
10102b60:	19400536 	bltu	r3,r5,10102b78 <_free_r+0x2f0>
10102b64:	100ad4ba 	srli	r5,r2,18
10102b68:	28c01f44 	addi	r3,r5,125
10102b6c:	18c7883a 	add	r3,r3,r3
10102b70:	29401f04 	addi	r5,r5,124
10102b74:	003f8e06 	br	101029b0 <__alt_data_end+0xfffe29b0>
10102b78:	00c03f84 	movi	r3,254
10102b7c:	01401f84 	movi	r5,126
10102b80:	003f8b06 	br	101029b0 <__alt_data_end+0xfffe29b0>
10102b84:	10c00054 	ori	r3,r2,1
10102b88:	30c00115 	stw	r3,4(r6)
10102b8c:	308d883a 	add	r6,r6,r2
10102b90:	30800015 	stw	r2,0(r6)
10102b94:	003f7806 	br	10102978 <__alt_data_end+0xfffe2978>

10102b98 <_lseek_r>:
10102b98:	defffd04 	addi	sp,sp,-12
10102b9c:	2805883a 	mov	r2,r5
10102ba0:	dc000015 	stw	r16,0(sp)
10102ba4:	04040474 	movhi	r16,4113
10102ba8:	dc400115 	stw	r17,4(sp)
10102bac:	300b883a 	mov	r5,r6
10102bb0:	84231304 	addi	r16,r16,-29620
10102bb4:	2023883a 	mov	r17,r4
10102bb8:	380d883a 	mov	r6,r7
10102bbc:	1009883a 	mov	r4,r2
10102bc0:	dfc00215 	stw	ra,8(sp)
10102bc4:	80000015 	stw	zero,0(r16)
10102bc8:	01034a40 	call	101034a4 <lseek>
10102bcc:	00ffffc4 	movi	r3,-1
10102bd0:	10c00526 	beq	r2,r3,10102be8 <_lseek_r+0x50>
10102bd4:	dfc00217 	ldw	ra,8(sp)
10102bd8:	dc400117 	ldw	r17,4(sp)
10102bdc:	dc000017 	ldw	r16,0(sp)
10102be0:	dec00304 	addi	sp,sp,12
10102be4:	f800283a 	ret
10102be8:	80c00017 	ldw	r3,0(r16)
10102bec:	183ff926 	beq	r3,zero,10102bd4 <__alt_data_end+0xfffe2bd4>
10102bf0:	88c00015 	stw	r3,0(r17)
10102bf4:	003ff706 	br	10102bd4 <__alt_data_end+0xfffe2bd4>

10102bf8 <__smakebuf_r>:
10102bf8:	2880030b 	ldhu	r2,12(r5)
10102bfc:	10c0008c 	andi	r3,r2,2
10102c00:	1800411e 	bne	r3,zero,10102d08 <__smakebuf_r+0x110>
10102c04:	deffec04 	addi	sp,sp,-80
10102c08:	dc000f15 	stw	r16,60(sp)
10102c0c:	2821883a 	mov	r16,r5
10102c10:	2940038f 	ldh	r5,14(r5)
10102c14:	dc401015 	stw	r17,64(sp)
10102c18:	dfc01315 	stw	ra,76(sp)
10102c1c:	dcc01215 	stw	r19,72(sp)
10102c20:	dc801115 	stw	r18,68(sp)
10102c24:	2023883a 	mov	r17,r4
10102c28:	28001c16 	blt	r5,zero,10102c9c <__smakebuf_r+0xa4>
10102c2c:	d80d883a 	mov	r6,sp
10102c30:	0102e140 	call	10102e14 <_fstat_r>
10102c34:	10001816 	blt	r2,zero,10102c98 <__smakebuf_r+0xa0>
10102c38:	d8800117 	ldw	r2,4(sp)
10102c3c:	00e00014 	movui	r3,32768
10102c40:	10bc000c 	andi	r2,r2,61440
10102c44:	14c80020 	cmpeqi	r19,r2,8192
10102c48:	10c03726 	beq	r2,r3,10102d28 <__smakebuf_r+0x130>
10102c4c:	80c0030b 	ldhu	r3,12(r16)
10102c50:	18c20014 	ori	r3,r3,2048
10102c54:	80c0030d 	sth	r3,12(r16)
10102c58:	00c80004 	movi	r3,8192
10102c5c:	10c0521e 	bne	r2,r3,10102da8 <__smakebuf_r+0x1b0>
10102c60:	8140038f 	ldh	r5,14(r16)
10102c64:	8809883a 	mov	r4,r17
10102c68:	0102e700 	call	10102e70 <_isatty_r>
10102c6c:	10004c26 	beq	r2,zero,10102da0 <__smakebuf_r+0x1a8>
10102c70:	8080030b 	ldhu	r2,12(r16)
10102c74:	80c010c4 	addi	r3,r16,67
10102c78:	80c00015 	stw	r3,0(r16)
10102c7c:	10800054 	ori	r2,r2,1
10102c80:	8080030d 	sth	r2,12(r16)
10102c84:	00800044 	movi	r2,1
10102c88:	80c00415 	stw	r3,16(r16)
10102c8c:	80800515 	stw	r2,20(r16)
10102c90:	04810004 	movi	r18,1024
10102c94:	00000706 	br	10102cb4 <__smakebuf_r+0xbc>
10102c98:	8080030b 	ldhu	r2,12(r16)
10102c9c:	10c0200c 	andi	r3,r2,128
10102ca0:	18001f1e 	bne	r3,zero,10102d20 <__smakebuf_r+0x128>
10102ca4:	04810004 	movi	r18,1024
10102ca8:	10820014 	ori	r2,r2,2048
10102cac:	8080030d 	sth	r2,12(r16)
10102cb0:	0027883a 	mov	r19,zero
10102cb4:	900b883a 	mov	r5,r18
10102cb8:	8809883a 	mov	r4,r17
10102cbc:	0100e000 	call	10100e00 <_malloc_r>
10102cc0:	10002c26 	beq	r2,zero,10102d74 <__smakebuf_r+0x17c>
10102cc4:	80c0030b 	ldhu	r3,12(r16)
10102cc8:	01040434 	movhi	r4,4112
10102ccc:	21010904 	addi	r4,r4,1060
10102cd0:	89000f15 	stw	r4,60(r17)
10102cd4:	18c02014 	ori	r3,r3,128
10102cd8:	80c0030d 	sth	r3,12(r16)
10102cdc:	80800015 	stw	r2,0(r16)
10102ce0:	80800415 	stw	r2,16(r16)
10102ce4:	84800515 	stw	r18,20(r16)
10102ce8:	98001a1e 	bne	r19,zero,10102d54 <__smakebuf_r+0x15c>
10102cec:	dfc01317 	ldw	ra,76(sp)
10102cf0:	dcc01217 	ldw	r19,72(sp)
10102cf4:	dc801117 	ldw	r18,68(sp)
10102cf8:	dc401017 	ldw	r17,64(sp)
10102cfc:	dc000f17 	ldw	r16,60(sp)
10102d00:	dec01404 	addi	sp,sp,80
10102d04:	f800283a 	ret
10102d08:	288010c4 	addi	r2,r5,67
10102d0c:	28800015 	stw	r2,0(r5)
10102d10:	28800415 	stw	r2,16(r5)
10102d14:	00800044 	movi	r2,1
10102d18:	28800515 	stw	r2,20(r5)
10102d1c:	f800283a 	ret
10102d20:	04801004 	movi	r18,64
10102d24:	003fe006 	br	10102ca8 <__alt_data_end+0xfffe2ca8>
10102d28:	81000a17 	ldw	r4,40(r16)
10102d2c:	00c40434 	movhi	r3,4112
10102d30:	18c85304 	addi	r3,r3,8524
10102d34:	20ffc51e 	bne	r4,r3,10102c4c <__alt_data_end+0xfffe2c4c>
10102d38:	8080030b 	ldhu	r2,12(r16)
10102d3c:	04810004 	movi	r18,1024
10102d40:	84801315 	stw	r18,76(r16)
10102d44:	1484b03a 	or	r2,r2,r18
10102d48:	8080030d 	sth	r2,12(r16)
10102d4c:	0027883a 	mov	r19,zero
10102d50:	003fd806 	br	10102cb4 <__alt_data_end+0xfffe2cb4>
10102d54:	8140038f 	ldh	r5,14(r16)
10102d58:	8809883a 	mov	r4,r17
10102d5c:	0102e700 	call	10102e70 <_isatty_r>
10102d60:	103fe226 	beq	r2,zero,10102cec <__alt_data_end+0xfffe2cec>
10102d64:	8080030b 	ldhu	r2,12(r16)
10102d68:	10800054 	ori	r2,r2,1
10102d6c:	8080030d 	sth	r2,12(r16)
10102d70:	003fde06 	br	10102cec <__alt_data_end+0xfffe2cec>
10102d74:	8080030b 	ldhu	r2,12(r16)
10102d78:	10c0800c 	andi	r3,r2,512
10102d7c:	183fdb1e 	bne	r3,zero,10102cec <__alt_data_end+0xfffe2cec>
10102d80:	10800094 	ori	r2,r2,2
10102d84:	80c010c4 	addi	r3,r16,67
10102d88:	8080030d 	sth	r2,12(r16)
10102d8c:	00800044 	movi	r2,1
10102d90:	80c00015 	stw	r3,0(r16)
10102d94:	80c00415 	stw	r3,16(r16)
10102d98:	80800515 	stw	r2,20(r16)
10102d9c:	003fd306 	br	10102cec <__alt_data_end+0xfffe2cec>
10102da0:	04810004 	movi	r18,1024
10102da4:	003fc306 	br	10102cb4 <__alt_data_end+0xfffe2cb4>
10102da8:	0027883a 	mov	r19,zero
10102dac:	04810004 	movi	r18,1024
10102db0:	003fc006 	br	10102cb4 <__alt_data_end+0xfffe2cb4>

10102db4 <_read_r>:
10102db4:	defffd04 	addi	sp,sp,-12
10102db8:	2805883a 	mov	r2,r5
10102dbc:	dc000015 	stw	r16,0(sp)
10102dc0:	04040474 	movhi	r16,4113
10102dc4:	dc400115 	stw	r17,4(sp)
10102dc8:	300b883a 	mov	r5,r6
10102dcc:	84231304 	addi	r16,r16,-29620
10102dd0:	2023883a 	mov	r17,r4
10102dd4:	380d883a 	mov	r6,r7
10102dd8:	1009883a 	mov	r4,r2
10102ddc:	dfc00215 	stw	ra,8(sp)
10102de0:	80000015 	stw	zero,0(r16)
10102de4:	01036780 	call	10103678 <read>
10102de8:	00ffffc4 	movi	r3,-1
10102dec:	10c00526 	beq	r2,r3,10102e04 <_read_r+0x50>
10102df0:	dfc00217 	ldw	ra,8(sp)
10102df4:	dc400117 	ldw	r17,4(sp)
10102df8:	dc000017 	ldw	r16,0(sp)
10102dfc:	dec00304 	addi	sp,sp,12
10102e00:	f800283a 	ret
10102e04:	80c00017 	ldw	r3,0(r16)
10102e08:	183ff926 	beq	r3,zero,10102df0 <__alt_data_end+0xfffe2df0>
10102e0c:	88c00015 	stw	r3,0(r17)
10102e10:	003ff706 	br	10102df0 <__alt_data_end+0xfffe2df0>

10102e14 <_fstat_r>:
10102e14:	defffd04 	addi	sp,sp,-12
10102e18:	2805883a 	mov	r2,r5
10102e1c:	dc000015 	stw	r16,0(sp)
10102e20:	04040474 	movhi	r16,4113
10102e24:	dc400115 	stw	r17,4(sp)
10102e28:	84231304 	addi	r16,r16,-29620
10102e2c:	2023883a 	mov	r17,r4
10102e30:	300b883a 	mov	r5,r6
10102e34:	1009883a 	mov	r4,r2
10102e38:	dfc00215 	stw	ra,8(sp)
10102e3c:	80000015 	stw	zero,0(r16)
10102e40:	01031ec0 	call	101031ec <fstat>
10102e44:	00ffffc4 	movi	r3,-1
10102e48:	10c00526 	beq	r2,r3,10102e60 <_fstat_r+0x4c>
10102e4c:	dfc00217 	ldw	ra,8(sp)
10102e50:	dc400117 	ldw	r17,4(sp)
10102e54:	dc000017 	ldw	r16,0(sp)
10102e58:	dec00304 	addi	sp,sp,12
10102e5c:	f800283a 	ret
10102e60:	80c00017 	ldw	r3,0(r16)
10102e64:	183ff926 	beq	r3,zero,10102e4c <__alt_data_end+0xfffe2e4c>
10102e68:	88c00015 	stw	r3,0(r17)
10102e6c:	003ff706 	br	10102e4c <__alt_data_end+0xfffe2e4c>

10102e70 <_isatty_r>:
10102e70:	defffd04 	addi	sp,sp,-12
10102e74:	dc000015 	stw	r16,0(sp)
10102e78:	04040474 	movhi	r16,4113
10102e7c:	dc400115 	stw	r17,4(sp)
10102e80:	84231304 	addi	r16,r16,-29620
10102e84:	2023883a 	mov	r17,r4
10102e88:	2809883a 	mov	r4,r5
10102e8c:	dfc00215 	stw	ra,8(sp)
10102e90:	80000015 	stw	zero,0(r16)
10102e94:	01032d80 	call	101032d8 <isatty>
10102e98:	00ffffc4 	movi	r3,-1
10102e9c:	10c00526 	beq	r2,r3,10102eb4 <_isatty_r+0x44>
10102ea0:	dfc00217 	ldw	ra,8(sp)
10102ea4:	dc400117 	ldw	r17,4(sp)
10102ea8:	dc000017 	ldw	r16,0(sp)
10102eac:	dec00304 	addi	sp,sp,12
10102eb0:	f800283a 	ret
10102eb4:	80c00017 	ldw	r3,0(r16)
10102eb8:	183ff926 	beq	r3,zero,10102ea0 <__alt_data_end+0xfffe2ea0>
10102ebc:	88c00015 	stw	r3,0(r17)
10102ec0:	003ff706 	br	10102ea0 <__alt_data_end+0xfffe2ea0>

10102ec4 <__divsi3>:
10102ec4:	20001b16 	blt	r4,zero,10102f34 <__divsi3+0x70>
10102ec8:	000f883a 	mov	r7,zero
10102ecc:	28001616 	blt	r5,zero,10102f28 <__divsi3+0x64>
10102ed0:	200d883a 	mov	r6,r4
10102ed4:	29001a2e 	bgeu	r5,r4,10102f40 <__divsi3+0x7c>
10102ed8:	00800804 	movi	r2,32
10102edc:	00c00044 	movi	r3,1
10102ee0:	00000106 	br	10102ee8 <__divsi3+0x24>
10102ee4:	10000d26 	beq	r2,zero,10102f1c <__divsi3+0x58>
10102ee8:	294b883a 	add	r5,r5,r5
10102eec:	10bfffc4 	addi	r2,r2,-1
10102ef0:	18c7883a 	add	r3,r3,r3
10102ef4:	293ffb36 	bltu	r5,r4,10102ee4 <__alt_data_end+0xfffe2ee4>
10102ef8:	0005883a 	mov	r2,zero
10102efc:	18000726 	beq	r3,zero,10102f1c <__divsi3+0x58>
10102f00:	0005883a 	mov	r2,zero
10102f04:	31400236 	bltu	r6,r5,10102f10 <__divsi3+0x4c>
10102f08:	314dc83a 	sub	r6,r6,r5
10102f0c:	10c4b03a 	or	r2,r2,r3
10102f10:	1806d07a 	srli	r3,r3,1
10102f14:	280ad07a 	srli	r5,r5,1
10102f18:	183ffa1e 	bne	r3,zero,10102f04 <__alt_data_end+0xfffe2f04>
10102f1c:	38000126 	beq	r7,zero,10102f24 <__divsi3+0x60>
10102f20:	0085c83a 	sub	r2,zero,r2
10102f24:	f800283a 	ret
10102f28:	014bc83a 	sub	r5,zero,r5
10102f2c:	39c0005c 	xori	r7,r7,1
10102f30:	003fe706 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
10102f34:	0109c83a 	sub	r4,zero,r4
10102f38:	01c00044 	movi	r7,1
10102f3c:	003fe306 	br	10102ecc <__alt_data_end+0xfffe2ecc>
10102f40:	00c00044 	movi	r3,1
10102f44:	003fee06 	br	10102f00 <__alt_data_end+0xfffe2f00>

10102f48 <__modsi3>:
10102f48:	20001716 	blt	r4,zero,10102fa8 <__modsi3+0x60>
10102f4c:	000f883a 	mov	r7,zero
10102f50:	2005883a 	mov	r2,r4
10102f54:	28001216 	blt	r5,zero,10102fa0 <__modsi3+0x58>
10102f58:	2900162e 	bgeu	r5,r4,10102fb4 <__modsi3+0x6c>
10102f5c:	01800804 	movi	r6,32
10102f60:	00c00044 	movi	r3,1
10102f64:	00000106 	br	10102f6c <__modsi3+0x24>
10102f68:	30000a26 	beq	r6,zero,10102f94 <__modsi3+0x4c>
10102f6c:	294b883a 	add	r5,r5,r5
10102f70:	31bfffc4 	addi	r6,r6,-1
10102f74:	18c7883a 	add	r3,r3,r3
10102f78:	293ffb36 	bltu	r5,r4,10102f68 <__alt_data_end+0xfffe2f68>
10102f7c:	18000526 	beq	r3,zero,10102f94 <__modsi3+0x4c>
10102f80:	1806d07a 	srli	r3,r3,1
10102f84:	11400136 	bltu	r2,r5,10102f8c <__modsi3+0x44>
10102f88:	1145c83a 	sub	r2,r2,r5
10102f8c:	280ad07a 	srli	r5,r5,1
10102f90:	183ffb1e 	bne	r3,zero,10102f80 <__alt_data_end+0xfffe2f80>
10102f94:	38000126 	beq	r7,zero,10102f9c <__modsi3+0x54>
10102f98:	0085c83a 	sub	r2,zero,r2
10102f9c:	f800283a 	ret
10102fa0:	014bc83a 	sub	r5,zero,r5
10102fa4:	003fec06 	br	10102f58 <__alt_data_end+0xfffe2f58>
10102fa8:	0109c83a 	sub	r4,zero,r4
10102fac:	01c00044 	movi	r7,1
10102fb0:	003fe706 	br	10102f50 <__alt_data_end+0xfffe2f50>
10102fb4:	00c00044 	movi	r3,1
10102fb8:	003ff106 	br	10102f80 <__alt_data_end+0xfffe2f80>

10102fbc <__udivsi3>:
10102fbc:	200d883a 	mov	r6,r4
10102fc0:	2900152e 	bgeu	r5,r4,10103018 <__udivsi3+0x5c>
10102fc4:	28001416 	blt	r5,zero,10103018 <__udivsi3+0x5c>
10102fc8:	00800804 	movi	r2,32
10102fcc:	00c00044 	movi	r3,1
10102fd0:	00000206 	br	10102fdc <__udivsi3+0x20>
10102fd4:	10000e26 	beq	r2,zero,10103010 <__udivsi3+0x54>
10102fd8:	28000516 	blt	r5,zero,10102ff0 <__udivsi3+0x34>
10102fdc:	294b883a 	add	r5,r5,r5
10102fe0:	10bfffc4 	addi	r2,r2,-1
10102fe4:	18c7883a 	add	r3,r3,r3
10102fe8:	293ffa36 	bltu	r5,r4,10102fd4 <__alt_data_end+0xfffe2fd4>
10102fec:	18000826 	beq	r3,zero,10103010 <__udivsi3+0x54>
10102ff0:	0005883a 	mov	r2,zero
10102ff4:	31400236 	bltu	r6,r5,10103000 <__udivsi3+0x44>
10102ff8:	314dc83a 	sub	r6,r6,r5
10102ffc:	10c4b03a 	or	r2,r2,r3
10103000:	1806d07a 	srli	r3,r3,1
10103004:	280ad07a 	srli	r5,r5,1
10103008:	183ffa1e 	bne	r3,zero,10102ff4 <__alt_data_end+0xfffe2ff4>
1010300c:	f800283a 	ret
10103010:	0005883a 	mov	r2,zero
10103014:	f800283a 	ret
10103018:	00c00044 	movi	r3,1
1010301c:	003ff406 	br	10102ff0 <__alt_data_end+0xfffe2ff0>

10103020 <__umodsi3>:
10103020:	2005883a 	mov	r2,r4
10103024:	2900122e 	bgeu	r5,r4,10103070 <__umodsi3+0x50>
10103028:	28001116 	blt	r5,zero,10103070 <__umodsi3+0x50>
1010302c:	01800804 	movi	r6,32
10103030:	00c00044 	movi	r3,1
10103034:	00000206 	br	10103040 <__umodsi3+0x20>
10103038:	30000c26 	beq	r6,zero,1010306c <__umodsi3+0x4c>
1010303c:	28000516 	blt	r5,zero,10103054 <__umodsi3+0x34>
10103040:	294b883a 	add	r5,r5,r5
10103044:	31bfffc4 	addi	r6,r6,-1
10103048:	18c7883a 	add	r3,r3,r3
1010304c:	293ffa36 	bltu	r5,r4,10103038 <__alt_data_end+0xfffe3038>
10103050:	18000626 	beq	r3,zero,1010306c <__umodsi3+0x4c>
10103054:	1806d07a 	srli	r3,r3,1
10103058:	11400136 	bltu	r2,r5,10103060 <__umodsi3+0x40>
1010305c:	1145c83a 	sub	r2,r2,r5
10103060:	280ad07a 	srli	r5,r5,1
10103064:	183ffb1e 	bne	r3,zero,10103054 <__alt_data_end+0xfffe3054>
10103068:	f800283a 	ret
1010306c:	f800283a 	ret
10103070:	00c00044 	movi	r3,1
10103074:	003ff706 	br	10103054 <__alt_data_end+0xfffe3054>

10103078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103078:	defffe04 	addi	sp,sp,-8
1010307c:	dfc00115 	stw	ra,4(sp)
10103080:	df000015 	stw	fp,0(sp)
10103084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103088:	d0a00917 	ldw	r2,-32732(gp)
1010308c:	10000326 	beq	r2,zero,1010309c <alt_get_errno+0x24>
10103090:	d0a00917 	ldw	r2,-32732(gp)
10103094:	103ee83a 	callr	r2
10103098:	00000106 	br	101030a0 <alt_get_errno+0x28>
1010309c:	d0a6ac04 	addi	r2,gp,-25936
}
101030a0:	e037883a 	mov	sp,fp
101030a4:	dfc00117 	ldw	ra,4(sp)
101030a8:	df000017 	ldw	fp,0(sp)
101030ac:	dec00204 	addi	sp,sp,8
101030b0:	f800283a 	ret

101030b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
101030b4:	defffb04 	addi	sp,sp,-20
101030b8:	dfc00415 	stw	ra,16(sp)
101030bc:	df000315 	stw	fp,12(sp)
101030c0:	df000304 	addi	fp,sp,12
101030c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
101030c8:	e0bfff17 	ldw	r2,-4(fp)
101030cc:	10000616 	blt	r2,zero,101030e8 <close+0x34>
101030d0:	e0bfff17 	ldw	r2,-4(fp)
101030d4:	10c00324 	muli	r3,r2,12
101030d8:	00840434 	movhi	r2,4112
101030dc:	1097ef04 	addi	r2,r2,24508
101030e0:	1885883a 	add	r2,r3,r2
101030e4:	00000106 	br	101030ec <close+0x38>
101030e8:	0005883a 	mov	r2,zero
101030ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
101030f0:	e0bffd17 	ldw	r2,-12(fp)
101030f4:	10001926 	beq	r2,zero,1010315c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
101030f8:	e0bffd17 	ldw	r2,-12(fp)
101030fc:	10800017 	ldw	r2,0(r2)
10103100:	10800417 	ldw	r2,16(r2)
10103104:	10000626 	beq	r2,zero,10103120 <close+0x6c>
10103108:	e0bffd17 	ldw	r2,-12(fp)
1010310c:	10800017 	ldw	r2,0(r2)
10103110:	10800417 	ldw	r2,16(r2)
10103114:	e13ffd17 	ldw	r4,-12(fp)
10103118:	103ee83a 	callr	r2
1010311c:	00000106 	br	10103124 <close+0x70>
10103120:	0005883a 	mov	r2,zero
10103124:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10103128:	e13fff17 	ldw	r4,-4(fp)
1010312c:	01037740 	call	10103774 <alt_release_fd>
    if (rval < 0)
10103130:	e0bffe17 	ldw	r2,-8(fp)
10103134:	1000070e 	bge	r2,zero,10103154 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10103138:	01030780 	call	10103078 <alt_get_errno>
1010313c:	1007883a 	mov	r3,r2
10103140:	e0bffe17 	ldw	r2,-8(fp)
10103144:	0085c83a 	sub	r2,zero,r2
10103148:	18800015 	stw	r2,0(r3)
      return -1;
1010314c:	00bfffc4 	movi	r2,-1
10103150:	00000706 	br	10103170 <close+0xbc>
    }
    return 0;
10103154:	0005883a 	mov	r2,zero
10103158:	00000506 	br	10103170 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010315c:	01030780 	call	10103078 <alt_get_errno>
10103160:	1007883a 	mov	r3,r2
10103164:	00801444 	movi	r2,81
10103168:	18800015 	stw	r2,0(r3)
    return -1;
1010316c:	00bfffc4 	movi	r2,-1
  }
}
10103170:	e037883a 	mov	sp,fp
10103174:	dfc00117 	ldw	ra,4(sp)
10103178:	df000017 	ldw	fp,0(sp)
1010317c:	dec00204 	addi	sp,sp,8
10103180:	f800283a 	ret

10103184 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10103184:	defffc04 	addi	sp,sp,-16
10103188:	df000315 	stw	fp,12(sp)
1010318c:	df000304 	addi	fp,sp,12
10103190:	e13ffd15 	stw	r4,-12(fp)
10103194:	e17ffe15 	stw	r5,-8(fp)
10103198:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010319c:	e0bfff17 	ldw	r2,-4(fp)
}
101031a0:	e037883a 	mov	sp,fp
101031a4:	df000017 	ldw	fp,0(sp)
101031a8:	dec00104 	addi	sp,sp,4
101031ac:	f800283a 	ret

101031b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101031b0:	defffe04 	addi	sp,sp,-8
101031b4:	dfc00115 	stw	ra,4(sp)
101031b8:	df000015 	stw	fp,0(sp)
101031bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101031c0:	d0a00917 	ldw	r2,-32732(gp)
101031c4:	10000326 	beq	r2,zero,101031d4 <alt_get_errno+0x24>
101031c8:	d0a00917 	ldw	r2,-32732(gp)
101031cc:	103ee83a 	callr	r2
101031d0:	00000106 	br	101031d8 <alt_get_errno+0x28>
101031d4:	d0a6ac04 	addi	r2,gp,-25936
}
101031d8:	e037883a 	mov	sp,fp
101031dc:	dfc00117 	ldw	ra,4(sp)
101031e0:	df000017 	ldw	fp,0(sp)
101031e4:	dec00204 	addi	sp,sp,8
101031e8:	f800283a 	ret

101031ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
101031ec:	defffb04 	addi	sp,sp,-20
101031f0:	dfc00415 	stw	ra,16(sp)
101031f4:	df000315 	stw	fp,12(sp)
101031f8:	df000304 	addi	fp,sp,12
101031fc:	e13ffe15 	stw	r4,-8(fp)
10103200:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103204:	e0bffe17 	ldw	r2,-8(fp)
10103208:	10000616 	blt	r2,zero,10103224 <fstat+0x38>
1010320c:	e0bffe17 	ldw	r2,-8(fp)
10103210:	10c00324 	muli	r3,r2,12
10103214:	00840434 	movhi	r2,4112
10103218:	1097ef04 	addi	r2,r2,24508
1010321c:	1885883a 	add	r2,r3,r2
10103220:	00000106 	br	10103228 <fstat+0x3c>
10103224:	0005883a 	mov	r2,zero
10103228:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010322c:	e0bffd17 	ldw	r2,-12(fp)
10103230:	10001026 	beq	r2,zero,10103274 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10103234:	e0bffd17 	ldw	r2,-12(fp)
10103238:	10800017 	ldw	r2,0(r2)
1010323c:	10800817 	ldw	r2,32(r2)
10103240:	10000726 	beq	r2,zero,10103260 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10103244:	e0bffd17 	ldw	r2,-12(fp)
10103248:	10800017 	ldw	r2,0(r2)
1010324c:	10800817 	ldw	r2,32(r2)
10103250:	e17fff17 	ldw	r5,-4(fp)
10103254:	e13ffd17 	ldw	r4,-12(fp)
10103258:	103ee83a 	callr	r2
1010325c:	00000a06 	br	10103288 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10103260:	e0bfff17 	ldw	r2,-4(fp)
10103264:	00c80004 	movi	r3,8192
10103268:	10c00115 	stw	r3,4(r2)
      return 0;
1010326c:	0005883a 	mov	r2,zero
10103270:	00000506 	br	10103288 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103274:	01031b00 	call	101031b0 <alt_get_errno>
10103278:	1007883a 	mov	r3,r2
1010327c:	00801444 	movi	r2,81
10103280:	18800015 	stw	r2,0(r3)
    return -1;
10103284:	00bfffc4 	movi	r2,-1
  }
}
10103288:	e037883a 	mov	sp,fp
1010328c:	dfc00117 	ldw	ra,4(sp)
10103290:	df000017 	ldw	fp,0(sp)
10103294:	dec00204 	addi	sp,sp,8
10103298:	f800283a 	ret

1010329c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010329c:	defffe04 	addi	sp,sp,-8
101032a0:	dfc00115 	stw	ra,4(sp)
101032a4:	df000015 	stw	fp,0(sp)
101032a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101032ac:	d0a00917 	ldw	r2,-32732(gp)
101032b0:	10000326 	beq	r2,zero,101032c0 <alt_get_errno+0x24>
101032b4:	d0a00917 	ldw	r2,-32732(gp)
101032b8:	103ee83a 	callr	r2
101032bc:	00000106 	br	101032c4 <alt_get_errno+0x28>
101032c0:	d0a6ac04 	addi	r2,gp,-25936
}
101032c4:	e037883a 	mov	sp,fp
101032c8:	dfc00117 	ldw	ra,4(sp)
101032cc:	df000017 	ldw	fp,0(sp)
101032d0:	dec00204 	addi	sp,sp,8
101032d4:	f800283a 	ret

101032d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
101032d8:	deffed04 	addi	sp,sp,-76
101032dc:	dfc01215 	stw	ra,72(sp)
101032e0:	df001115 	stw	fp,68(sp)
101032e4:	df001104 	addi	fp,sp,68
101032e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101032ec:	e0bfff17 	ldw	r2,-4(fp)
101032f0:	10000616 	blt	r2,zero,1010330c <isatty+0x34>
101032f4:	e0bfff17 	ldw	r2,-4(fp)
101032f8:	10c00324 	muli	r3,r2,12
101032fc:	00840434 	movhi	r2,4112
10103300:	1097ef04 	addi	r2,r2,24508
10103304:	1885883a 	add	r2,r3,r2
10103308:	00000106 	br	10103310 <isatty+0x38>
1010330c:	0005883a 	mov	r2,zero
10103310:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10103314:	e0bfef17 	ldw	r2,-68(fp)
10103318:	10000e26 	beq	r2,zero,10103354 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010331c:	e0bfef17 	ldw	r2,-68(fp)
10103320:	10800017 	ldw	r2,0(r2)
10103324:	10800817 	ldw	r2,32(r2)
10103328:	1000021e 	bne	r2,zero,10103334 <isatty+0x5c>
    {
      return 1;
1010332c:	00800044 	movi	r2,1
10103330:	00000d06 	br	10103368 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10103334:	e0bff004 	addi	r2,fp,-64
10103338:	100b883a 	mov	r5,r2
1010333c:	e13fff17 	ldw	r4,-4(fp)
10103340:	01031ec0 	call	101031ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10103344:	e0bff117 	ldw	r2,-60(fp)
10103348:	10880020 	cmpeqi	r2,r2,8192
1010334c:	10803fcc 	andi	r2,r2,255
10103350:	00000506 	br	10103368 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103354:	010329c0 	call	1010329c <alt_get_errno>
10103358:	1007883a 	mov	r3,r2
1010335c:	00801444 	movi	r2,81
10103360:	18800015 	stw	r2,0(r3)
    return 0;
10103364:	0005883a 	mov	r2,zero
  }
}
10103368:	e037883a 	mov	sp,fp
1010336c:	dfc00117 	ldw	ra,4(sp)
10103370:	df000017 	ldw	fp,0(sp)
10103374:	dec00204 	addi	sp,sp,8
10103378:	f800283a 	ret

1010337c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010337c:	defffc04 	addi	sp,sp,-16
10103380:	df000315 	stw	fp,12(sp)
10103384:	df000304 	addi	fp,sp,12
10103388:	e13ffd15 	stw	r4,-12(fp)
1010338c:	e17ffe15 	stw	r5,-8(fp)
10103390:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10103394:	e0fffe17 	ldw	r3,-8(fp)
10103398:	e0bffd17 	ldw	r2,-12(fp)
1010339c:	18800c26 	beq	r3,r2,101033d0 <alt_load_section+0x54>
  {
    while( to != end )
101033a0:	00000806 	br	101033c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
101033a4:	e0bffe17 	ldw	r2,-8(fp)
101033a8:	10c00104 	addi	r3,r2,4
101033ac:	e0fffe15 	stw	r3,-8(fp)
101033b0:	e0fffd17 	ldw	r3,-12(fp)
101033b4:	19000104 	addi	r4,r3,4
101033b8:	e13ffd15 	stw	r4,-12(fp)
101033bc:	18c00017 	ldw	r3,0(r3)
101033c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
101033c4:	e0fffe17 	ldw	r3,-8(fp)
101033c8:	e0bfff17 	ldw	r2,-4(fp)
101033cc:	18bff51e 	bne	r3,r2,101033a4 <__alt_data_end+0xfffe33a4>
    {
      *to++ = *from++;
    }
  }
}
101033d0:	0001883a 	nop
101033d4:	e037883a 	mov	sp,fp
101033d8:	df000017 	ldw	fp,0(sp)
101033dc:	dec00104 	addi	sp,sp,4
101033e0:	f800283a 	ret

101033e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
101033e4:	defffe04 	addi	sp,sp,-8
101033e8:	dfc00115 	stw	ra,4(sp)
101033ec:	df000015 	stw	fp,0(sp)
101033f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
101033f4:	01840434 	movhi	r6,4112
101033f8:	319c7504 	addi	r6,r6,29140
101033fc:	01440434 	movhi	r5,4112
10103400:	2955da04 	addi	r5,r5,22376
10103404:	01040434 	movhi	r4,4112
10103408:	211c7504 	addi	r4,r4,29140
1010340c:	010337c0 	call	1010337c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10103410:	01840434 	movhi	r6,4112
10103414:	31809104 	addi	r6,r6,580
10103418:	01440434 	movhi	r5,4112
1010341c:	29400804 	addi	r5,r5,32
10103420:	01040434 	movhi	r4,4112
10103424:	21000804 	addi	r4,r4,32
10103428:	010337c0 	call	1010337c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010342c:	01840434 	movhi	r6,4112
10103430:	3195da04 	addi	r6,r6,22376
10103434:	01440434 	movhi	r5,4112
10103438:	2955c604 	addi	r5,r5,22296
1010343c:	01040434 	movhi	r4,4112
10103440:	2115c604 	addi	r4,r4,22296
10103444:	010337c0 	call	1010337c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10103448:	01046040 	call	10104604 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010344c:	01047ec0 	call	101047ec <alt_icache_flush_all>
}
10103450:	0001883a 	nop
10103454:	e037883a 	mov	sp,fp
10103458:	dfc00117 	ldw	ra,4(sp)
1010345c:	df000017 	ldw	fp,0(sp)
10103460:	dec00204 	addi	sp,sp,8
10103464:	f800283a 	ret

10103468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103468:	defffe04 	addi	sp,sp,-8
1010346c:	dfc00115 	stw	ra,4(sp)
10103470:	df000015 	stw	fp,0(sp)
10103474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103478:	d0a00917 	ldw	r2,-32732(gp)
1010347c:	10000326 	beq	r2,zero,1010348c <alt_get_errno+0x24>
10103480:	d0a00917 	ldw	r2,-32732(gp)
10103484:	103ee83a 	callr	r2
10103488:	00000106 	br	10103490 <alt_get_errno+0x28>
1010348c:	d0a6ac04 	addi	r2,gp,-25936
}
10103490:	e037883a 	mov	sp,fp
10103494:	dfc00117 	ldw	ra,4(sp)
10103498:	df000017 	ldw	fp,0(sp)
1010349c:	dec00204 	addi	sp,sp,8
101034a0:	f800283a 	ret

101034a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
101034a4:	defff904 	addi	sp,sp,-28
101034a8:	dfc00615 	stw	ra,24(sp)
101034ac:	df000515 	stw	fp,20(sp)
101034b0:	df000504 	addi	fp,sp,20
101034b4:	e13ffd15 	stw	r4,-12(fp)
101034b8:	e17ffe15 	stw	r5,-8(fp)
101034bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
101034c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101034c4:	e0bffd17 	ldw	r2,-12(fp)
101034c8:	10000616 	blt	r2,zero,101034e4 <lseek+0x40>
101034cc:	e0bffd17 	ldw	r2,-12(fp)
101034d0:	10c00324 	muli	r3,r2,12
101034d4:	00840434 	movhi	r2,4112
101034d8:	1097ef04 	addi	r2,r2,24508
101034dc:	1885883a 	add	r2,r3,r2
101034e0:	00000106 	br	101034e8 <lseek+0x44>
101034e4:	0005883a 	mov	r2,zero
101034e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
101034ec:	e0bffc17 	ldw	r2,-16(fp)
101034f0:	10001026 	beq	r2,zero,10103534 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
101034f4:	e0bffc17 	ldw	r2,-16(fp)
101034f8:	10800017 	ldw	r2,0(r2)
101034fc:	10800717 	ldw	r2,28(r2)
10103500:	10000926 	beq	r2,zero,10103528 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10103504:	e0bffc17 	ldw	r2,-16(fp)
10103508:	10800017 	ldw	r2,0(r2)
1010350c:	10800717 	ldw	r2,28(r2)
10103510:	e1bfff17 	ldw	r6,-4(fp)
10103514:	e17ffe17 	ldw	r5,-8(fp)
10103518:	e13ffc17 	ldw	r4,-16(fp)
1010351c:	103ee83a 	callr	r2
10103520:	e0bffb15 	stw	r2,-20(fp)
10103524:	00000506 	br	1010353c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10103528:	00bfde84 	movi	r2,-134
1010352c:	e0bffb15 	stw	r2,-20(fp)
10103530:	00000206 	br	1010353c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
10103534:	00bfebc4 	movi	r2,-81
10103538:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010353c:	e0bffb17 	ldw	r2,-20(fp)
10103540:	1000070e 	bge	r2,zero,10103560 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10103544:	01034680 	call	10103468 <alt_get_errno>
10103548:	1007883a 	mov	r3,r2
1010354c:	e0bffb17 	ldw	r2,-20(fp)
10103550:	0085c83a 	sub	r2,zero,r2
10103554:	18800015 	stw	r2,0(r3)
    rc = -1;
10103558:	00bfffc4 	movi	r2,-1
1010355c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10103560:	e0bffb17 	ldw	r2,-20(fp)
}
10103564:	e037883a 	mov	sp,fp
10103568:	dfc00117 	ldw	ra,4(sp)
1010356c:	df000017 	ldw	fp,0(sp)
10103570:	dec00204 	addi	sp,sp,8
10103574:	f800283a 	ret

10103578 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10103578:	defffd04 	addi	sp,sp,-12
1010357c:	dfc00215 	stw	ra,8(sp)
10103580:	df000115 	stw	fp,4(sp)
10103584:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10103588:	0009883a 	mov	r4,zero
1010358c:	01039f00 	call	101039f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10103590:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10103594:	0103a280 	call	10103a28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10103598:	01840434 	movhi	r6,4112
1010359c:	3195d004 	addi	r6,r6,22336
101035a0:	01440434 	movhi	r5,4112
101035a4:	2955d004 	addi	r5,r5,22336
101035a8:	01040434 	movhi	r4,4112
101035ac:	2115d004 	addi	r4,r4,22336
101035b0:	0104b840 	call	10104b84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
101035b4:	010472c0 	call	1010472c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
101035b8:	01040434 	movhi	r4,4112
101035bc:	2111e304 	addi	r4,r4,18316
101035c0:	01053840 	call	10105384 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
101035c4:	d0a6ad17 	ldw	r2,-25932(gp)
101035c8:	d0e6ae17 	ldw	r3,-25928(gp)
101035cc:	d126af17 	ldw	r4,-25924(gp)
101035d0:	200d883a 	mov	r6,r4
101035d4:	180b883a 	mov	r5,r3
101035d8:	1009883a 	mov	r4,r2
101035dc:	01002900 	call	10100290 <main>
101035e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
101035e4:	01000044 	movi	r4,1
101035e8:	01030b40 	call	101030b4 <close>
  exit (result);
101035ec:	e13fff17 	ldw	r4,-4(fp)
101035f0:	01053980 	call	10105398 <exit>

101035f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
101035f4:	defffe04 	addi	sp,sp,-8
101035f8:	df000115 	stw	fp,4(sp)
101035fc:	df000104 	addi	fp,sp,4
10103600:	e13fff15 	stw	r4,-4(fp)
}
10103604:	0001883a 	nop
10103608:	e037883a 	mov	sp,fp
1010360c:	df000017 	ldw	fp,0(sp)
10103610:	dec00104 	addi	sp,sp,4
10103614:	f800283a 	ret

10103618 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10103618:	defffe04 	addi	sp,sp,-8
1010361c:	df000115 	stw	fp,4(sp)
10103620:	df000104 	addi	fp,sp,4
10103624:	e13fff15 	stw	r4,-4(fp)
}
10103628:	0001883a 	nop
1010362c:	e037883a 	mov	sp,fp
10103630:	df000017 	ldw	fp,0(sp)
10103634:	dec00104 	addi	sp,sp,4
10103638:	f800283a 	ret

1010363c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010363c:	defffe04 	addi	sp,sp,-8
10103640:	dfc00115 	stw	ra,4(sp)
10103644:	df000015 	stw	fp,0(sp)
10103648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010364c:	d0a00917 	ldw	r2,-32732(gp)
10103650:	10000326 	beq	r2,zero,10103660 <alt_get_errno+0x24>
10103654:	d0a00917 	ldw	r2,-32732(gp)
10103658:	103ee83a 	callr	r2
1010365c:	00000106 	br	10103664 <alt_get_errno+0x28>
10103660:	d0a6ac04 	addi	r2,gp,-25936
}
10103664:	e037883a 	mov	sp,fp
10103668:	dfc00117 	ldw	ra,4(sp)
1010366c:	df000017 	ldw	fp,0(sp)
10103670:	dec00204 	addi	sp,sp,8
10103674:	f800283a 	ret

10103678 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10103678:	defff904 	addi	sp,sp,-28
1010367c:	dfc00615 	stw	ra,24(sp)
10103680:	df000515 	stw	fp,20(sp)
10103684:	df000504 	addi	fp,sp,20
10103688:	e13ffd15 	stw	r4,-12(fp)
1010368c:	e17ffe15 	stw	r5,-8(fp)
10103690:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103694:	e0bffd17 	ldw	r2,-12(fp)
10103698:	10000616 	blt	r2,zero,101036b4 <read+0x3c>
1010369c:	e0bffd17 	ldw	r2,-12(fp)
101036a0:	10c00324 	muli	r3,r2,12
101036a4:	00840434 	movhi	r2,4112
101036a8:	1097ef04 	addi	r2,r2,24508
101036ac:	1885883a 	add	r2,r3,r2
101036b0:	00000106 	br	101036b8 <read+0x40>
101036b4:	0005883a 	mov	r2,zero
101036b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
101036bc:	e0bffb17 	ldw	r2,-20(fp)
101036c0:	10002226 	beq	r2,zero,1010374c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101036c4:	e0bffb17 	ldw	r2,-20(fp)
101036c8:	10800217 	ldw	r2,8(r2)
101036cc:	108000cc 	andi	r2,r2,3
101036d0:	10800060 	cmpeqi	r2,r2,1
101036d4:	1000181e 	bne	r2,zero,10103738 <read+0xc0>
        (fd->dev->read))
101036d8:	e0bffb17 	ldw	r2,-20(fp)
101036dc:	10800017 	ldw	r2,0(r2)
101036e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101036e4:	10001426 	beq	r2,zero,10103738 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
101036e8:	e0bffb17 	ldw	r2,-20(fp)
101036ec:	10800017 	ldw	r2,0(r2)
101036f0:	10800517 	ldw	r2,20(r2)
101036f4:	e0ffff17 	ldw	r3,-4(fp)
101036f8:	180d883a 	mov	r6,r3
101036fc:	e17ffe17 	ldw	r5,-8(fp)
10103700:	e13ffb17 	ldw	r4,-20(fp)
10103704:	103ee83a 	callr	r2
10103708:	e0bffc15 	stw	r2,-16(fp)
1010370c:	e0bffc17 	ldw	r2,-16(fp)
10103710:	1000070e 	bge	r2,zero,10103730 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10103714:	010363c0 	call	1010363c <alt_get_errno>
10103718:	1007883a 	mov	r3,r2
1010371c:	e0bffc17 	ldw	r2,-16(fp)
10103720:	0085c83a 	sub	r2,zero,r2
10103724:	18800015 	stw	r2,0(r3)
          return -1;
10103728:	00bfffc4 	movi	r2,-1
1010372c:	00000c06 	br	10103760 <read+0xe8>
        }
        return rval;
10103730:	e0bffc17 	ldw	r2,-16(fp)
10103734:	00000a06 	br	10103760 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10103738:	010363c0 	call	1010363c <alt_get_errno>
1010373c:	1007883a 	mov	r3,r2
10103740:	00800344 	movi	r2,13
10103744:	18800015 	stw	r2,0(r3)
10103748:	00000406 	br	1010375c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010374c:	010363c0 	call	1010363c <alt_get_errno>
10103750:	1007883a 	mov	r3,r2
10103754:	00801444 	movi	r2,81
10103758:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010375c:	00bfffc4 	movi	r2,-1
}
10103760:	e037883a 	mov	sp,fp
10103764:	dfc00117 	ldw	ra,4(sp)
10103768:	df000017 	ldw	fp,0(sp)
1010376c:	dec00204 	addi	sp,sp,8
10103770:	f800283a 	ret

10103774 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10103774:	defffe04 	addi	sp,sp,-8
10103778:	df000115 	stw	fp,4(sp)
1010377c:	df000104 	addi	fp,sp,4
10103780:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10103784:	e0bfff17 	ldw	r2,-4(fp)
10103788:	108000d0 	cmplti	r2,r2,3
1010378c:	10000d1e 	bne	r2,zero,101037c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10103790:	00840434 	movhi	r2,4112
10103794:	1097ef04 	addi	r2,r2,24508
10103798:	e0ffff17 	ldw	r3,-4(fp)
1010379c:	18c00324 	muli	r3,r3,12
101037a0:	10c5883a 	add	r2,r2,r3
101037a4:	10800204 	addi	r2,r2,8
101037a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
101037ac:	00840434 	movhi	r2,4112
101037b0:	1097ef04 	addi	r2,r2,24508
101037b4:	e0ffff17 	ldw	r3,-4(fp)
101037b8:	18c00324 	muli	r3,r3,12
101037bc:	10c5883a 	add	r2,r2,r3
101037c0:	10000015 	stw	zero,0(r2)
  }
}
101037c4:	0001883a 	nop
101037c8:	e037883a 	mov	sp,fp
101037cc:	df000017 	ldw	fp,0(sp)
101037d0:	dec00104 	addi	sp,sp,4
101037d4:	f800283a 	ret

101037d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
101037d8:	defff904 	addi	sp,sp,-28
101037dc:	df000615 	stw	fp,24(sp)
101037e0:	df000604 	addi	fp,sp,24
101037e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101037e8:	0005303a 	rdctl	r2,status
101037ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101037f0:	e0fffe17 	ldw	r3,-8(fp)
101037f4:	00bfff84 	movi	r2,-2
101037f8:	1884703a 	and	r2,r3,r2
101037fc:	1001703a 	wrctl	status,r2
  
  return context;
10103800:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10103804:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10103808:	d0a00a17 	ldw	r2,-32728(gp)
1010380c:	10c000c4 	addi	r3,r2,3
10103810:	00bfff04 	movi	r2,-4
10103814:	1884703a 	and	r2,r3,r2
10103818:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010381c:	d0e00a17 	ldw	r3,-32728(gp)
10103820:	e0bfff17 	ldw	r2,-4(fp)
10103824:	1887883a 	add	r3,r3,r2
10103828:	008404b4 	movhi	r2,4114
1010382c:	10800004 	addi	r2,r2,0
10103830:	10c0062e 	bgeu	r2,r3,1010384c <sbrk+0x74>
10103834:	e0bffb17 	ldw	r2,-20(fp)
10103838:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010383c:	e0bffa17 	ldw	r2,-24(fp)
10103840:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10103844:	00bfffc4 	movi	r2,-1
10103848:	00000b06 	br	10103878 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010384c:	d0a00a17 	ldw	r2,-32728(gp)
10103850:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10103854:	d0e00a17 	ldw	r3,-32728(gp)
10103858:	e0bfff17 	ldw	r2,-4(fp)
1010385c:	1885883a 	add	r2,r3,r2
10103860:	d0a00a15 	stw	r2,-32728(gp)
10103864:	e0bffb17 	ldw	r2,-20(fp)
10103868:	e0bffc15 	stw	r2,-16(fp)
1010386c:	e0bffc17 	ldw	r2,-16(fp)
10103870:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10103874:	e0bffd17 	ldw	r2,-12(fp)
} 
10103878:	e037883a 	mov	sp,fp
1010387c:	df000017 	ldw	fp,0(sp)
10103880:	dec00104 	addi	sp,sp,4
10103884:	f800283a 	ret

10103888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103888:	defffe04 	addi	sp,sp,-8
1010388c:	dfc00115 	stw	ra,4(sp)
10103890:	df000015 	stw	fp,0(sp)
10103894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103898:	d0a00917 	ldw	r2,-32732(gp)
1010389c:	10000326 	beq	r2,zero,101038ac <alt_get_errno+0x24>
101038a0:	d0a00917 	ldw	r2,-32732(gp)
101038a4:	103ee83a 	callr	r2
101038a8:	00000106 	br	101038b0 <alt_get_errno+0x28>
101038ac:	d0a6ac04 	addi	r2,gp,-25936
}
101038b0:	e037883a 	mov	sp,fp
101038b4:	dfc00117 	ldw	ra,4(sp)
101038b8:	df000017 	ldw	fp,0(sp)
101038bc:	dec00204 	addi	sp,sp,8
101038c0:	f800283a 	ret

101038c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101038c4:	defff904 	addi	sp,sp,-28
101038c8:	dfc00615 	stw	ra,24(sp)
101038cc:	df000515 	stw	fp,20(sp)
101038d0:	df000504 	addi	fp,sp,20
101038d4:	e13ffd15 	stw	r4,-12(fp)
101038d8:	e17ffe15 	stw	r5,-8(fp)
101038dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101038e0:	e0bffd17 	ldw	r2,-12(fp)
101038e4:	10000616 	blt	r2,zero,10103900 <write+0x3c>
101038e8:	e0bffd17 	ldw	r2,-12(fp)
101038ec:	10c00324 	muli	r3,r2,12
101038f0:	00840434 	movhi	r2,4112
101038f4:	1097ef04 	addi	r2,r2,24508
101038f8:	1885883a 	add	r2,r3,r2
101038fc:	00000106 	br	10103904 <write+0x40>
10103900:	0005883a 	mov	r2,zero
10103904:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10103908:	e0bffb17 	ldw	r2,-20(fp)
1010390c:	10002126 	beq	r2,zero,10103994 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10103910:	e0bffb17 	ldw	r2,-20(fp)
10103914:	10800217 	ldw	r2,8(r2)
10103918:	108000cc 	andi	r2,r2,3
1010391c:	10001826 	beq	r2,zero,10103980 <write+0xbc>
10103920:	e0bffb17 	ldw	r2,-20(fp)
10103924:	10800017 	ldw	r2,0(r2)
10103928:	10800617 	ldw	r2,24(r2)
1010392c:	10001426 	beq	r2,zero,10103980 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10103930:	e0bffb17 	ldw	r2,-20(fp)
10103934:	10800017 	ldw	r2,0(r2)
10103938:	10800617 	ldw	r2,24(r2)
1010393c:	e0ffff17 	ldw	r3,-4(fp)
10103940:	180d883a 	mov	r6,r3
10103944:	e17ffe17 	ldw	r5,-8(fp)
10103948:	e13ffb17 	ldw	r4,-20(fp)
1010394c:	103ee83a 	callr	r2
10103950:	e0bffc15 	stw	r2,-16(fp)
10103954:	e0bffc17 	ldw	r2,-16(fp)
10103958:	1000070e 	bge	r2,zero,10103978 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010395c:	01038880 	call	10103888 <alt_get_errno>
10103960:	1007883a 	mov	r3,r2
10103964:	e0bffc17 	ldw	r2,-16(fp)
10103968:	0085c83a 	sub	r2,zero,r2
1010396c:	18800015 	stw	r2,0(r3)
        return -1;
10103970:	00bfffc4 	movi	r2,-1
10103974:	00000c06 	br	101039a8 <write+0xe4>
      }
      return rval;
10103978:	e0bffc17 	ldw	r2,-16(fp)
1010397c:	00000a06 	br	101039a8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10103980:	01038880 	call	10103888 <alt_get_errno>
10103984:	1007883a 	mov	r3,r2
10103988:	00800344 	movi	r2,13
1010398c:	18800015 	stw	r2,0(r3)
10103990:	00000406 	br	101039a4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10103994:	01038880 	call	10103888 <alt_get_errno>
10103998:	1007883a 	mov	r3,r2
1010399c:	00801444 	movi	r2,81
101039a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
101039a4:	00bfffc4 	movi	r2,-1
}
101039a8:	e037883a 	mov	sp,fp
101039ac:	dfc00117 	ldw	ra,4(sp)
101039b0:	df000017 	ldw	fp,0(sp)
101039b4:	dec00204 	addi	sp,sp,8
101039b8:	f800283a 	ret

101039bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101039bc:	defffd04 	addi	sp,sp,-12
101039c0:	dfc00215 	stw	ra,8(sp)
101039c4:	df000115 	stw	fp,4(sp)
101039c8:	df000104 	addi	fp,sp,4
101039cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
101039d0:	d1600604 	addi	r5,gp,-32744
101039d4:	e13fff17 	ldw	r4,-4(fp)
101039d8:	01046880 	call	10104688 <alt_dev_llist_insert>
}
101039dc:	e037883a 	mov	sp,fp
101039e0:	dfc00117 	ldw	ra,4(sp)
101039e4:	df000017 	ldw	fp,0(sp)
101039e8:	dec00204 	addi	sp,sp,8
101039ec:	f800283a 	ret

101039f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
101039f0:	defffd04 	addi	sp,sp,-12
101039f4:	dfc00215 	stw	ra,8(sp)
101039f8:	df000115 	stw	fp,4(sp)
101039fc:	df000104 	addi	fp,sp,4
10103a00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10103a04:	0104ff80 	call	10104ff8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10103a08:	00800044 	movi	r2,1
10103a0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10103a10:	0001883a 	nop
10103a14:	e037883a 	mov	sp,fp
10103a18:	dfc00117 	ldw	ra,4(sp)
10103a1c:	df000017 	ldw	fp,0(sp)
10103a20:	dec00204 	addi	sp,sp,8
10103a24:	f800283a 	ret

10103a28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10103a28:	defffe04 	addi	sp,sp,-8
10103a2c:	dfc00115 	stw	ra,4(sp)
10103a30:	df000015 	stw	fp,0(sp)
10103a34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10103a38:	01800044 	movi	r6,1
10103a3c:	000b883a 	mov	r5,zero
10103a40:	01040434 	movhi	r4,4112
10103a44:	21185904 	addi	r4,r4,24932
10103a48:	0103bd40 	call	10103bd4 <altera_avalon_jtag_uart_init>
10103a4c:	01040434 	movhi	r4,4112
10103a50:	21184f04 	addi	r4,r4,24892
10103a54:	01039bc0 	call	101039bc <alt_dev_reg>
}
10103a58:	0001883a 	nop
10103a5c:	e037883a 	mov	sp,fp
10103a60:	dfc00117 	ldw	ra,4(sp)
10103a64:	df000017 	ldw	fp,0(sp)
10103a68:	dec00204 	addi	sp,sp,8
10103a6c:	f800283a 	ret

10103a70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10103a70:	defffa04 	addi	sp,sp,-24
10103a74:	dfc00515 	stw	ra,20(sp)
10103a78:	df000415 	stw	fp,16(sp)
10103a7c:	df000404 	addi	fp,sp,16
10103a80:	e13ffd15 	stw	r4,-12(fp)
10103a84:	e17ffe15 	stw	r5,-8(fp)
10103a88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103a8c:	e0bffd17 	ldw	r2,-12(fp)
10103a90:	10800017 	ldw	r2,0(r2)
10103a94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10103a98:	e0bffc17 	ldw	r2,-16(fp)
10103a9c:	10c00a04 	addi	r3,r2,40
10103aa0:	e0bffd17 	ldw	r2,-12(fp)
10103aa4:	10800217 	ldw	r2,8(r2)
10103aa8:	100f883a 	mov	r7,r2
10103aac:	e1bfff17 	ldw	r6,-4(fp)
10103ab0:	e17ffe17 	ldw	r5,-8(fp)
10103ab4:	1809883a 	mov	r4,r3
10103ab8:	01040980 	call	10104098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10103abc:	e037883a 	mov	sp,fp
10103ac0:	dfc00117 	ldw	ra,4(sp)
10103ac4:	df000017 	ldw	fp,0(sp)
10103ac8:	dec00204 	addi	sp,sp,8
10103acc:	f800283a 	ret

10103ad0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10103ad0:	defffa04 	addi	sp,sp,-24
10103ad4:	dfc00515 	stw	ra,20(sp)
10103ad8:	df000415 	stw	fp,16(sp)
10103adc:	df000404 	addi	fp,sp,16
10103ae0:	e13ffd15 	stw	r4,-12(fp)
10103ae4:	e17ffe15 	stw	r5,-8(fp)
10103ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103aec:	e0bffd17 	ldw	r2,-12(fp)
10103af0:	10800017 	ldw	r2,0(r2)
10103af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10103af8:	e0bffc17 	ldw	r2,-16(fp)
10103afc:	10c00a04 	addi	r3,r2,40
10103b00:	e0bffd17 	ldw	r2,-12(fp)
10103b04:	10800217 	ldw	r2,8(r2)
10103b08:	100f883a 	mov	r7,r2
10103b0c:	e1bfff17 	ldw	r6,-4(fp)
10103b10:	e17ffe17 	ldw	r5,-8(fp)
10103b14:	1809883a 	mov	r4,r3
10103b18:	01042b40 	call	101042b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10103b1c:	e037883a 	mov	sp,fp
10103b20:	dfc00117 	ldw	ra,4(sp)
10103b24:	df000017 	ldw	fp,0(sp)
10103b28:	dec00204 	addi	sp,sp,8
10103b2c:	f800283a 	ret

10103b30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10103b30:	defffc04 	addi	sp,sp,-16
10103b34:	dfc00315 	stw	ra,12(sp)
10103b38:	df000215 	stw	fp,8(sp)
10103b3c:	df000204 	addi	fp,sp,8
10103b40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103b44:	e0bfff17 	ldw	r2,-4(fp)
10103b48:	10800017 	ldw	r2,0(r2)
10103b4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10103b50:	e0bffe17 	ldw	r2,-8(fp)
10103b54:	10c00a04 	addi	r3,r2,40
10103b58:	e0bfff17 	ldw	r2,-4(fp)
10103b5c:	10800217 	ldw	r2,8(r2)
10103b60:	100b883a 	mov	r5,r2
10103b64:	1809883a 	mov	r4,r3
10103b68:	0103f400 	call	10103f40 <altera_avalon_jtag_uart_close>
}
10103b6c:	e037883a 	mov	sp,fp
10103b70:	dfc00117 	ldw	ra,4(sp)
10103b74:	df000017 	ldw	fp,0(sp)
10103b78:	dec00204 	addi	sp,sp,8
10103b7c:	f800283a 	ret

10103b80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10103b80:	defffa04 	addi	sp,sp,-24
10103b84:	dfc00515 	stw	ra,20(sp)
10103b88:	df000415 	stw	fp,16(sp)
10103b8c:	df000404 	addi	fp,sp,16
10103b90:	e13ffd15 	stw	r4,-12(fp)
10103b94:	e17ffe15 	stw	r5,-8(fp)
10103b98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10103b9c:	e0bffd17 	ldw	r2,-12(fp)
10103ba0:	10800017 	ldw	r2,0(r2)
10103ba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10103ba8:	e0bffc17 	ldw	r2,-16(fp)
10103bac:	10800a04 	addi	r2,r2,40
10103bb0:	e1bfff17 	ldw	r6,-4(fp)
10103bb4:	e17ffe17 	ldw	r5,-8(fp)
10103bb8:	1009883a 	mov	r4,r2
10103bbc:	0103fa80 	call	10103fa8 <altera_avalon_jtag_uart_ioctl>
}
10103bc0:	e037883a 	mov	sp,fp
10103bc4:	dfc00117 	ldw	ra,4(sp)
10103bc8:	df000017 	ldw	fp,0(sp)
10103bcc:	dec00204 	addi	sp,sp,8
10103bd0:	f800283a 	ret

10103bd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10103bd4:	defffa04 	addi	sp,sp,-24
10103bd8:	dfc00515 	stw	ra,20(sp)
10103bdc:	df000415 	stw	fp,16(sp)
10103be0:	df000404 	addi	fp,sp,16
10103be4:	e13ffd15 	stw	r4,-12(fp)
10103be8:	e17ffe15 	stw	r5,-8(fp)
10103bec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103bf0:	e0bffd17 	ldw	r2,-12(fp)
10103bf4:	00c00044 	movi	r3,1
10103bf8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10103bfc:	e0bffd17 	ldw	r2,-12(fp)
10103c00:	10800017 	ldw	r2,0(r2)
10103c04:	10800104 	addi	r2,r2,4
10103c08:	1007883a 	mov	r3,r2
10103c0c:	e0bffd17 	ldw	r2,-12(fp)
10103c10:	10800817 	ldw	r2,32(r2)
10103c14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10103c18:	e0bffe17 	ldw	r2,-8(fp)
10103c1c:	e0ffff17 	ldw	r3,-4(fp)
10103c20:	d8000015 	stw	zero,0(sp)
10103c24:	e1fffd17 	ldw	r7,-12(fp)
10103c28:	01840434 	movhi	r6,4112
10103c2c:	318f2504 	addi	r6,r6,15508
10103c30:	180b883a 	mov	r5,r3
10103c34:	1009883a 	mov	r4,r2
10103c38:	01048200 	call	10104820 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10103c3c:	e0bffd17 	ldw	r2,-12(fp)
10103c40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10103c44:	e0bffd17 	ldw	r2,-12(fp)
10103c48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10103c4c:	d0e6b117 	ldw	r3,-25916(gp)
10103c50:	e1fffd17 	ldw	r7,-12(fp)
10103c54:	01840434 	movhi	r6,4112
10103c58:	318fa804 	addi	r6,r6,16032
10103c5c:	180b883a 	mov	r5,r3
10103c60:	1009883a 	mov	r4,r2
10103c64:	01044d80 	call	101044d8 <alt_alarm_start>
10103c68:	1000040e 	bge	r2,zero,10103c7c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10103c6c:	e0fffd17 	ldw	r3,-12(fp)
10103c70:	00a00034 	movhi	r2,32768
10103c74:	10bfffc4 	addi	r2,r2,-1
10103c78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10103c7c:	0001883a 	nop
10103c80:	e037883a 	mov	sp,fp
10103c84:	dfc00117 	ldw	ra,4(sp)
10103c88:	df000017 	ldw	fp,0(sp)
10103c8c:	dec00204 	addi	sp,sp,8
10103c90:	f800283a 	ret

10103c94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10103c94:	defff804 	addi	sp,sp,-32
10103c98:	df000715 	stw	fp,28(sp)
10103c9c:	df000704 	addi	fp,sp,28
10103ca0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10103ca4:	e0bfff17 	ldw	r2,-4(fp)
10103ca8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10103cac:	e0bffb17 	ldw	r2,-20(fp)
10103cb0:	10800017 	ldw	r2,0(r2)
10103cb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103cb8:	e0bffc17 	ldw	r2,-16(fp)
10103cbc:	10800104 	addi	r2,r2,4
10103cc0:	10800037 	ldwio	r2,0(r2)
10103cc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10103cc8:	e0bffd17 	ldw	r2,-12(fp)
10103ccc:	1080c00c 	andi	r2,r2,768
10103cd0:	10006d26 	beq	r2,zero,10103e88 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10103cd4:	e0bffd17 	ldw	r2,-12(fp)
10103cd8:	1080400c 	andi	r2,r2,256
10103cdc:	10003526 	beq	r2,zero,10103db4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10103ce0:	00800074 	movhi	r2,1
10103ce4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103ce8:	e0bffb17 	ldw	r2,-20(fp)
10103cec:	10800a17 	ldw	r2,40(r2)
10103cf0:	10800044 	addi	r2,r2,1
10103cf4:	1081ffcc 	andi	r2,r2,2047
10103cf8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10103cfc:	e0bffb17 	ldw	r2,-20(fp)
10103d00:	10c00b17 	ldw	r3,44(r2)
10103d04:	e0bffe17 	ldw	r2,-8(fp)
10103d08:	18801526 	beq	r3,r2,10103d60 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10103d0c:	e0bffc17 	ldw	r2,-16(fp)
10103d10:	10800037 	ldwio	r2,0(r2)
10103d14:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10103d18:	e0bff917 	ldw	r2,-28(fp)
10103d1c:	10a0000c 	andi	r2,r2,32768
10103d20:	10001126 	beq	r2,zero,10103d68 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10103d24:	e0bffb17 	ldw	r2,-20(fp)
10103d28:	10800a17 	ldw	r2,40(r2)
10103d2c:	e0fff917 	ldw	r3,-28(fp)
10103d30:	1809883a 	mov	r4,r3
10103d34:	e0fffb17 	ldw	r3,-20(fp)
10103d38:	1885883a 	add	r2,r3,r2
10103d3c:	10800e04 	addi	r2,r2,56
10103d40:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103d44:	e0bffb17 	ldw	r2,-20(fp)
10103d48:	10800a17 	ldw	r2,40(r2)
10103d4c:	10800044 	addi	r2,r2,1
10103d50:	10c1ffcc 	andi	r3,r2,2047
10103d54:	e0bffb17 	ldw	r2,-20(fp)
10103d58:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10103d5c:	003fe206 	br	10103ce8 <__alt_data_end+0xfffe3ce8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10103d60:	0001883a 	nop
10103d64:	00000106 	br	10103d6c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10103d68:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10103d6c:	e0bff917 	ldw	r2,-28(fp)
10103d70:	10bfffec 	andhi	r2,r2,65535
10103d74:	10000f26 	beq	r2,zero,10103db4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103d78:	e0bffb17 	ldw	r2,-20(fp)
10103d7c:	10c00817 	ldw	r3,32(r2)
10103d80:	00bfff84 	movi	r2,-2
10103d84:	1886703a 	and	r3,r3,r2
10103d88:	e0bffb17 	ldw	r2,-20(fp)
10103d8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10103d90:	e0bffc17 	ldw	r2,-16(fp)
10103d94:	10800104 	addi	r2,r2,4
10103d98:	1007883a 	mov	r3,r2
10103d9c:	e0bffb17 	ldw	r2,-20(fp)
10103da0:	10800817 	ldw	r2,32(r2)
10103da4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103da8:	e0bffc17 	ldw	r2,-16(fp)
10103dac:	10800104 	addi	r2,r2,4
10103db0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10103db4:	e0bffd17 	ldw	r2,-12(fp)
10103db8:	1080800c 	andi	r2,r2,512
10103dbc:	103fbe26 	beq	r2,zero,10103cb8 <__alt_data_end+0xfffe3cb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10103dc0:	e0bffd17 	ldw	r2,-12(fp)
10103dc4:	1004d43a 	srli	r2,r2,16
10103dc8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10103dcc:	00001406 	br	10103e20 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10103dd0:	e0bffc17 	ldw	r2,-16(fp)
10103dd4:	e0fffb17 	ldw	r3,-20(fp)
10103dd8:	18c00d17 	ldw	r3,52(r3)
10103ddc:	e13ffb17 	ldw	r4,-20(fp)
10103de0:	20c7883a 	add	r3,r4,r3
10103de4:	18c20e04 	addi	r3,r3,2104
10103de8:	18c00003 	ldbu	r3,0(r3)
10103dec:	18c03fcc 	andi	r3,r3,255
10103df0:	18c0201c 	xori	r3,r3,128
10103df4:	18ffe004 	addi	r3,r3,-128
10103df8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103dfc:	e0bffb17 	ldw	r2,-20(fp)
10103e00:	10800d17 	ldw	r2,52(r2)
10103e04:	10800044 	addi	r2,r2,1
10103e08:	10c1ffcc 	andi	r3,r2,2047
10103e0c:	e0bffb17 	ldw	r2,-20(fp)
10103e10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10103e14:	e0bffa17 	ldw	r2,-24(fp)
10103e18:	10bfffc4 	addi	r2,r2,-1
10103e1c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10103e20:	e0bffa17 	ldw	r2,-24(fp)
10103e24:	10000526 	beq	r2,zero,10103e3c <altera_avalon_jtag_uart_irq+0x1a8>
10103e28:	e0bffb17 	ldw	r2,-20(fp)
10103e2c:	10c00d17 	ldw	r3,52(r2)
10103e30:	e0bffb17 	ldw	r2,-20(fp)
10103e34:	10800c17 	ldw	r2,48(r2)
10103e38:	18bfe51e 	bne	r3,r2,10103dd0 <__alt_data_end+0xfffe3dd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10103e3c:	e0bffa17 	ldw	r2,-24(fp)
10103e40:	103f9d26 	beq	r2,zero,10103cb8 <__alt_data_end+0xfffe3cb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10103e44:	e0bffb17 	ldw	r2,-20(fp)
10103e48:	10c00817 	ldw	r3,32(r2)
10103e4c:	00bfff44 	movi	r2,-3
10103e50:	1886703a 	and	r3,r3,r2
10103e54:	e0bffb17 	ldw	r2,-20(fp)
10103e58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10103e5c:	e0bffb17 	ldw	r2,-20(fp)
10103e60:	10800017 	ldw	r2,0(r2)
10103e64:	10800104 	addi	r2,r2,4
10103e68:	1007883a 	mov	r3,r2
10103e6c:	e0bffb17 	ldw	r2,-20(fp)
10103e70:	10800817 	ldw	r2,32(r2)
10103e74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103e78:	e0bffc17 	ldw	r2,-16(fp)
10103e7c:	10800104 	addi	r2,r2,4
10103e80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10103e84:	003f8c06 	br	10103cb8 <__alt_data_end+0xfffe3cb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10103e88:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10103e8c:	0001883a 	nop
10103e90:	e037883a 	mov	sp,fp
10103e94:	df000017 	ldw	fp,0(sp)
10103e98:	dec00104 	addi	sp,sp,4
10103e9c:	f800283a 	ret

10103ea0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10103ea0:	defff804 	addi	sp,sp,-32
10103ea4:	df000715 	stw	fp,28(sp)
10103ea8:	df000704 	addi	fp,sp,28
10103eac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10103eb0:	e0bffb17 	ldw	r2,-20(fp)
10103eb4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10103eb8:	e0bff917 	ldw	r2,-28(fp)
10103ebc:	10800017 	ldw	r2,0(r2)
10103ec0:	10800104 	addi	r2,r2,4
10103ec4:	10800037 	ldwio	r2,0(r2)
10103ec8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10103ecc:	e0bffa17 	ldw	r2,-24(fp)
10103ed0:	1081000c 	andi	r2,r2,1024
10103ed4:	10000b26 	beq	r2,zero,10103f04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10103ed8:	e0bff917 	ldw	r2,-28(fp)
10103edc:	10800017 	ldw	r2,0(r2)
10103ee0:	10800104 	addi	r2,r2,4
10103ee4:	1007883a 	mov	r3,r2
10103ee8:	e0bff917 	ldw	r2,-28(fp)
10103eec:	10800817 	ldw	r2,32(r2)
10103ef0:	10810014 	ori	r2,r2,1024
10103ef4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10103ef8:	e0bff917 	ldw	r2,-28(fp)
10103efc:	10000915 	stw	zero,36(r2)
10103f00:	00000a06 	br	10103f2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10103f04:	e0bff917 	ldw	r2,-28(fp)
10103f08:	10c00917 	ldw	r3,36(r2)
10103f0c:	00a00034 	movhi	r2,32768
10103f10:	10bfff04 	addi	r2,r2,-4
10103f14:	10c00536 	bltu	r2,r3,10103f2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10103f18:	e0bff917 	ldw	r2,-28(fp)
10103f1c:	10800917 	ldw	r2,36(r2)
10103f20:	10c00044 	addi	r3,r2,1
10103f24:	e0bff917 	ldw	r2,-28(fp)
10103f28:	10c00915 	stw	r3,36(r2)
10103f2c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10103f30:	e037883a 	mov	sp,fp
10103f34:	df000017 	ldw	fp,0(sp)
10103f38:	dec00104 	addi	sp,sp,4
10103f3c:	f800283a 	ret

10103f40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10103f40:	defffd04 	addi	sp,sp,-12
10103f44:	df000215 	stw	fp,8(sp)
10103f48:	df000204 	addi	fp,sp,8
10103f4c:	e13ffe15 	stw	r4,-8(fp)
10103f50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103f54:	00000506 	br	10103f6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10103f58:	e0bfff17 	ldw	r2,-4(fp)
10103f5c:	1090000c 	andi	r2,r2,16384
10103f60:	10000226 	beq	r2,zero,10103f6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10103f64:	00bffd44 	movi	r2,-11
10103f68:	00000b06 	br	10103f98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103f6c:	e0bffe17 	ldw	r2,-8(fp)
10103f70:	10c00d17 	ldw	r3,52(r2)
10103f74:	e0bffe17 	ldw	r2,-8(fp)
10103f78:	10800c17 	ldw	r2,48(r2)
10103f7c:	18800526 	beq	r3,r2,10103f94 <altera_avalon_jtag_uart_close+0x54>
10103f80:	e0bffe17 	ldw	r2,-8(fp)
10103f84:	10c00917 	ldw	r3,36(r2)
10103f88:	e0bffe17 	ldw	r2,-8(fp)
10103f8c:	10800117 	ldw	r2,4(r2)
10103f90:	18bff136 	bltu	r3,r2,10103f58 <__alt_data_end+0xfffe3f58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10103f94:	0005883a 	mov	r2,zero
}
10103f98:	e037883a 	mov	sp,fp
10103f9c:	df000017 	ldw	fp,0(sp)
10103fa0:	dec00104 	addi	sp,sp,4
10103fa4:	f800283a 	ret

10103fa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10103fa8:	defffa04 	addi	sp,sp,-24
10103fac:	df000515 	stw	fp,20(sp)
10103fb0:	df000504 	addi	fp,sp,20
10103fb4:	e13ffd15 	stw	r4,-12(fp)
10103fb8:	e17ffe15 	stw	r5,-8(fp)
10103fbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10103fc0:	00bff9c4 	movi	r2,-25
10103fc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10103fc8:	e0bffe17 	ldw	r2,-8(fp)
10103fcc:	10da8060 	cmpeqi	r3,r2,27137
10103fd0:	1800031e 	bne	r3,zero,10103fe0 <altera_avalon_jtag_uart_ioctl+0x38>
10103fd4:	109a80a0 	cmpeqi	r2,r2,27138
10103fd8:	1000181e 	bne	r2,zero,1010403c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10103fdc:	00002906 	br	10104084 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10103fe0:	e0bffd17 	ldw	r2,-12(fp)
10103fe4:	10c00117 	ldw	r3,4(r2)
10103fe8:	00a00034 	movhi	r2,32768
10103fec:	10bfffc4 	addi	r2,r2,-1
10103ff0:	18802126 	beq	r3,r2,10104078 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10103ff4:	e0bfff17 	ldw	r2,-4(fp)
10103ff8:	10800017 	ldw	r2,0(r2)
10103ffc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10104000:	e0bffc17 	ldw	r2,-16(fp)
10104004:	10800090 	cmplti	r2,r2,2
10104008:	1000061e 	bne	r2,zero,10104024 <altera_avalon_jtag_uart_ioctl+0x7c>
1010400c:	e0fffc17 	ldw	r3,-16(fp)
10104010:	00a00034 	movhi	r2,32768
10104014:	10bfffc4 	addi	r2,r2,-1
10104018:	18800226 	beq	r3,r2,10104024 <altera_avalon_jtag_uart_ioctl+0x7c>
1010401c:	e0bffc17 	ldw	r2,-16(fp)
10104020:	00000206 	br	1010402c <altera_avalon_jtag_uart_ioctl+0x84>
10104024:	00a00034 	movhi	r2,32768
10104028:	10bfff84 	addi	r2,r2,-2
1010402c:	e0fffd17 	ldw	r3,-12(fp)
10104030:	18800115 	stw	r2,4(r3)
      rc = 0;
10104034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10104038:	00000f06 	br	10104078 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010403c:	e0bffd17 	ldw	r2,-12(fp)
10104040:	10c00117 	ldw	r3,4(r2)
10104044:	00a00034 	movhi	r2,32768
10104048:	10bfffc4 	addi	r2,r2,-1
1010404c:	18800c26 	beq	r3,r2,10104080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10104050:	e0bffd17 	ldw	r2,-12(fp)
10104054:	10c00917 	ldw	r3,36(r2)
10104058:	e0bffd17 	ldw	r2,-12(fp)
1010405c:	10800117 	ldw	r2,4(r2)
10104060:	1885803a 	cmpltu	r2,r3,r2
10104064:	10c03fcc 	andi	r3,r2,255
10104068:	e0bfff17 	ldw	r2,-4(fp)
1010406c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10104070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10104074:	00000206 	br	10104080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10104078:	0001883a 	nop
1010407c:	00000106 	br	10104084 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10104080:	0001883a 	nop

  default:
    break;
  }

  return rc;
10104084:	e0bffb17 	ldw	r2,-20(fp)
}
10104088:	e037883a 	mov	sp,fp
1010408c:	df000017 	ldw	fp,0(sp)
10104090:	dec00104 	addi	sp,sp,4
10104094:	f800283a 	ret

10104098 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10104098:	defff304 	addi	sp,sp,-52
1010409c:	dfc00c15 	stw	ra,48(sp)
101040a0:	df000b15 	stw	fp,44(sp)
101040a4:	df000b04 	addi	fp,sp,44
101040a8:	e13ffc15 	stw	r4,-16(fp)
101040ac:	e17ffd15 	stw	r5,-12(fp)
101040b0:	e1bffe15 	stw	r6,-8(fp)
101040b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101040b8:	e0bffd17 	ldw	r2,-12(fp)
101040bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101040c0:	00004706 	br	101041e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101040c4:	e0bffc17 	ldw	r2,-16(fp)
101040c8:	10800a17 	ldw	r2,40(r2)
101040cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
101040d0:	e0bffc17 	ldw	r2,-16(fp)
101040d4:	10800b17 	ldw	r2,44(r2)
101040d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
101040dc:	e0fff717 	ldw	r3,-36(fp)
101040e0:	e0bff817 	ldw	r2,-32(fp)
101040e4:	18800536 	bltu	r3,r2,101040fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
101040e8:	e0fff717 	ldw	r3,-36(fp)
101040ec:	e0bff817 	ldw	r2,-32(fp)
101040f0:	1885c83a 	sub	r2,r3,r2
101040f4:	e0bff615 	stw	r2,-40(fp)
101040f8:	00000406 	br	1010410c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
101040fc:	00c20004 	movi	r3,2048
10104100:	e0bff817 	ldw	r2,-32(fp)
10104104:	1885c83a 	sub	r2,r3,r2
10104108:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010410c:	e0bff617 	ldw	r2,-40(fp)
10104110:	10001e26 	beq	r2,zero,1010418c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10104114:	e0fffe17 	ldw	r3,-8(fp)
10104118:	e0bff617 	ldw	r2,-40(fp)
1010411c:	1880022e 	bgeu	r3,r2,10104128 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10104120:	e0bffe17 	ldw	r2,-8(fp)
10104124:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10104128:	e0bffc17 	ldw	r2,-16(fp)
1010412c:	10c00e04 	addi	r3,r2,56
10104130:	e0bff817 	ldw	r2,-32(fp)
10104134:	1885883a 	add	r2,r3,r2
10104138:	e1bff617 	ldw	r6,-40(fp)
1010413c:	100b883a 	mov	r5,r2
10104140:	e13ff517 	ldw	r4,-44(fp)
10104144:	01016f00 	call	101016f0 <memcpy>
      ptr   += n;
10104148:	e0fff517 	ldw	r3,-44(fp)
1010414c:	e0bff617 	ldw	r2,-40(fp)
10104150:	1885883a 	add	r2,r3,r2
10104154:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10104158:	e0fffe17 	ldw	r3,-8(fp)
1010415c:	e0bff617 	ldw	r2,-40(fp)
10104160:	1885c83a 	sub	r2,r3,r2
10104164:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104168:	e0fff817 	ldw	r3,-32(fp)
1010416c:	e0bff617 	ldw	r2,-40(fp)
10104170:	1885883a 	add	r2,r3,r2
10104174:	10c1ffcc 	andi	r3,r2,2047
10104178:	e0bffc17 	ldw	r2,-16(fp)
1010417c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10104180:	e0bffe17 	ldw	r2,-8(fp)
10104184:	00bfcf16 	blt	zero,r2,101040c4 <__alt_data_end+0xfffe40c4>
10104188:	00000106 	br	10104190 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010418c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10104190:	e0fff517 	ldw	r3,-44(fp)
10104194:	e0bffd17 	ldw	r2,-12(fp)
10104198:	1880141e 	bne	r3,r2,101041ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010419c:	e0bfff17 	ldw	r2,-4(fp)
101041a0:	1090000c 	andi	r2,r2,16384
101041a4:	1000131e 	bne	r2,zero,101041f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101041a8:	0001883a 	nop
101041ac:	e0bffc17 	ldw	r2,-16(fp)
101041b0:	10c00a17 	ldw	r3,40(r2)
101041b4:	e0bff717 	ldw	r2,-36(fp)
101041b8:	1880051e 	bne	r3,r2,101041d0 <altera_avalon_jtag_uart_read+0x138>
101041bc:	e0bffc17 	ldw	r2,-16(fp)
101041c0:	10c00917 	ldw	r3,36(r2)
101041c4:	e0bffc17 	ldw	r2,-16(fp)
101041c8:	10800117 	ldw	r2,4(r2)
101041cc:	18bff736 	bltu	r3,r2,101041ac <__alt_data_end+0xfffe41ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
101041d0:	e0bffc17 	ldw	r2,-16(fp)
101041d4:	10c00a17 	ldw	r3,40(r2)
101041d8:	e0bff717 	ldw	r2,-36(fp)
101041dc:	18800726 	beq	r3,r2,101041fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101041e0:	e0bffe17 	ldw	r2,-8(fp)
101041e4:	00bfb716 	blt	zero,r2,101040c4 <__alt_data_end+0xfffe40c4>
101041e8:	00000506 	br	10104200 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
101041ec:	0001883a 	nop
101041f0:	00000306 	br	10104200 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
101041f4:	0001883a 	nop
101041f8:	00000106 	br	10104200 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
101041fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10104200:	e0fff517 	ldw	r3,-44(fp)
10104204:	e0bffd17 	ldw	r2,-12(fp)
10104208:	18801826 	beq	r3,r2,1010426c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010420c:	0005303a 	rdctl	r2,status
10104210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104214:	e0fffb17 	ldw	r3,-20(fp)
10104218:	00bfff84 	movi	r2,-2
1010421c:	1884703a 	and	r2,r3,r2
10104220:	1001703a 	wrctl	status,r2
  
  return context;
10104224:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10104228:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010422c:	e0bffc17 	ldw	r2,-16(fp)
10104230:	10800817 	ldw	r2,32(r2)
10104234:	10c00054 	ori	r3,r2,1
10104238:	e0bffc17 	ldw	r2,-16(fp)
1010423c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104240:	e0bffc17 	ldw	r2,-16(fp)
10104244:	10800017 	ldw	r2,0(r2)
10104248:	10800104 	addi	r2,r2,4
1010424c:	1007883a 	mov	r3,r2
10104250:	e0bffc17 	ldw	r2,-16(fp)
10104254:	10800817 	ldw	r2,32(r2)
10104258:	18800035 	stwio	r2,0(r3)
1010425c:	e0bffa17 	ldw	r2,-24(fp)
10104260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104264:	e0bff917 	ldw	r2,-28(fp)
10104268:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010426c:	e0fff517 	ldw	r3,-44(fp)
10104270:	e0bffd17 	ldw	r2,-12(fp)
10104274:	18800426 	beq	r3,r2,10104288 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10104278:	e0fff517 	ldw	r3,-44(fp)
1010427c:	e0bffd17 	ldw	r2,-12(fp)
10104280:	1885c83a 	sub	r2,r3,r2
10104284:	00000606 	br	101042a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10104288:	e0bfff17 	ldw	r2,-4(fp)
1010428c:	1090000c 	andi	r2,r2,16384
10104290:	10000226 	beq	r2,zero,1010429c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10104294:	00bffd44 	movi	r2,-11
10104298:	00000106 	br	101042a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010429c:	00bffec4 	movi	r2,-5
}
101042a0:	e037883a 	mov	sp,fp
101042a4:	dfc00117 	ldw	ra,4(sp)
101042a8:	df000017 	ldw	fp,0(sp)
101042ac:	dec00204 	addi	sp,sp,8
101042b0:	f800283a 	ret

101042b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
101042b4:	defff304 	addi	sp,sp,-52
101042b8:	dfc00c15 	stw	ra,48(sp)
101042bc:	df000b15 	stw	fp,44(sp)
101042c0:	df000b04 	addi	fp,sp,44
101042c4:	e13ffc15 	stw	r4,-16(fp)
101042c8:	e17ffd15 	stw	r5,-12(fp)
101042cc:	e1bffe15 	stw	r6,-8(fp)
101042d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
101042d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
101042d8:	e0bffd17 	ldw	r2,-12(fp)
101042dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101042e0:	00003706 	br	101043c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
101042e4:	e0bffc17 	ldw	r2,-16(fp)
101042e8:	10800c17 	ldw	r2,48(r2)
101042ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
101042f0:	e0bffc17 	ldw	r2,-16(fp)
101042f4:	10800d17 	ldw	r2,52(r2)
101042f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
101042fc:	e0fff917 	ldw	r3,-28(fp)
10104300:	e0bff517 	ldw	r2,-44(fp)
10104304:	1880062e 	bgeu	r3,r2,10104320 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10104308:	e0fff517 	ldw	r3,-44(fp)
1010430c:	e0bff917 	ldw	r2,-28(fp)
10104310:	1885c83a 	sub	r2,r3,r2
10104314:	10bfffc4 	addi	r2,r2,-1
10104318:	e0bff615 	stw	r2,-40(fp)
1010431c:	00000b06 	br	1010434c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10104320:	e0bff517 	ldw	r2,-44(fp)
10104324:	10000526 	beq	r2,zero,1010433c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10104328:	00c20004 	movi	r3,2048
1010432c:	e0bff917 	ldw	r2,-28(fp)
10104330:	1885c83a 	sub	r2,r3,r2
10104334:	e0bff615 	stw	r2,-40(fp)
10104338:	00000406 	br	1010434c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010433c:	00c1ffc4 	movi	r3,2047
10104340:	e0bff917 	ldw	r2,-28(fp)
10104344:	1885c83a 	sub	r2,r3,r2
10104348:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010434c:	e0bff617 	ldw	r2,-40(fp)
10104350:	10001e26 	beq	r2,zero,101043cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10104354:	e0fffe17 	ldw	r3,-8(fp)
10104358:	e0bff617 	ldw	r2,-40(fp)
1010435c:	1880022e 	bgeu	r3,r2,10104368 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10104360:	e0bffe17 	ldw	r2,-8(fp)
10104364:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10104368:	e0bffc17 	ldw	r2,-16(fp)
1010436c:	10c20e04 	addi	r3,r2,2104
10104370:	e0bff917 	ldw	r2,-28(fp)
10104374:	1885883a 	add	r2,r3,r2
10104378:	e1bff617 	ldw	r6,-40(fp)
1010437c:	e17ffd17 	ldw	r5,-12(fp)
10104380:	1009883a 	mov	r4,r2
10104384:	01016f00 	call	101016f0 <memcpy>
      ptr   += n;
10104388:	e0fffd17 	ldw	r3,-12(fp)
1010438c:	e0bff617 	ldw	r2,-40(fp)
10104390:	1885883a 	add	r2,r3,r2
10104394:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10104398:	e0fffe17 	ldw	r3,-8(fp)
1010439c:	e0bff617 	ldw	r2,-40(fp)
101043a0:	1885c83a 	sub	r2,r3,r2
101043a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101043a8:	e0fff917 	ldw	r3,-28(fp)
101043ac:	e0bff617 	ldw	r2,-40(fp)
101043b0:	1885883a 	add	r2,r3,r2
101043b4:	10c1ffcc 	andi	r3,r2,2047
101043b8:	e0bffc17 	ldw	r2,-16(fp)
101043bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101043c0:	e0bffe17 	ldw	r2,-8(fp)
101043c4:	00bfc716 	blt	zero,r2,101042e4 <__alt_data_end+0xfffe42e4>
101043c8:	00000106 	br	101043d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
101043cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101043d0:	0005303a 	rdctl	r2,status
101043d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101043d8:	e0fffb17 	ldw	r3,-20(fp)
101043dc:	00bfff84 	movi	r2,-2
101043e0:	1884703a 	and	r2,r3,r2
101043e4:	1001703a 	wrctl	status,r2
  
  return context;
101043e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
101043ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
101043f0:	e0bffc17 	ldw	r2,-16(fp)
101043f4:	10800817 	ldw	r2,32(r2)
101043f8:	10c00094 	ori	r3,r2,2
101043fc:	e0bffc17 	ldw	r2,-16(fp)
10104400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104404:	e0bffc17 	ldw	r2,-16(fp)
10104408:	10800017 	ldw	r2,0(r2)
1010440c:	10800104 	addi	r2,r2,4
10104410:	1007883a 	mov	r3,r2
10104414:	e0bffc17 	ldw	r2,-16(fp)
10104418:	10800817 	ldw	r2,32(r2)
1010441c:	18800035 	stwio	r2,0(r3)
10104420:	e0bffa17 	ldw	r2,-24(fp)
10104424:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104428:	e0bff817 	ldw	r2,-32(fp)
1010442c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10104430:	e0bffe17 	ldw	r2,-8(fp)
10104434:	0080100e 	bge	zero,r2,10104478 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10104438:	e0bfff17 	ldw	r2,-4(fp)
1010443c:	1090000c 	andi	r2,r2,16384
10104440:	1000101e 	bne	r2,zero,10104484 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10104444:	0001883a 	nop
10104448:	e0bffc17 	ldw	r2,-16(fp)
1010444c:	10c00d17 	ldw	r3,52(r2)
10104450:	e0bff517 	ldw	r2,-44(fp)
10104454:	1880051e 	bne	r3,r2,1010446c <altera_avalon_jtag_uart_write+0x1b8>
10104458:	e0bffc17 	ldw	r2,-16(fp)
1010445c:	10c00917 	ldw	r3,36(r2)
10104460:	e0bffc17 	ldw	r2,-16(fp)
10104464:	10800117 	ldw	r2,4(r2)
10104468:	18bff736 	bltu	r3,r2,10104448 <__alt_data_end+0xfffe4448>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010446c:	e0bffc17 	ldw	r2,-16(fp)
10104470:	10800917 	ldw	r2,36(r2)
10104474:	1000051e 	bne	r2,zero,1010448c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10104478:	e0bffe17 	ldw	r2,-8(fp)
1010447c:	00bfd016 	blt	zero,r2,101043c0 <__alt_data_end+0xfffe43c0>
10104480:	00000306 	br	10104490 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10104484:	0001883a 	nop
10104488:	00000106 	br	10104490 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010448c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10104490:	e0fffd17 	ldw	r3,-12(fp)
10104494:	e0bff717 	ldw	r2,-36(fp)
10104498:	18800426 	beq	r3,r2,101044ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010449c:	e0fffd17 	ldw	r3,-12(fp)
101044a0:	e0bff717 	ldw	r2,-36(fp)
101044a4:	1885c83a 	sub	r2,r3,r2
101044a8:	00000606 	br	101044c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
101044ac:	e0bfff17 	ldw	r2,-4(fp)
101044b0:	1090000c 	andi	r2,r2,16384
101044b4:	10000226 	beq	r2,zero,101044c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
101044b8:	00bffd44 	movi	r2,-11
101044bc:	00000106 	br	101044c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
101044c0:	00bffec4 	movi	r2,-5
}
101044c4:	e037883a 	mov	sp,fp
101044c8:	dfc00117 	ldw	ra,4(sp)
101044cc:	df000017 	ldw	fp,0(sp)
101044d0:	dec00204 	addi	sp,sp,8
101044d4:	f800283a 	ret

101044d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
101044d8:	defff504 	addi	sp,sp,-44
101044dc:	df000a15 	stw	fp,40(sp)
101044e0:	df000a04 	addi	fp,sp,40
101044e4:	e13ffc15 	stw	r4,-16(fp)
101044e8:	e17ffd15 	stw	r5,-12(fp)
101044ec:	e1bffe15 	stw	r6,-8(fp)
101044f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101044f4:	e03ff615 	stw	zero,-40(fp)
101044f8:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
101044fc:	10003c26 	beq	r2,zero,101045f0 <alt_alarm_start+0x118>
  {
    if (alarm)
10104500:	e0bffc17 	ldw	r2,-16(fp)
10104504:	10003826 	beq	r2,zero,101045e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10104508:	e0bffc17 	ldw	r2,-16(fp)
1010450c:	e0fffe17 	ldw	r3,-8(fp)
10104510:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10104514:	e0bffc17 	ldw	r2,-16(fp)
10104518:	e0ffff17 	ldw	r3,-4(fp)
1010451c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104520:	0005303a 	rdctl	r2,status
10104524:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104528:	e0fff917 	ldw	r3,-28(fp)
1010452c:	00bfff84 	movi	r2,-2
10104530:	1884703a 	and	r2,r3,r2
10104534:	1001703a 	wrctl	status,r2
  
  return context;
10104538:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010453c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10104540:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
10104544:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10104548:	e0fffd17 	ldw	r3,-12(fp)
1010454c:	e0bff617 	ldw	r2,-40(fp)
10104550:	1885883a 	add	r2,r3,r2
10104554:	10c00044 	addi	r3,r2,1
10104558:	e0bffc17 	ldw	r2,-16(fp)
1010455c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10104560:	e0bffc17 	ldw	r2,-16(fp)
10104564:	10c00217 	ldw	r3,8(r2)
10104568:	e0bff617 	ldw	r2,-40(fp)
1010456c:	1880042e 	bgeu	r3,r2,10104580 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10104570:	e0bffc17 	ldw	r2,-16(fp)
10104574:	00c00044 	movi	r3,1
10104578:	10c00405 	stb	r3,16(r2)
1010457c:	00000206 	br	10104588 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10104580:	e0bffc17 	ldw	r2,-16(fp)
10104584:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10104588:	e0bffc17 	ldw	r2,-16(fp)
1010458c:	d0e00c04 	addi	r3,gp,-32720
10104590:	e0fffa15 	stw	r3,-24(fp)
10104594:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10104598:	e0bffb17 	ldw	r2,-20(fp)
1010459c:	e0fffa17 	ldw	r3,-24(fp)
101045a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101045a4:	e0bffa17 	ldw	r2,-24(fp)
101045a8:	10c00017 	ldw	r3,0(r2)
101045ac:	e0bffb17 	ldw	r2,-20(fp)
101045b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101045b4:	e0bffa17 	ldw	r2,-24(fp)
101045b8:	10800017 	ldw	r2,0(r2)
101045bc:	e0fffb17 	ldw	r3,-20(fp)
101045c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101045c4:	e0bffa17 	ldw	r2,-24(fp)
101045c8:	e0fffb17 	ldw	r3,-20(fp)
101045cc:	10c00015 	stw	r3,0(r2)
101045d0:	e0bff817 	ldw	r2,-32(fp)
101045d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101045d8:	e0bff717 	ldw	r2,-36(fp)
101045dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101045e0:	0005883a 	mov	r2,zero
101045e4:	00000306 	br	101045f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
101045e8:	00bffa84 	movi	r2,-22
101045ec:	00000106 	br	101045f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101045f0:	00bfde84 	movi	r2,-134
  }
}
101045f4:	e037883a 	mov	sp,fp
101045f8:	df000017 	ldw	fp,0(sp)
101045fc:	dec00104 	addi	sp,sp,4
10104600:	f800283a 	ret

10104604 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10104604:	defffe04 	addi	sp,sp,-8
10104608:	df000115 	stw	fp,4(sp)
1010460c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10104610:	e03fff15 	stw	zero,-4(fp)
10104614:	00000506 	br	1010462c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10104618:	e0bfff17 	ldw	r2,-4(fp)
1010461c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10104620:	e0bfff17 	ldw	r2,-4(fp)
10104624:	10800804 	addi	r2,r2,32
10104628:	e0bfff15 	stw	r2,-4(fp)
1010462c:	e0bfff17 	ldw	r2,-4(fp)
10104630:	10820030 	cmpltui	r2,r2,2048
10104634:	103ff81e 	bne	r2,zero,10104618 <__alt_data_end+0xfffe4618>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10104638:	0001883a 	nop
1010463c:	e037883a 	mov	sp,fp
10104640:	df000017 	ldw	fp,0(sp)
10104644:	dec00104 	addi	sp,sp,4
10104648:	f800283a 	ret

1010464c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010464c:	defffe04 	addi	sp,sp,-8
10104650:	dfc00115 	stw	ra,4(sp)
10104654:	df000015 	stw	fp,0(sp)
10104658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010465c:	d0a00917 	ldw	r2,-32732(gp)
10104660:	10000326 	beq	r2,zero,10104670 <alt_get_errno+0x24>
10104664:	d0a00917 	ldw	r2,-32732(gp)
10104668:	103ee83a 	callr	r2
1010466c:	00000106 	br	10104674 <alt_get_errno+0x28>
10104670:	d0a6ac04 	addi	r2,gp,-25936
}
10104674:	e037883a 	mov	sp,fp
10104678:	dfc00117 	ldw	ra,4(sp)
1010467c:	df000017 	ldw	fp,0(sp)
10104680:	dec00204 	addi	sp,sp,8
10104684:	f800283a 	ret

10104688 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10104688:	defffa04 	addi	sp,sp,-24
1010468c:	dfc00515 	stw	ra,20(sp)
10104690:	df000415 	stw	fp,16(sp)
10104694:	df000404 	addi	fp,sp,16
10104698:	e13ffe15 	stw	r4,-8(fp)
1010469c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101046a0:	e0bffe17 	ldw	r2,-8(fp)
101046a4:	10000326 	beq	r2,zero,101046b4 <alt_dev_llist_insert+0x2c>
101046a8:	e0bffe17 	ldw	r2,-8(fp)
101046ac:	10800217 	ldw	r2,8(r2)
101046b0:	1000061e 	bne	r2,zero,101046cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101046b4:	010464c0 	call	1010464c <alt_get_errno>
101046b8:	1007883a 	mov	r3,r2
101046bc:	00800584 	movi	r2,22
101046c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101046c4:	00bffa84 	movi	r2,-22
101046c8:	00001306 	br	10104718 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101046cc:	e0bffe17 	ldw	r2,-8(fp)
101046d0:	e0ffff17 	ldw	r3,-4(fp)
101046d4:	e0fffc15 	stw	r3,-16(fp)
101046d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101046dc:	e0bffd17 	ldw	r2,-12(fp)
101046e0:	e0fffc17 	ldw	r3,-16(fp)
101046e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101046e8:	e0bffc17 	ldw	r2,-16(fp)
101046ec:	10c00017 	ldw	r3,0(r2)
101046f0:	e0bffd17 	ldw	r2,-12(fp)
101046f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101046f8:	e0bffc17 	ldw	r2,-16(fp)
101046fc:	10800017 	ldw	r2,0(r2)
10104700:	e0fffd17 	ldw	r3,-12(fp)
10104704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10104708:	e0bffc17 	ldw	r2,-16(fp)
1010470c:	e0fffd17 	ldw	r3,-12(fp)
10104710:	10c00015 	stw	r3,0(r2)

  return 0;  
10104714:	0005883a 	mov	r2,zero
}
10104718:	e037883a 	mov	sp,fp
1010471c:	dfc00117 	ldw	ra,4(sp)
10104720:	df000017 	ldw	fp,0(sp)
10104724:	dec00204 	addi	sp,sp,8
10104728:	f800283a 	ret

1010472c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010472c:	defffd04 	addi	sp,sp,-12
10104730:	dfc00215 	stw	ra,8(sp)
10104734:	df000115 	stw	fp,4(sp)
10104738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010473c:	00840434 	movhi	r2,4112
10104740:	1095c504 	addi	r2,r2,22292
10104744:	e0bfff15 	stw	r2,-4(fp)
10104748:	00000606 	br	10104764 <_do_ctors+0x38>
        (*ctor) (); 
1010474c:	e0bfff17 	ldw	r2,-4(fp)
10104750:	10800017 	ldw	r2,0(r2)
10104754:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10104758:	e0bfff17 	ldw	r2,-4(fp)
1010475c:	10bfff04 	addi	r2,r2,-4
10104760:	e0bfff15 	stw	r2,-4(fp)
10104764:	e0ffff17 	ldw	r3,-4(fp)
10104768:	00840434 	movhi	r2,4112
1010476c:	1095c604 	addi	r2,r2,22296
10104770:	18bff62e 	bgeu	r3,r2,1010474c <__alt_data_end+0xfffe474c>
        (*ctor) (); 
}
10104774:	0001883a 	nop
10104778:	e037883a 	mov	sp,fp
1010477c:	dfc00117 	ldw	ra,4(sp)
10104780:	df000017 	ldw	fp,0(sp)
10104784:	dec00204 	addi	sp,sp,8
10104788:	f800283a 	ret

1010478c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010478c:	defffd04 	addi	sp,sp,-12
10104790:	dfc00215 	stw	ra,8(sp)
10104794:	df000115 	stw	fp,4(sp)
10104798:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010479c:	00840434 	movhi	r2,4112
101047a0:	1095c504 	addi	r2,r2,22292
101047a4:	e0bfff15 	stw	r2,-4(fp)
101047a8:	00000606 	br	101047c4 <_do_dtors+0x38>
        (*dtor) (); 
101047ac:	e0bfff17 	ldw	r2,-4(fp)
101047b0:	10800017 	ldw	r2,0(r2)
101047b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101047b8:	e0bfff17 	ldw	r2,-4(fp)
101047bc:	10bfff04 	addi	r2,r2,-4
101047c0:	e0bfff15 	stw	r2,-4(fp)
101047c4:	e0ffff17 	ldw	r3,-4(fp)
101047c8:	00840434 	movhi	r2,4112
101047cc:	1095c604 	addi	r2,r2,22296
101047d0:	18bff62e 	bgeu	r3,r2,101047ac <__alt_data_end+0xfffe47ac>
        (*dtor) (); 
}
101047d4:	0001883a 	nop
101047d8:	e037883a 	mov	sp,fp
101047dc:	dfc00117 	ldw	ra,4(sp)
101047e0:	df000017 	ldw	fp,0(sp)
101047e4:	dec00204 	addi	sp,sp,8
101047e8:	f800283a 	ret

101047ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
101047ec:	defffe04 	addi	sp,sp,-8
101047f0:	dfc00115 	stw	ra,4(sp)
101047f4:	df000015 	stw	fp,0(sp)
101047f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
101047fc:	01440004 	movi	r5,4096
10104800:	0009883a 	mov	r4,zero
10104804:	01052580 	call	10105258 <alt_icache_flush>
#endif
}
10104808:	0001883a 	nop
1010480c:	e037883a 	mov	sp,fp
10104810:	dfc00117 	ldw	ra,4(sp)
10104814:	df000017 	ldw	fp,0(sp)
10104818:	dec00204 	addi	sp,sp,8
1010481c:	f800283a 	ret

10104820 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10104820:	defff904 	addi	sp,sp,-28
10104824:	dfc00615 	stw	ra,24(sp)
10104828:	df000515 	stw	fp,20(sp)
1010482c:	df000504 	addi	fp,sp,20
10104830:	e13ffc15 	stw	r4,-16(fp)
10104834:	e17ffd15 	stw	r5,-12(fp)
10104838:	e1bffe15 	stw	r6,-8(fp)
1010483c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10104840:	e0800217 	ldw	r2,8(fp)
10104844:	d8800015 	stw	r2,0(sp)
10104848:	e1ffff17 	ldw	r7,-4(fp)
1010484c:	e1bffe17 	ldw	r6,-8(fp)
10104850:	e17ffd17 	ldw	r5,-12(fp)
10104854:	e13ffc17 	ldw	r4,-16(fp)
10104858:	01049d00 	call	101049d0 <alt_iic_isr_register>
}  
1010485c:	e037883a 	mov	sp,fp
10104860:	dfc00117 	ldw	ra,4(sp)
10104864:	df000017 	ldw	fp,0(sp)
10104868:	dec00204 	addi	sp,sp,8
1010486c:	f800283a 	ret

10104870 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10104870:	defff904 	addi	sp,sp,-28
10104874:	df000615 	stw	fp,24(sp)
10104878:	df000604 	addi	fp,sp,24
1010487c:	e13ffe15 	stw	r4,-8(fp)
10104880:	e17fff15 	stw	r5,-4(fp)
10104884:	e0bfff17 	ldw	r2,-4(fp)
10104888:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010488c:	0005303a 	rdctl	r2,status
10104890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104894:	e0fffb17 	ldw	r3,-20(fp)
10104898:	00bfff84 	movi	r2,-2
1010489c:	1884703a 	and	r2,r3,r2
101048a0:	1001703a 	wrctl	status,r2
  
  return context;
101048a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101048a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
101048ac:	00c00044 	movi	r3,1
101048b0:	e0bffa17 	ldw	r2,-24(fp)
101048b4:	1884983a 	sll	r2,r3,r2
101048b8:	1007883a 	mov	r3,r2
101048bc:	d0a6b017 	ldw	r2,-25920(gp)
101048c0:	1884b03a 	or	r2,r3,r2
101048c4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101048c8:	d0a6b017 	ldw	r2,-25920(gp)
101048cc:	100170fa 	wrctl	ienable,r2
101048d0:	e0bffc17 	ldw	r2,-16(fp)
101048d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101048d8:	e0bffd17 	ldw	r2,-12(fp)
101048dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101048e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
101048e4:	0001883a 	nop
}
101048e8:	e037883a 	mov	sp,fp
101048ec:	df000017 	ldw	fp,0(sp)
101048f0:	dec00104 	addi	sp,sp,4
101048f4:	f800283a 	ret

101048f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
101048f8:	defff904 	addi	sp,sp,-28
101048fc:	df000615 	stw	fp,24(sp)
10104900:	df000604 	addi	fp,sp,24
10104904:	e13ffe15 	stw	r4,-8(fp)
10104908:	e17fff15 	stw	r5,-4(fp)
1010490c:	e0bfff17 	ldw	r2,-4(fp)
10104910:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104914:	0005303a 	rdctl	r2,status
10104918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010491c:	e0fffb17 	ldw	r3,-20(fp)
10104920:	00bfff84 	movi	r2,-2
10104924:	1884703a 	and	r2,r3,r2
10104928:	1001703a 	wrctl	status,r2
  
  return context;
1010492c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10104930:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10104934:	00c00044 	movi	r3,1
10104938:	e0bffa17 	ldw	r2,-24(fp)
1010493c:	1884983a 	sll	r2,r3,r2
10104940:	0084303a 	nor	r2,zero,r2
10104944:	1007883a 	mov	r3,r2
10104948:	d0a6b017 	ldw	r2,-25920(gp)
1010494c:	1884703a 	and	r2,r3,r2
10104950:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10104954:	d0a6b017 	ldw	r2,-25920(gp)
10104958:	100170fa 	wrctl	ienable,r2
1010495c:	e0bffc17 	ldw	r2,-16(fp)
10104960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104964:	e0bffd17 	ldw	r2,-12(fp)
10104968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010496c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10104970:	0001883a 	nop
}
10104974:	e037883a 	mov	sp,fp
10104978:	df000017 	ldw	fp,0(sp)
1010497c:	dec00104 	addi	sp,sp,4
10104980:	f800283a 	ret

10104984 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10104984:	defffc04 	addi	sp,sp,-16
10104988:	df000315 	stw	fp,12(sp)
1010498c:	df000304 	addi	fp,sp,12
10104990:	e13ffe15 	stw	r4,-8(fp)
10104994:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10104998:	000530fa 	rdctl	r2,ienable
1010499c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101049a0:	00c00044 	movi	r3,1
101049a4:	e0bfff17 	ldw	r2,-4(fp)
101049a8:	1884983a 	sll	r2,r3,r2
101049ac:	1007883a 	mov	r3,r2
101049b0:	e0bffd17 	ldw	r2,-12(fp)
101049b4:	1884703a 	and	r2,r3,r2
101049b8:	1004c03a 	cmpne	r2,r2,zero
101049bc:	10803fcc 	andi	r2,r2,255
}
101049c0:	e037883a 	mov	sp,fp
101049c4:	df000017 	ldw	fp,0(sp)
101049c8:	dec00104 	addi	sp,sp,4
101049cc:	f800283a 	ret

101049d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101049d0:	defff504 	addi	sp,sp,-44
101049d4:	dfc00a15 	stw	ra,40(sp)
101049d8:	df000915 	stw	fp,36(sp)
101049dc:	df000904 	addi	fp,sp,36
101049e0:	e13ffc15 	stw	r4,-16(fp)
101049e4:	e17ffd15 	stw	r5,-12(fp)
101049e8:	e1bffe15 	stw	r6,-8(fp)
101049ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
101049f0:	00bffa84 	movi	r2,-22
101049f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
101049f8:	e0bffd17 	ldw	r2,-12(fp)
101049fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10104a00:	e0bff817 	ldw	r2,-32(fp)
10104a04:	10800808 	cmpgei	r2,r2,32
10104a08:	1000271e 	bne	r2,zero,10104aa8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104a0c:	0005303a 	rdctl	r2,status
10104a10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104a14:	e0fffb17 	ldw	r3,-20(fp)
10104a18:	00bfff84 	movi	r2,-2
10104a1c:	1884703a 	and	r2,r3,r2
10104a20:	1001703a 	wrctl	status,r2
  
  return context;
10104a24:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10104a28:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10104a2c:	00840474 	movhi	r2,4113
10104a30:	10a32504 	addi	r2,r2,-29548
10104a34:	e0fff817 	ldw	r3,-32(fp)
10104a38:	180690fa 	slli	r3,r3,3
10104a3c:	10c5883a 	add	r2,r2,r3
10104a40:	e0fffe17 	ldw	r3,-8(fp)
10104a44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10104a48:	00840474 	movhi	r2,4113
10104a4c:	10a32504 	addi	r2,r2,-29548
10104a50:	e0fff817 	ldw	r3,-32(fp)
10104a54:	180690fa 	slli	r3,r3,3
10104a58:	10c5883a 	add	r2,r2,r3
10104a5c:	10800104 	addi	r2,r2,4
10104a60:	e0ffff17 	ldw	r3,-4(fp)
10104a64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10104a68:	e0bffe17 	ldw	r2,-8(fp)
10104a6c:	10000526 	beq	r2,zero,10104a84 <alt_iic_isr_register+0xb4>
10104a70:	e0bff817 	ldw	r2,-32(fp)
10104a74:	100b883a 	mov	r5,r2
10104a78:	e13ffc17 	ldw	r4,-16(fp)
10104a7c:	01048700 	call	10104870 <alt_ic_irq_enable>
10104a80:	00000406 	br	10104a94 <alt_iic_isr_register+0xc4>
10104a84:	e0bff817 	ldw	r2,-32(fp)
10104a88:	100b883a 	mov	r5,r2
10104a8c:	e13ffc17 	ldw	r4,-16(fp)
10104a90:	01048f80 	call	101048f8 <alt_ic_irq_disable>
10104a94:	e0bff715 	stw	r2,-36(fp)
10104a98:	e0bffa17 	ldw	r2,-24(fp)
10104a9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104aa0:	e0bff917 	ldw	r2,-28(fp)
10104aa4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10104aa8:	e0bff717 	ldw	r2,-36(fp)
}
10104aac:	e037883a 	mov	sp,fp
10104ab0:	dfc00117 	ldw	ra,4(sp)
10104ab4:	df000017 	ldw	fp,0(sp)
10104ab8:	dec00204 	addi	sp,sp,8
10104abc:	f800283a 	ret

10104ac0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10104ac0:	defff904 	addi	sp,sp,-28
10104ac4:	dfc00615 	stw	ra,24(sp)
10104ac8:	df000515 	stw	fp,20(sp)
10104acc:	df000504 	addi	fp,sp,20
10104ad0:	e13ffc15 	stw	r4,-16(fp)
10104ad4:	e17ffd15 	stw	r5,-12(fp)
10104ad8:	e1bffe15 	stw	r6,-8(fp)
10104adc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10104ae0:	e1bfff17 	ldw	r6,-4(fp)
10104ae4:	e17ffe17 	ldw	r5,-8(fp)
10104ae8:	e13ffd17 	ldw	r4,-12(fp)
10104aec:	0104d000 	call	10104d00 <open>
10104af0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10104af4:	e0bffb17 	ldw	r2,-20(fp)
10104af8:	10001c16 	blt	r2,zero,10104b6c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10104afc:	00840434 	movhi	r2,4112
10104b00:	1097ef04 	addi	r2,r2,24508
10104b04:	e0fffb17 	ldw	r3,-20(fp)
10104b08:	18c00324 	muli	r3,r3,12
10104b0c:	10c5883a 	add	r2,r2,r3
10104b10:	10c00017 	ldw	r3,0(r2)
10104b14:	e0bffc17 	ldw	r2,-16(fp)
10104b18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10104b1c:	00840434 	movhi	r2,4112
10104b20:	1097ef04 	addi	r2,r2,24508
10104b24:	e0fffb17 	ldw	r3,-20(fp)
10104b28:	18c00324 	muli	r3,r3,12
10104b2c:	10c5883a 	add	r2,r2,r3
10104b30:	10800104 	addi	r2,r2,4
10104b34:	10c00017 	ldw	r3,0(r2)
10104b38:	e0bffc17 	ldw	r2,-16(fp)
10104b3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10104b40:	00840434 	movhi	r2,4112
10104b44:	1097ef04 	addi	r2,r2,24508
10104b48:	e0fffb17 	ldw	r3,-20(fp)
10104b4c:	18c00324 	muli	r3,r3,12
10104b50:	10c5883a 	add	r2,r2,r3
10104b54:	10800204 	addi	r2,r2,8
10104b58:	10c00017 	ldw	r3,0(r2)
10104b5c:	e0bffc17 	ldw	r2,-16(fp)
10104b60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10104b64:	e13ffb17 	ldw	r4,-20(fp)
10104b68:	01037740 	call	10103774 <alt_release_fd>
  }
} 
10104b6c:	0001883a 	nop
10104b70:	e037883a 	mov	sp,fp
10104b74:	dfc00117 	ldw	ra,4(sp)
10104b78:	df000017 	ldw	fp,0(sp)
10104b7c:	dec00204 	addi	sp,sp,8
10104b80:	f800283a 	ret

10104b84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10104b84:	defffb04 	addi	sp,sp,-20
10104b88:	dfc00415 	stw	ra,16(sp)
10104b8c:	df000315 	stw	fp,12(sp)
10104b90:	df000304 	addi	fp,sp,12
10104b94:	e13ffd15 	stw	r4,-12(fp)
10104b98:	e17ffe15 	stw	r5,-8(fp)
10104b9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10104ba0:	01c07fc4 	movi	r7,511
10104ba4:	01800044 	movi	r6,1
10104ba8:	e17ffd17 	ldw	r5,-12(fp)
10104bac:	01040434 	movhi	r4,4112
10104bb0:	2117f204 	addi	r4,r4,24520
10104bb4:	0104ac00 	call	10104ac0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10104bb8:	01c07fc4 	movi	r7,511
10104bbc:	000d883a 	mov	r6,zero
10104bc0:	e17ffe17 	ldw	r5,-8(fp)
10104bc4:	01040434 	movhi	r4,4112
10104bc8:	2117ef04 	addi	r4,r4,24508
10104bcc:	0104ac00 	call	10104ac0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10104bd0:	01c07fc4 	movi	r7,511
10104bd4:	01800044 	movi	r6,1
10104bd8:	e17fff17 	ldw	r5,-4(fp)
10104bdc:	01040434 	movhi	r4,4112
10104be0:	2117f504 	addi	r4,r4,24532
10104be4:	0104ac00 	call	10104ac0 <alt_open_fd>
}  
10104be8:	0001883a 	nop
10104bec:	e037883a 	mov	sp,fp
10104bf0:	dfc00117 	ldw	ra,4(sp)
10104bf4:	df000017 	ldw	fp,0(sp)
10104bf8:	dec00204 	addi	sp,sp,8
10104bfc:	f800283a 	ret

10104c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10104c00:	defffe04 	addi	sp,sp,-8
10104c04:	dfc00115 	stw	ra,4(sp)
10104c08:	df000015 	stw	fp,0(sp)
10104c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10104c10:	d0a00917 	ldw	r2,-32732(gp)
10104c14:	10000326 	beq	r2,zero,10104c24 <alt_get_errno+0x24>
10104c18:	d0a00917 	ldw	r2,-32732(gp)
10104c1c:	103ee83a 	callr	r2
10104c20:	00000106 	br	10104c28 <alt_get_errno+0x28>
10104c24:	d0a6ac04 	addi	r2,gp,-25936
}
10104c28:	e037883a 	mov	sp,fp
10104c2c:	dfc00117 	ldw	ra,4(sp)
10104c30:	df000017 	ldw	fp,0(sp)
10104c34:	dec00204 	addi	sp,sp,8
10104c38:	f800283a 	ret

10104c3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10104c3c:	defffd04 	addi	sp,sp,-12
10104c40:	df000215 	stw	fp,8(sp)
10104c44:	df000204 	addi	fp,sp,8
10104c48:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10104c4c:	e0bfff17 	ldw	r2,-4(fp)
10104c50:	10800217 	ldw	r2,8(r2)
10104c54:	10d00034 	orhi	r3,r2,16384
10104c58:	e0bfff17 	ldw	r2,-4(fp)
10104c5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10104c60:	e03ffe15 	stw	zero,-8(fp)
10104c64:	00001d06 	br	10104cdc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10104c68:	00840434 	movhi	r2,4112
10104c6c:	1097ef04 	addi	r2,r2,24508
10104c70:	e0fffe17 	ldw	r3,-8(fp)
10104c74:	18c00324 	muli	r3,r3,12
10104c78:	10c5883a 	add	r2,r2,r3
10104c7c:	10c00017 	ldw	r3,0(r2)
10104c80:	e0bfff17 	ldw	r2,-4(fp)
10104c84:	10800017 	ldw	r2,0(r2)
10104c88:	1880111e 	bne	r3,r2,10104cd0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104c8c:	00840434 	movhi	r2,4112
10104c90:	1097ef04 	addi	r2,r2,24508
10104c94:	e0fffe17 	ldw	r3,-8(fp)
10104c98:	18c00324 	muli	r3,r3,12
10104c9c:	10c5883a 	add	r2,r2,r3
10104ca0:	10800204 	addi	r2,r2,8
10104ca4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10104ca8:	1000090e 	bge	r2,zero,10104cd0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10104cac:	e0bffe17 	ldw	r2,-8(fp)
10104cb0:	10c00324 	muli	r3,r2,12
10104cb4:	00840434 	movhi	r2,4112
10104cb8:	1097ef04 	addi	r2,r2,24508
10104cbc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104cc0:	e0bfff17 	ldw	r2,-4(fp)
10104cc4:	18800226 	beq	r3,r2,10104cd0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10104cc8:	00bffcc4 	movi	r2,-13
10104ccc:	00000806 	br	10104cf0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10104cd0:	e0bffe17 	ldw	r2,-8(fp)
10104cd4:	10800044 	addi	r2,r2,1
10104cd8:	e0bffe15 	stw	r2,-8(fp)
10104cdc:	d0a00817 	ldw	r2,-32736(gp)
10104ce0:	1007883a 	mov	r3,r2
10104ce4:	e0bffe17 	ldw	r2,-8(fp)
10104ce8:	18bfdf2e 	bgeu	r3,r2,10104c68 <__alt_data_end+0xfffe4c68>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10104cec:	0005883a 	mov	r2,zero
}
10104cf0:	e037883a 	mov	sp,fp
10104cf4:	df000017 	ldw	fp,0(sp)
10104cf8:	dec00104 	addi	sp,sp,4
10104cfc:	f800283a 	ret

10104d00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10104d00:	defff604 	addi	sp,sp,-40
10104d04:	dfc00915 	stw	ra,36(sp)
10104d08:	df000815 	stw	fp,32(sp)
10104d0c:	df000804 	addi	fp,sp,32
10104d10:	e13ffd15 	stw	r4,-12(fp)
10104d14:	e17ffe15 	stw	r5,-8(fp)
10104d18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10104d1c:	00bfffc4 	movi	r2,-1
10104d20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10104d24:	00bffb44 	movi	r2,-19
10104d28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10104d2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10104d30:	d1600604 	addi	r5,gp,-32744
10104d34:	e13ffd17 	ldw	r4,-12(fp)
10104d38:	010501c0 	call	1010501c <alt_find_dev>
10104d3c:	e0bff815 	stw	r2,-32(fp)
10104d40:	e0bff817 	ldw	r2,-32(fp)
10104d44:	1000051e 	bne	r2,zero,10104d5c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10104d48:	e13ffd17 	ldw	r4,-12(fp)
10104d4c:	01050ac0 	call	101050ac <alt_find_file>
10104d50:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10104d54:	00800044 	movi	r2,1
10104d58:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10104d5c:	e0bff817 	ldw	r2,-32(fp)
10104d60:	10002926 	beq	r2,zero,10104e08 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10104d64:	e13ff817 	ldw	r4,-32(fp)
10104d68:	01051b40 	call	101051b4 <alt_get_fd>
10104d6c:	e0bff915 	stw	r2,-28(fp)
10104d70:	e0bff917 	ldw	r2,-28(fp)
10104d74:	1000030e 	bge	r2,zero,10104d84 <open+0x84>
    {
      status = index;
10104d78:	e0bff917 	ldw	r2,-28(fp)
10104d7c:	e0bffa15 	stw	r2,-24(fp)
10104d80:	00002306 	br	10104e10 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10104d84:	e0bff917 	ldw	r2,-28(fp)
10104d88:	10c00324 	muli	r3,r2,12
10104d8c:	00840434 	movhi	r2,4112
10104d90:	1097ef04 	addi	r2,r2,24508
10104d94:	1885883a 	add	r2,r3,r2
10104d98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10104d9c:	e0fffe17 	ldw	r3,-8(fp)
10104da0:	00900034 	movhi	r2,16384
10104da4:	10bfffc4 	addi	r2,r2,-1
10104da8:	1886703a 	and	r3,r3,r2
10104dac:	e0bffc17 	ldw	r2,-16(fp)
10104db0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10104db4:	e0bffb17 	ldw	r2,-20(fp)
10104db8:	1000051e 	bne	r2,zero,10104dd0 <open+0xd0>
10104dbc:	e13ffc17 	ldw	r4,-16(fp)
10104dc0:	0104c3c0 	call	10104c3c <alt_file_locked>
10104dc4:	e0bffa15 	stw	r2,-24(fp)
10104dc8:	e0bffa17 	ldw	r2,-24(fp)
10104dcc:	10001016 	blt	r2,zero,10104e10 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10104dd0:	e0bff817 	ldw	r2,-32(fp)
10104dd4:	10800317 	ldw	r2,12(r2)
10104dd8:	10000826 	beq	r2,zero,10104dfc <open+0xfc>
10104ddc:	e0bff817 	ldw	r2,-32(fp)
10104de0:	10800317 	ldw	r2,12(r2)
10104de4:	e1ffff17 	ldw	r7,-4(fp)
10104de8:	e1bffe17 	ldw	r6,-8(fp)
10104dec:	e17ffd17 	ldw	r5,-12(fp)
10104df0:	e13ffc17 	ldw	r4,-16(fp)
10104df4:	103ee83a 	callr	r2
10104df8:	00000106 	br	10104e00 <open+0x100>
10104dfc:	0005883a 	mov	r2,zero
10104e00:	e0bffa15 	stw	r2,-24(fp)
10104e04:	00000206 	br	10104e10 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10104e08:	00bffb44 	movi	r2,-19
10104e0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10104e10:	e0bffa17 	ldw	r2,-24(fp)
10104e14:	1000090e 	bge	r2,zero,10104e3c <open+0x13c>
  {
    alt_release_fd (index);  
10104e18:	e13ff917 	ldw	r4,-28(fp)
10104e1c:	01037740 	call	10103774 <alt_release_fd>
    ALT_ERRNO = -status;
10104e20:	0104c000 	call	10104c00 <alt_get_errno>
10104e24:	1007883a 	mov	r3,r2
10104e28:	e0bffa17 	ldw	r2,-24(fp)
10104e2c:	0085c83a 	sub	r2,zero,r2
10104e30:	18800015 	stw	r2,0(r3)
    return -1;
10104e34:	00bfffc4 	movi	r2,-1
10104e38:	00000106 	br	10104e40 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10104e3c:	e0bff917 	ldw	r2,-28(fp)
}
10104e40:	e037883a 	mov	sp,fp
10104e44:	dfc00117 	ldw	ra,4(sp)
10104e48:	df000017 	ldw	fp,0(sp)
10104e4c:	dec00204 	addi	sp,sp,8
10104e50:	f800283a 	ret

10104e54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10104e54:	defffa04 	addi	sp,sp,-24
10104e58:	df000515 	stw	fp,20(sp)
10104e5c:	df000504 	addi	fp,sp,20
10104e60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104e64:	0005303a 	rdctl	r2,status
10104e68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104e6c:	e0fffc17 	ldw	r3,-16(fp)
10104e70:	00bfff84 	movi	r2,-2
10104e74:	1884703a 	and	r2,r3,r2
10104e78:	1001703a 	wrctl	status,r2
  
  return context;
10104e7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10104e80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10104e84:	e0bfff17 	ldw	r2,-4(fp)
10104e88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10104e8c:	e0bffd17 	ldw	r2,-12(fp)
10104e90:	10800017 	ldw	r2,0(r2)
10104e94:	e0fffd17 	ldw	r3,-12(fp)
10104e98:	18c00117 	ldw	r3,4(r3)
10104e9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10104ea0:	e0bffd17 	ldw	r2,-12(fp)
10104ea4:	10800117 	ldw	r2,4(r2)
10104ea8:	e0fffd17 	ldw	r3,-12(fp)
10104eac:	18c00017 	ldw	r3,0(r3)
10104eb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10104eb4:	e0bffd17 	ldw	r2,-12(fp)
10104eb8:	e0fffd17 	ldw	r3,-12(fp)
10104ebc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10104ec0:	e0bffd17 	ldw	r2,-12(fp)
10104ec4:	e0fffd17 	ldw	r3,-12(fp)
10104ec8:	10c00015 	stw	r3,0(r2)
10104ecc:	e0bffb17 	ldw	r2,-20(fp)
10104ed0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104ed4:	e0bffe17 	ldw	r2,-8(fp)
10104ed8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10104edc:	0001883a 	nop
10104ee0:	e037883a 	mov	sp,fp
10104ee4:	df000017 	ldw	fp,0(sp)
10104ee8:	dec00104 	addi	sp,sp,4
10104eec:	f800283a 	ret

10104ef0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10104ef0:	defffb04 	addi	sp,sp,-20
10104ef4:	dfc00415 	stw	ra,16(sp)
10104ef8:	df000315 	stw	fp,12(sp)
10104efc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10104f00:	d0a00c17 	ldw	r2,-32720(gp)
10104f04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10104f08:	d0a6b217 	ldw	r2,-25912(gp)
10104f0c:	10800044 	addi	r2,r2,1
10104f10:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10104f14:	00002e06 	br	10104fd0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10104f18:	e0bffd17 	ldw	r2,-12(fp)
10104f1c:	10800017 	ldw	r2,0(r2)
10104f20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10104f24:	e0bffd17 	ldw	r2,-12(fp)
10104f28:	10800403 	ldbu	r2,16(r2)
10104f2c:	10803fcc 	andi	r2,r2,255
10104f30:	10000426 	beq	r2,zero,10104f44 <alt_tick+0x54>
10104f34:	d0a6b217 	ldw	r2,-25912(gp)
10104f38:	1000021e 	bne	r2,zero,10104f44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10104f3c:	e0bffd17 	ldw	r2,-12(fp)
10104f40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10104f44:	e0bffd17 	ldw	r2,-12(fp)
10104f48:	10800217 	ldw	r2,8(r2)
10104f4c:	d0e6b217 	ldw	r3,-25912(gp)
10104f50:	18801d36 	bltu	r3,r2,10104fc8 <alt_tick+0xd8>
10104f54:	e0bffd17 	ldw	r2,-12(fp)
10104f58:	10800403 	ldbu	r2,16(r2)
10104f5c:	10803fcc 	andi	r2,r2,255
10104f60:	1000191e 	bne	r2,zero,10104fc8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10104f64:	e0bffd17 	ldw	r2,-12(fp)
10104f68:	10800317 	ldw	r2,12(r2)
10104f6c:	e0fffd17 	ldw	r3,-12(fp)
10104f70:	18c00517 	ldw	r3,20(r3)
10104f74:	1809883a 	mov	r4,r3
10104f78:	103ee83a 	callr	r2
10104f7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10104f80:	e0bfff17 	ldw	r2,-4(fp)
10104f84:	1000031e 	bne	r2,zero,10104f94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10104f88:	e13ffd17 	ldw	r4,-12(fp)
10104f8c:	0104e540 	call	10104e54 <alt_alarm_stop>
10104f90:	00000d06 	br	10104fc8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10104f94:	e0bffd17 	ldw	r2,-12(fp)
10104f98:	10c00217 	ldw	r3,8(r2)
10104f9c:	e0bfff17 	ldw	r2,-4(fp)
10104fa0:	1887883a 	add	r3,r3,r2
10104fa4:	e0bffd17 	ldw	r2,-12(fp)
10104fa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10104fac:	e0bffd17 	ldw	r2,-12(fp)
10104fb0:	10c00217 	ldw	r3,8(r2)
10104fb4:	d0a6b217 	ldw	r2,-25912(gp)
10104fb8:	1880032e 	bgeu	r3,r2,10104fc8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10104fbc:	e0bffd17 	ldw	r2,-12(fp)
10104fc0:	00c00044 	movi	r3,1
10104fc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10104fc8:	e0bffe17 	ldw	r2,-8(fp)
10104fcc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10104fd0:	e0fffd17 	ldw	r3,-12(fp)
10104fd4:	d0a00c04 	addi	r2,gp,-32720
10104fd8:	18bfcf1e 	bne	r3,r2,10104f18 <__alt_data_end+0xfffe4f18>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10104fdc:	0001883a 	nop
}
10104fe0:	0001883a 	nop
10104fe4:	e037883a 	mov	sp,fp
10104fe8:	dfc00117 	ldw	ra,4(sp)
10104fec:	df000017 	ldw	fp,0(sp)
10104ff0:	dec00204 	addi	sp,sp,8
10104ff4:	f800283a 	ret

10104ff8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10104ff8:	deffff04 	addi	sp,sp,-4
10104ffc:	df000015 	stw	fp,0(sp)
10105000:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10105004:	000170fa 	wrctl	ienable,zero
}
10105008:	0001883a 	nop
1010500c:	e037883a 	mov	sp,fp
10105010:	df000017 	ldw	fp,0(sp)
10105014:	dec00104 	addi	sp,sp,4
10105018:	f800283a 	ret

1010501c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1010501c:	defffa04 	addi	sp,sp,-24
10105020:	dfc00515 	stw	ra,20(sp)
10105024:	df000415 	stw	fp,16(sp)
10105028:	df000404 	addi	fp,sp,16
1010502c:	e13ffe15 	stw	r4,-8(fp)
10105030:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10105034:	e0bfff17 	ldw	r2,-4(fp)
10105038:	10800017 	ldw	r2,0(r2)
1010503c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10105040:	e13ffe17 	ldw	r4,-8(fp)
10105044:	01003840 	call	10100384 <strlen>
10105048:	10800044 	addi	r2,r2,1
1010504c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105050:	00000d06 	br	10105088 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10105054:	e0bffc17 	ldw	r2,-16(fp)
10105058:	10800217 	ldw	r2,8(r2)
1010505c:	e0fffd17 	ldw	r3,-12(fp)
10105060:	180d883a 	mov	r6,r3
10105064:	e17ffe17 	ldw	r5,-8(fp)
10105068:	1009883a 	mov	r4,r2
1010506c:	01053d00 	call	101053d0 <memcmp>
10105070:	1000021e 	bne	r2,zero,1010507c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10105074:	e0bffc17 	ldw	r2,-16(fp)
10105078:	00000706 	br	10105098 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1010507c:	e0bffc17 	ldw	r2,-16(fp)
10105080:	10800017 	ldw	r2,0(r2)
10105084:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105088:	e0fffc17 	ldw	r3,-16(fp)
1010508c:	e0bfff17 	ldw	r2,-4(fp)
10105090:	18bff01e 	bne	r3,r2,10105054 <__alt_data_end+0xfffe5054>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10105094:	0005883a 	mov	r2,zero
}
10105098:	e037883a 	mov	sp,fp
1010509c:	dfc00117 	ldw	ra,4(sp)
101050a0:	df000017 	ldw	fp,0(sp)
101050a4:	dec00204 	addi	sp,sp,8
101050a8:	f800283a 	ret

101050ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
101050ac:	defffb04 	addi	sp,sp,-20
101050b0:	dfc00415 	stw	ra,16(sp)
101050b4:	df000315 	stw	fp,12(sp)
101050b8:	df000304 	addi	fp,sp,12
101050bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
101050c0:	d0a00417 	ldw	r2,-32752(gp)
101050c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101050c8:	00003106 	br	10105190 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
101050cc:	e0bffd17 	ldw	r2,-12(fp)
101050d0:	10800217 	ldw	r2,8(r2)
101050d4:	1009883a 	mov	r4,r2
101050d8:	01003840 	call	10100384 <strlen>
101050dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
101050e0:	e0bffd17 	ldw	r2,-12(fp)
101050e4:	10c00217 	ldw	r3,8(r2)
101050e8:	e0bffe17 	ldw	r2,-8(fp)
101050ec:	10bfffc4 	addi	r2,r2,-1
101050f0:	1885883a 	add	r2,r3,r2
101050f4:	10800003 	ldbu	r2,0(r2)
101050f8:	10803fcc 	andi	r2,r2,255
101050fc:	1080201c 	xori	r2,r2,128
10105100:	10bfe004 	addi	r2,r2,-128
10105104:	10800bd8 	cmpnei	r2,r2,47
10105108:	1000031e 	bne	r2,zero,10105118 <alt_find_file+0x6c>
    {
      len -= 1;
1010510c:	e0bffe17 	ldw	r2,-8(fp)
10105110:	10bfffc4 	addi	r2,r2,-1
10105114:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105118:	e0bffe17 	ldw	r2,-8(fp)
1010511c:	e0ffff17 	ldw	r3,-4(fp)
10105120:	1885883a 	add	r2,r3,r2
10105124:	10800003 	ldbu	r2,0(r2)
10105128:	10803fcc 	andi	r2,r2,255
1010512c:	1080201c 	xori	r2,r2,128
10105130:	10bfe004 	addi	r2,r2,-128
10105134:	10800be0 	cmpeqi	r2,r2,47
10105138:	1000081e 	bne	r2,zero,1010515c <alt_find_file+0xb0>
1010513c:	e0bffe17 	ldw	r2,-8(fp)
10105140:	e0ffff17 	ldw	r3,-4(fp)
10105144:	1885883a 	add	r2,r3,r2
10105148:	10800003 	ldbu	r2,0(r2)
1010514c:	10803fcc 	andi	r2,r2,255
10105150:	1080201c 	xori	r2,r2,128
10105154:	10bfe004 	addi	r2,r2,-128
10105158:	10000a1e 	bne	r2,zero,10105184 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1010515c:	e0bffd17 	ldw	r2,-12(fp)
10105160:	10800217 	ldw	r2,8(r2)
10105164:	e0fffe17 	ldw	r3,-8(fp)
10105168:	180d883a 	mov	r6,r3
1010516c:	e17fff17 	ldw	r5,-4(fp)
10105170:	1009883a 	mov	r4,r2
10105174:	01053d00 	call	101053d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105178:	1000021e 	bne	r2,zero,10105184 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1010517c:	e0bffd17 	ldw	r2,-12(fp)
10105180:	00000706 	br	101051a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10105184:	e0bffd17 	ldw	r2,-12(fp)
10105188:	10800017 	ldw	r2,0(r2)
1010518c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105190:	e0fffd17 	ldw	r3,-12(fp)
10105194:	d0a00404 	addi	r2,gp,-32752
10105198:	18bfcc1e 	bne	r3,r2,101050cc <__alt_data_end+0xfffe50cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1010519c:	0005883a 	mov	r2,zero
}
101051a0:	e037883a 	mov	sp,fp
101051a4:	dfc00117 	ldw	ra,4(sp)
101051a8:	df000017 	ldw	fp,0(sp)
101051ac:	dec00204 	addi	sp,sp,8
101051b0:	f800283a 	ret

101051b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101051b4:	defffc04 	addi	sp,sp,-16
101051b8:	df000315 	stw	fp,12(sp)
101051bc:	df000304 	addi	fp,sp,12
101051c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
101051c4:	00bffa04 	movi	r2,-24
101051c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101051cc:	e03ffd15 	stw	zero,-12(fp)
101051d0:	00001906 	br	10105238 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
101051d4:	00840434 	movhi	r2,4112
101051d8:	1097ef04 	addi	r2,r2,24508
101051dc:	e0fffd17 	ldw	r3,-12(fp)
101051e0:	18c00324 	muli	r3,r3,12
101051e4:	10c5883a 	add	r2,r2,r3
101051e8:	10800017 	ldw	r2,0(r2)
101051ec:	10000f1e 	bne	r2,zero,1010522c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
101051f0:	00840434 	movhi	r2,4112
101051f4:	1097ef04 	addi	r2,r2,24508
101051f8:	e0fffd17 	ldw	r3,-12(fp)
101051fc:	18c00324 	muli	r3,r3,12
10105200:	10c5883a 	add	r2,r2,r3
10105204:	e0ffff17 	ldw	r3,-4(fp)
10105208:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1010520c:	d0e00817 	ldw	r3,-32736(gp)
10105210:	e0bffd17 	ldw	r2,-12(fp)
10105214:	1880020e 	bge	r3,r2,10105220 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10105218:	e0bffd17 	ldw	r2,-12(fp)
1010521c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10105220:	e0bffd17 	ldw	r2,-12(fp)
10105224:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10105228:	00000606 	br	10105244 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010522c:	e0bffd17 	ldw	r2,-12(fp)
10105230:	10800044 	addi	r2,r2,1
10105234:	e0bffd15 	stw	r2,-12(fp)
10105238:	e0bffd17 	ldw	r2,-12(fp)
1010523c:	10800810 	cmplti	r2,r2,32
10105240:	103fe41e 	bne	r2,zero,101051d4 <__alt_data_end+0xfffe51d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10105244:	e0bffe17 	ldw	r2,-8(fp)
}
10105248:	e037883a 	mov	sp,fp
1010524c:	df000017 	ldw	fp,0(sp)
10105250:	dec00104 	addi	sp,sp,4
10105254:	f800283a 	ret

10105258 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10105258:	defffb04 	addi	sp,sp,-20
1010525c:	df000415 	stw	fp,16(sp)
10105260:	df000404 	addi	fp,sp,16
10105264:	e13ffe15 	stw	r4,-8(fp)
10105268:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1010526c:	e0bfff17 	ldw	r2,-4(fp)
10105270:	10840070 	cmpltui	r2,r2,4097
10105274:	1000021e 	bne	r2,zero,10105280 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10105278:	00840004 	movi	r2,4096
1010527c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10105280:	e0fffe17 	ldw	r3,-8(fp)
10105284:	e0bfff17 	ldw	r2,-4(fp)
10105288:	1885883a 	add	r2,r3,r2
1010528c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10105290:	e0bffe17 	ldw	r2,-8(fp)
10105294:	e0bffc15 	stw	r2,-16(fp)
10105298:	00000506 	br	101052b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1010529c:	e0bffc17 	ldw	r2,-16(fp)
101052a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101052a4:	e0bffc17 	ldw	r2,-16(fp)
101052a8:	10800804 	addi	r2,r2,32
101052ac:	e0bffc15 	stw	r2,-16(fp)
101052b0:	e0fffc17 	ldw	r3,-16(fp)
101052b4:	e0bffd17 	ldw	r2,-12(fp)
101052b8:	18bff836 	bltu	r3,r2,1010529c <__alt_data_end+0xfffe529c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
101052bc:	e0bffe17 	ldw	r2,-8(fp)
101052c0:	108007cc 	andi	r2,r2,31
101052c4:	10000226 	beq	r2,zero,101052d0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
101052c8:	e0bffc17 	ldw	r2,-16(fp)
101052cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
101052d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
101052d4:	0001883a 	nop
101052d8:	e037883a 	mov	sp,fp
101052dc:	df000017 	ldw	fp,0(sp)
101052e0:	dec00104 	addi	sp,sp,4
101052e4:	f800283a 	ret

101052e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101052e8:	defffe04 	addi	sp,sp,-8
101052ec:	df000115 	stw	fp,4(sp)
101052f0:	df000104 	addi	fp,sp,4
101052f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
101052f8:	e0bfff17 	ldw	r2,-4(fp)
101052fc:	10bffe84 	addi	r2,r2,-6
10105300:	10c00428 	cmpgeui	r3,r2,16
10105304:	18001a1e 	bne	r3,zero,10105370 <alt_exception_cause_generated_bad_addr+0x88>
10105308:	100690ba 	slli	r3,r2,2
1010530c:	00840434 	movhi	r2,4112
10105310:	1094c804 	addi	r2,r2,21280
10105314:	1885883a 	add	r2,r3,r2
10105318:	10800017 	ldw	r2,0(r2)
1010531c:	1000683a 	jmp	r2
10105320:	10105360 	cmpeqi	zero,r2,16717
10105324:	10105360 	cmpeqi	zero,r2,16717
10105328:	10105370 	cmpltui	zero,r2,16717
1010532c:	10105370 	cmpltui	zero,r2,16717
10105330:	10105370 	cmpltui	zero,r2,16717
10105334:	10105360 	cmpeqi	zero,r2,16717
10105338:	10105368 	cmpgeui	zero,r2,16717
1010533c:	10105370 	cmpltui	zero,r2,16717
10105340:	10105360 	cmpeqi	zero,r2,16717
10105344:	10105360 	cmpeqi	zero,r2,16717
10105348:	10105370 	cmpltui	zero,r2,16717
1010534c:	10105360 	cmpeqi	zero,r2,16717
10105350:	10105368 	cmpgeui	zero,r2,16717
10105354:	10105370 	cmpltui	zero,r2,16717
10105358:	10105370 	cmpltui	zero,r2,16717
1010535c:	10105360 	cmpeqi	zero,r2,16717
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10105360:	00800044 	movi	r2,1
10105364:	00000306 	br	10105374 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10105368:	0005883a 	mov	r2,zero
1010536c:	00000106 	br	10105374 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10105370:	0005883a 	mov	r2,zero
  }
}
10105374:	e037883a 	mov	sp,fp
10105378:	df000017 	ldw	fp,0(sp)
1010537c:	dec00104 	addi	sp,sp,4
10105380:	f800283a 	ret

10105384 <atexit>:
10105384:	200b883a 	mov	r5,r4
10105388:	000f883a 	mov	r7,zero
1010538c:	000d883a 	mov	r6,zero
10105390:	0009883a 	mov	r4,zero
10105394:	010544c1 	jmpi	1010544c <__register_exitproc>

10105398 <exit>:
10105398:	defffe04 	addi	sp,sp,-8
1010539c:	000b883a 	mov	r5,zero
101053a0:	dc000015 	stw	r16,0(sp)
101053a4:	dfc00115 	stw	ra,4(sp)
101053a8:	2021883a 	mov	r16,r4
101053ac:	01055640 	call	10105564 <__call_exitprocs>
101053b0:	00840434 	movhi	r2,4112
101053b4:	109c6704 	addi	r2,r2,29084
101053b8:	11000017 	ldw	r4,0(r2)
101053bc:	20800f17 	ldw	r2,60(r4)
101053c0:	10000126 	beq	r2,zero,101053c8 <exit+0x30>
101053c4:	103ee83a 	callr	r2
101053c8:	8009883a 	mov	r4,r16
101053cc:	01056e40 	call	101056e4 <_exit>

101053d0 <memcmp>:
101053d0:	01c000c4 	movi	r7,3
101053d4:	3980192e 	bgeu	r7,r6,1010543c <memcmp+0x6c>
101053d8:	2144b03a 	or	r2,r4,r5
101053dc:	11c4703a 	and	r2,r2,r7
101053e0:	10000f26 	beq	r2,zero,10105420 <memcmp+0x50>
101053e4:	20800003 	ldbu	r2,0(r4)
101053e8:	28c00003 	ldbu	r3,0(r5)
101053ec:	10c0151e 	bne	r2,r3,10105444 <memcmp+0x74>
101053f0:	31bfff84 	addi	r6,r6,-2
101053f4:	01ffffc4 	movi	r7,-1
101053f8:	00000406 	br	1010540c <memcmp+0x3c>
101053fc:	20800003 	ldbu	r2,0(r4)
10105400:	28c00003 	ldbu	r3,0(r5)
10105404:	31bfffc4 	addi	r6,r6,-1
10105408:	10c00e1e 	bne	r2,r3,10105444 <memcmp+0x74>
1010540c:	21000044 	addi	r4,r4,1
10105410:	29400044 	addi	r5,r5,1
10105414:	31fff91e 	bne	r6,r7,101053fc <__alt_data_end+0xfffe53fc>
10105418:	0005883a 	mov	r2,zero
1010541c:	f800283a 	ret
10105420:	20c00017 	ldw	r3,0(r4)
10105424:	28800017 	ldw	r2,0(r5)
10105428:	18bfee1e 	bne	r3,r2,101053e4 <__alt_data_end+0xfffe53e4>
1010542c:	31bfff04 	addi	r6,r6,-4
10105430:	21000104 	addi	r4,r4,4
10105434:	29400104 	addi	r5,r5,4
10105438:	39bff936 	bltu	r7,r6,10105420 <__alt_data_end+0xfffe5420>
1010543c:	303fe91e 	bne	r6,zero,101053e4 <__alt_data_end+0xfffe53e4>
10105440:	003ff506 	br	10105418 <__alt_data_end+0xfffe5418>
10105444:	10c5c83a 	sub	r2,r2,r3
10105448:	f800283a 	ret

1010544c <__register_exitproc>:
1010544c:	defffa04 	addi	sp,sp,-24
10105450:	dc000315 	stw	r16,12(sp)
10105454:	04040434 	movhi	r16,4112
10105458:	841c6704 	addi	r16,r16,29084
1010545c:	80c00017 	ldw	r3,0(r16)
10105460:	dc400415 	stw	r17,16(sp)
10105464:	dfc00515 	stw	ra,20(sp)
10105468:	18805217 	ldw	r2,328(r3)
1010546c:	2023883a 	mov	r17,r4
10105470:	10003726 	beq	r2,zero,10105550 <__register_exitproc+0x104>
10105474:	10c00117 	ldw	r3,4(r2)
10105478:	010007c4 	movi	r4,31
1010547c:	20c00e16 	blt	r4,r3,101054b8 <__register_exitproc+0x6c>
10105480:	1a000044 	addi	r8,r3,1
10105484:	8800221e 	bne	r17,zero,10105510 <__register_exitproc+0xc4>
10105488:	18c00084 	addi	r3,r3,2
1010548c:	18c7883a 	add	r3,r3,r3
10105490:	18c7883a 	add	r3,r3,r3
10105494:	12000115 	stw	r8,4(r2)
10105498:	10c7883a 	add	r3,r2,r3
1010549c:	19400015 	stw	r5,0(r3)
101054a0:	0005883a 	mov	r2,zero
101054a4:	dfc00517 	ldw	ra,20(sp)
101054a8:	dc400417 	ldw	r17,16(sp)
101054ac:	dc000317 	ldw	r16,12(sp)
101054b0:	dec00604 	addi	sp,sp,24
101054b4:	f800283a 	ret
101054b8:	00800034 	movhi	r2,0
101054bc:	10800004 	addi	r2,r2,0
101054c0:	10002626 	beq	r2,zero,1010555c <__register_exitproc+0x110>
101054c4:	01006404 	movi	r4,400
101054c8:	d9400015 	stw	r5,0(sp)
101054cc:	d9800115 	stw	r6,4(sp)
101054d0:	d9c00215 	stw	r7,8(sp)
101054d4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101054d8:	d9400017 	ldw	r5,0(sp)
101054dc:	d9800117 	ldw	r6,4(sp)
101054e0:	d9c00217 	ldw	r7,8(sp)
101054e4:	10001d26 	beq	r2,zero,1010555c <__register_exitproc+0x110>
101054e8:	81000017 	ldw	r4,0(r16)
101054ec:	10000115 	stw	zero,4(r2)
101054f0:	02000044 	movi	r8,1
101054f4:	22405217 	ldw	r9,328(r4)
101054f8:	0007883a 	mov	r3,zero
101054fc:	12400015 	stw	r9,0(r2)
10105500:	20805215 	stw	r2,328(r4)
10105504:	10006215 	stw	zero,392(r2)
10105508:	10006315 	stw	zero,396(r2)
1010550c:	883fde26 	beq	r17,zero,10105488 <__alt_data_end+0xfffe5488>
10105510:	18c9883a 	add	r4,r3,r3
10105514:	2109883a 	add	r4,r4,r4
10105518:	1109883a 	add	r4,r2,r4
1010551c:	21802215 	stw	r6,136(r4)
10105520:	01800044 	movi	r6,1
10105524:	12406217 	ldw	r9,392(r2)
10105528:	30cc983a 	sll	r6,r6,r3
1010552c:	4992b03a 	or	r9,r9,r6
10105530:	12406215 	stw	r9,392(r2)
10105534:	21c04215 	stw	r7,264(r4)
10105538:	01000084 	movi	r4,2
1010553c:	893fd21e 	bne	r17,r4,10105488 <__alt_data_end+0xfffe5488>
10105540:	11006317 	ldw	r4,396(r2)
10105544:	218cb03a 	or	r6,r4,r6
10105548:	11806315 	stw	r6,396(r2)
1010554c:	003fce06 	br	10105488 <__alt_data_end+0xfffe5488>
10105550:	18805304 	addi	r2,r3,332
10105554:	18805215 	stw	r2,328(r3)
10105558:	003fc606 	br	10105474 <__alt_data_end+0xfffe5474>
1010555c:	00bfffc4 	movi	r2,-1
10105560:	003fd006 	br	101054a4 <__alt_data_end+0xfffe54a4>

10105564 <__call_exitprocs>:
10105564:	defff504 	addi	sp,sp,-44
10105568:	df000915 	stw	fp,36(sp)
1010556c:	dd400615 	stw	r21,24(sp)
10105570:	dc800315 	stw	r18,12(sp)
10105574:	dfc00a15 	stw	ra,40(sp)
10105578:	ddc00815 	stw	r23,32(sp)
1010557c:	dd800715 	stw	r22,28(sp)
10105580:	dd000515 	stw	r20,20(sp)
10105584:	dcc00415 	stw	r19,16(sp)
10105588:	dc400215 	stw	r17,8(sp)
1010558c:	dc000115 	stw	r16,4(sp)
10105590:	d9000015 	stw	r4,0(sp)
10105594:	2839883a 	mov	fp,r5
10105598:	04800044 	movi	r18,1
1010559c:	057fffc4 	movi	r21,-1
101055a0:	00840434 	movhi	r2,4112
101055a4:	109c6704 	addi	r2,r2,29084
101055a8:	12000017 	ldw	r8,0(r2)
101055ac:	45005217 	ldw	r20,328(r8)
101055b0:	44c05204 	addi	r19,r8,328
101055b4:	a0001c26 	beq	r20,zero,10105628 <__call_exitprocs+0xc4>
101055b8:	a0800117 	ldw	r2,4(r20)
101055bc:	15ffffc4 	addi	r23,r2,-1
101055c0:	b8000d16 	blt	r23,zero,101055f8 <__call_exitprocs+0x94>
101055c4:	14000044 	addi	r16,r2,1
101055c8:	8421883a 	add	r16,r16,r16
101055cc:	8421883a 	add	r16,r16,r16
101055d0:	84402004 	addi	r17,r16,128
101055d4:	a463883a 	add	r17,r20,r17
101055d8:	a421883a 	add	r16,r20,r16
101055dc:	e0001e26 	beq	fp,zero,10105658 <__call_exitprocs+0xf4>
101055e0:	80804017 	ldw	r2,256(r16)
101055e4:	e0801c26 	beq	fp,r2,10105658 <__call_exitprocs+0xf4>
101055e8:	bdffffc4 	addi	r23,r23,-1
101055ec:	843fff04 	addi	r16,r16,-4
101055f0:	8c7fff04 	addi	r17,r17,-4
101055f4:	bd7ff91e 	bne	r23,r21,101055dc <__alt_data_end+0xfffe55dc>
101055f8:	00800034 	movhi	r2,0
101055fc:	10800004 	addi	r2,r2,0
10105600:	10000926 	beq	r2,zero,10105628 <__call_exitprocs+0xc4>
10105604:	a0800117 	ldw	r2,4(r20)
10105608:	1000301e 	bne	r2,zero,101056cc <__call_exitprocs+0x168>
1010560c:	a0800017 	ldw	r2,0(r20)
10105610:	10003226 	beq	r2,zero,101056dc <__call_exitprocs+0x178>
10105614:	a009883a 	mov	r4,r20
10105618:	98800015 	stw	r2,0(r19)
1010561c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10105620:	9d000017 	ldw	r20,0(r19)
10105624:	a03fe41e 	bne	r20,zero,101055b8 <__alt_data_end+0xfffe55b8>
10105628:	dfc00a17 	ldw	ra,40(sp)
1010562c:	df000917 	ldw	fp,36(sp)
10105630:	ddc00817 	ldw	r23,32(sp)
10105634:	dd800717 	ldw	r22,28(sp)
10105638:	dd400617 	ldw	r21,24(sp)
1010563c:	dd000517 	ldw	r20,20(sp)
10105640:	dcc00417 	ldw	r19,16(sp)
10105644:	dc800317 	ldw	r18,12(sp)
10105648:	dc400217 	ldw	r17,8(sp)
1010564c:	dc000117 	ldw	r16,4(sp)
10105650:	dec00b04 	addi	sp,sp,44
10105654:	f800283a 	ret
10105658:	a0800117 	ldw	r2,4(r20)
1010565c:	80c00017 	ldw	r3,0(r16)
10105660:	10bfffc4 	addi	r2,r2,-1
10105664:	15c01426 	beq	r2,r23,101056b8 <__call_exitprocs+0x154>
10105668:	80000015 	stw	zero,0(r16)
1010566c:	183fde26 	beq	r3,zero,101055e8 <__alt_data_end+0xfffe55e8>
10105670:	95c8983a 	sll	r4,r18,r23
10105674:	a0806217 	ldw	r2,392(r20)
10105678:	a5800117 	ldw	r22,4(r20)
1010567c:	2084703a 	and	r2,r4,r2
10105680:	10000b26 	beq	r2,zero,101056b0 <__call_exitprocs+0x14c>
10105684:	a0806317 	ldw	r2,396(r20)
10105688:	2088703a 	and	r4,r4,r2
1010568c:	20000c1e 	bne	r4,zero,101056c0 <__call_exitprocs+0x15c>
10105690:	89400017 	ldw	r5,0(r17)
10105694:	d9000017 	ldw	r4,0(sp)
10105698:	183ee83a 	callr	r3
1010569c:	a0800117 	ldw	r2,4(r20)
101056a0:	15bfbf1e 	bne	r2,r22,101055a0 <__alt_data_end+0xfffe55a0>
101056a4:	98800017 	ldw	r2,0(r19)
101056a8:	153fcf26 	beq	r2,r20,101055e8 <__alt_data_end+0xfffe55e8>
101056ac:	003fbc06 	br	101055a0 <__alt_data_end+0xfffe55a0>
101056b0:	183ee83a 	callr	r3
101056b4:	003ff906 	br	1010569c <__alt_data_end+0xfffe569c>
101056b8:	a5c00115 	stw	r23,4(r20)
101056bc:	003feb06 	br	1010566c <__alt_data_end+0xfffe566c>
101056c0:	89000017 	ldw	r4,0(r17)
101056c4:	183ee83a 	callr	r3
101056c8:	003ff406 	br	1010569c <__alt_data_end+0xfffe569c>
101056cc:	a0800017 	ldw	r2,0(r20)
101056d0:	a027883a 	mov	r19,r20
101056d4:	1029883a 	mov	r20,r2
101056d8:	003fb606 	br	101055b4 <__alt_data_end+0xfffe55b4>
101056dc:	0005883a 	mov	r2,zero
101056e0:	003ffb06 	br	101056d0 <__alt_data_end+0xfffe56d0>

101056e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101056e4:	defffd04 	addi	sp,sp,-12
101056e8:	df000215 	stw	fp,8(sp)
101056ec:	df000204 	addi	fp,sp,8
101056f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101056f4:	0001883a 	nop
101056f8:	e0bfff17 	ldw	r2,-4(fp)
101056fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10105700:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10105704:	10000226 	beq	r2,zero,10105710 <_exit+0x2c>
    ALT_SIM_FAIL();
10105708:	002af070 	cmpltui	zero,zero,43969
1010570c:	00000106 	br	10105714 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10105710:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10105714:	003fff06 	br	10105714 <__alt_data_end+0xfffe5714>
